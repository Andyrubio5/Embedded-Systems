
FreeRTOS_Act_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001324c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  080134f0  080134f0  000144f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cd4  08013cd4  00015200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013cd4  08013cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013cdc  08013cdc  00015200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013cdc  08013cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013ce0  08013ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  24000000  08013ce4  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d18  24000200  08013ee4  00015200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004f18  08013ee4  00015f18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00015200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029686  00000000  00000000  0001522e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050b5  00000000  00000000  0003e8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  00043970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001871  00000000  00000000  00045908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040ec7  00000000  00000000  00047179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002818e  00000000  00000000  00088040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a7932  00000000  00000000  000b01ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00257b00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009910  00000000  00000000  00257b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00261454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000200 	.word	0x24000200
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080134d4 	.word	0x080134d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000204 	.word	0x24000204
 80002dc:	080134d4 	.word	0x080134d4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000738:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800073c:	f000 b9c0 	b.w	8000ac0 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	468e      	mov	lr, r1
 80007d0:	4604      	mov	r4, r0
 80007d2:	4688      	mov	r8, r1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d14a      	bne.n	800086e <__udivmoddi4+0xa6>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d962      	bls.n	80008a4 <__udivmoddi4+0xdc>
 80007de:	fab2 f682 	clz	r6, r2
 80007e2:	b14e      	cbz	r6, 80007f8 <__udivmoddi4+0x30>
 80007e4:	f1c6 0320 	rsb	r3, r6, #32
 80007e8:	fa01 f806 	lsl.w	r8, r1, r6
 80007ec:	fa20 f303 	lsr.w	r3, r0, r3
 80007f0:	40b7      	lsls	r7, r6
 80007f2:	ea43 0808 	orr.w	r8, r3, r8
 80007f6:	40b4      	lsls	r4, r6
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	fa1f fc87 	uxth.w	ip, r7
 8000800:	fbb8 f1fe 	udiv	r1, r8, lr
 8000804:	0c23      	lsrs	r3, r4, #16
 8000806:	fb0e 8811 	mls	r8, lr, r1, r8
 800080a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800080e:	fb01 f20c 	mul.w	r2, r1, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d909      	bls.n	800082a <__udivmoddi4+0x62>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800081c:	f080 80ea 	bcs.w	80009f4 <__udivmoddi4+0x22c>
 8000820:	429a      	cmp	r2, r3
 8000822:	f240 80e7 	bls.w	80009f4 <__udivmoddi4+0x22c>
 8000826:	3902      	subs	r1, #2
 8000828:	443b      	add	r3, r7
 800082a:	1a9a      	subs	r2, r3, r2
 800082c:	b2a3      	uxth	r3, r4
 800082e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000832:	fb0e 2210 	mls	r2, lr, r0, r2
 8000836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800083a:	fb00 fc0c 	mul.w	ip, r0, ip
 800083e:	459c      	cmp	ip, r3
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x8e>
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000848:	f080 80d6 	bcs.w	80009f8 <__udivmoddi4+0x230>
 800084c:	459c      	cmp	ip, r3
 800084e:	f240 80d3 	bls.w	80009f8 <__udivmoddi4+0x230>
 8000852:	443b      	add	r3, r7
 8000854:	3802      	subs	r0, #2
 8000856:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800085a:	eba3 030c 	sub.w	r3, r3, ip
 800085e:	2100      	movs	r1, #0
 8000860:	b11d      	cbz	r5, 800086a <__udivmoddi4+0xa2>
 8000862:	40f3      	lsrs	r3, r6
 8000864:	2200      	movs	r2, #0
 8000866:	e9c5 3200 	strd	r3, r2, [r5]
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	428b      	cmp	r3, r1
 8000870:	d905      	bls.n	800087e <__udivmoddi4+0xb6>
 8000872:	b10d      	cbz	r5, 8000878 <__udivmoddi4+0xb0>
 8000874:	e9c5 0100 	strd	r0, r1, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	4608      	mov	r0, r1
 800087c:	e7f5      	b.n	800086a <__udivmoddi4+0xa2>
 800087e:	fab3 f183 	clz	r1, r3
 8000882:	2900      	cmp	r1, #0
 8000884:	d146      	bne.n	8000914 <__udivmoddi4+0x14c>
 8000886:	4573      	cmp	r3, lr
 8000888:	d302      	bcc.n	8000890 <__udivmoddi4+0xc8>
 800088a:	4282      	cmp	r2, r0
 800088c:	f200 8105 	bhi.w	8000a9a <__udivmoddi4+0x2d2>
 8000890:	1a84      	subs	r4, r0, r2
 8000892:	eb6e 0203 	sbc.w	r2, lr, r3
 8000896:	2001      	movs	r0, #1
 8000898:	4690      	mov	r8, r2
 800089a:	2d00      	cmp	r5, #0
 800089c:	d0e5      	beq.n	800086a <__udivmoddi4+0xa2>
 800089e:	e9c5 4800 	strd	r4, r8, [r5]
 80008a2:	e7e2      	b.n	800086a <__udivmoddi4+0xa2>
 80008a4:	2a00      	cmp	r2, #0
 80008a6:	f000 8090 	beq.w	80009ca <__udivmoddi4+0x202>
 80008aa:	fab2 f682 	clz	r6, r2
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	f040 80a4 	bne.w	80009fc <__udivmoddi4+0x234>
 80008b4:	1a8a      	subs	r2, r1, r2
 80008b6:	0c03      	lsrs	r3, r0, #16
 80008b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008bc:	b280      	uxth	r0, r0
 80008be:	b2bc      	uxth	r4, r7
 80008c0:	2101      	movs	r1, #1
 80008c2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008c6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ce:	fb04 f20c 	mul.w	r2, r4, ip
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x11e>
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80008dc:	d202      	bcs.n	80008e4 <__udivmoddi4+0x11c>
 80008de:	429a      	cmp	r2, r3
 80008e0:	f200 80e0 	bhi.w	8000aa4 <__udivmoddi4+0x2dc>
 80008e4:	46c4      	mov	ip, r8
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008ec:	fb0e 3312 	mls	r3, lr, r2, r3
 80008f0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008f4:	fb02 f404 	mul.w	r4, r2, r4
 80008f8:	429c      	cmp	r4, r3
 80008fa:	d907      	bls.n	800090c <__udivmoddi4+0x144>
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000902:	d202      	bcs.n	800090a <__udivmoddi4+0x142>
 8000904:	429c      	cmp	r4, r3
 8000906:	f200 80ca 	bhi.w	8000a9e <__udivmoddi4+0x2d6>
 800090a:	4602      	mov	r2, r0
 800090c:	1b1b      	subs	r3, r3, r4
 800090e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000912:	e7a5      	b.n	8000860 <__udivmoddi4+0x98>
 8000914:	f1c1 0620 	rsb	r6, r1, #32
 8000918:	408b      	lsls	r3, r1
 800091a:	fa22 f706 	lsr.w	r7, r2, r6
 800091e:	431f      	orrs	r7, r3
 8000920:	fa0e f401 	lsl.w	r4, lr, r1
 8000924:	fa20 f306 	lsr.w	r3, r0, r6
 8000928:	fa2e fe06 	lsr.w	lr, lr, r6
 800092c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000930:	4323      	orrs	r3, r4
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	fa1f fc87 	uxth.w	ip, r7
 800093a:	fbbe f0f9 	udiv	r0, lr, r9
 800093e:	0c1c      	lsrs	r4, r3, #16
 8000940:	fb09 ee10 	mls	lr, r9, r0, lr
 8000944:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000948:	fb00 fe0c 	mul.w	lr, r0, ip
 800094c:	45a6      	cmp	lr, r4
 800094e:	fa02 f201 	lsl.w	r2, r2, r1
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x1a0>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800095a:	f080 809c 	bcs.w	8000a96 <__udivmoddi4+0x2ce>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8099 	bls.w	8000a96 <__udivmoddi4+0x2ce>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	eba4 040e 	sub.w	r4, r4, lr
 800096c:	fa1f fe83 	uxth.w	lr, r3
 8000970:	fbb4 f3f9 	udiv	r3, r4, r9
 8000974:	fb09 4413 	mls	r4, r9, r3, r4
 8000978:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800097c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000980:	45a4      	cmp	ip, r4
 8000982:	d908      	bls.n	8000996 <__udivmoddi4+0x1ce>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800098a:	f080 8082 	bcs.w	8000a92 <__udivmoddi4+0x2ca>
 800098e:	45a4      	cmp	ip, r4
 8000990:	d97f      	bls.n	8000a92 <__udivmoddi4+0x2ca>
 8000992:	3b02      	subs	r3, #2
 8000994:	443c      	add	r4, r7
 8000996:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800099a:	eba4 040c 	sub.w	r4, r4, ip
 800099e:	fba0 ec02 	umull	lr, ip, r0, r2
 80009a2:	4564      	cmp	r4, ip
 80009a4:	4673      	mov	r3, lr
 80009a6:	46e1      	mov	r9, ip
 80009a8:	d362      	bcc.n	8000a70 <__udivmoddi4+0x2a8>
 80009aa:	d05f      	beq.n	8000a6c <__udivmoddi4+0x2a4>
 80009ac:	b15d      	cbz	r5, 80009c6 <__udivmoddi4+0x1fe>
 80009ae:	ebb8 0203 	subs.w	r2, r8, r3
 80009b2:	eb64 0409 	sbc.w	r4, r4, r9
 80009b6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ba:	fa22 f301 	lsr.w	r3, r2, r1
 80009be:	431e      	orrs	r6, r3
 80009c0:	40cc      	lsrs	r4, r1
 80009c2:	e9c5 6400 	strd	r6, r4, [r5]
 80009c6:	2100      	movs	r1, #0
 80009c8:	e74f      	b.n	800086a <__udivmoddi4+0xa2>
 80009ca:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ce:	0c01      	lsrs	r1, r0, #16
 80009d0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009d4:	b280      	uxth	r0, r0
 80009d6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009da:	463b      	mov	r3, r7
 80009dc:	4638      	mov	r0, r7
 80009de:	463c      	mov	r4, r7
 80009e0:	46b8      	mov	r8, r7
 80009e2:	46be      	mov	lr, r7
 80009e4:	2620      	movs	r6, #32
 80009e6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ea:	eba2 0208 	sub.w	r2, r2, r8
 80009ee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009f2:	e766      	b.n	80008c2 <__udivmoddi4+0xfa>
 80009f4:	4601      	mov	r1, r0
 80009f6:	e718      	b.n	800082a <__udivmoddi4+0x62>
 80009f8:	4610      	mov	r0, r2
 80009fa:	e72c      	b.n	8000856 <__udivmoddi4+0x8e>
 80009fc:	f1c6 0220 	rsb	r2, r6, #32
 8000a00:	fa2e f302 	lsr.w	r3, lr, r2
 8000a04:	40b7      	lsls	r7, r6
 8000a06:	40b1      	lsls	r1, r6
 8000a08:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a10:	430a      	orrs	r2, r1
 8000a12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a16:	b2bc      	uxth	r4, r7
 8000a18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a1c:	0c11      	lsrs	r1, r2, #16
 8000a1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a22:	fb08 f904 	mul.w	r9, r8, r4
 8000a26:	40b0      	lsls	r0, r6
 8000a28:	4589      	cmp	r9, r1
 8000a2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a2e:	b280      	uxth	r0, r0
 8000a30:	d93e      	bls.n	8000ab0 <__udivmoddi4+0x2e8>
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a38:	d201      	bcs.n	8000a3e <__udivmoddi4+0x276>
 8000a3a:	4589      	cmp	r9, r1
 8000a3c:	d81f      	bhi.n	8000a7e <__udivmoddi4+0x2b6>
 8000a3e:	eba1 0109 	sub.w	r1, r1, r9
 8000a42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a46:	fb09 f804 	mul.w	r8, r9, r4
 8000a4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a4e:	b292      	uxth	r2, r2
 8000a50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a54:	4542      	cmp	r2, r8
 8000a56:	d229      	bcs.n	8000aac <__udivmoddi4+0x2e4>
 8000a58:	18ba      	adds	r2, r7, r2
 8000a5a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000a5e:	d2c4      	bcs.n	80009ea <__udivmoddi4+0x222>
 8000a60:	4542      	cmp	r2, r8
 8000a62:	d2c2      	bcs.n	80009ea <__udivmoddi4+0x222>
 8000a64:	f1a9 0102 	sub.w	r1, r9, #2
 8000a68:	443a      	add	r2, r7
 8000a6a:	e7be      	b.n	80009ea <__udivmoddi4+0x222>
 8000a6c:	45f0      	cmp	r8, lr
 8000a6e:	d29d      	bcs.n	80009ac <__udivmoddi4+0x1e4>
 8000a70:	ebbe 0302 	subs.w	r3, lr, r2
 8000a74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a78:	3801      	subs	r0, #1
 8000a7a:	46e1      	mov	r9, ip
 8000a7c:	e796      	b.n	80009ac <__udivmoddi4+0x1e4>
 8000a7e:	eba7 0909 	sub.w	r9, r7, r9
 8000a82:	4449      	add	r1, r9
 8000a84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a8c:	fb09 f804 	mul.w	r8, r9, r4
 8000a90:	e7db      	b.n	8000a4a <__udivmoddi4+0x282>
 8000a92:	4673      	mov	r3, lr
 8000a94:	e77f      	b.n	8000996 <__udivmoddi4+0x1ce>
 8000a96:	4650      	mov	r0, sl
 8000a98:	e766      	b.n	8000968 <__udivmoddi4+0x1a0>
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e6fd      	b.n	800089a <__udivmoddi4+0xd2>
 8000a9e:	443b      	add	r3, r7
 8000aa0:	3a02      	subs	r2, #2
 8000aa2:	e733      	b.n	800090c <__udivmoddi4+0x144>
 8000aa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000aa8:	443b      	add	r3, r7
 8000aaa:	e71c      	b.n	80008e6 <__udivmoddi4+0x11e>
 8000aac:	4649      	mov	r1, r9
 8000aae:	e79c      	b.n	80009ea <__udivmoddi4+0x222>
 8000ab0:	eba1 0109 	sub.w	r1, r1, r9
 8000ab4:	46c4      	mov	ip, r8
 8000ab6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aba:	fb09 f804 	mul.w	r8, r9, r4
 8000abe:	e7c4      	b.n	8000a4a <__udivmoddi4+0x282>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b49      	ldr	r3, [pc, #292]	@ (8000bf0 <SystemInit+0x12c>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ace:	4a48      	ldr	r2, [pc, #288]	@ (8000bf0 <SystemInit+0x12c>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000ad8:	4b45      	ldr	r3, [pc, #276]	@ (8000bf0 <SystemInit+0x12c>)
 8000ada:	691b      	ldr	r3, [r3, #16]
 8000adc:	4a44      	ldr	r2, [pc, #272]	@ (8000bf0 <SystemInit+0x12c>)
 8000ade:	f043 0310 	orr.w	r3, r3, #16
 8000ae2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae4:	4b43      	ldr	r3, [pc, #268]	@ (8000bf4 <SystemInit+0x130>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d807      	bhi.n	8000b00 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af0:	4b40      	ldr	r3, [pc, #256]	@ (8000bf4 <SystemInit+0x130>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f023 030f 	bic.w	r3, r3, #15
 8000af8:	4a3e      	ldr	r2, [pc, #248]	@ (8000bf4 <SystemInit+0x130>)
 8000afa:	f043 0307 	orr.w	r3, r3, #7
 8000afe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b00:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf8 <SystemInit+0x134>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a3c      	ldr	r2, [pc, #240]	@ (8000bf8 <SystemInit+0x134>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <SystemInit+0x134>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b12:	4b39      	ldr	r3, [pc, #228]	@ (8000bf8 <SystemInit+0x134>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4938      	ldr	r1, [pc, #224]	@ (8000bf8 <SystemInit+0x134>)
 8000b18:	4b38      	ldr	r3, [pc, #224]	@ (8000bfc <SystemInit+0x138>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b1e:	4b35      	ldr	r3, [pc, #212]	@ (8000bf4 <SystemInit+0x130>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b2a:	4b32      	ldr	r3, [pc, #200]	@ (8000bf4 <SystemInit+0x130>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f023 030f 	bic.w	r3, r3, #15
 8000b32:	4a30      	ldr	r2, [pc, #192]	@ (8000bf4 <SystemInit+0x130>)
 8000b34:	f043 0307 	orr.w	r3, r3, #7
 8000b38:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf8 <SystemInit+0x134>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b40:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <SystemInit+0x134>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b46:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <SystemInit+0x134>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <SystemInit+0x134>)
 8000b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c00 <SystemInit+0x13c>)
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b52:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <SystemInit+0x134>)
 8000b54:	4a2b      	ldr	r2, [pc, #172]	@ (8000c04 <SystemInit+0x140>)
 8000b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b58:	4b27      	ldr	r3, [pc, #156]	@ (8000bf8 <SystemInit+0x134>)
 8000b5a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c08 <SystemInit+0x144>)
 8000b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <SystemInit+0x134>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <SystemInit+0x134>)
 8000b66:	4a28      	ldr	r2, [pc, #160]	@ (8000c08 <SystemInit+0x144>)
 8000b68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b6a:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <SystemInit+0x134>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <SystemInit+0x134>)
 8000b72:	4a25      	ldr	r2, [pc, #148]	@ (8000c08 <SystemInit+0x144>)
 8000b74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b76:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <SystemInit+0x134>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <SystemInit+0x134>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <SystemInit+0x134>)
 8000b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <SystemInit+0x134>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <SystemInit+0x148>)
 8000b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b92:	4a1e      	ldr	r2, [pc, #120]	@ (8000c0c <SystemInit+0x148>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b98:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <SystemInit+0x14c>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <SystemInit+0x150>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ba6:	d202      	bcs.n	8000bae <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <SystemInit+0x154>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000bae:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <SystemInit+0x134>)
 8000bb0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d113      	bne.n	8000be4 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <SystemInit+0x134>)
 8000bbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <SystemInit+0x134>)
 8000bc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bc8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <SystemInit+0x158>)
 8000bce:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bd2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <SystemInit+0x134>)
 8000bd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bda:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <SystemInit+0x134>)
 8000bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000be0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	52002000 	.word	0x52002000
 8000bf8:	58024400 	.word	0x58024400
 8000bfc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c00:	02020200 	.word	0x02020200
 8000c04:	01ff0000 	.word	0x01ff0000
 8000c08:	01010280 	.word	0x01010280
 8000c0c:	580000c0 	.word	0x580000c0
 8000c10:	5c001000 	.word	0x5c001000
 8000c14:	ffff0000 	.word	0xffff0000
 8000c18:	51008108 	.word	0x51008108
 8000c1c:	52004000 	.word	0x52004000

08000c20 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <ExitRun0Mode+0x2c>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <ExitRun0Mode+0x2c>)
 8000c2a:	f023 0302 	bic.w	r3, r3, #2
 8000c2e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c30:	bf00      	nop
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <ExitRun0Mode+0x2c>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0f9      	beq.n	8000c32 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	58024800 	.word	0x58024800

08000c50 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
 8000c70:	615a      	str	r2, [r3, #20]
 8000c72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c74:	4b31      	ldr	r3, [pc, #196]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000c76:	4a32      	ldr	r2, [pc, #200]	@ (8000d40 <MX_ADC1_Init+0xf0>)
 8000c78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c7a:	4b30      	ldr	r3, [pc, #192]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000c7c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c88:	4b2c      	ldr	r3, [pc, #176]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c94:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c9a:	4b28      	ldr	r3, [pc, #160]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca6:	4b25      	ldr	r3, [pc, #148]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cac:	4b23      	ldr	r3, [pc, #140]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd8:	4818      	ldr	r0, [pc, #96]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000cda:	f001 ff13 	bl	8002b04 <HAL_ADC_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ce4:	f001 f812 	bl	8001d0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4812      	ldr	r0, [pc, #72]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000cf4:	f002 fcca 	bl	800368c <HAL_ADCEx_MultiModeConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cfe:	f001 f805 	bl	8001d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <MX_ADC1_Init+0xf4>)
 8000d04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d06:	2306      	movs	r3, #6
 8000d08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d0e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d12:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d14:	2304      	movs	r3, #4
 8000d16:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_ADC1_Init+0xec>)
 8000d26:	f002 f88f 	bl	8002e48 <HAL_ADC_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d30:	f000 ffec 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	@ 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2400021c 	.word	0x2400021c
 8000d40:	40022000 	.word	0x40022000
 8000d44:	08600004 	.word	0x08600004

08000d48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	22c0      	movs	r2, #192	@ 0xc0
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f00f fece 	bl	8010b0a <memset>
  if(adcHandle->Instance==ADC1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a2c      	ldr	r2, [pc, #176]	@ (8000e24 <HAL_ADC_MspInit+0xdc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d150      	bne.n	8000e1a <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d78:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d84:	2304      	movs	r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d98:	23c0      	movs	r3, #192	@ 0xc0
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 0310 	add.w	r3, r7, #16
 8000dae:	4618      	mov	r0, r3
 8000db0:	f004 fedc 	bl	8005b6c <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000dba:	f000 ffa7 	bl	8001d0c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_ADC_MspInit+0xe0>)
 8000dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc4:	4a18      	ldr	r2, [pc, #96]	@ (8000e28 <HAL_ADC_MspInit+0xe0>)
 8000dc6:	f043 0320 	orr.w	r3, r3, #32
 8000dca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dce:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <HAL_ADC_MspInit+0xe0>)
 8000dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_ADC_MspInit+0xe0>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	4a11      	ldr	r2, [pc, #68]	@ (8000e28 <HAL_ADC_MspInit+0xe0>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_ADC_MspInit+0xe0>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	f003 0320 	and.w	r3, r3, #32
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dfa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e02:	2303      	movs	r3, #3
 8000e04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e0e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <HAL_ADC_MspInit+0xe4>)
 8000e16:	f003 fc85 	bl	8004724 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	37e8      	adds	r7, #232	@ 0xe8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58021400 	.word	0x58021400

08000e30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <MX_FREERTOS_Init+0x18>)
 8000e36:	2100      	movs	r1, #0
 8000e38:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <MX_FREERTOS_Init+0x1c>)
 8000e3a:	f00a ffd8 	bl	800bdee <osThreadNew>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a03      	ldr	r2, [pc, #12]	@ (8000e50 <MX_FREERTOS_Init+0x20>)
 8000e42:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	08013850 	.word	0x08013850
 8000e4c:	08000e55 	.word	0x08000e55
 8000e50:	24000280 	.word	0x24000280

08000e54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f00b f858 	bl	800bf12 <osDelay>
 8000e62:	e7fb      	b.n	8000e5c <StartDefaultTask+0x8>

08000e64 <MX_GPIO_Init>:
     PD9   ------> USART3_RX
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <MX_GPIO_Init+0xbc>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	4a27      	ldr	r2, [pc, #156]	@ (8000f20 <MX_GPIO_Init+0xbc>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8a:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <MX_GPIO_Init+0xbc>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e98:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <MX_GPIO_Init+0xbc>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	4a20      	ldr	r2, [pc, #128]	@ (8000f20 <MX_GPIO_Init+0xbc>)
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <MX_GPIO_Init+0xbc>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_GPIO_Init+0xbc>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	4a18      	ldr	r2, [pc, #96]	@ (8000f20 <MX_GPIO_Init+0xbc>)
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <MX_GPIO_Init+0xbc>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <MX_GPIO_Init+0xc0>)
 8000ef0:	f003 fc18 	bl	8004724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ef4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f06:	2307      	movs	r3, #7
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_GPIO_Init+0xc4>)
 8000f12:	f003 fc07 	bl	8004724 <HAL_GPIO_Init>

}
 8000f16:	bf00      	nop
 8000f18:	3720      	adds	r7, #32
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	58024400 	.word	0x58024400
 8000f24:	58020000 	.word	0x58020000
 8000f28:	58020c00 	.word	0x58020c00

08000f2c <StartSimuladorTask>:
/* USER CODE BEGIN 0 */
/**
 * @brief  Tarea simulador de temperatura
 */
void StartSimuladorTask(void *argument)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    uint32_t tick_count = osKernelGetTickCount();
 8000f34:	f00a ff46 	bl	800bdc4 <osKernelGetTickCount>
 8000f38:	60f8      	str	r0, [r7, #12]

    for(;;)
    {
        osMutexAcquire(TempMutexHandle, osWaitForever);
 8000f3a:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <StartSimuladorTask+0xa4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00b f8b3 	bl	800c0ae <osMutexAcquire>

        float delta = 0.0f;
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]

        if (calefactor_on)
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <StartSimuladorTask+0xa8>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d010      	beq.n	8000f78 <StartSimuladorTask+0x4c>
            delta += ALPHA * (T_HEATER - temperatura_actual);
 8000f56:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <StartSimuladorTask+0xac>)
 8000f58:	edd3 7a00 	vldr	s15, [r3]
 8000f5c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000fdc <StartSimuladorTask+0xb0>
 8000f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f64:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000fe0 <StartSimuladorTask+0xb4>
 8000f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f74:	edc7 7a02 	vstr	s15, [r7, #8]

        delta -= BETA * (temperatura_actual - T_AMBIENTE);
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <StartSimuladorTask+0xac>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000f82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f86:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000fe4 <StartSimuladorTask+0xb8>
 8000f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f96:	edc7 7a02 	vstr	s15, [r7, #8]

        temperatura_actual += delta;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd8 <StartSimuladorTask+0xac>)
 8000f9c:	ed93 7a00 	vldr	s14, [r3]
 8000fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <StartSimuladorTask+0xac>)
 8000faa:	edc3 7a00 	vstr	s15, [r3]

        osMutexRelease(TempMutexHandle);
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <StartSimuladorTask+0xa4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00b f8c6 	bl	800c144 <osMutexRelease>

        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000fb8:	2101      	movs	r1, #1
 8000fba:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <StartSimuladorTask+0xbc>)
 8000fbc:	f003 fd7b 	bl	8004ab6 <HAL_GPIO_TogglePin>

        tick_count += 500;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000fc6:	60fb      	str	r3, [r7, #12]
        osDelayUntil(tick_count);
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f00a ffbd 	bl	800bf48 <osDelayUntil>
    {
 8000fce:	e7b4      	b.n	8000f3a <StartSimuladorTask+0xe>
 8000fd0:	240002a8 	.word	0x240002a8
 8000fd4:	24000294 	.word	0x24000294
 8000fd8:	24000008 	.word	0x24000008
 8000fdc:	42a00000 	.word	0x42a00000
 8000fe0:	3dcccccd 	.word	0x3dcccccd
 8000fe4:	3ca3d70a 	.word	0x3ca3d70a
 8000fe8:	58020400 	.word	0x58020400

08000fec <StartControlTask>:

/**
 * @brief  Tarea de control ON/OFF
 */
void StartControlTask(void *argument)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    uint32_t tick_count = osKernelGetTickCount();
 8000ff4:	f00a fee6 	bl	800bdc4 <osKernelGetTickCount>
 8000ff8:	60f8      	str	r0, [r7, #12]

    for(;;)
    {
        osMutexAcquire(TempMutexHandle, osWaitForever);
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <StartControlTask+0xa8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001002:	4618      	mov	r0, r3
 8001004:	f00b f853 	bl	800c0ae <osMutexAcquire>

        if (temperatura_actual < (temperatura_consigna - HISTERESIS))
 8001008:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <StartControlTask+0xac>)
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001012:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001016:	4b21      	ldr	r3, [pc, #132]	@ (800109c <StartControlTask+0xb0>)
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001024:	dd0d      	ble.n	8001042 <StartControlTask+0x56>
        {
            calefactor_on = true;
 8001026:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <StartControlTask+0xb4>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2102      	movs	r1, #2
 8001030:	481c      	ldr	r0, [pc, #112]	@ (80010a4 <StartControlTask+0xb8>)
 8001032:	f003 fd27 	bl	8004a84 <HAL_GPIO_WritePin>
#ifdef HAL_TIM_MODULE_ENABLED
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 800);
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <StartControlTask+0xbc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001040:	e01a      	b.n	8001078 <StartControlTask+0x8c>
#endif
        }
        else if (temperatura_actual > (temperatura_consigna + HISTERESIS))
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <StartControlTask+0xac>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800104c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <StartControlTask+0xb0>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	d50b      	bpl.n	8001078 <StartControlTask+0x8c>
        {
            calefactor_on = false;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <StartControlTask+0xb4>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2102      	movs	r1, #2
 800106a:	480e      	ldr	r0, [pc, #56]	@ (80010a4 <StartControlTask+0xb8>)
 800106c:	f003 fd0a 	bl	8004a84 <HAL_GPIO_WritePin>
#ifdef HAL_TIM_MODULE_ENABLED
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001070:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <StartControlTask+0xbc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2200      	movs	r2, #0
 8001076:	635a      	str	r2, [r3, #52]	@ 0x34
#endif
        }

        osMutexRelease(TempMutexHandle);
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <StartControlTask+0xa8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f00b f861 	bl	800c144 <osMutexRelease>

        tick_count += 1000;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001088:	60fb      	str	r3, [r7, #12]
        osDelayUntil(tick_count);
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f00a ff5c 	bl	800bf48 <osDelayUntil>
        osMutexAcquire(TempMutexHandle, osWaitForever);
 8001090:	e7b3      	b.n	8000ffa <StartControlTask+0xe>
 8001092:	bf00      	nop
 8001094:	240002a8 	.word	0x240002a8
 8001098:	2400000c 	.word	0x2400000c
 800109c:	24000008 	.word	0x24000008
 80010a0:	24000294 	.word	0x24000294
 80010a4:	58021000 	.word	0x58021000
 80010a8:	240002f8 	.word	0x240002f8

080010ac <StartUARTTask>:

/**
 * @brief  Tarea UART
 */
void StartUARTTask(void *argument)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)"[UART Task OK]\r\n", 16, 100);
 80010b4:	2364      	movs	r3, #100	@ 0x64
 80010b6:	2210      	movs	r2, #16
 80010b8:	490a      	ldr	r1, [pc, #40]	@ (80010e4 <StartUARTTask+0x38>)
 80010ba:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <StartUARTTask+0x3c>)
 80010bc:	f008 fa0a 	bl	80094d4 <HAL_UART_Transmit>

    for(;;)
    {
        // Esperar notificación
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010c4:	2001      	movs	r0, #1
 80010c6:	f00d fd61 	bl	800eb8c <ulTaskNotifyTake>

        if (uart_cmd_ready)
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <StartUARTTask+0x40>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f5      	beq.n	80010c0 <StartUARTTask+0x14>
        {
            uart_cmd_ready = false;
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <StartUARTTask+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
            procesar_comando(uart_cmd_buffer);
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <StartUARTTask+0x44>)
 80010dc:	f000 f9c8 	bl	8001470 <procesar_comando>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80010e0:	e7ee      	b.n	80010c0 <StartUARTTask+0x14>
 80010e2:	bf00      	nop
 80010e4:	080134fc 	.word	0x080134fc
 80010e8:	24000344 	.word	0x24000344
 80010ec:	240002f0 	.word	0x240002f0
 80010f0:	240002d0 	.word	0x240002d0

080010f4 <StartStatusTask>:
}
/**
 * @brief  Tarea Status
 */
void StartStatusTask(void *argument)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0a4      	sub	sp, #144	@ 0x90
 80010f8:	af04      	add	r7, sp, #16
 80010fa:	6078      	str	r0, [r7, #4]
    char msg[100];

    for(;;)
    {
        osDelay(5000);
 80010fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001100:	f00a ff07 	bl	800bf12 <osDelay>

        if (!auto_status_enabled)
 8001104:	4b37      	ldr	r3, [pc, #220]	@ (80011e4 <StartStatusTask+0xf0>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	f083 0301 	eor.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d165      	bne.n	80011de <StartStatusTask+0xea>
        {
            continue;
        }

        osMutexAcquire(TempMutexHandle, osWaitForever);
 8001112:	4b35      	ldr	r3, [pc, #212]	@ (80011e8 <StartStatusTask+0xf4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800111a:	4618      	mov	r0, r3
 800111c:	f00a ffc7 	bl	800c0ae <osMutexAcquire>

        int temp_ent = (int)temperatura_actual;
 8001120:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <StartStatusTask+0xf8>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800112a:	ee17 3a90 	vmov	r3, s15
 800112e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        int temp_dec = (int)((temperatura_actual - temp_ent) * 100);
 8001130:	4b2e      	ldr	r3, [pc, #184]	@ (80011ec <StartStatusTask+0xf8>)
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80011f0 <StartStatusTask+0xfc>
 8001148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	67bb      	str	r3, [r7, #120]	@ 0x78
        int cons_ent = (int)temperatura_consigna;
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <StartStatusTask+0x100>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001160:	ee17 3a90 	vmov	r3, s15
 8001164:	677b      	str	r3, [r7, #116]	@ 0x74
        int cons_dec = (int)((temperatura_consigna - cons_ent) * 100);
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <StartStatusTask+0x100>)
 8001168:	ed93 7a00 	vldr	s14, [r3]
 800116c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80011f0 <StartStatusTask+0xfc>
 800117e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	ee17 3a90 	vmov	r3, s15
 800118a:	673b      	str	r3, [r7, #112]	@ 0x70

        snprintf(msg, sizeof(msg), "Temp: %d.%02d C | Heater: %s | Setpoint: %d.%02d C\r\n",
                 temp_ent, temp_dec,
                 calefactor_on ? "ON" : "OFF",
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <StartStatusTask+0x104>)
 800118e:	781b      	ldrb	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "Temp: %d.%02d C | Heater: %s | Setpoint: %d.%02d C\r\n",
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <StartStatusTask+0xa4>
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <StartStatusTask+0x108>)
 8001196:	e000      	b.n	800119a <StartStatusTask+0xa6>
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <StartStatusTask+0x10c>)
 800119a:	f107 000c 	add.w	r0, r7, #12
 800119e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80011a0:	9203      	str	r2, [sp, #12]
 80011a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80011a4:	9202      	str	r2, [sp, #8]
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80011ae:	4a15      	ldr	r2, [pc, #84]	@ (8001204 <StartStatusTask+0x110>)
 80011b0:	2164      	movs	r1, #100	@ 0x64
 80011b2:	f00f fc31 	bl	8010a18 <sniprintf>
                 cons_ent, cons_dec);

        osMutexRelease(TempMutexHandle);
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <StartStatusTask+0xf4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00a ffc2 	bl	800c144 <osMutexRelease>

        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f8eb 	bl	80003a0 <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	f107 010c 	add.w	r1, r7, #12
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <StartStatusTask+0x114>)
 80011d8:	f008 f97c 	bl	80094d4 <HAL_UART_Transmit>
 80011dc:	e78e      	b.n	80010fc <StartStatusTask+0x8>
            continue;
 80011de:	bf00      	nop
    {
 80011e0:	e78c      	b.n	80010fc <StartStatusTask+0x8>
 80011e2:	bf00      	nop
 80011e4:	24000295 	.word	0x24000295
 80011e8:	240002a8 	.word	0x240002a8
 80011ec:	24000008 	.word	0x24000008
 80011f0:	42c80000 	.word	0x42c80000
 80011f4:	2400000c 	.word	0x2400000c
 80011f8:	24000294 	.word	0x24000294
 80011fc:	08013510 	.word	0x08013510
 8001200:	08013514 	.word	0x08013514
 8001204:	08013518 	.word	0x08013518
 8001208:	24000344 	.word	0x24000344

0800120c <enviar_profiling_report>:

/**
 * @brief  Genera y envía reporte de profiling
 */
void enviar_profiling_report(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	f5ad 7d28 	sub.w	sp, sp, #672	@ 0x2a0
 8001212:	af06      	add	r7, sp, #24
    char msg[100];
    char buffer[512];  // ✅ Para runtime stats

    snprintf(msg, sizeof(msg), "\r\n========== PROFILING REPORT ==========\r\n");
 8001214:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001218:	4a87      	ldr	r2, [pc, #540]	@ (8001438 <enviar_profiling_report+0x22c>)
 800121a:	2164      	movs	r1, #100	@ 0x64
 800121c:	4618      	mov	r0, r3
 800121e:	f00f fbfb 	bl	8010a18 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001222:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f8ba 	bl	80003a0 <strlen>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 8001234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001238:	4880      	ldr	r0, [pc, #512]	@ (800143c <enviar_profiling_report+0x230>)
 800123a:	f008 f94b 	bl	80094d4 <HAL_UART_Transmit>

    size_t free_heap = xPortGetFreeHeapSize();
 800123e:	f00b f925 	bl	800c48c <xPortGetFreeHeapSize>
 8001242:	f8c7 0284 	str.w	r0, [r7, #644]	@ 0x284
    size_t min_free_heap = xPortGetMinimumEverFreeHeapSize();
 8001246:	f00b f92d 	bl	800c4a4 <xPortGetMinimumEverFreeHeapSize>
 800124a:	f8c7 0280 	str.w	r0, [r7, #640]	@ 0x280
    size_t total_heap = configTOTAL_HEAP_SIZE;
 800124e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001252:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
    size_t used_heap = total_heap - free_heap;
 8001256:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800125a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278

    snprintf(msg, sizeof(msg), "HEAP: Used=%lu/%lu bytes (%.1f%%), Min Free=%lu bytes\r\n",
                    (unsigned long)used_heap, (unsigned long)total_heap,
                    (float)used_heap * 100.0f / total_heap,
 8001264:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001270:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001440 <enviar_profiling_report+0x234>
 8001274:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001278:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
    snprintf(msg, sizeof(msg), "HEAP: Used=%lu/%lu bytes (%.1f%%), Min Free=%lu bytes\r\n",
 8001288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800128c:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8001290:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 8001294:	9304      	str	r3, [sp, #16]
 8001296:	ed8d 7b02 	vstr	d7, [sp, #8]
 800129a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 80012a4:	4a67      	ldr	r2, [pc, #412]	@ (8001444 <enviar_profiling_report+0x238>)
 80012a6:	2164      	movs	r1, #100	@ 0x64
 80012a8:	f00f fbb6 	bl	8010a18 <sniprintf>
                    (unsigned long)min_free_heap);
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012ac:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f875 	bl	80003a0 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 80012be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012c2:	485e      	ldr	r0, [pc, #376]	@ (800143c <enviar_profiling_report+0x230>)
 80012c4:	f008 f906 	bl	80094d4 <HAL_UART_Transmit>

    snprintf(msg, sizeof(msg), "\r\nSTACK HIGH WATERMARK (bytes free):\r\n");
 80012c8:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80012cc:	4a5e      	ldr	r2, [pc, #376]	@ (8001448 <enviar_profiling_report+0x23c>)
 80012ce:	2164      	movs	r1, #100	@ 0x64
 80012d0:	4618      	mov	r0, r3
 80012d2:	f00f fba1 	bl	8010a18 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012d6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f860 	bl	80003a0 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ec:	4853      	ldr	r0, [pc, #332]	@ (800143c <enviar_profiling_report+0x230>)
 80012ee:	f008 f8f1 	bl	80094d4 <HAL_UART_Transmit>

    if (SimuladorTaskHandle != NULL) {
 80012f2:	4b56      	ldr	r3, [pc, #344]	@ (800144c <enviar_profiling_report+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d01d      	beq.n	8001336 <enviar_profiling_report+0x12a>
        UBaseType_t watermark = uxTaskGetStackHighWaterMark(SimuladorTaskHandle);
 80012fa:	4b54      	ldr	r3, [pc, #336]	@ (800144c <enviar_profiling_report+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f00d fa3a 	bl	800e778 <uxTaskGetStackHighWaterMark>
 8001304:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
        snprintf(msg, sizeof(msg), "  Simulador:  %lu bytes\r\n", watermark * 4);
 8001308:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8001312:	4a4f      	ldr	r2, [pc, #316]	@ (8001450 <enviar_profiling_report+0x244>)
 8001314:	2164      	movs	r1, #100	@ 0x64
 8001316:	f00f fb7f 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800131a:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f83e 	bl	80003a0 <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	b29a      	uxth	r2, r3
 8001328:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 800132c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001330:	4842      	ldr	r0, [pc, #264]	@ (800143c <enviar_profiling_report+0x230>)
 8001332:	f008 f8cf 	bl	80094d4 <HAL_UART_Transmit>
    }

    if (ControlTaskHandle != NULL) {
 8001336:	4b47      	ldr	r3, [pc, #284]	@ (8001454 <enviar_profiling_report+0x248>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d01d      	beq.n	800137a <enviar_profiling_report+0x16e>
        UBaseType_t watermark = uxTaskGetStackHighWaterMark(ControlTaskHandle);
 800133e:	4b45      	ldr	r3, [pc, #276]	@ (8001454 <enviar_profiling_report+0x248>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f00d fa18 	bl	800e778 <uxTaskGetStackHighWaterMark>
 8001348:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
        snprintf(msg, sizeof(msg), "  Control:    %lu bytes\r\n", watermark * 4);
 800134c:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8001356:	4a40      	ldr	r2, [pc, #256]	@ (8001458 <enviar_profiling_report+0x24c>)
 8001358:	2164      	movs	r1, #100	@ 0x64
 800135a:	f00f fb5d 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800135e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f81c 	bl	80003a0 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 8001370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001374:	4831      	ldr	r0, [pc, #196]	@ (800143c <enviar_profiling_report+0x230>)
 8001376:	f008 f8ad 	bl	80094d4 <HAL_UART_Transmit>
    }

    if (UARTTaskHandle != NULL) {
 800137a:	4b38      	ldr	r3, [pc, #224]	@ (800145c <enviar_profiling_report+0x250>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d01d      	beq.n	80013be <enviar_profiling_report+0x1b2>
        UBaseType_t watermark = uxTaskGetStackHighWaterMark(UARTTaskHandle);
 8001382:	4b36      	ldr	r3, [pc, #216]	@ (800145c <enviar_profiling_report+0x250>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f00d f9f6 	bl	800e778 <uxTaskGetStackHighWaterMark>
 800138c:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
        snprintf(msg, sizeof(msg), "  UART:       %lu bytes\r\n", watermark * 4);
 8001390:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 800139a:	4a31      	ldr	r2, [pc, #196]	@ (8001460 <enviar_profiling_report+0x254>)
 800139c:	2164      	movs	r1, #100	@ 0x64
 800139e:	f00f fb3b 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80013a2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe fffa 	bl	80003a0 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013b8:	4820      	ldr	r0, [pc, #128]	@ (800143c <enviar_profiling_report+0x230>)
 80013ba:	f008 f88b 	bl	80094d4 <HAL_UART_Transmit>
    }

    if (StatusTaskHandle != NULL) {
 80013be:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <enviar_profiling_report+0x258>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01d      	beq.n	8001402 <enviar_profiling_report+0x1f6>
        UBaseType_t watermark = uxTaskGetStackHighWaterMark(StatusTaskHandle);
 80013c6:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <enviar_profiling_report+0x258>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00d f9d4 	bl	800e778 <uxTaskGetStackHighWaterMark>
 80013d0:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
        snprintf(msg, sizeof(msg), "  Status:     %lu bytes\r\n", watermark * 4);
 80013d4:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 80013de:	4a22      	ldr	r2, [pc, #136]	@ (8001468 <enviar_profiling_report+0x25c>)
 80013e0:	2164      	movs	r1, #100	@ 0x64
 80013e2:	f00f fb19 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80013e6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe ffd8 	bl	80003a0 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013fc:	480f      	ldr	r0, [pc, #60]	@ (800143c <enviar_profiling_report+0x230>)
 80013fe:	f008 f869 	bl	80094d4 <HAL_UART_Transmit>
    }

    snprintf(msg, sizeof(msg), "======================================\r\n\r\n");
 8001402:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001406:	4a19      	ldr	r2, [pc, #100]	@ (800146c <enviar_profiling_report+0x260>)
 8001408:	2164      	movs	r1, #100	@ 0x64
 800140a:	4618      	mov	r0, r3
 800140c:	f00f fb04 	bl	8010a18 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001410:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001414:	4618      	mov	r0, r3
 8001416:	f7fe ffc3 	bl	80003a0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 8001422:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <enviar_profiling_report+0x230>)
 8001428:	f008 f854 	bl	80094d4 <HAL_UART_Transmit>
}
 800142c:	bf00      	nop
 800142e:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	08013550 	.word	0x08013550
 800143c:	24000344 	.word	0x24000344
 8001440:	42c80000 	.word	0x42c80000
 8001444:	0801357c 	.word	0x0801357c
 8001448:	080135b4 	.word	0x080135b4
 800144c:	24000298 	.word	0x24000298
 8001450:	080135dc 	.word	0x080135dc
 8001454:	2400029c 	.word	0x2400029c
 8001458:	080135f8 	.word	0x080135f8
 800145c:	240002a0 	.word	0x240002a0
 8001460:	08013614 	.word	0x08013614
 8001464:	240002a4 	.word	0x240002a4
 8001468:	08013630 	.word	0x08013630
 800146c:	0801364c 	.word	0x0801364c

08001470 <procesar_comando>:

/**
 * @brief  Procesador de comandos
 */
void procesar_comando(char *cmd)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0a8      	sub	sp, #160	@ 0xa0
 8001474:	af04      	add	r7, sp, #16
 8001476:	6078      	str	r0, [r7, #4]
    // Limpieza: Asegura que el string termine justo después del comando
    // (Ej. convierte "STATUS\r\0" o "STATUS \0" a "STATUS\0")
    for (int i = 0; cmd[i] != '\0'; i++)
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800147e:	e020      	b.n	80014c2 <procesar_comando+0x52>
    {
        // Si encontramos un espacio, un retorno de carro o un salto de línea,
        // lo reemplazamos por el terminador nulo y paramos.
        if (cmd[i] == ' ' || cmd[i] == '\r' || cmd[i] == '\n')
 8001480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b20      	cmp	r3, #32
 800148c:	d00d      	beq.n	80014aa <procesar_comando+0x3a>
 800148e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b0d      	cmp	r3, #13
 800149a:	d006      	beq.n	80014aa <procesar_comando+0x3a>
 800149c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b0a      	cmp	r3, #10
 80014a8:	d106      	bne.n	80014b8 <procesar_comando+0x48>
        {
            cmd[i] = '\0';
 80014aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
            break;
 80014b6:	e00b      	b.n	80014d0 <procesar_comando+0x60>
    for (int i = 0; cmd[i] != '\0'; i++)
 80014b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014bc:	3301      	adds	r3, #1
 80014be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80014c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1d7      	bne.n	8001480 <procesar_comando+0x10>
        }
    }
    char msg[100];
    snprintf(msg, sizeof(msg), "Comando recibido: [%s]\r\n", cmd);
 80014d0:	f107 000c 	add.w	r0, r7, #12
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4aaf      	ldr	r2, [pc, #700]	@ (8001794 <procesar_comando+0x324>)
 80014d8:	2164      	movs	r1, #100	@ 0x64
 80014da:	f00f fa9d 	bl	8010a18 <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ff5c 	bl	80003a0 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f107 010c 	add.w	r1, r7, #12
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014f4:	48a8      	ldr	r0, [pc, #672]	@ (8001798 <procesar_comando+0x328>)
 80014f6:	f007 ffed 	bl	80094d4 <HAL_UART_Transmit>
            osDelay(10);
 80014fa:	200a      	movs	r0, #10
 80014fc:	f00a fd09 	bl	800bf12 <osDelay>

            if ((strcmp(cmd, "STATUS") == 0) || (strcmp(cmd, "status") == 0))
 8001500:	49a6      	ldr	r1, [pc, #664]	@ (800179c <procesar_comando+0x32c>)
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7fe feec 	bl	80002e0 <strcmp>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <procesar_comando+0xac>
 800150e:	49a4      	ldr	r1, [pc, #656]	@ (80017a0 <procesar_comando+0x330>)
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7fe fee5 	bl	80002e0 <strcmp>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d157      	bne.n	80015cc <procesar_comando+0x15c>
               {
        osMutexAcquire(TempMutexHandle, osWaitForever);
 800151c:	4ba1      	ldr	r3, [pc, #644]	@ (80017a4 <procesar_comando+0x334>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001524:	4618      	mov	r0, r3
 8001526:	f00a fdc2 	bl	800c0ae <osMutexAcquire>

        int temp_ent = (int)temperatura_actual;
 800152a:	4b9f      	ldr	r3, [pc, #636]	@ (80017a8 <procesar_comando+0x338>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001534:	ee17 3a90 	vmov	r3, s15
 8001538:	67fb      	str	r3, [r7, #124]	@ 0x7c
        int temp_dec = (int)((temperatura_actual - temp_ent) * 100);
 800153a:	4b9b      	ldr	r3, [pc, #620]	@ (80017a8 <procesar_comando+0x338>)
 800153c:	ed93 7a00 	vldr	s14, [r3]
 8001540:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800154e:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80017ac <procesar_comando+0x33c>
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155a:	ee17 3a90 	vmov	r3, s15
 800155e:	67bb      	str	r3, [r7, #120]	@ 0x78
        int cons_ent = (int)temperatura_consigna;
 8001560:	4b93      	ldr	r3, [pc, #588]	@ (80017b0 <procesar_comando+0x340>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800156a:	ee17 3a90 	vmov	r3, s15
 800156e:	677b      	str	r3, [r7, #116]	@ 0x74
        int cons_dec = (int)((temperatura_consigna - cons_ent) * 100);
 8001570:	4b8f      	ldr	r3, [pc, #572]	@ (80017b0 <procesar_comando+0x340>)
 8001572:	ed93 7a00 	vldr	s14, [r3]
 8001576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80017ac <procesar_comando+0x33c>
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	673b      	str	r3, [r7, #112]	@ 0x70

        snprintf(msg, sizeof(msg), "Temp: %d.%02d C | Heater: %s | Setpoint: %d.%02d C\r\n",
                 temp_ent, temp_dec,
                 calefactor_on ? "ON" : "OFF",
 8001596:	4b87      	ldr	r3, [pc, #540]	@ (80017b4 <procesar_comando+0x344>)
 8001598:	781b      	ldrb	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "Temp: %d.%02d C | Heater: %s | Setpoint: %d.%02d C\r\n",
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <procesar_comando+0x132>
 800159e:	4b86      	ldr	r3, [pc, #536]	@ (80017b8 <procesar_comando+0x348>)
 80015a0:	e000      	b.n	80015a4 <procesar_comando+0x134>
 80015a2:	4b86      	ldr	r3, [pc, #536]	@ (80017bc <procesar_comando+0x34c>)
 80015a4:	f107 000c 	add.w	r0, r7, #12
 80015a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80015aa:	9203      	str	r2, [sp, #12]
 80015ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80015ae:	9202      	str	r2, [sp, #8]
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80015b8:	4a81      	ldr	r2, [pc, #516]	@ (80017c0 <procesar_comando+0x350>)
 80015ba:	2164      	movs	r1, #100	@ 0x64
 80015bc:	f00f fa2c 	bl	8010a18 <sniprintf>
                 cons_ent, cons_dec);

        osMutexRelease(TempMutexHandle);
 80015c0:	4b78      	ldr	r3, [pc, #480]	@ (80017a4 <procesar_comando+0x334>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00a fdbd 	bl	800c144 <osMutexRelease>
               {
 80015ca:	e158      	b.n	800187e <procesar_comando+0x40e>

    }
            else if ((strcmp(cmd, "PROF") == 0) || (strcmp(cmd, "prof") == 0))
 80015cc:	497d      	ldr	r1, [pc, #500]	@ (80017c4 <procesar_comando+0x354>)
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe fe86 	bl	80002e0 <strcmp>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <procesar_comando+0x178>
 80015da:	497b      	ldr	r1, [pc, #492]	@ (80017c8 <procesar_comando+0x358>)
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7fe fe7f 	bl	80002e0 <strcmp>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <procesar_comando+0x17e>
               {
        enviar_profiling_report();
 80015e8:	f7ff fe10 	bl	800120c <enviar_profiling_report>
 80015ec:	e147      	b.n	800187e <procesar_comando+0x40e>
    }
    else if ((strncmp(cmd, "AUTO ON", 7) == 0) || (strncmp(cmd, "auto on", 7) == 0))
 80015ee:	2207      	movs	r2, #7
 80015f0:	4976      	ldr	r1, [pc, #472]	@ (80017cc <procesar_comando+0x35c>)
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f00f fa91 	bl	8010b1a <strncmp>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <procesar_comando+0x19e>
 80015fe:	2207      	movs	r2, #7
 8001600:	4973      	ldr	r1, [pc, #460]	@ (80017d0 <procesar_comando+0x360>)
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f00f fa89 	bl	8010b1a <strncmp>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <procesar_comando+0x1d0>
    {
        auto_status_enabled = true;
 800160e:	4b71      	ldr	r3, [pc, #452]	@ (80017d4 <procesar_comando+0x364>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
        snprintf(msg, sizeof(msg), "Auto status enabled (every 5s)\r\n");
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4a6f      	ldr	r2, [pc, #444]	@ (80017d8 <procesar_comando+0x368>)
 800161a:	2164      	movs	r1, #100	@ 0x64
 800161c:	4618      	mov	r0, r3
 800161e:	f00f f9fb 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe feba 	bl	80003a0 <strlen>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	f107 010c 	add.w	r1, r7, #12
 8001634:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001638:	4857      	ldr	r0, [pc, #348]	@ (8001798 <procesar_comando+0x328>)
 800163a:	f007 ff4b 	bl	80094d4 <HAL_UART_Transmit>
 800163e:	e11e      	b.n	800187e <procesar_comando+0x40e>
    }
    else if ((strncmp(cmd, "AUTO OFF", 8) == 0) || (strncmp(cmd, "auto off", 8) == 0))
 8001640:	2208      	movs	r2, #8
 8001642:	4966      	ldr	r1, [pc, #408]	@ (80017dc <procesar_comando+0x36c>)
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f00f fa68 	bl	8010b1a <strncmp>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <procesar_comando+0x1f0>
 8001650:	2208      	movs	r2, #8
 8001652:	4963      	ldr	r1, [pc, #396]	@ (80017e0 <procesar_comando+0x370>)
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f00f fa60 	bl	8010b1a <strncmp>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d118      	bne.n	8001692 <procesar_comando+0x222>
    {
        auto_status_enabled = false;
 8001660:	4b5c      	ldr	r3, [pc, #368]	@ (80017d4 <procesar_comando+0x364>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
        snprintf(msg, sizeof(msg), "Auto status disabled\r\n");
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	4a5e      	ldr	r2, [pc, #376]	@ (80017e4 <procesar_comando+0x374>)
 800166c:	2164      	movs	r1, #100	@ 0x64
 800166e:	4618      	mov	r0, r3
 8001670:	f00f f9d2 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fe91 	bl	80003a0 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	f107 010c 	add.w	r1, r7, #12
 8001686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800168a:	4843      	ldr	r0, [pc, #268]	@ (8001798 <procesar_comando+0x328>)
 800168c:	f007 ff22 	bl	80094d4 <HAL_UART_Transmit>
 8001690:	e0f5      	b.n	800187e <procesar_comando+0x40e>
    }
    else if ((strncmp(uart_cmd_buffer, "SET ", 4) == 0) || (strncmp(uart_cmd_buffer, "set ", 4) == 0))
 8001692:	2204      	movs	r2, #4
 8001694:	4954      	ldr	r1, [pc, #336]	@ (80017e8 <procesar_comando+0x378>)
 8001696:	4855      	ldr	r0, [pc, #340]	@ (80017ec <procesar_comando+0x37c>)
 8001698:	f00f fa3f 	bl	8010b1a <strncmp>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d007      	beq.n	80016b2 <procesar_comando+0x242>
 80016a2:	2204      	movs	r2, #4
 80016a4:	4952      	ldr	r1, [pc, #328]	@ (80017f0 <procesar_comando+0x380>)
 80016a6:	4851      	ldr	r0, [pc, #324]	@ (80017ec <procesar_comando+0x37c>)
 80016a8:	f00f fa37 	bl	8010b1a <strncmp>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d146      	bne.n	8001740 <procesar_comando+0x2d0>
      {
        float nueva = atof(cmd + 4);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3304      	adds	r3, #4
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00d fef2 	bl	800f4a0 <atof>
 80016bc:	eeb0 7b40 	vmov.f64	d7, d0
 80016c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016c4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        temperatura_consigna = nueva;
 80016c8:	4a39      	ldr	r2, [pc, #228]	@ (80017b0 <procesar_comando+0x340>)
 80016ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016ce:	6013      	str	r3, [r2, #0]

        int cons_ent = (int)temperatura_consigna;
 80016d0:	4b37      	ldr	r3, [pc, #220]	@ (80017b0 <procesar_comando+0x340>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016da:	ee17 3a90 	vmov	r3, s15
 80016de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        int cons_dec = (int)((temperatura_consigna - cons_ent) * 100);
 80016e2:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <procesar_comando+0x340>)
 80016e4:	ed93 7a00 	vldr	s14, [r3]
 80016e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80017ac <procesar_comando+0x33c>
 80016fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001704:	ee17 3a90 	vmov	r3, s15
 8001708:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        snprintf(msg, sizeof(msg), "Nueva consigna: %d.%02d C\r\n", cons_ent, cons_dec);
 800170c:	f107 000c 	add.w	r0, r7, #12
 8001710:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800171a:	4a36      	ldr	r2, [pc, #216]	@ (80017f4 <procesar_comando+0x384>)
 800171c:	2164      	movs	r1, #100	@ 0x64
 800171e:	f00f f97b 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fe3a 	bl	80003a0 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	b29a      	uxth	r2, r3
 8001730:	f107 010c 	add.w	r1, r7, #12
 8001734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001738:	4817      	ldr	r0, [pc, #92]	@ (8001798 <procesar_comando+0x328>)
 800173a:	f007 fecb 	bl	80094d4 <HAL_UART_Transmit>
      {
 800173e:	e09e      	b.n	800187e <procesar_comando+0x40e>
    }
    else if ((strncmp(cmd, "ON", 2) == 0) || (strncmp(cmd, "on", 2) == 0))
 8001740:	2202      	movs	r2, #2
 8001742:	491d      	ldr	r1, [pc, #116]	@ (80017b8 <procesar_comando+0x348>)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f00f f9e8 	bl	8010b1a <strncmp>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d007      	beq.n	8001760 <procesar_comando+0x2f0>
 8001750:	2202      	movs	r2, #2
 8001752:	4929      	ldr	r1, [pc, #164]	@ (80017f8 <procesar_comando+0x388>)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f00f f9e0 	bl	8010b1a <strncmp>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d14f      	bne.n	8001800 <procesar_comando+0x390>
    {
        calefactor_on = true;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <procesar_comando+0x344>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
        snprintf(msg, sizeof(msg), "Heater turned on.\r\n");
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4a24      	ldr	r2, [pc, #144]	@ (80017fc <procesar_comando+0x38c>)
 800176c:	2164      	movs	r1, #100	@ 0x64
 800176e:	4618      	mov	r0, r3
 8001770:	f00f f952 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe11 	bl	80003a0 <strlen>
 800177e:	4603      	mov	r3, r0
 8001780:	b29a      	uxth	r2, r3
 8001782:	f107 010c 	add.w	r1, r7, #12
 8001786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800178a:	4803      	ldr	r0, [pc, #12]	@ (8001798 <procesar_comando+0x328>)
 800178c:	f007 fea2 	bl	80094d4 <HAL_UART_Transmit>
 8001790:	e075      	b.n	800187e <procesar_comando+0x40e>
 8001792:	bf00      	nop
 8001794:	08013678 	.word	0x08013678
 8001798:	24000344 	.word	0x24000344
 800179c:	08013694 	.word	0x08013694
 80017a0:	0801369c 	.word	0x0801369c
 80017a4:	240002a8 	.word	0x240002a8
 80017a8:	24000008 	.word	0x24000008
 80017ac:	42c80000 	.word	0x42c80000
 80017b0:	2400000c 	.word	0x2400000c
 80017b4:	24000294 	.word	0x24000294
 80017b8:	08013510 	.word	0x08013510
 80017bc:	08013514 	.word	0x08013514
 80017c0:	08013518 	.word	0x08013518
 80017c4:	080136a4 	.word	0x080136a4
 80017c8:	080136ac 	.word	0x080136ac
 80017cc:	080136b4 	.word	0x080136b4
 80017d0:	080136bc 	.word	0x080136bc
 80017d4:	24000295 	.word	0x24000295
 80017d8:	080136c4 	.word	0x080136c4
 80017dc:	080136e8 	.word	0x080136e8
 80017e0:	080136f4 	.word	0x080136f4
 80017e4:	08013700 	.word	0x08013700
 80017e8:	08013718 	.word	0x08013718
 80017ec:	240002d0 	.word	0x240002d0
 80017f0:	08013720 	.word	0x08013720
 80017f4:	08013728 	.word	0x08013728
 80017f8:	08013744 	.word	0x08013744
 80017fc:	08013748 	.word	0x08013748
    }
    else if ((strncmp(cmd, "OFF", 3) == 0) || (strncmp(cmd, "off", 3) == 0))
 8001800:	2203      	movs	r2, #3
 8001802:	4921      	ldr	r1, [pc, #132]	@ (8001888 <procesar_comando+0x418>)
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f00f f988 	bl	8010b1a <strncmp>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <procesar_comando+0x3b0>
 8001810:	2203      	movs	r2, #3
 8001812:	491e      	ldr	r1, [pc, #120]	@ (800188c <procesar_comando+0x41c>)
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f00f f980 	bl	8010b1a <strncmp>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d118      	bne.n	8001852 <procesar_comando+0x3e2>
    {
        calefactor_on = false;
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <procesar_comando+0x420>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
        snprintf(msg, sizeof(msg), "Heater turned off.\r\n");
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4a1a      	ldr	r2, [pc, #104]	@ (8001894 <procesar_comando+0x424>)
 800182c:	2164      	movs	r1, #100	@ 0x64
 800182e:	4618      	mov	r0, r3
 8001830:	f00f f8f2 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fdb1 	bl	80003a0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f107 010c 	add.w	r1, r7, #12
 8001846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800184a:	4813      	ldr	r0, [pc, #76]	@ (8001898 <procesar_comando+0x428>)
 800184c:	f007 fe42 	bl	80094d4 <HAL_UART_Transmit>
 8001850:	e015      	b.n	800187e <procesar_comando+0x40e>
    }
    else
    {
        snprintf(msg, sizeof(msg), "Comandos: STATUS, SET xx, ON, OFF, PROF, AUTO ON, AUTO OFF\r\n");
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4a11      	ldr	r2, [pc, #68]	@ (800189c <procesar_comando+0x42c>)
 8001858:	2164      	movs	r1, #100	@ 0x64
 800185a:	4618      	mov	r0, r3
 800185c:	f00f f8dc 	bl	8010a18 <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fd9b 	bl	80003a0 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	f107 010c 	add.w	r1, r7, #12
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001876:	4808      	ldr	r0, [pc, #32]	@ (8001898 <procesar_comando+0x428>)
 8001878:	f007 fe2c 	bl	80094d4 <HAL_UART_Transmit>
    }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3790      	adds	r7, #144	@ 0x90
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	08013514 	.word	0x08013514
 800188c:	0801375c 	.word	0x0801375c
 8001890:	24000294 	.word	0x24000294
 8001894:	08013760 	.word	0x08013760
 8001898:	24000344 	.word	0x24000344
 800189c:	08013778 	.word	0x08013778

080018a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b0a8      	sub	sp, #160	@ 0xa0
 80018a4:	af00      	add	r7, sp, #0
  int32_t timeout;
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80018a6:	f000 fa05 	bl	8001cb4 <MPU_Config>
#endif /* DUAL_CORE_BOOT_SYNdame el paos a paso de este codigo que debe de hacer C_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018aa:	f000 fecf 	bl	800264c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ae:	f000 f8e9 	bl	8001a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b2:	f7ff fad7 	bl	8000e64 <MX_GPIO_Init>
  MX_ADC1_Init();
 80018b6:	f7ff f9cb 	bl	8000c50 <MX_ADC1_Init>
  MX_TIM2_Init();
 80018ba:	f000 fb4b 	bl	8001f54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* ============================================ */
  /* 1. PRIMERO: Inicializar el kernel */
  /* ============================================ */
  osKernelInitialize();
 80018be:	f00a fa37 	bl	800bd30 <osKernelInitialize>
  MX_FREERTOS_Init();
 80018c2:	f7ff fab5 	bl	8000e30 <MX_FREERTOS_Init>

  MX_USART3_UART_Init();
 80018c6:	f000 fc13 	bl	80020f0 <MX_USART3_UART_Init>
  HAL_UART_Transmit(&huart3, (uint8_t*)"*** INICIO ***\r\n", 16, 1000);
 80018ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ce:	2210      	movs	r2, #16
 80018d0:	4958      	ldr	r1, [pc, #352]	@ (8001a34 <main+0x194>)
 80018d2:	4859      	ldr	r0, [pc, #356]	@ (8001a38 <main+0x198>)
 80018d4:	f007 fdfe 	bl	80094d4 <HAL_UART_Transmit>

  /* Crear mutex */
  const osMutexAttr_t TempMutex_attributes = { .name = "TempMutex" };
 80018d8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	4b55      	ldr	r3, [pc, #340]	@ (8001a3c <main+0x19c>)
 80018e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  TempMutexHandle = osMutexNew(&TempMutex_attributes);
 80018ec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00a fb56 	bl	800bfa2 <osMutexNew>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a51      	ldr	r2, [pc, #324]	@ (8001a40 <main+0x1a0>)
 80018fa:	6013      	str	r3, [r2, #0]

  /* NO CREAR COLA - ELIMINAR ESTA SECCIÓN COMPLETAMENTE */

  /* Crear tareas */
  const osThreadAttr_t SimuladorTask_attributes = {
 80018fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001900:	2224      	movs	r2, #36	@ 0x24
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f00f f900 	bl	8010b0a <memset>
 800190a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a44 <main+0x1a4>)
 800190c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800190e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001912:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001916:	2318      	movs	r3, #24
 8001918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      .name = "Simulador",
      .stack_size = 256 * 4,
      .priority = (osPriority_t) osPriorityNormal,
  };
  SimuladorTaskHandle = osThreadNew(StartSimuladorTask, NULL, &SimuladorTask_attributes);
 800191c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001920:	461a      	mov	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	4848      	ldr	r0, [pc, #288]	@ (8001a48 <main+0x1a8>)
 8001926:	f00a fa62 	bl	800bdee <osThreadNew>
 800192a:	4603      	mov	r3, r0
 800192c:	4a47      	ldr	r2, [pc, #284]	@ (8001a4c <main+0x1ac>)
 800192e:	6013      	str	r3, [r2, #0]

  const osThreadAttr_t ControlTask_attributes = {
 8001930:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001934:	2224      	movs	r2, #36	@ 0x24
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f00f f8e6 	bl	8010b0a <memset>
 800193e:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <main+0x1b0>)
 8001940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001948:	2318      	movs	r3, #24
 800194a:	663b      	str	r3, [r7, #96]	@ 0x60
      .name = "Control",
      .stack_size = 256 * 4,
      .priority = (osPriority_t) osPriorityNormal,
  };
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 800194c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001950:	461a      	mov	r2, r3
 8001952:	2100      	movs	r1, #0
 8001954:	483f      	ldr	r0, [pc, #252]	@ (8001a54 <main+0x1b4>)
 8001956:	f00a fa4a 	bl	800bdee <osThreadNew>
 800195a:	4603      	mov	r3, r0
 800195c:	4a3e      	ldr	r2, [pc, #248]	@ (8001a58 <main+0x1b8>)
 800195e:	6013      	str	r3, [r2, #0]

  const osThreadAttr_t UARTTask_attributes = {
 8001960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001964:	2224      	movs	r2, #36	@ 0x24
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f00f f8ce 	bl	8010b0a <memset>
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <main+0x1bc>)
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
 8001972:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001976:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001978:	2320      	movs	r3, #32
 800197a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      .name = "UART",
      .stack_size = 512 * 4,
      .priority = (osPriority_t) osPriorityAboveNormal,
  };
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 800197c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001980:	461a      	mov	r2, r3
 8001982:	2100      	movs	r1, #0
 8001984:	4836      	ldr	r0, [pc, #216]	@ (8001a60 <main+0x1c0>)
 8001986:	f00a fa32 	bl	800bdee <osThreadNew>
 800198a:	4603      	mov	r3, r0
 800198c:	4a35      	ldr	r2, [pc, #212]	@ (8001a64 <main+0x1c4>)
 800198e:	6013      	str	r3, [r2, #0]

  const osThreadAttr_t StatusTask_attributes = {
 8001990:	463b      	mov	r3, r7
 8001992:	2224      	movs	r2, #36	@ 0x24
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f00f f8b7 	bl	8010b0a <memset>
 800199c:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <main+0x1c8>)
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	2310      	movs	r3, #16
 80019a8:	61bb      	str	r3, [r7, #24]
      .name = "Status",
      .stack_size = 512 * 4,
      .priority = (osPriority_t) osPriorityBelowNormal,
  };
  StatusTaskHandle = osThreadNew(StartStatusTask, NULL, &StatusTask_attributes);
 80019aa:	463b      	mov	r3, r7
 80019ac:	461a      	mov	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	482e      	ldr	r0, [pc, #184]	@ (8001a6c <main+0x1cc>)
 80019b2:	f00a fa1c 	bl	800bdee <osThreadNew>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001a70 <main+0x1d0>)
 80019ba:	6013      	str	r3, [r2, #0]

  /* Habilitar UART */
  HAL_UART_Transmit(&huart3, (uint8_t*)"Listo\r\n> ", 9, 1000);
 80019bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c0:	2209      	movs	r2, #9
 80019c2:	492c      	ldr	r1, [pc, #176]	@ (8001a74 <main+0x1d4>)
 80019c4:	481c      	ldr	r0, [pc, #112]	@ (8001a38 <main+0x198>)
 80019c6:	f007 fd85 	bl	80094d4 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 80019ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <main+0x1d8>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <main+0x1dc>)
 80019d2:	4413      	add	r3, r2
 80019d4:	2201      	movs	r2, #1
 80019d6:	4619      	mov	r1, r3
 80019d8:	4817      	ldr	r0, [pc, #92]	@ (8001a38 <main+0x198>)
 80019da:	f007 fe09 	bl	80095f0 <HAL_UART_Receive_IT>

  /* LEDs y botones */
  BSP_LED_Init(LED_GREEN);
 80019de:	2000      	movs	r0, #0
 80019e0:	f000 fc50 	bl	8002284 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f000 fc4d 	bl	8002284 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80019ea:	2002      	movs	r0, #2
 80019ec:	f000 fc4a 	bl	8002284 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80019f0:	2101      	movs	r1, #1
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 fcbc 	bl	8002370 <BSP_PB_Init>

  BspCOMInit.BaudRate   = 115200;
 80019f8:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <main+0x1e0>)
 80019fa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019fe:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <main+0x1e0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <main+0x1e0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <main+0x1e0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <main+0x1e0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001a18:	4919      	ldr	r1, [pc, #100]	@ (8001a80 <main+0x1e0>)
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 fd38 	bl	8002490 <BSP_COM_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <main+0x18a>
  {
    Error_Handler();
 8001a26:	f000 f971 	bl	8001d0c <Error_Handler>
  }

  /* USER CODE END 2 */

  osKernelStart();
 8001a2a:	f00a f9a5 	bl	800bd78 <osKernelStart>

  /* Infinite loop */
  while (1)
 8001a2e:	bf00      	nop
 8001a30:	e7fd      	b.n	8001a2e <main+0x18e>
 8001a32:	bf00      	nop
 8001a34:	080137b8 	.word	0x080137b8
 8001a38:	24000344 	.word	0x24000344
 8001a3c:	080137cc 	.word	0x080137cc
 8001a40:	240002a8 	.word	0x240002a8
 8001a44:	080137d8 	.word	0x080137d8
 8001a48:	08000f2d 	.word	0x08000f2d
 8001a4c:	24000298 	.word	0x24000298
 8001a50:	080137e4 	.word	0x080137e4
 8001a54:	08000fed 	.word	0x08000fed
 8001a58:	2400029c 	.word	0x2400029c
 8001a5c:	080137ec 	.word	0x080137ec
 8001a60:	080010ad 	.word	0x080010ad
 8001a64:	240002a0 	.word	0x240002a0
 8001a68:	080137f4 	.word	0x080137f4
 8001a6c:	080010f5 	.word	0x080010f5
 8001a70:	240002a4 	.word	0x240002a4
 8001a74:	080137fc 	.word	0x080137fc
 8001a78:	240002cc 	.word	0x240002cc
 8001a7c:	240002ac 	.word	0x240002ac
 8001a80:	24000284 	.word	0x24000284

08001a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09c      	sub	sp, #112	@ 0x70
 8001a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8e:	224c      	movs	r2, #76	@ 0x4c
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f00f f839 	bl	8010b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f00f f833 	bl	8010b0a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f003 f821 	bl	8004aec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <SystemClock_Config+0xd8>)
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b5c <SystemClock_Config+0xd8>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001aba:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <SystemClock_Config+0xd8>)
 8001abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <SystemClock_Config+0xdc>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001acc:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <SystemClock_Config+0xdc>)
 8001ace:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <SystemClock_Config+0xdc>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ae0:	bf00      	nop
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <SystemClock_Config+0xdc>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aee:	d1f8      	bne.n	8001ae2 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <SystemClock_Config+0xe0>)
 8001af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b64 <SystemClock_Config+0xe0>)
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001afc:	2302      	movs	r3, #2
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b04:	2340      	movs	r3, #64	@ 0x40
 8001b06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 f845 	bl	8004ba0 <HAL_RCC_OscConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b1c:	f000 f8f6 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b20:	233f      	movs	r3, #63	@ 0x3f
 8001b22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b34:	2340      	movs	r3, #64	@ 0x40
 8001b36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2101      	movs	r1, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fc85 	bl	8005454 <HAL_RCC_ClockConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001b50:	f000 f8dc 	bl	8001d0c <Error_Handler>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3770      	adds	r7, #112	@ 0x70
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	58000400 	.word	0x58000400
 8001b60:	58024800 	.word	0x58024800
 8001b64:	58024400 	.word	0x58024400

08001b68 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
/**
 * @brief  Callback de recepción UART completa
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a44      	ldr	r2, [pc, #272]	@ (8001c88 <HAL_UART_RxCpltCallback+0x120>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	f040 8082 	bne.w	8001c80 <HAL_UART_RxCpltCallback+0x118>
    {
        // El caracter recibido está en la posición que se acaba de llenar
        char c = uart_rx_buffer[uart_rx_index];
 8001b7c:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b43      	ldr	r3, [pc, #268]	@ (8001c90 <HAL_UART_RxCpltCallback+0x128>)
 8001b84:	5c9b      	ldrb	r3, [r3, r2]
 8001b86:	73fb      	strb	r3, [r7, #15]

        // 1. Manejo de Backspace/Delete
        if (c == 8 || c == 127) // ASCII 8 (Backspace) o 127 (Delete)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d002      	beq.n	8001b94 <HAL_UART_RxCpltCallback+0x2c>
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b92:	d11a      	bne.n	8001bca <HAL_UART_RxCpltCallback+0x62>
        {
            if (uart_rx_index > 0)
 8001b94:	4b3d      	ldr	r3, [pc, #244]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_UART_RxCpltCallback+0x4c>
            {
                uart_rx_index--; // Retrocede el índice
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b39      	ldr	r3, [pc, #228]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001ba6:	701a      	strb	r2, [r3, #0]

                // Envía el código de borrado a la terminal (Backspace, Espacio, Backspace)
                HAL_UART_Transmit(&huart3, (uint8_t*)"\b \b", 3, 10);
 8001ba8:	230a      	movs	r3, #10
 8001baa:	2203      	movs	r2, #3
 8001bac:	4939      	ldr	r1, [pc, #228]	@ (8001c94 <HAL_UART_RxCpltCallback+0x12c>)
 8001bae:	483a      	ldr	r0, [pc, #232]	@ (8001c98 <HAL_UART_RxCpltCallback+0x130>)
 8001bb0:	f007 fc90 	bl	80094d4 <HAL_UART_Transmit>
            }
            // Reinicia la recepción en el nuevo índice
            HAL_UART_Receive_IT(&huart3, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 8001bb4:	4b35      	ldr	r3, [pc, #212]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b35      	ldr	r3, [pc, #212]	@ (8001c90 <HAL_UART_RxCpltCallback+0x128>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4835      	ldr	r0, [pc, #212]	@ (8001c98 <HAL_UART_RxCpltCallback+0x130>)
 8001bc4:	f007 fd14 	bl	80095f0 <HAL_UART_Receive_IT>
 8001bc8:	e05a      	b.n	8001c80 <HAL_UART_RxCpltCallback+0x118>
            return; // Termina la función para no procesar como comando
        }

        // 2. Echo (Mostrar el caracter)
        HAL_UART_Transmit(&huart3, (uint8_t*)&c, 1, 10);
 8001bca:	f107 010f 	add.w	r1, r7, #15
 8001bce:	230a      	movs	r3, #10
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4831      	ldr	r0, [pc, #196]	@ (8001c98 <HAL_UART_RxCpltCallback+0x130>)
 8001bd4:	f007 fc7e 	bl	80094d4 <HAL_UART_Transmit>

        // 3. Manejo de Fin de Línea (Enter)
        if (c == '\r' || c == '\n')
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b0d      	cmp	r3, #13
 8001bdc:	d002      	beq.n	8001be4 <HAL_UART_RxCpltCallback+0x7c>
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b0a      	cmp	r3, #10
 8001be2:	d12f      	bne.n	8001c44 <HAL_UART_RxCpltCallback+0xdc>
        {
            if (uart_rx_index > 0)
 8001be4:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d027      	beq.n	8001c3c <HAL_UART_RxCpltCallback+0xd4>
            {
                // Sobrescribe el \r o \n con el terminador nulo para el procesamiento
                uart_rx_buffer[uart_rx_index] = '\0';
 8001bec:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <HAL_UART_RxCpltCallback+0x128>)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]

                // Copiar y notificar
                strcpy(uart_cmd_buffer, uart_rx_buffer);
 8001bf8:	4925      	ldr	r1, [pc, #148]	@ (8001c90 <HAL_UART_RxCpltCallback+0x128>)
 8001bfa:	4828      	ldr	r0, [pc, #160]	@ (8001c9c <HAL_UART_RxCpltCallback+0x134>)
 8001bfc:	f00f f817 	bl	8010c2e <strcpy>
                uart_cmd_ready = true;
 8001c00:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <HAL_UART_RxCpltCallback+0x138>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]

                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
                vTaskNotifyGiveFromISR(UARTTaskHandle, &xHigherPriorityTaskWoken);
 8001c0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x13c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f107 0208 	add.w	r2, r7, #8
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00d f801 	bl	800ec1c <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_UART_RxCpltCallback+0xc8>
 8001c20:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x140>)
 8001c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f3bf 8f4f 	dsb	sy
 8001c2c:	f3bf 8f6f 	isb	sy

                HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n> ", 4, 10);
 8001c30:	230a      	movs	r3, #10
 8001c32:	2204      	movs	r2, #4
 8001c34:	491d      	ldr	r1, [pc, #116]	@ (8001cac <HAL_UART_RxCpltCallback+0x144>)
 8001c36:	4818      	ldr	r0, [pc, #96]	@ (8001c98 <HAL_UART_RxCpltCallback+0x130>)
 8001c38:	f007 fc4c 	bl	80094d4 <HAL_UART_Transmit>
            }

            // En cualquier caso (con o sin comando), reinicia para el siguiente
            uart_rx_index = 0;
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	e013      	b.n	8001c6c <HAL_UART_RxCpltCallback+0x104>
        }
        // 4. Manejo de Caracteres Normales
        else if (uart_rx_index < UART_BUFFER_LEN - 1)
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b1e      	cmp	r3, #30
 8001c4a:	d806      	bhi.n	8001c5a <HAL_UART_RxCpltCallback+0xf2>
        {
            uart_rx_index++; // Avanza el índice para la próxima recepción
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	e008      	b.n	8001c6c <HAL_UART_RxCpltCallback+0x104>
        }
        // 5. Desbordamiento de Buffer
        else
        {
            HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n[Buffer Full]\r\n> ", 19, 10);
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	2213      	movs	r2, #19
 8001c5e:	4914      	ldr	r1, [pc, #80]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x148>)
 8001c60:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <HAL_UART_RxCpltCallback+0x130>)
 8001c62:	f007 fc37 	bl	80094d4 <HAL_UART_Transmit>
            uart_rx_index = 0;
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
        }

        // 6. Volver a pedir la recepción del siguiente byte en la nueva posición
        HAL_UART_Receive_IT(&huart3, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 8001c6c:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <HAL_UART_RxCpltCallback+0x124>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <HAL_UART_RxCpltCallback+0x128>)
 8001c74:	4413      	add	r3, r2
 8001c76:	2201      	movs	r2, #1
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <HAL_UART_RxCpltCallback+0x130>)
 8001c7c:	f007 fcb8 	bl	80095f0 <HAL_UART_Receive_IT>
    }
}
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40004800 	.word	0x40004800
 8001c8c:	240002cc 	.word	0x240002cc
 8001c90:	240002ac 	.word	0x240002ac
 8001c94:	08013808 	.word	0x08013808
 8001c98:	24000344 	.word	0x24000344
 8001c9c:	240002d0 	.word	0x240002d0
 8001ca0:	240002f0 	.word	0x240002f0
 8001ca4:	240002a0 	.word	0x240002a0
 8001ca8:	e000ed04 	.word	0xe000ed04
 8001cac:	0801380c 	.word	0x0801380c
 8001cb0:	08013814 	.word	0x08013814

08001cb4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001cc6:	f001 fecf 	bl	8003a68 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001cd6:	231f      	movs	r3, #31
 8001cd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001cda:	2387      	movs	r3, #135	@ 0x87
 8001cdc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cea:	2301      	movs	r3, #1
 8001cec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 feed 	bl	8003ad8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001cfe:	2004      	movs	r0, #4
 8001d00:	f001 feca 	bl	8003a98 <HAL_MPU_Enable>

}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
}
 8001d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <Error_Handler+0x8>

08001d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_MspInit+0x38>)
 8001d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d24:	4a0a      	ldr	r2, [pc, #40]	@ (8001d50 <HAL_MspInit+0x38>)
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <HAL_MspInit+0x38>)
 8001d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f06f 0001 	mvn.w	r0, #1
 8001d44:	f001 fe5b 	bl	80039fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	58024400 	.word	0x58024400

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <NMI_Handler+0x4>

08001d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8e:	f000 fccf 	bl	8002730 <HAL_IncTick>

#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d92:	f00c fd6d 	bl	800e870 <xTaskGetSchedulerState>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d001      	beq.n	8001da0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
    xPortSysTickHandler();
 8001d9c:	f00a febc 	bl	800cb18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f000 fb53 	bl	8002454 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <USART3_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void USART3_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <USART3_IRQHandler+0x10>)
 8001dba:	f007 fc65 	bl	8009688 <HAL_UART_IRQHandler>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	24000344 	.word	0x24000344

08001dc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return 1;
 8001dcc:	2301      	movs	r3, #1
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_kill>:

int _kill(int pid, int sig)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001de2:	f00e fef7 	bl	8010bd4 <__errno>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2216      	movs	r2, #22
 8001dea:	601a      	str	r2, [r3, #0]
  return -1;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_exit>:

void _exit (int status)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ffe7 	bl	8001dd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e0a:	bf00      	nop
 8001e0c:	e7fd      	b.n	8001e0a <_exit+0x12>

08001e0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e00a      	b.n	8001e36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e20:	f3af 8000 	nop.w
 8001e24:	4601      	mov	r1, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	60ba      	str	r2, [r7, #8]
 8001e2c:	b2ca      	uxtb	r2, r1
 8001e2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3301      	adds	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	dbf0      	blt.n	8001e20 <_read+0x12>
  }

  return len;
 8001e3e:	687b      	ldr	r3, [r7, #4]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e009      	b.n	8001e6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	60ba      	str	r2, [r7, #8]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fb76 	bl	8002554 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	dbf1      	blt.n	8001e5a <_write+0x12>
  }
  return len;
 8001e76:	687b      	ldr	r3, [r7, #4]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_close>:

int _close(int file)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ea8:	605a      	str	r2, [r3, #4]
  return 0;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_isatty>:

int _isatty(int file)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef0:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <_sbrk+0x5c>)
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <_sbrk+0x60>)
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001efc:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d102      	bne.n	8001f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <_sbrk+0x64>)
 8001f06:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <_sbrk+0x68>)
 8001f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d207      	bcs.n	8001f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f18:	f00e fe5c 	bl	8010bd4 <__errno>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	220c      	movs	r2, #12
 8001f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f26:	e009      	b.n	8001f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <_sbrk+0x64>)
 8001f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	24080000 	.word	0x24080000
 8001f48:	00000400 	.word	0x00000400
 8001f4c:	240002f4 	.word	0x240002f4
 8001f50:	24004f18 	.word	0x24004f18

08001f54 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08e      	sub	sp, #56	@ 0x38
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f74:	463b      	mov	r3, r7
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f86:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001f88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001f90:	22ef      	movs	r2, #239	@ 0xef
 8001f92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f94:	4b29      	ldr	r3, [pc, #164]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001f9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fa8:	4b24      	ldr	r3, [pc, #144]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001faa:	2280      	movs	r2, #128	@ 0x80
 8001fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fae:	4823      	ldr	r0, [pc, #140]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001fb0:	f006 fada 	bl	8008568 <HAL_TIM_Base_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001fba:	f7ff fea7 	bl	8001d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481c      	ldr	r0, [pc, #112]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001fcc:	f006 fc98 	bl	8008900 <HAL_TIM_ConfigClockSource>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001fd6:	f7ff fe99 	bl	8001d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fda:	4818      	ldr	r0, [pc, #96]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001fdc:	f006 fb1b 	bl	8008616 <HAL_TIM_PWM_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001fe6:	f7ff fe91 	bl	8001d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4810      	ldr	r0, [pc, #64]	@ (800203c <MX_TIM2_Init+0xe8>)
 8001ffa:	f007 f98d 	bl	8009318 <HAL_TIMEx_MasterConfigSynchronization>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002004:	f7ff fe82 	bl	8001d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002008:	2360      	movs	r3, #96	@ 0x60
 800200a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	4619      	mov	r1, r3
 800201e:	4807      	ldr	r0, [pc, #28]	@ (800203c <MX_TIM2_Init+0xe8>)
 8002020:	f006 fb5a 	bl	80086d8 <HAL_TIM_PWM_ConfigChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800202a:	f7ff fe6f 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800202e:	4803      	ldr	r0, [pc, #12]	@ (800203c <MX_TIM2_Init+0xe8>)
 8002030:	f000 f826 	bl	8002080 <HAL_TIM_MspPostInit>

}
 8002034:	bf00      	nop
 8002036:	3738      	adds	r7, #56	@ 0x38
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	240002f8 	.word	0x240002f8

08002040 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002052:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <HAL_TIM_Base_MspInit+0x3c>)
 8002054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002058:	4a08      	ldr	r2, [pc, #32]	@ (800207c <HAL_TIM_Base_MspInit+0x3c>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_TIM_Base_MspInit+0x3c>)
 8002064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	58024400 	.word	0x58024400

08002080 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a0:	d11e      	bne.n	80020e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <HAL_TIM_MspPostInit+0x68>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a8:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <HAL_TIM_MspPostInit+0x68>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020b2:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <HAL_TIM_MspPostInit+0x68>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020c0:	2320      	movs	r3, #32
 80020c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020d0:	2301      	movs	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	4619      	mov	r1, r3
 80020da:	4804      	ldr	r0, [pc, #16]	@ (80020ec <HAL_TIM_MspPostInit+0x6c>)
 80020dc:	f002 fb22 	bl	8004724 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58020000 	.word	0x58020000

080020f0 <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */
void MX_USART3_UART_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020f4:	4b22      	ldr	r3, [pc, #136]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 80020f6:	4a23      	ldr	r2, [pc, #140]	@ (8002184 <MX_USART3_UART_Init+0x94>)
 80020f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020fa:	4b21      	ldr	r3, [pc, #132]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 80020fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b1f      	ldr	r3, [pc, #124]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800210e:	4b1c      	ldr	r3, [pc, #112]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b19      	ldr	r3, [pc, #100]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002120:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002126:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800212c:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002132:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002138:	4811      	ldr	r0, [pc, #68]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 800213a:	f007 f97b 	bl	8009434 <HAL_UART_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002144:	f7ff fde2 	bl	8001d0c <Error_Handler>
  }

  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002148:	2100      	movs	r1, #0
 800214a:	480d      	ldr	r0, [pc, #52]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 800214c:	f009 fcf1 	bl	800bb32 <HAL_UARTEx_SetTxFifoThreshold>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002156:	f7ff fdd9 	bl	8001d0c <Error_Handler>
  }

  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800215a:	2100      	movs	r1, #0
 800215c:	4808      	ldr	r0, [pc, #32]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 800215e:	f009 fd26 	bl	800bbae <HAL_UARTEx_SetRxFifoThreshold>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002168:	f7ff fdd0 	bl	8001d0c <Error_Handler>
  }

  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	@ (8002180 <MX_USART3_UART_Init+0x90>)
 800216e:	f009 fca7 	bl	800bac0 <HAL_UARTEx_DisableFifoMode>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002178:	f7ff fdc8 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	24000344 	.word	0x24000344
 8002184:	40004800 	.word	0x40004800

08002188 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	@ 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002220 <HAL_UART_MspInit+0x98>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d136      	bne.n	8002218 <HAL_UART_MspInit+0x90>
  {
    __HAL_RCC_USART3_CLK_ENABLE();
 80021aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <HAL_UART_MspInit+0x9c>)
 80021ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002224 <HAL_UART_MspInit+0x9c>)
 80021b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <HAL_UART_MspInit+0x9c>)
 80021bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c8:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <HAL_UART_MspInit+0x9c>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ce:	4a15      	ldr	r2, [pc, #84]	@ (8002224 <HAL_UART_MspInit+0x9c>)
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_UART_MspInit+0x9c>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

    // Pines típicos para USART3 en STM32H7
    // PD8: TX, PD9: RX
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021f8:	2307      	movs	r3, #7
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	4809      	ldr	r0, [pc, #36]	@ (8002228 <HAL_UART_MspInit+0xa0>)
 8002204:	f002 fa8e 	bl	8004724 <HAL_GPIO_Init>

    // HABILITAR INTERRUPCIÓN
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2105      	movs	r1, #5
 800220c:	2027      	movs	r0, #39	@ 0x27
 800220e:	f001 fbf6 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002212:	2027      	movs	r0, #39	@ 0x27
 8002214:	f001 fc0d 	bl	8003a32 <HAL_NVIC_EnableIRQ>
  }
}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	@ 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40004800 	.word	0x40004800
 8002224:	58024400 	.word	0x58024400
 8002228:	58020c00 	.word	0x58020c00

0800222c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800222c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002268 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002230:	f7fe fcf6 	bl	8000c20 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002234:	f7fe fc46 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002238:	480c      	ldr	r0, [pc, #48]	@ (800226c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800223a:	490d      	ldr	r1, [pc, #52]	@ (8002270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800223c:	4a0d      	ldr	r2, [pc, #52]	@ (8002274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002240:	e002      	b.n	8002248 <LoopCopyDataInit>

08002242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002246:	3304      	adds	r3, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800224c:	d3f9      	bcc.n	8002242 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224e:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002250:	4c0a      	ldr	r4, [pc, #40]	@ (800227c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002254:	e001      	b.n	800225a <LoopFillZerobss>

08002256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002258:	3204      	adds	r2, #4

0800225a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800225c:	d3fb      	bcc.n	8002256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800225e:	f00e fcbf 	bl	8010be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002262:	f7ff fb1d 	bl	80018a0 <main>
  bx  lr
 8002266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002268:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800226c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002270:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 8002274:	08013ce4 	.word	0x08013ce4
  ldr r2, =_sbss
 8002278:	24000200 	.word	0x24000200
  ldr r4, =_ebss
 800227c:	24004f18 	.word	0x24004f18

08002280 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC3_IRQHandler>
	...

08002284 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	@ 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800228e:	2300      	movs	r3, #0
 8002290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d009      	beq.n	80022ac <BSP_LED_Init+0x28>
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d006      	beq.n	80022ac <BSP_LED_Init+0x28>
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d003      	beq.n	80022ac <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022a4:	f06f 0301 	mvn.w	r3, #1
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022aa:	e055      	b.n	8002358 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80022b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <BSP_LED_Init+0xe0>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002364 <BSP_LED_Init+0xe0>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c2:	4b28      	ldr	r3, [pc, #160]	@ (8002364 <BSP_LED_Init+0xe0>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	e021      	b.n	8002316 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10f      	bne.n	80022f8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80022d8:	4b22      	ldr	r3, [pc, #136]	@ (8002364 <BSP_LED_Init+0xe0>)
 80022da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022de:	4a21      	ldr	r2, [pc, #132]	@ (8002364 <BSP_LED_Init+0xe0>)
 80022e0:	f043 0310 	orr.w	r3, r3, #16
 80022e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <BSP_LED_Init+0xe0>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	e00e      	b.n	8002316 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80022f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002364 <BSP_LED_Init+0xe0>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fe:	4a19      	ldr	r2, [pc, #100]	@ (8002364 <BSP_LED_Init+0xe0>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002308:	4b16      	ldr	r3, [pc, #88]	@ (8002364 <BSP_LED_Init+0xe0>)
 800230a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	4a13      	ldr	r2, [pc, #76]	@ (8002368 <BSP_LED_Init+0xe4>)
 800231a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800231e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	4a0f      	ldr	r2, [pc, #60]	@ (800236c <BSP_LED_Init+0xe8>)
 8002330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002334:	f107 0218 	add.w	r2, r7, #24
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f002 f9f2 	bl	8004724 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <BSP_LED_Init+0xe8>)
 8002344:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	4a07      	ldr	r2, [pc, #28]	@ (8002368 <BSP_LED_Init+0xe4>)
 800234c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002350:	2200      	movs	r2, #0
 8002352:	4619      	mov	r1, r3
 8002354:	f002 fb96 	bl	8004a84 <HAL_GPIO_WritePin>
  }

  return ret;
 8002358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800235a:	4618      	mov	r0, r3
 800235c:	3730      	adds	r7, #48	@ 0x30
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	58024400 	.word	0x58024400
 8002368:	08013874 	.word	0x08013874
 800236c:	24000014 	.word	0x24000014

08002370 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	460a      	mov	r2, r1
 800237a:	71fb      	strb	r3, [r7, #7]
 800237c:	4613      	mov	r3, r2
 800237e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002380:	4b2e      	ldr	r3, [pc, #184]	@ (800243c <BSP_PB_Init+0xcc>)
 8002382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002386:	4a2d      	ldr	r2, [pc, #180]	@ (800243c <BSP_PB_Init+0xcc>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002390:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <BSP_PB_Init+0xcc>)
 8002392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800239e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023a2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80023a4:	2302      	movs	r3, #2
 80023a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4a21      	ldr	r2, [pc, #132]	@ (8002440 <BSP_PB_Init+0xd0>)
 80023ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023be:	f107 020c 	add.w	r2, r7, #12
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 f9ad 	bl	8004724 <HAL_GPIO_Init>
 80023ca:	e031      	b.n	8002430 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80023cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023d0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002440 <BSP_PB_Init+0xd0>)
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	f107 020c 	add.w	r2, r7, #12
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 f99f 	bl	8004724 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4a16      	ldr	r2, [pc, #88]	@ (8002444 <BSP_PB_Init+0xd4>)
 80023ec:	441a      	add	r2, r3
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	4915      	ldr	r1, [pc, #84]	@ (8002448 <BSP_PB_Init+0xd8>)
 80023f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f002 f942 	bl	8004682 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4a10      	ldr	r2, [pc, #64]	@ (8002444 <BSP_PB_Init+0xd4>)
 8002404:	1898      	adds	r0, r3, r2
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	4a10      	ldr	r2, [pc, #64]	@ (800244c <BSP_PB_Init+0xdc>)
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	461a      	mov	r2, r3
 8002410:	2100      	movs	r1, #0
 8002412:	f002 f917 	bl	8004644 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002416:	2028      	movs	r0, #40	@ 0x28
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <BSP_PB_Init+0xe0>)
 800241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002420:	2200      	movs	r2, #0
 8002422:	4619      	mov	r1, r3
 8002424:	f001 faeb 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002428:	2328      	movs	r3, #40	@ 0x28
 800242a:	4618      	mov	r0, r3
 800242c:	f001 fb01 	bl	8003a32 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	58024400 	.word	0x58024400
 8002440:	24000020 	.word	0x24000020
 8002444:	240003d8 	.word	0x240003d8
 8002448:	0801387c 	.word	0x0801387c
 800244c:	24000024 	.word	0x24000024
 8002450:	24000028 	.word	0x24000028

08002454 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <BSP_PB_IRQHandler+0x20>)
 8002464:	4413      	add	r3, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f002 f920 	bl	80046ac <HAL_EXTI_IRQHandler>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	240003d8 	.word	0x240003d8

08002478 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024a6:	f06f 0301 	mvn.w	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e018      	b.n	80024e0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2294      	movs	r2, #148	@ 0x94
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <BSP_COM_Init+0x5c>)
 80024b8:	4413      	add	r3, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f86e 	bl	800259c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2294      	movs	r2, #148	@ 0x94
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	4a08      	ldr	r2, [pc, #32]	@ (80024ec <BSP_COM_Init+0x5c>)
 80024ca:	4413      	add	r3, r2
 80024cc:	6839      	ldr	r1, [r7, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f80e 	bl	80024f0 <MX_USART3_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80024da:	f06f 0303 	mvn.w	r3, #3
 80024de:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80024e0:	68fb      	ldr	r3, [r7, #12]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	240003e0 	.word	0x240003e0

080024f0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <MX_USART3_Init+0x60>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	220c      	movs	r2, #12
 800250e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	895b      	ldrh	r3, [r3, #10]
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	891b      	ldrh	r3, [r3, #8]
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	899b      	ldrh	r3, [r3, #12]
 8002530:	461a      	mov	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800253c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f006 ff78 	bl	8009434 <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	24000010 	.word	0x24000010

08002554 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800255c:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <__io_putchar+0x30>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	2394      	movs	r3, #148	@ 0x94
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	4a07      	ldr	r2, [pc, #28]	@ (8002588 <__io_putchar+0x34>)
 800256a:	1898      	adds	r0, r3, r2
 800256c:	1d39      	adds	r1, r7, #4
 800256e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002572:	2201      	movs	r2, #1
 8002574:	f006 ffae 	bl	80094d4 <HAL_UART_Transmit>
  return ch;
 8002578:	687b      	ldr	r3, [r7, #4]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	24000474 	.word	0x24000474
 8002588:	240003e0 	.word	0x240003e0

0800258c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002590:	2000      	movs	r0, #0
 8002592:	f7ff ff71 	bl	8002478 <BSP_PB_Callback>
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	@ 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80025a4:	4b27      	ldr	r3, [pc, #156]	@ (8002644 <COM1_MspInit+0xa8>)
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025aa:	4a26      	ldr	r2, [pc, #152]	@ (8002644 <COM1_MspInit+0xa8>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b4:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <COM1_MspInit+0xa8>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80025c2:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <COM1_MspInit+0xa8>)
 80025c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002644 <COM1_MspInit+0xa8>)
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <COM1_MspInit+0xa8>)
 80025d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80025e0:	4b18      	ldr	r3, [pc, #96]	@ (8002644 <COM1_MspInit+0xa8>)
 80025e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025e6:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <COM1_MspInit+0xa8>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025f0:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <COM1_MspInit+0xa8>)
 80025f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80025fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002602:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002608:	2302      	movs	r3, #2
 800260a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800260c:	2301      	movs	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002610:	2307      	movs	r3, #7
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	4619      	mov	r1, r3
 800261a:	480b      	ldr	r0, [pc, #44]	@ (8002648 <COM1_MspInit+0xac>)
 800261c:	f002 f882 	bl	8004724 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002624:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800262a:	2307      	movs	r3, #7
 800262c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4619      	mov	r1, r3
 8002634:	4804      	ldr	r0, [pc, #16]	@ (8002648 <COM1_MspInit+0xac>)
 8002636:	f002 f875 	bl	8004724 <HAL_GPIO_Init>
}
 800263a:	bf00      	nop
 800263c:	3728      	adds	r7, #40	@ 0x28
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	58024400 	.word	0x58024400
 8002648:	58020c00 	.word	0x58020c00

0800264c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002652:	2003      	movs	r0, #3
 8002654:	f001 f9c8 	bl	80039e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002658:	f003 f8b2 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_Init+0x68>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	4913      	ldr	r1, [pc, #76]	@ (80026b8 <HAL_Init+0x6c>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002676:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <HAL_Init+0x68>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	4a0e      	ldr	r2, [pc, #56]	@ (80026b8 <HAL_Init+0x6c>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_Init+0x70>)
 800268e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002690:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_Init+0x74>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002696:	200f      	movs	r0, #15
 8002698:	f000 f814 	bl	80026c4 <HAL_InitTick>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e002      	b.n	80026ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026a6:	f7ff fb37 	bl	8001d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	58024400 	.word	0x58024400
 80026b8:	08013840 	.word	0x08013840
 80026bc:	24000004 	.word	0x24000004
 80026c0:	24000000 	.word	0x24000000

080026c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026cc:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_InitTick+0x60>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e021      	b.n	800271c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026d8:	4b13      	ldr	r3, [pc, #76]	@ (8002728 <HAL_InitTick+0x64>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_InitTick+0x60>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f9ad 	bl	8003a4e <HAL_SYSTICK_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00e      	b.n	800271c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d80a      	bhi.n	800271a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002704:	2200      	movs	r2, #0
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800270c:	f001 f977 	bl	80039fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002710:	4a06      	ldr	r2, [pc, #24]	@ (800272c <HAL_InitTick+0x68>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	24000030 	.word	0x24000030
 8002728:	24000000 	.word	0x24000000
 800272c:	2400002c 	.word	0x2400002c

08002730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_IncTick+0x20>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <HAL_IncTick+0x24>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <HAL_IncTick+0x24>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	24000030 	.word	0x24000030
 8002754:	24000478 	.word	0x24000478

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	24000478 	.word	0x24000478

08002770 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <HAL_GetREVID+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0c1b      	lsrs	r3, r3, #16
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	5c001000 	.word	0x5c001000

08002788 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	609a      	str	r2, [r3, #8]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <LL_ADC_SetChannelPreselection+0x24>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	0e9b      	lsrs	r3, r3, #26
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2201      	movs	r2, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	e015      	b.n	8002840 <LL_ADC_SetChannelPreselection+0x50>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800282a:	2320      	movs	r3, #32
 800282c:	e003      	b.n	8002836 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	2201      	movs	r2, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	69d2      	ldr	r2, [r2, #28]
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002856:	b480      	push	{r7}
 8002858:	b087      	sub	sp, #28
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3360      	adds	r3, #96	@ 0x60
 8002868:	461a      	mov	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	430b      	orrs	r3, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	431a      	orrs	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	611a      	str	r2, [r3, #16]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3360      	adds	r3, #96	@ 0x60
 80028d8:	461a      	mov	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	601a      	str	r2, [r3, #0]
  }
}
 80028f2:	bf00      	nop
 80028f4:	371c      	adds	r7, #28
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028fe:	b480      	push	{r7}
 8002900:	b087      	sub	sp, #28
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3330      	adds	r3, #48	@ 0x30
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	4413      	add	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	211f      	movs	r1, #31
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	401a      	ands	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	f003 011f 	and.w	r1, r3, #31
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	431a      	orrs	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002956:	b480      	push	{r7}
 8002958:	b087      	sub	sp, #28
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3314      	adds	r3, #20
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	0e5b      	lsrs	r3, r3, #25
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	4413      	add	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	0d1b      	lsrs	r3, r3, #20
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2107      	movs	r1, #7
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0d1b      	lsrs	r3, r3, #20
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	431a      	orrs	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c4:	43db      	mvns	r3, r3
 80029c6:	401a      	ands	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0318 	and.w	r3, r3, #24
 80029ce:	4908      	ldr	r1, [pc, #32]	@ (80029f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029d0:	40d9      	lsrs	r1, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	400b      	ands	r3, r1
 80029d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029da:	431a      	orrs	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	000fffff 	.word	0x000fffff

080029f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6093      	str	r3, [r2, #8]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	5fffffc0 	.word	0x5fffffc0

08002a18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a2c:	d101      	bne.n	8002a32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <LL_ADC_EnableInternalRegulator+0x24>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	6fffffc0 	.word	0x6fffffc0

08002a68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a7c:	d101      	bne.n	8002a82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <LL_ADC_IsEnabled+0x18>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <LL_ADC_IsEnabled+0x1a>
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d101      	bne.n	8002ace <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d101      	bne.n	8002af4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e18f      	b.n	8002e3e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fe f90b 	bl	8000d48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff67 	bl	8002a18 <LL_ADC_IsDeepPowerDownEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ff4d 	bl	80029f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff82 	bl	8002a68 <LL_ADC_IsInternalRegulatorEnabled>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d114      	bne.n	8002b94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff66 	bl	8002a40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b74:	4b87      	ldr	r3, [pc, #540]	@ (8002d94 <HAL_ADC_Init+0x290>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	4a87      	ldr	r2, [pc, #540]	@ (8002d98 <HAL_ADC_Init+0x294>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	3301      	adds	r3, #1
 8002b84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b86:	e002      	b.n	8002b8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f9      	bne.n	8002b88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff65 	bl	8002a68 <LL_ADC_IsInternalRegulatorEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10d      	bne.n	8002bc0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	f043 0210 	orr.w	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff76 	bl	8002ab6 <LL_ADC_REG_IsConversionOngoing>
 8002bca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 8129 	bne.w	8002e2c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 8125 	bne.w	8002e2c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002bea:	f043 0202 	orr.w	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff4a 	bl	8002a90 <LL_ADC_IsEnabled>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d136      	bne.n	8002c70 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a65      	ldr	r2, [pc, #404]	@ (8002d9c <HAL_ADC_Init+0x298>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_ADC_Init+0x112>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a63      	ldr	r2, [pc, #396]	@ (8002da0 <HAL_ADC_Init+0x29c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10e      	bne.n	8002c34 <HAL_ADC_Init+0x130>
 8002c16:	4861      	ldr	r0, [pc, #388]	@ (8002d9c <HAL_ADC_Init+0x298>)
 8002c18:	f7ff ff3a 	bl	8002a90 <LL_ADC_IsEnabled>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	4860      	ldr	r0, [pc, #384]	@ (8002da0 <HAL_ADC_Init+0x29c>)
 8002c20:	f7ff ff36 	bl	8002a90 <LL_ADC_IsEnabled>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4323      	orrs	r3, r4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_Init+0x142>
 8002c34:	485b      	ldr	r0, [pc, #364]	@ (8002da4 <HAL_ADC_Init+0x2a0>)
 8002c36:	f7ff ff2b 	bl	8002a90 <LL_ADC_IsEnabled>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a53      	ldr	r2, [pc, #332]	@ (8002d9c <HAL_ADC_Init+0x298>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_ADC_Init+0x15a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a51      	ldr	r2, [pc, #324]	@ (8002da0 <HAL_ADC_Init+0x29c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_Init+0x15e>
 8002c5e:	4a52      	ldr	r2, [pc, #328]	@ (8002da8 <HAL_ADC_Init+0x2a4>)
 8002c60:	e000      	b.n	8002c64 <HAL_ADC_Init+0x160>
 8002c62:	4a52      	ldr	r2, [pc, #328]	@ (8002dac <HAL_ADC_Init+0x2a8>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f7ff fd8c 	bl	8002788 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c70:	f7ff fd7e 	bl	8002770 <HAL_GetREVID>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d914      	bls.n	8002ca8 <HAL_ADC_Init+0x1a4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d110      	bne.n	8002ca8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7d5b      	ldrb	r3, [r3, #21]
 8002c8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c90:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c96:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7f1b      	ldrb	r3, [r3, #28]
 8002c9c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c9e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca0:	f043 030c 	orr.w	r3, r3, #12
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e00d      	b.n	8002cc4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7d5b      	ldrb	r3, [r3, #21]
 8002cac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cb2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002cb8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7f1b      	ldrb	r3, [r3, #28]
 8002cbe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7f1b      	ldrb	r3, [r3, #28]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	045b      	lsls	r3, r3, #17
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8002db0 <HAL_ADC_Init+0x2ac>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	69b9      	ldr	r1, [r7, #24]
 8002d06:	430b      	orrs	r3, r1
 8002d08:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fed1 	bl	8002ab6 <LL_ADC_REG_IsConversionOngoing>
 8002d14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fede 	bl	8002adc <LL_ADC_INJ_IsConversionOngoing>
 8002d20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d15f      	bne.n	8002de8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d15c      	bne.n	8002de8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7d1b      	ldrb	r3, [r3, #20]
 8002d32:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <HAL_ADC_Init+0x2b0>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d130      	bne.n	8002dbc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <HAL_ADC_Init+0x2b4>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d6e:	3a01      	subs	r2, #1
 8002d70:	0411      	lsls	r1, r2, #16
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d7c:	4311      	orrs	r1, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d82:	430a      	orrs	r2, r1
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	611a      	str	r2, [r3, #16]
 8002d90:	e01c      	b.n	8002dcc <HAL_ADC_Init+0x2c8>
 8002d92:	bf00      	nop
 8002d94:	24000000 	.word	0x24000000
 8002d98:	053e2d63 	.word	0x053e2d63
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40022100 	.word	0x40022100
 8002da4:	58026000 	.word	0x58026000
 8002da8:	40022300 	.word	0x40022300
 8002dac:	58026300 	.word	0x58026300
 8002db0:	fff0c003 	.word	0xfff0c003
 8002db4:	ffffbffc 	.word	0xffffbffc
 8002db8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fb20 	bl	8003428 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d10c      	bne.n	8002e0a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f023 010f 	bic.w	r1, r3, #15
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	1e5a      	subs	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e08:	e007      	b.n	8002e1a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 020f 	bic.w	r2, r2, #15
 8002e18:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1e:	f023 0303 	bic.w	r3, r3, #3
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e2a:	e007      	b.n	8002e3c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3724      	adds	r7, #36	@ 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd90      	pop	{r4, r7, pc}
 8002e46:	bf00      	nop

08002e48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b08d      	sub	sp, #52	@ 0x34
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a65      	ldr	r2, [pc, #404]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x1b0>)
 8002e62:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x2a>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e2c7      	b.n	8003402 <HAL_ADC_ConfigChannel+0x5ba>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fe19 	bl	8002ab6 <LL_ADC_REG_IsConversionOngoing>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 82ac 	bne.w	80033e4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db2c      	blt.n	8002eee <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d108      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x6a>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2201      	movs	r2, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	e016      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x98>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	613b      	str	r3, [r7, #16]
  return result;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002eca:	2320      	movs	r3, #32
 8002ecc:	e003      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2201      	movs	r2, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	69d1      	ldr	r1, [r2, #28]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	430b      	orrs	r3, r1
 8002eec:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7ff fcff 	bl	80028fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fdd6 	bl	8002ab6 <LL_ADC_REG_IsConversionOngoing>
 8002f0a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fde3 	bl	8002adc <LL_ADC_INJ_IsConversionOngoing>
 8002f16:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80b8 	bne.w	8003090 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 80b4 	bne.w	8003090 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6819      	ldr	r1, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	461a      	mov	r2, r3
 8002f36:	f7ff fd0e 	bl	8002956 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f3a:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <HAL_ADC_ConfigChannel+0x1b4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f46:	d10b      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x118>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	e01d      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x154>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x13e>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	e00a      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x154>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d02c      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6919      	ldr	r1, [r3, #16]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	f7ff fc4f 	bl	8002856 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6919      	ldr	r1, [r3, #16]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	7e5b      	ldrb	r3, [r3, #25]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d102      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x186>
 8002fc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002fcc:	e000      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x188>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f7ff fc79 	bl	80028c8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6919      	ldr	r1, [r3, #16]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	7e1b      	ldrb	r3, [r3, #24]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d102      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1a4>
 8002fe6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fea:	e000      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1a6>
 8002fec:	2300      	movs	r3, #0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f7ff fc51 	bl	8002896 <LL_ADC_SetDataRightShift>
 8002ff4:	e04c      	b.n	8003090 <HAL_ADC_ConfigChannel+0x248>
 8002ff6:	bf00      	nop
 8002ff8:	47ff0000 	.word	0x47ff0000
 8002ffc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003006:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	069b      	lsls	r3, r3, #26
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003022:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800302a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	069b      	lsls	r3, r3, #26
 8003034:	429a      	cmp	r2, r3
 8003036:	d107      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003046:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800304e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	069b      	lsls	r3, r3, #26
 8003058:	429a      	cmp	r2, r3
 800305a:	d107      	bne.n	800306c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800306a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003072:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	069b      	lsls	r3, r3, #26
 800307c:	429a      	cmp	r2, r3
 800307e:	d107      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800308e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fcfb 	bl	8002a90 <LL_ADC_IsEnabled>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 81aa 	bne.w	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f7ff fc7c 	bl	80029ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a87      	ldr	r2, [pc, #540]	@ (80032d8 <HAL_ADC_ConfigChannel+0x490>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	f040 809a 	bne.w	80031f4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4984      	ldr	r1, [pc, #528]	@ (80032dc <HAL_ADC_ConfigChannel+0x494>)
 80030ca:	428b      	cmp	r3, r1
 80030cc:	d147      	bne.n	800315e <HAL_ADC_ConfigChannel+0x316>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4983      	ldr	r1, [pc, #524]	@ (80032e0 <HAL_ADC_ConfigChannel+0x498>)
 80030d4:	428b      	cmp	r3, r1
 80030d6:	d040      	beq.n	800315a <HAL_ADC_ConfigChannel+0x312>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4981      	ldr	r1, [pc, #516]	@ (80032e4 <HAL_ADC_ConfigChannel+0x49c>)
 80030de:	428b      	cmp	r3, r1
 80030e0:	d039      	beq.n	8003156 <HAL_ADC_ConfigChannel+0x30e>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4980      	ldr	r1, [pc, #512]	@ (80032e8 <HAL_ADC_ConfigChannel+0x4a0>)
 80030e8:	428b      	cmp	r3, r1
 80030ea:	d032      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x30a>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	497e      	ldr	r1, [pc, #504]	@ (80032ec <HAL_ADC_ConfigChannel+0x4a4>)
 80030f2:	428b      	cmp	r3, r1
 80030f4:	d02b      	beq.n	800314e <HAL_ADC_ConfigChannel+0x306>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	497d      	ldr	r1, [pc, #500]	@ (80032f0 <HAL_ADC_ConfigChannel+0x4a8>)
 80030fc:	428b      	cmp	r3, r1
 80030fe:	d024      	beq.n	800314a <HAL_ADC_ConfigChannel+0x302>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	497b      	ldr	r1, [pc, #492]	@ (80032f4 <HAL_ADC_ConfigChannel+0x4ac>)
 8003106:	428b      	cmp	r3, r1
 8003108:	d01d      	beq.n	8003146 <HAL_ADC_ConfigChannel+0x2fe>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	497a      	ldr	r1, [pc, #488]	@ (80032f8 <HAL_ADC_ConfigChannel+0x4b0>)
 8003110:	428b      	cmp	r3, r1
 8003112:	d016      	beq.n	8003142 <HAL_ADC_ConfigChannel+0x2fa>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4978      	ldr	r1, [pc, #480]	@ (80032fc <HAL_ADC_ConfigChannel+0x4b4>)
 800311a:	428b      	cmp	r3, r1
 800311c:	d00f      	beq.n	800313e <HAL_ADC_ConfigChannel+0x2f6>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4977      	ldr	r1, [pc, #476]	@ (8003300 <HAL_ADC_ConfigChannel+0x4b8>)
 8003124:	428b      	cmp	r3, r1
 8003126:	d008      	beq.n	800313a <HAL_ADC_ConfigChannel+0x2f2>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4975      	ldr	r1, [pc, #468]	@ (8003304 <HAL_ADC_ConfigChannel+0x4bc>)
 800312e:	428b      	cmp	r3, r1
 8003130:	d101      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x2ee>
 8003132:	4b75      	ldr	r3, [pc, #468]	@ (8003308 <HAL_ADC_ConfigChannel+0x4c0>)
 8003134:	e05a      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 8003136:	2300      	movs	r3, #0
 8003138:	e058      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 800313a:	4b74      	ldr	r3, [pc, #464]	@ (800330c <HAL_ADC_ConfigChannel+0x4c4>)
 800313c:	e056      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 800313e:	4b74      	ldr	r3, [pc, #464]	@ (8003310 <HAL_ADC_ConfigChannel+0x4c8>)
 8003140:	e054      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 8003142:	4b6e      	ldr	r3, [pc, #440]	@ (80032fc <HAL_ADC_ConfigChannel+0x4b4>)
 8003144:	e052      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 8003146:	4b6c      	ldr	r3, [pc, #432]	@ (80032f8 <HAL_ADC_ConfigChannel+0x4b0>)
 8003148:	e050      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 800314a:	4b72      	ldr	r3, [pc, #456]	@ (8003314 <HAL_ADC_ConfigChannel+0x4cc>)
 800314c:	e04e      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 800314e:	4b72      	ldr	r3, [pc, #456]	@ (8003318 <HAL_ADC_ConfigChannel+0x4d0>)
 8003150:	e04c      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 8003152:	4b72      	ldr	r3, [pc, #456]	@ (800331c <HAL_ADC_ConfigChannel+0x4d4>)
 8003154:	e04a      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 8003156:	4b72      	ldr	r3, [pc, #456]	@ (8003320 <HAL_ADC_ConfigChannel+0x4d8>)
 8003158:	e048      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 800315a:	2301      	movs	r3, #1
 800315c:	e046      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4970      	ldr	r1, [pc, #448]	@ (8003324 <HAL_ADC_ConfigChannel+0x4dc>)
 8003164:	428b      	cmp	r3, r1
 8003166:	d140      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x3a2>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	495c      	ldr	r1, [pc, #368]	@ (80032e0 <HAL_ADC_ConfigChannel+0x498>)
 800316e:	428b      	cmp	r3, r1
 8003170:	d039      	beq.n	80031e6 <HAL_ADC_ConfigChannel+0x39e>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	495b      	ldr	r1, [pc, #364]	@ (80032e4 <HAL_ADC_ConfigChannel+0x49c>)
 8003178:	428b      	cmp	r3, r1
 800317a:	d032      	beq.n	80031e2 <HAL_ADC_ConfigChannel+0x39a>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4959      	ldr	r1, [pc, #356]	@ (80032e8 <HAL_ADC_ConfigChannel+0x4a0>)
 8003182:	428b      	cmp	r3, r1
 8003184:	d02b      	beq.n	80031de <HAL_ADC_ConfigChannel+0x396>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4958      	ldr	r1, [pc, #352]	@ (80032ec <HAL_ADC_ConfigChannel+0x4a4>)
 800318c:	428b      	cmp	r3, r1
 800318e:	d024      	beq.n	80031da <HAL_ADC_ConfigChannel+0x392>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4956      	ldr	r1, [pc, #344]	@ (80032f0 <HAL_ADC_ConfigChannel+0x4a8>)
 8003196:	428b      	cmp	r3, r1
 8003198:	d01d      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x38e>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4955      	ldr	r1, [pc, #340]	@ (80032f4 <HAL_ADC_ConfigChannel+0x4ac>)
 80031a0:	428b      	cmp	r3, r1
 80031a2:	d016      	beq.n	80031d2 <HAL_ADC_ConfigChannel+0x38a>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4953      	ldr	r1, [pc, #332]	@ (80032f8 <HAL_ADC_ConfigChannel+0x4b0>)
 80031aa:	428b      	cmp	r3, r1
 80031ac:	d00f      	beq.n	80031ce <HAL_ADC_ConfigChannel+0x386>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4952      	ldr	r1, [pc, #328]	@ (80032fc <HAL_ADC_ConfigChannel+0x4b4>)
 80031b4:	428b      	cmp	r3, r1
 80031b6:	d008      	beq.n	80031ca <HAL_ADC_ConfigChannel+0x382>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4951      	ldr	r1, [pc, #324]	@ (8003304 <HAL_ADC_ConfigChannel+0x4bc>)
 80031be:	428b      	cmp	r3, r1
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x37e>
 80031c2:	4b51      	ldr	r3, [pc, #324]	@ (8003308 <HAL_ADC_ConfigChannel+0x4c0>)
 80031c4:	e012      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031c6:	2300      	movs	r3, #0
 80031c8:	e010      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031ca:	4b51      	ldr	r3, [pc, #324]	@ (8003310 <HAL_ADC_ConfigChannel+0x4c8>)
 80031cc:	e00e      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031ce:	4b4b      	ldr	r3, [pc, #300]	@ (80032fc <HAL_ADC_ConfigChannel+0x4b4>)
 80031d0:	e00c      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031d2:	4b49      	ldr	r3, [pc, #292]	@ (80032f8 <HAL_ADC_ConfigChannel+0x4b0>)
 80031d4:	e00a      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031d6:	4b4f      	ldr	r3, [pc, #316]	@ (8003314 <HAL_ADC_ConfigChannel+0x4cc>)
 80031d8:	e008      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031da:	4b4f      	ldr	r3, [pc, #316]	@ (8003318 <HAL_ADC_ConfigChannel+0x4d0>)
 80031dc:	e006      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031de:	4b4f      	ldr	r3, [pc, #316]	@ (800331c <HAL_ADC_ConfigChannel+0x4d4>)
 80031e0:	e004      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003320 <HAL_ADC_ConfigChannel+0x4d8>)
 80031e4:	e002      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_ADC_ConfigChannel+0x3a4>
 80031ea:	2300      	movs	r3, #0
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f7ff fafe 	bl	80027f0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f280 80fc 	bge.w	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a36      	ldr	r2, [pc, #216]	@ (80032dc <HAL_ADC_ConfigChannel+0x494>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x3ca>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a45      	ldr	r2, [pc, #276]	@ (8003324 <HAL_ADC_ConfigChannel+0x4dc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x3ce>
 8003212:	4b45      	ldr	r3, [pc, #276]	@ (8003328 <HAL_ADC_ConfigChannel+0x4e0>)
 8003214:	e000      	b.n	8003218 <HAL_ADC_ConfigChannel+0x3d0>
 8003216:	4b45      	ldr	r3, [pc, #276]	@ (800332c <HAL_ADC_ConfigChannel+0x4e4>)
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fadb 	bl	80027d4 <LL_ADC_GetCommonPathInternalCh>
 800321e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a2d      	ldr	r2, [pc, #180]	@ (80032dc <HAL_ADC_ConfigChannel+0x494>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <HAL_ADC_ConfigChannel+0x3ec>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3d      	ldr	r2, [pc, #244]	@ (8003324 <HAL_ADC_ConfigChannel+0x4dc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10e      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x40a>
 8003234:	4829      	ldr	r0, [pc, #164]	@ (80032dc <HAL_ADC_ConfigChannel+0x494>)
 8003236:	f7ff fc2b 	bl	8002a90 <LL_ADC_IsEnabled>
 800323a:	4604      	mov	r4, r0
 800323c:	4839      	ldr	r0, [pc, #228]	@ (8003324 <HAL_ADC_ConfigChannel+0x4dc>)
 800323e:	f7ff fc27 	bl	8002a90 <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	4323      	orrs	r3, r4
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e008      	b.n	8003264 <HAL_ADC_ConfigChannel+0x41c>
 8003252:	4837      	ldr	r0, [pc, #220]	@ (8003330 <HAL_ADC_ConfigChannel+0x4e8>)
 8003254:	f7ff fc1c 	bl	8002a90 <LL_ADC_IsEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80b3 	beq.w	80033d0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a31      	ldr	r2, [pc, #196]	@ (8003334 <HAL_ADC_ConfigChannel+0x4ec>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d165      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x4f8>
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d160      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2b      	ldr	r2, [pc, #172]	@ (8003330 <HAL_ADC_ConfigChannel+0x4e8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	f040 80b6 	bne.w	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a13      	ldr	r2, [pc, #76]	@ (80032dc <HAL_ADC_ConfigChannel+0x494>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_ADC_ConfigChannel+0x456>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a22      	ldr	r2, [pc, #136]	@ (8003324 <HAL_ADC_ConfigChannel+0x4dc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x45a>
 800329e:	4a22      	ldr	r2, [pc, #136]	@ (8003328 <HAL_ADC_ConfigChannel+0x4e0>)
 80032a0:	e000      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x45c>
 80032a2:	4a22      	ldr	r2, [pc, #136]	@ (800332c <HAL_ADC_ConfigChannel+0x4e4>)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7ff fa7e 	bl	80027ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b2:	4b21      	ldr	r3, [pc, #132]	@ (8003338 <HAL_ADC_ConfigChannel+0x4f0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	4a20      	ldr	r2, [pc, #128]	@ (800333c <HAL_ADC_ConfigChannel+0x4f4>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	099b      	lsrs	r3, r3, #6
 80032c0:	3301      	adds	r3, #1
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80032c6:	e002      	b.n	80032ce <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f9      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d4:	e08f      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
 80032d6:	bf00      	nop
 80032d8:	47ff0000 	.word	0x47ff0000
 80032dc:	40022000 	.word	0x40022000
 80032e0:	04300002 	.word	0x04300002
 80032e4:	08600004 	.word	0x08600004
 80032e8:	0c900008 	.word	0x0c900008
 80032ec:	10c00010 	.word	0x10c00010
 80032f0:	14f00020 	.word	0x14f00020
 80032f4:	2a000400 	.word	0x2a000400
 80032f8:	2e300800 	.word	0x2e300800
 80032fc:	32601000 	.word	0x32601000
 8003300:	43210000 	.word	0x43210000
 8003304:	4b840000 	.word	0x4b840000
 8003308:	4fb80000 	.word	0x4fb80000
 800330c:	47520000 	.word	0x47520000
 8003310:	36902000 	.word	0x36902000
 8003314:	25b00200 	.word	0x25b00200
 8003318:	21800100 	.word	0x21800100
 800331c:	1d500080 	.word	0x1d500080
 8003320:	19200040 	.word	0x19200040
 8003324:	40022100 	.word	0x40022100
 8003328:	40022300 	.word	0x40022300
 800332c:	58026300 	.word	0x58026300
 8003330:	58026000 	.word	0x58026000
 8003334:	cb840000 	.word	0xcb840000
 8003338:	24000000 	.word	0x24000000
 800333c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a31      	ldr	r2, [pc, #196]	@ (800340c <HAL_ADC_ConfigChannel+0x5c4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d11e      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x540>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d119      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2d      	ldr	r2, [pc, #180]	@ (8003410 <HAL_ADC_ConfigChannel+0x5c8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d14b      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2c      	ldr	r2, [pc, #176]	@ (8003414 <HAL_ADC_ConfigChannel+0x5cc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_ADC_ConfigChannel+0x52a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2a      	ldr	r2, [pc, #168]	@ (8003418 <HAL_ADC_ConfigChannel+0x5d0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x52e>
 8003372:	4a2a      	ldr	r2, [pc, #168]	@ (800341c <HAL_ADC_ConfigChannel+0x5d4>)
 8003374:	e000      	b.n	8003378 <HAL_ADC_ConfigChannel+0x530>
 8003376:	4a2a      	ldr	r2, [pc, #168]	@ (8003420 <HAL_ADC_ConfigChannel+0x5d8>)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7ff fa14 	bl	80027ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003386:	e036      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a25      	ldr	r2, [pc, #148]	@ (8003424 <HAL_ADC_ConfigChannel+0x5dc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d131      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12c      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003410 <HAL_ADC_ConfigChannel+0x5c8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d127      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003414 <HAL_ADC_ConfigChannel+0x5cc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_ADC_ConfigChannel+0x572>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	@ (8003418 <HAL_ADC_ConfigChannel+0x5d0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_ADC_ConfigChannel+0x576>
 80033ba:	4a18      	ldr	r2, [pc, #96]	@ (800341c <HAL_ADC_ConfigChannel+0x5d4>)
 80033bc:	e000      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x578>
 80033be:	4a18      	ldr	r2, [pc, #96]	@ (8003420 <HAL_ADC_ConfigChannel+0x5d8>)
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f7ff f9f0 	bl	80027ae <LL_ADC_SetCommonPathInternalCh>
 80033ce:	e012      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80033e2:	e008      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003402:	4618      	mov	r0, r3
 8003404:	3734      	adds	r7, #52	@ 0x34
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	c7520000 	.word	0xc7520000
 8003410:	58026000 	.word	0x58026000
 8003414:	40022000 	.word	0x40022000
 8003418:	40022100 	.word	0x40022100
 800341c:	40022300 	.word	0x40022300
 8003420:	58026300 	.word	0x58026300
 8003424:	cfb80000 	.word	0xcfb80000

08003428 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a7a      	ldr	r2, [pc, #488]	@ (8003620 <ADC_ConfigureBoostMode+0x1f8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d004      	beq.n	8003444 <ADC_ConfigureBoostMode+0x1c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a79      	ldr	r2, [pc, #484]	@ (8003624 <ADC_ConfigureBoostMode+0x1fc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d109      	bne.n	8003458 <ADC_ConfigureBoostMode+0x30>
 8003444:	4b78      	ldr	r3, [pc, #480]	@ (8003628 <ADC_ConfigureBoostMode+0x200>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e008      	b.n	800346a <ADC_ConfigureBoostMode+0x42>
 8003458:	4b74      	ldr	r3, [pc, #464]	@ (800362c <ADC_ConfigureBoostMode+0x204>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01c      	beq.n	80034a8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800346e:	f002 fb21 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8003472:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800347c:	d010      	beq.n	80034a0 <ADC_ConfigureBoostMode+0x78>
 800347e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003482:	d873      	bhi.n	800356c <ADC_ConfigureBoostMode+0x144>
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003488:	d002      	beq.n	8003490 <ADC_ConfigureBoostMode+0x68>
 800348a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800348e:	d16d      	bne.n	800356c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	60fb      	str	r3, [r7, #12]
        break;
 800349e:	e068      	b.n	8003572 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	60fb      	str	r3, [r7, #12]
        break;
 80034a6:	e064      	b.n	8003572 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80034a8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80034ac:	f04f 0100 	mov.w	r1, #0
 80034b0:	f003 fd66 	bl	8006f80 <HAL_RCCEx_GetPeriphCLKFreq>
 80034b4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80034be:	d051      	beq.n	8003564 <ADC_ConfigureBoostMode+0x13c>
 80034c0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80034c4:	d854      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x148>
 80034c6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80034ca:	d047      	beq.n	800355c <ADC_ConfigureBoostMode+0x134>
 80034cc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80034d0:	d84e      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x148>
 80034d2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80034d6:	d03d      	beq.n	8003554 <ADC_ConfigureBoostMode+0x12c>
 80034d8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80034dc:	d848      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x148>
 80034de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034e2:	d033      	beq.n	800354c <ADC_ConfigureBoostMode+0x124>
 80034e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034e8:	d842      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x148>
 80034ea:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80034ee:	d029      	beq.n	8003544 <ADC_ConfigureBoostMode+0x11c>
 80034f0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80034f4:	d83c      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x148>
 80034f6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80034fa:	d01a      	beq.n	8003532 <ADC_ConfigureBoostMode+0x10a>
 80034fc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003500:	d836      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x148>
 8003502:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003506:	d014      	beq.n	8003532 <ADC_ConfigureBoostMode+0x10a>
 8003508:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800350c:	d830      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x148>
 800350e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003512:	d00e      	beq.n	8003532 <ADC_ConfigureBoostMode+0x10a>
 8003514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003518:	d82a      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x148>
 800351a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800351e:	d008      	beq.n	8003532 <ADC_ConfigureBoostMode+0x10a>
 8003520:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003524:	d824      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x148>
 8003526:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800352a:	d002      	beq.n	8003532 <ADC_ConfigureBoostMode+0x10a>
 800352c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003530:	d11e      	bne.n	8003570 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	0c9b      	lsrs	r3, r3, #18
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	60fb      	str	r3, [r7, #12]
        break;
 8003542:	e016      	b.n	8003572 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	60fb      	str	r3, [r7, #12]
        break;
 800354a:	e012      	b.n	8003572 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	60fb      	str	r3, [r7, #12]
        break;
 8003552:	e00e      	b.n	8003572 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	60fb      	str	r3, [r7, #12]
        break;
 800355a:	e00a      	b.n	8003572 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	09db      	lsrs	r3, r3, #7
 8003560:	60fb      	str	r3, [r7, #12]
        break;
 8003562:	e006      	b.n	8003572 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	60fb      	str	r3, [r7, #12]
        break;
 800356a:	e002      	b.n	8003572 <ADC_ConfigureBoostMode+0x14a>
        break;
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003570:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003572:	f7ff f8fd 	bl	8002770 <HAL_GetREVID>
 8003576:	4603      	mov	r3, r0
 8003578:	f241 0203 	movw	r2, #4099	@ 0x1003
 800357c:	4293      	cmp	r3, r2
 800357e:	d815      	bhi.n	80035ac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4a2b      	ldr	r2, [pc, #172]	@ (8003630 <ADC_ConfigureBoostMode+0x208>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d908      	bls.n	800359a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003596:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003598:	e03e      	b.n	8003618 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035a8:	609a      	str	r2, [r3, #8]
}
 80035aa:	e035      	b.n	8003618 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003634 <ADC_ConfigureBoostMode+0x20c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d808      	bhi.n	80035cc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80035c8:	609a      	str	r2, [r3, #8]
}
 80035ca:	e025      	b.n	8003618 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003638 <ADC_ConfigureBoostMode+0x210>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d80a      	bhi.n	80035ea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	e016      	b.n	8003618 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a13      	ldr	r2, [pc, #76]	@ (800363c <ADC_ConfigureBoostMode+0x214>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d80a      	bhi.n	8003608 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003604:	609a      	str	r2, [r3, #8]
}
 8003606:	e007      	b.n	8003618 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003616:	609a      	str	r2, [r3, #8]
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40022000 	.word	0x40022000
 8003624:	40022100 	.word	0x40022100
 8003628:	40022300 	.word	0x40022300
 800362c:	58026300 	.word	0x58026300
 8003630:	01312d00 	.word	0x01312d00
 8003634:	005f5e10 	.word	0x005f5e10
 8003638:	00bebc20 	.word	0x00bebc20
 800363c:	017d7840 	.word	0x017d7840

08003640 <LL_ADC_IsEnabled>:
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <LL_ADC_IsEnabled+0x18>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <LL_ADC_IsEnabled+0x1a>
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_ADC_REG_IsConversionOngoing>:
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b04      	cmp	r3, #4
 8003678:	d101      	bne.n	800367e <LL_ADC_REG_IsConversionOngoing+0x18>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b09f      	sub	sp, #124	@ 0x7c
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e0be      	b.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a5c      	ldr	r2, [pc, #368]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d102      	bne.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	e001      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e09d      	b.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ffb9 	bl	8003666 <LL_ADC_REG_IsConversionOngoing>
 80036f4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ffb3 	bl	8003666 <LL_ADC_REG_IsConversionOngoing>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d17f      	bne.n	8003806 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003706:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003708:	2b00      	cmp	r3, #0
 800370a:	d17c      	bne.n	8003806 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a47      	ldr	r2, [pc, #284]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a46      	ldr	r2, [pc, #280]	@ (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003720:	4b45      	ldr	r3, [pc, #276]	@ (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003722:	e000      	b.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003724:	4b45      	ldr	r3, [pc, #276]	@ (800383c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003726:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d039      	beq.n	80037a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	431a      	orrs	r2, r3
 800373e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003740:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a3a      	ldr	r2, [pc, #232]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a38      	ldr	r2, [pc, #224]	@ (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d10e      	bne.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003756:	4836      	ldr	r0, [pc, #216]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003758:	f7ff ff72 	bl	8003640 <LL_ADC_IsEnabled>
 800375c:	4604      	mov	r4, r0
 800375e:	4835      	ldr	r0, [pc, #212]	@ (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003760:	f7ff ff6e 	bl	8003640 <LL_ADC_IsEnabled>
 8003764:	4603      	mov	r3, r0
 8003766:	4323      	orrs	r3, r4
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	e008      	b.n	8003786 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003774:	4832      	ldr	r0, [pc, #200]	@ (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003776:	f7ff ff63 	bl	8003640 <LL_ADC_IsEnabled>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d047      	beq.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800378a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	4b2d      	ldr	r3, [pc, #180]	@ (8003844 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003790:	4013      	ands	r3, r2
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	6811      	ldr	r1, [r2, #0]
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	6892      	ldr	r2, [r2, #8]
 800379a:	430a      	orrs	r2, r1
 800379c:	431a      	orrs	r2, r3
 800379e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037a0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037a2:	e03a      	b.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80037a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d10e      	bne.n	80037e2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80037c4:	481a      	ldr	r0, [pc, #104]	@ (8003830 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037c6:	f7ff ff3b 	bl	8003640 <LL_ADC_IsEnabled>
 80037ca:	4604      	mov	r4, r0
 80037cc:	4819      	ldr	r0, [pc, #100]	@ (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037ce:	f7ff ff37 	bl	8003640 <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4323      	orrs	r3, r4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bf0c      	ite	eq
 80037da:	2301      	moveq	r3, #1
 80037dc:	2300      	movne	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	e008      	b.n	80037f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80037e2:	4817      	ldr	r0, [pc, #92]	@ (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80037e4:	f7ff ff2c 	bl	8003640 <LL_ADC_IsEnabled>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d010      	beq.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	4b11      	ldr	r3, [pc, #68]	@ (8003844 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80037fe:	4013      	ands	r3, r2
 8003800:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003802:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003804:	e009      	b.n	800381a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003818:	e000      	b.n	800381c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800381a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003824:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003828:	4618      	mov	r0, r3
 800382a:	377c      	adds	r7, #124	@ 0x7c
 800382c:	46bd      	mov	sp, r7
 800382e:	bd90      	pop	{r4, r7, pc}
 8003830:	40022000 	.word	0x40022000
 8003834:	40022100 	.word	0x40022100
 8003838:	40022300 	.word	0x40022300
 800383c:	58026300 	.word	0x58026300
 8003840:	58026000 	.word	0x58026000
 8003844:	fffff0e0 	.word	0xfffff0e0

08003848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003858:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <__NVIC_SetPriorityGrouping+0x40>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003864:	4013      	ands	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <__NVIC_SetPriorityGrouping+0x44>)
 8003872:	4313      	orrs	r3, r2
 8003874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003876:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <__NVIC_SetPriorityGrouping+0x40>)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	60d3      	str	r3, [r2, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00
 800388c:	05fa0000 	.word	0x05fa0000

08003890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003894:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 0307 	and.w	r3, r3, #7
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	db0b      	blt.n	80038d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	4907      	ldr	r1, [pc, #28]	@ (80038e4 <__NVIC_EnableIRQ+0x38>)
 80038c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2001      	movs	r0, #1
 80038ce:	fa00 f202 	lsl.w	r2, r0, r2
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db0a      	blt.n	8003912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	490c      	ldr	r1, [pc, #48]	@ (8003934 <__NVIC_SetPriority+0x4c>)
 8003902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	440b      	add	r3, r1
 800390c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003910:	e00a      	b.n	8003928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4908      	ldr	r1, [pc, #32]	@ (8003938 <__NVIC_SetPriority+0x50>)
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	3b04      	subs	r3, #4
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	440b      	add	r3, r1
 8003926:	761a      	strb	r2, [r3, #24]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000e100 	.word	0xe000e100
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	@ 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f1c3 0307 	rsb	r3, r3, #7
 8003956:	2b04      	cmp	r3, #4
 8003958:	bf28      	it	cs
 800395a:	2304      	movcs	r3, #4
 800395c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3304      	adds	r3, #4
 8003962:	2b06      	cmp	r3, #6
 8003964:	d902      	bls.n	800396c <NVIC_EncodePriority+0x30>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3b03      	subs	r3, #3
 800396a:	e000      	b.n	800396e <NVIC_EncodePriority+0x32>
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	401a      	ands	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003984:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	43d9      	mvns	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	4313      	orrs	r3, r2
         );
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	@ 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b4:	d301      	bcc.n	80039ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00f      	b.n	80039da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ba:	4a0a      	ldr	r2, [pc, #40]	@ (80039e4 <SysTick_Config+0x40>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c2:	210f      	movs	r1, #15
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039c8:	f7ff ff8e 	bl	80038e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039cc:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <SysTick_Config+0x40>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d2:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <SysTick_Config+0x40>)
 80039d4:	2207      	movs	r2, #7
 80039d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	e000e010 	.word	0xe000e010

080039e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff29 	bl	8003848 <__NVIC_SetPriorityGrouping>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a0c:	f7ff ff40 	bl	8003890 <__NVIC_GetPriorityGrouping>
 8003a10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	f7ff ff90 	bl	800393c <NVIC_EncodePriority>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff5f 	bl	80038e8 <__NVIC_SetPriority>
}
 8003a2a:	bf00      	nop
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ff33 	bl	80038ac <__NVIC_EnableIRQ>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffa4 	bl	80039a4 <SysTick_Config>
 8003a5c:	4603      	mov	r3, r0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003a6c:	f3bf 8f5f 	dmb	sy
}
 8003a70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003a72:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <HAL_MPU_Disable+0x28>)
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	4a06      	ldr	r2, [pc, #24]	@ (8003a90 <HAL_MPU_Disable+0x28>)
 8003a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a7c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003a7e:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_MPU_Disable+0x2c>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	605a      	str	r2, [r3, #4]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000ed00 	.word	0xe000ed00
 8003a94:	e000ed90 	.word	0xe000ed90

08003a98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ad0 <HAL_MPU_Enable+0x38>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <HAL_MPU_Enable+0x3c>)
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	4a09      	ldr	r2, [pc, #36]	@ (8003ad4 <HAL_MPU_Enable+0x3c>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003ab6:	f3bf 8f4f 	dsb	sy
}
 8003aba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003abc:	f3bf 8f6f 	isb	sy
}
 8003ac0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	e000ed90 	.word	0xe000ed90
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	785a      	ldrb	r2, [r3, #1]
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <HAL_MPU_ConfigRegion+0x7c>)
 8003ae6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b54 <HAL_MPU_ConfigRegion+0x7c>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	4a19      	ldr	r2, [pc, #100]	@ (8003b54 <HAL_MPU_ConfigRegion+0x7c>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003af4:	4a17      	ldr	r2, [pc, #92]	@ (8003b54 <HAL_MPU_ConfigRegion+0x7c>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7b1b      	ldrb	r3, [r3, #12]
 8003b00:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	7adb      	ldrb	r3, [r3, #11]
 8003b06:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7a9b      	ldrb	r3, [r3, #10]
 8003b0e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7b5b      	ldrb	r3, [r3, #13]
 8003b16:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	7b9b      	ldrb	r3, [r3, #14]
 8003b1e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	7bdb      	ldrb	r3, [r3, #15]
 8003b26:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	7a5b      	ldrb	r3, [r3, #9]
 8003b2e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003b30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7a1b      	ldrb	r3, [r3, #8]
 8003b36:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003b38:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	7812      	ldrb	r2, [r2, #0]
 8003b3e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b40:	4a04      	ldr	r2, [pc, #16]	@ (8003b54 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003b42:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b44:	6113      	str	r3, [r2, #16]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000ed90 	.word	0xe000ed90

08003b58 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8003b5c:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_GetCurrentCPUID+0x20>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b64:	2b70      	cmp	r3, #112	@ 0x70
 8003b66:	d101      	bne.n	8003b6c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e000      	b.n	8003b6e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8003b6c:	2301      	movs	r3, #1
  }
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b84:	f7fe fde8 	bl	8002758 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e2dc      	b.n	800414e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d008      	beq.n	8003bb2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2280      	movs	r2, #128	@ 0x80
 8003ba4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e2cd      	b.n	800414e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a76      	ldr	r2, [pc, #472]	@ (8003d90 <HAL_DMA_Abort+0x214>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a74      	ldr	r2, [pc, #464]	@ (8003d94 <HAL_DMA_Abort+0x218>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a73      	ldr	r2, [pc, #460]	@ (8003d98 <HAL_DMA_Abort+0x21c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a71      	ldr	r2, [pc, #452]	@ (8003d9c <HAL_DMA_Abort+0x220>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a70      	ldr	r2, [pc, #448]	@ (8003da0 <HAL_DMA_Abort+0x224>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a6e      	ldr	r2, [pc, #440]	@ (8003da4 <HAL_DMA_Abort+0x228>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6d      	ldr	r2, [pc, #436]	@ (8003da8 <HAL_DMA_Abort+0x22c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6b      	ldr	r2, [pc, #428]	@ (8003dac <HAL_DMA_Abort+0x230>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6a      	ldr	r2, [pc, #424]	@ (8003db0 <HAL_DMA_Abort+0x234>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a68      	ldr	r2, [pc, #416]	@ (8003db4 <HAL_DMA_Abort+0x238>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a67      	ldr	r2, [pc, #412]	@ (8003db8 <HAL_DMA_Abort+0x23c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a65      	ldr	r2, [pc, #404]	@ (8003dbc <HAL_DMA_Abort+0x240>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a64      	ldr	r2, [pc, #400]	@ (8003dc0 <HAL_DMA_Abort+0x244>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a62      	ldr	r2, [pc, #392]	@ (8003dc4 <HAL_DMA_Abort+0x248>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a61      	ldr	r2, [pc, #388]	@ (8003dc8 <HAL_DMA_Abort+0x24c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_Abort+0xd6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a5f      	ldr	r2, [pc, #380]	@ (8003dcc <HAL_DMA_Abort+0x250>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <HAL_DMA_Abort+0xda>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_DMA_Abort+0xdc>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 021e 	bic.w	r2, r2, #30
 8003c6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c7a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e00a      	b.n	8003c9a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 020e 	bic.w	r2, r2, #14
 8003c92:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a3c      	ldr	r2, [pc, #240]	@ (8003d90 <HAL_DMA_Abort+0x214>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d072      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8003d94 <HAL_DMA_Abort+0x218>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d06d      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a39      	ldr	r2, [pc, #228]	@ (8003d98 <HAL_DMA_Abort+0x21c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d068      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a37      	ldr	r2, [pc, #220]	@ (8003d9c <HAL_DMA_Abort+0x220>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d063      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a36      	ldr	r2, [pc, #216]	@ (8003da0 <HAL_DMA_Abort+0x224>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d05e      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a34      	ldr	r2, [pc, #208]	@ (8003da4 <HAL_DMA_Abort+0x228>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d059      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a33      	ldr	r2, [pc, #204]	@ (8003da8 <HAL_DMA_Abort+0x22c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d054      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a31      	ldr	r2, [pc, #196]	@ (8003dac <HAL_DMA_Abort+0x230>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d04f      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a30      	ldr	r2, [pc, #192]	@ (8003db0 <HAL_DMA_Abort+0x234>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d04a      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8003db4 <HAL_DMA_Abort+0x238>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d045      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2d      	ldr	r2, [pc, #180]	@ (8003db8 <HAL_DMA_Abort+0x23c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d040      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003dbc <HAL_DMA_Abort+0x240>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d03b      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc0 <HAL_DMA_Abort+0x244>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d036      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a28      	ldr	r2, [pc, #160]	@ (8003dc4 <HAL_DMA_Abort+0x248>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a27      	ldr	r2, [pc, #156]	@ (8003dc8 <HAL_DMA_Abort+0x24c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d02c      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a25      	ldr	r2, [pc, #148]	@ (8003dcc <HAL_DMA_Abort+0x250>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a24      	ldr	r2, [pc, #144]	@ (8003dd0 <HAL_DMA_Abort+0x254>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a22      	ldr	r2, [pc, #136]	@ (8003dd4 <HAL_DMA_Abort+0x258>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a21      	ldr	r2, [pc, #132]	@ (8003dd8 <HAL_DMA_Abort+0x25c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ddc <HAL_DMA_Abort+0x260>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1e      	ldr	r2, [pc, #120]	@ (8003de0 <HAL_DMA_Abort+0x264>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1c      	ldr	r2, [pc, #112]	@ (8003de4 <HAL_DMA_Abort+0x268>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003de8 <HAL_DMA_Abort+0x26c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_Abort+0x20e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a19      	ldr	r2, [pc, #100]	@ (8003dec <HAL_DMA_Abort+0x270>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d132      	bne.n	8003df0 <HAL_DMA_Abort+0x274>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e031      	b.n	8003df2 <HAL_DMA_Abort+0x276>
 8003d8e:	bf00      	nop
 8003d90:	40020010 	.word	0x40020010
 8003d94:	40020028 	.word	0x40020028
 8003d98:	40020040 	.word	0x40020040
 8003d9c:	40020058 	.word	0x40020058
 8003da0:	40020070 	.word	0x40020070
 8003da4:	40020088 	.word	0x40020088
 8003da8:	400200a0 	.word	0x400200a0
 8003dac:	400200b8 	.word	0x400200b8
 8003db0:	40020410 	.word	0x40020410
 8003db4:	40020428 	.word	0x40020428
 8003db8:	40020440 	.word	0x40020440
 8003dbc:	40020458 	.word	0x40020458
 8003dc0:	40020470 	.word	0x40020470
 8003dc4:	40020488 	.word	0x40020488
 8003dc8:	400204a0 	.word	0x400204a0
 8003dcc:	400204b8 	.word	0x400204b8
 8003dd0:	58025408 	.word	0x58025408
 8003dd4:	5802541c 	.word	0x5802541c
 8003dd8:	58025430 	.word	0x58025430
 8003ddc:	58025444 	.word	0x58025444
 8003de0:	58025458 	.word	0x58025458
 8003de4:	5802546c 	.word	0x5802546c
 8003de8:	58025480 	.word	0x58025480
 8003dec:	58025494 	.word	0x58025494
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e04:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003fc0 <HAL_DMA_Abort+0x444>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d04a      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a6b      	ldr	r2, [pc, #428]	@ (8003fc4 <HAL_DMA_Abort+0x448>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d045      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6a      	ldr	r2, [pc, #424]	@ (8003fc8 <HAL_DMA_Abort+0x44c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d040      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a68      	ldr	r2, [pc, #416]	@ (8003fcc <HAL_DMA_Abort+0x450>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d03b      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a67      	ldr	r2, [pc, #412]	@ (8003fd0 <HAL_DMA_Abort+0x454>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d036      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a65      	ldr	r2, [pc, #404]	@ (8003fd4 <HAL_DMA_Abort+0x458>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d031      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a64      	ldr	r2, [pc, #400]	@ (8003fd8 <HAL_DMA_Abort+0x45c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d02c      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a62      	ldr	r2, [pc, #392]	@ (8003fdc <HAL_DMA_Abort+0x460>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d027      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a61      	ldr	r2, [pc, #388]	@ (8003fe0 <HAL_DMA_Abort+0x464>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d022      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a5f      	ldr	r2, [pc, #380]	@ (8003fe4 <HAL_DMA_Abort+0x468>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01d      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003fe8 <HAL_DMA_Abort+0x46c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d018      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a5c      	ldr	r2, [pc, #368]	@ (8003fec <HAL_DMA_Abort+0x470>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5b      	ldr	r2, [pc, #364]	@ (8003ff0 <HAL_DMA_Abort+0x474>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a59      	ldr	r2, [pc, #356]	@ (8003ff4 <HAL_DMA_Abort+0x478>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a58      	ldr	r2, [pc, #352]	@ (8003ff8 <HAL_DMA_Abort+0x47c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_DMA_Abort+0x32a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a56      	ldr	r2, [pc, #344]	@ (8003ffc <HAL_DMA_Abort+0x480>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <HAL_DMA_Abort+0x33c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e007      	b.n	8003ec8 <HAL_DMA_Abort+0x34c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ec8:	e013      	b.n	8003ef2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eca:	f7fe fc45 	bl	8002758 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d90c      	bls.n	8003ef2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e12d      	b.n	800414e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e5      	bne.n	8003eca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc0 <HAL_DMA_Abort+0x444>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d04a      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc4 <HAL_DMA_Abort+0x448>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d045      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc8 <HAL_DMA_Abort+0x44c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d040      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	@ (8003fcc <HAL_DMA_Abort+0x450>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d03b      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a29      	ldr	r2, [pc, #164]	@ (8003fd0 <HAL_DMA_Abort+0x454>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d036      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a27      	ldr	r2, [pc, #156]	@ (8003fd4 <HAL_DMA_Abort+0x458>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d031      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a26      	ldr	r2, [pc, #152]	@ (8003fd8 <HAL_DMA_Abort+0x45c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d02c      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a24      	ldr	r2, [pc, #144]	@ (8003fdc <HAL_DMA_Abort+0x460>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d027      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a23      	ldr	r2, [pc, #140]	@ (8003fe0 <HAL_DMA_Abort+0x464>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d022      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a21      	ldr	r2, [pc, #132]	@ (8003fe4 <HAL_DMA_Abort+0x468>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01d      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a20      	ldr	r2, [pc, #128]	@ (8003fe8 <HAL_DMA_Abort+0x46c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1e      	ldr	r2, [pc, #120]	@ (8003fec <HAL_DMA_Abort+0x470>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff0 <HAL_DMA_Abort+0x474>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff4 <HAL_DMA_Abort+0x478>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff8 <HAL_DMA_Abort+0x47c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_DMA_Abort+0x422>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <HAL_DMA_Abort+0x480>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <HAL_DMA_Abort+0x426>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <HAL_DMA_Abort+0x428>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02b      	beq.n	8004000 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	223f      	movs	r2, #63	@ 0x3f
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	e02a      	b.n	8004016 <HAL_DMA_Abort+0x49a>
 8003fc0:	40020010 	.word	0x40020010
 8003fc4:	40020028 	.word	0x40020028
 8003fc8:	40020040 	.word	0x40020040
 8003fcc:	40020058 	.word	0x40020058
 8003fd0:	40020070 	.word	0x40020070
 8003fd4:	40020088 	.word	0x40020088
 8003fd8:	400200a0 	.word	0x400200a0
 8003fdc:	400200b8 	.word	0x400200b8
 8003fe0:	40020410 	.word	0x40020410
 8003fe4:	40020428 	.word	0x40020428
 8003fe8:	40020440 	.word	0x40020440
 8003fec:	40020458 	.word	0x40020458
 8003ff0:	40020470 	.word	0x40020470
 8003ff4:	40020488 	.word	0x40020488
 8003ff8:	400204a0 	.word	0x400204a0
 8003ffc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2201      	movs	r2, #1
 8004010:	409a      	lsls	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a4f      	ldr	r2, [pc, #316]	@ (8004158 <HAL_DMA_Abort+0x5dc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d072      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a4d      	ldr	r2, [pc, #308]	@ (800415c <HAL_DMA_Abort+0x5e0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d06d      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a4c      	ldr	r2, [pc, #304]	@ (8004160 <HAL_DMA_Abort+0x5e4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d068      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a4a      	ldr	r2, [pc, #296]	@ (8004164 <HAL_DMA_Abort+0x5e8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d063      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a49      	ldr	r2, [pc, #292]	@ (8004168 <HAL_DMA_Abort+0x5ec>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d05e      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a47      	ldr	r2, [pc, #284]	@ (800416c <HAL_DMA_Abort+0x5f0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d059      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a46      	ldr	r2, [pc, #280]	@ (8004170 <HAL_DMA_Abort+0x5f4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d054      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a44      	ldr	r2, [pc, #272]	@ (8004174 <HAL_DMA_Abort+0x5f8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d04f      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a43      	ldr	r2, [pc, #268]	@ (8004178 <HAL_DMA_Abort+0x5fc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d04a      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a41      	ldr	r2, [pc, #260]	@ (800417c <HAL_DMA_Abort+0x600>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d045      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a40      	ldr	r2, [pc, #256]	@ (8004180 <HAL_DMA_Abort+0x604>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d040      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a3e      	ldr	r2, [pc, #248]	@ (8004184 <HAL_DMA_Abort+0x608>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d03b      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a3d      	ldr	r2, [pc, #244]	@ (8004188 <HAL_DMA_Abort+0x60c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d036      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3b      	ldr	r2, [pc, #236]	@ (800418c <HAL_DMA_Abort+0x610>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d031      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3a      	ldr	r2, [pc, #232]	@ (8004190 <HAL_DMA_Abort+0x614>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d02c      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a38      	ldr	r2, [pc, #224]	@ (8004194 <HAL_DMA_Abort+0x618>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d027      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a37      	ldr	r2, [pc, #220]	@ (8004198 <HAL_DMA_Abort+0x61c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a35      	ldr	r2, [pc, #212]	@ (800419c <HAL_DMA_Abort+0x620>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01d      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a34      	ldr	r2, [pc, #208]	@ (80041a0 <HAL_DMA_Abort+0x624>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a32      	ldr	r2, [pc, #200]	@ (80041a4 <HAL_DMA_Abort+0x628>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a31      	ldr	r2, [pc, #196]	@ (80041a8 <HAL_DMA_Abort+0x62c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2f      	ldr	r2, [pc, #188]	@ (80041ac <HAL_DMA_Abort+0x630>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2e      	ldr	r2, [pc, #184]	@ (80041b0 <HAL_DMA_Abort+0x634>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_DMA_Abort+0x58a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2c      	ldr	r2, [pc, #176]	@ (80041b4 <HAL_DMA_Abort+0x638>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_DMA_Abort+0x58e>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_DMA_Abort+0x590>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004118:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800412c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004130:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800413a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40020010 	.word	0x40020010
 800415c:	40020028 	.word	0x40020028
 8004160:	40020040 	.word	0x40020040
 8004164:	40020058 	.word	0x40020058
 8004168:	40020070 	.word	0x40020070
 800416c:	40020088 	.word	0x40020088
 8004170:	400200a0 	.word	0x400200a0
 8004174:	400200b8 	.word	0x400200b8
 8004178:	40020410 	.word	0x40020410
 800417c:	40020428 	.word	0x40020428
 8004180:	40020440 	.word	0x40020440
 8004184:	40020458 	.word	0x40020458
 8004188:	40020470 	.word	0x40020470
 800418c:	40020488 	.word	0x40020488
 8004190:	400204a0 	.word	0x400204a0
 8004194:	400204b8 	.word	0x400204b8
 8004198:	58025408 	.word	0x58025408
 800419c:	5802541c 	.word	0x5802541c
 80041a0:	58025430 	.word	0x58025430
 80041a4:	58025444 	.word	0x58025444
 80041a8:	58025458 	.word	0x58025458
 80041ac:	5802546c 	.word	0x5802546c
 80041b0:	58025480 	.word	0x58025480
 80041b4:	58025494 	.word	0x58025494

080041b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e237      	b.n	800463a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d004      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2280      	movs	r2, #128	@ 0x80
 80041da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e22c      	b.n	800463a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004358 <HAL_DMA_Abort_IT+0x1a0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d04a      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a5b      	ldr	r2, [pc, #364]	@ (800435c <HAL_DMA_Abort_IT+0x1a4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d045      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a59      	ldr	r2, [pc, #356]	@ (8004360 <HAL_DMA_Abort_IT+0x1a8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d040      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a58      	ldr	r2, [pc, #352]	@ (8004364 <HAL_DMA_Abort_IT+0x1ac>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d03b      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a56      	ldr	r2, [pc, #344]	@ (8004368 <HAL_DMA_Abort_IT+0x1b0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d036      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a55      	ldr	r2, [pc, #340]	@ (800436c <HAL_DMA_Abort_IT+0x1b4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d031      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a53      	ldr	r2, [pc, #332]	@ (8004370 <HAL_DMA_Abort_IT+0x1b8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d02c      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a52      	ldr	r2, [pc, #328]	@ (8004374 <HAL_DMA_Abort_IT+0x1bc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d027      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a50      	ldr	r2, [pc, #320]	@ (8004378 <HAL_DMA_Abort_IT+0x1c0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d022      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4f      	ldr	r2, [pc, #316]	@ (800437c <HAL_DMA_Abort_IT+0x1c4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d01d      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a4d      	ldr	r2, [pc, #308]	@ (8004380 <HAL_DMA_Abort_IT+0x1c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d018      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a4c      	ldr	r2, [pc, #304]	@ (8004384 <HAL_DMA_Abort_IT+0x1cc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d013      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a4a      	ldr	r2, [pc, #296]	@ (8004388 <HAL_DMA_Abort_IT+0x1d0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00e      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a49      	ldr	r2, [pc, #292]	@ (800438c <HAL_DMA_Abort_IT+0x1d4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d009      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a47      	ldr	r2, [pc, #284]	@ (8004390 <HAL_DMA_Abort_IT+0x1d8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a46      	ldr	r2, [pc, #280]	@ (8004394 <HAL_DMA_Abort_IT+0x1dc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_DMA_Abort_IT+0xcc>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_DMA_Abort_IT+0xce>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8086 	beq.w	8004398 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2204      	movs	r2, #4
 8004290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2f      	ldr	r2, [pc, #188]	@ (8004358 <HAL_DMA_Abort_IT+0x1a0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04a      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a2e      	ldr	r2, [pc, #184]	@ (800435c <HAL_DMA_Abort_IT+0x1a4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d045      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004360 <HAL_DMA_Abort_IT+0x1a8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d040      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004364 <HAL_DMA_Abort_IT+0x1ac>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d03b      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a29      	ldr	r2, [pc, #164]	@ (8004368 <HAL_DMA_Abort_IT+0x1b0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d036      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a28      	ldr	r2, [pc, #160]	@ (800436c <HAL_DMA_Abort_IT+0x1b4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d031      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a26      	ldr	r2, [pc, #152]	@ (8004370 <HAL_DMA_Abort_IT+0x1b8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d02c      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a25      	ldr	r2, [pc, #148]	@ (8004374 <HAL_DMA_Abort_IT+0x1bc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d027      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a23      	ldr	r2, [pc, #140]	@ (8004378 <HAL_DMA_Abort_IT+0x1c0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d022      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a22      	ldr	r2, [pc, #136]	@ (800437c <HAL_DMA_Abort_IT+0x1c4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d01d      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a20      	ldr	r2, [pc, #128]	@ (8004380 <HAL_DMA_Abort_IT+0x1c8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d018      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1f      	ldr	r2, [pc, #124]	@ (8004384 <HAL_DMA_Abort_IT+0x1cc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1d      	ldr	r2, [pc, #116]	@ (8004388 <HAL_DMA_Abort_IT+0x1d0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00e      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <HAL_DMA_Abort_IT+0x1d4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1a      	ldr	r2, [pc, #104]	@ (8004390 <HAL_DMA_Abort_IT+0x1d8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_DMA_Abort_IT+0x17c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a19      	ldr	r2, [pc, #100]	@ (8004394 <HAL_DMA_Abort_IT+0x1dc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d108      	bne.n	8004346 <HAL_DMA_Abort_IT+0x18e>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e178      	b.n	8004638 <HAL_DMA_Abort_IT+0x480>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e16f      	b.n	8004638 <HAL_DMA_Abort_IT+0x480>
 8004358:	40020010 	.word	0x40020010
 800435c:	40020028 	.word	0x40020028
 8004360:	40020040 	.word	0x40020040
 8004364:	40020058 	.word	0x40020058
 8004368:	40020070 	.word	0x40020070
 800436c:	40020088 	.word	0x40020088
 8004370:	400200a0 	.word	0x400200a0
 8004374:	400200b8 	.word	0x400200b8
 8004378:	40020410 	.word	0x40020410
 800437c:	40020428 	.word	0x40020428
 8004380:	40020440 	.word	0x40020440
 8004384:	40020458 	.word	0x40020458
 8004388:	40020470 	.word	0x40020470
 800438c:	40020488 	.word	0x40020488
 8004390:	400204a0 	.word	0x400204a0
 8004394:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 020e 	bic.w	r2, r2, #14
 80043a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a6c      	ldr	r2, [pc, #432]	@ (8004560 <HAL_DMA_Abort_IT+0x3a8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d04a      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6b      	ldr	r2, [pc, #428]	@ (8004564 <HAL_DMA_Abort_IT+0x3ac>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d045      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a69      	ldr	r2, [pc, #420]	@ (8004568 <HAL_DMA_Abort_IT+0x3b0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d040      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a68      	ldr	r2, [pc, #416]	@ (800456c <HAL_DMA_Abort_IT+0x3b4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d03b      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a66      	ldr	r2, [pc, #408]	@ (8004570 <HAL_DMA_Abort_IT+0x3b8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d036      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a65      	ldr	r2, [pc, #404]	@ (8004574 <HAL_DMA_Abort_IT+0x3bc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d031      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a63      	ldr	r2, [pc, #396]	@ (8004578 <HAL_DMA_Abort_IT+0x3c0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02c      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a62      	ldr	r2, [pc, #392]	@ (800457c <HAL_DMA_Abort_IT+0x3c4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d027      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a60      	ldr	r2, [pc, #384]	@ (8004580 <HAL_DMA_Abort_IT+0x3c8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5f      	ldr	r2, [pc, #380]	@ (8004584 <HAL_DMA_Abort_IT+0x3cc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5d      	ldr	r2, [pc, #372]	@ (8004588 <HAL_DMA_Abort_IT+0x3d0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a5c      	ldr	r2, [pc, #368]	@ (800458c <HAL_DMA_Abort_IT+0x3d4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a5a      	ldr	r2, [pc, #360]	@ (8004590 <HAL_DMA_Abort_IT+0x3d8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a59      	ldr	r2, [pc, #356]	@ (8004594 <HAL_DMA_Abort_IT+0x3dc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a57      	ldr	r2, [pc, #348]	@ (8004598 <HAL_DMA_Abort_IT+0x3e0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_DMA_Abort_IT+0x290>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a56      	ldr	r2, [pc, #344]	@ (800459c <HAL_DMA_Abort_IT+0x3e4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <HAL_DMA_Abort_IT+0x2a2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0201 	bic.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	e007      	b.n	800446a <HAL_DMA_Abort_IT+0x2b2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3c      	ldr	r2, [pc, #240]	@ (8004560 <HAL_DMA_Abort_IT+0x3a8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d072      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3a      	ldr	r2, [pc, #232]	@ (8004564 <HAL_DMA_Abort_IT+0x3ac>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d06d      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a39      	ldr	r2, [pc, #228]	@ (8004568 <HAL_DMA_Abort_IT+0x3b0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d068      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a37      	ldr	r2, [pc, #220]	@ (800456c <HAL_DMA_Abort_IT+0x3b4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d063      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a36      	ldr	r2, [pc, #216]	@ (8004570 <HAL_DMA_Abort_IT+0x3b8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d05e      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a34      	ldr	r2, [pc, #208]	@ (8004574 <HAL_DMA_Abort_IT+0x3bc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d059      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a33      	ldr	r2, [pc, #204]	@ (8004578 <HAL_DMA_Abort_IT+0x3c0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d054      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a31      	ldr	r2, [pc, #196]	@ (800457c <HAL_DMA_Abort_IT+0x3c4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d04f      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a30      	ldr	r2, [pc, #192]	@ (8004580 <HAL_DMA_Abort_IT+0x3c8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d04a      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004584 <HAL_DMA_Abort_IT+0x3cc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d045      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004588 <HAL_DMA_Abort_IT+0x3d0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d040      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2b      	ldr	r2, [pc, #172]	@ (800458c <HAL_DMA_Abort_IT+0x3d4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d03b      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004590 <HAL_DMA_Abort_IT+0x3d8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d036      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a28      	ldr	r2, [pc, #160]	@ (8004594 <HAL_DMA_Abort_IT+0x3dc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d031      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a27      	ldr	r2, [pc, #156]	@ (8004598 <HAL_DMA_Abort_IT+0x3e0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d02c      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a25      	ldr	r2, [pc, #148]	@ (800459c <HAL_DMA_Abort_IT+0x3e4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d027      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a24      	ldr	r2, [pc, #144]	@ (80045a0 <HAL_DMA_Abort_IT+0x3e8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d022      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a22      	ldr	r2, [pc, #136]	@ (80045a4 <HAL_DMA_Abort_IT+0x3ec>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01d      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a21      	ldr	r2, [pc, #132]	@ (80045a8 <HAL_DMA_Abort_IT+0x3f0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d018      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ac <HAL_DMA_Abort_IT+0x3f4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1e      	ldr	r2, [pc, #120]	@ (80045b0 <HAL_DMA_Abort_IT+0x3f8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1c      	ldr	r2, [pc, #112]	@ (80045b4 <HAL_DMA_Abort_IT+0x3fc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1b      	ldr	r2, [pc, #108]	@ (80045b8 <HAL_DMA_Abort_IT+0x400>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_DMA_Abort_IT+0x3a2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a19      	ldr	r2, [pc, #100]	@ (80045bc <HAL_DMA_Abort_IT+0x404>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d132      	bne.n	80045c0 <HAL_DMA_Abort_IT+0x408>
 800455a:	2301      	movs	r3, #1
 800455c:	e031      	b.n	80045c2 <HAL_DMA_Abort_IT+0x40a>
 800455e:	bf00      	nop
 8004560:	40020010 	.word	0x40020010
 8004564:	40020028 	.word	0x40020028
 8004568:	40020040 	.word	0x40020040
 800456c:	40020058 	.word	0x40020058
 8004570:	40020070 	.word	0x40020070
 8004574:	40020088 	.word	0x40020088
 8004578:	400200a0 	.word	0x400200a0
 800457c:	400200b8 	.word	0x400200b8
 8004580:	40020410 	.word	0x40020410
 8004584:	40020428 	.word	0x40020428
 8004588:	40020440 	.word	0x40020440
 800458c:	40020458 	.word	0x40020458
 8004590:	40020470 	.word	0x40020470
 8004594:	40020488 	.word	0x40020488
 8004598:	400204a0 	.word	0x400204a0
 800459c:	400204b8 	.word	0x400204b8
 80045a0:	58025408 	.word	0x58025408
 80045a4:	5802541c 	.word	0x5802541c
 80045a8:	58025430 	.word	0x58025430
 80045ac:	58025444 	.word	0x58025444
 80045b0:	58025458 	.word	0x58025458
 80045b4:	5802546c 	.word	0x5802546c
 80045b8:	58025480 	.word	0x58025480
 80045bc:	58025494 	.word	0x58025494
 80045c0:	2300      	movs	r3, #0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d028      	beq.n	8004618 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2201      	movs	r2, #1
 80045e6:	409a      	lsls	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80045f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00c      	beq.n	8004618 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800460c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004616:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop

08004644 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	460b      	mov	r3, r1
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e00a      	b.n	8004676 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004660:	7afb      	ldrb	r3, [r7, #11]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	605a      	str	r2, [r3, #4]
      break;
 800466c:	e002      	b.n	8004674 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
      break;
 8004672:	bf00      	nop
  }

  return status;
 8004674:	7dfb      	ldrb	r3, [r7, #23]
}
 8004676:	4618      	mov	r0, r3
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e003      	b.n	800469e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800469c:	2300      	movs	r3, #0
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2201      	movs	r2, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80046d0:	f7ff fa42 	bl	8003b58 <HAL_GetCurrentCPUID>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d105      	bne.n	80046e6 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	011a      	lsls	r2, r3, #4
 80046de:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <HAL_EXTI_IRQHandler+0x70>)
 80046e0:	4413      	add	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e004      	b.n	80046f0 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	011a      	lsls	r2, r3, #4
 80046ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004720 <HAL_EXTI_IRQHandler+0x74>)
 80046ec:	4413      	add	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4013      	ands	r3, r2
 80046f8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d009      	beq.n	8004714 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4798      	blx	r3
    }
  }
}
 8004714:	bf00      	nop
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	58000088 	.word	0x58000088
 8004720:	580000c8 	.word	0x580000c8

08004724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	@ 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004732:	4b89      	ldr	r3, [pc, #548]	@ (8004958 <HAL_GPIO_Init+0x234>)
 8004734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004736:	e194      	b.n	8004a62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	2101      	movs	r1, #1
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	fa01 f303 	lsl.w	r3, r1, r3
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8186 	beq.w	8004a5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d005      	beq.n	8004768 <HAL_GPIO_Init+0x44>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d130      	bne.n	80047ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800479e:	2201      	movs	r2, #1
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 0201 	and.w	r2, r3, #1
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d017      	beq.n	8004806 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	2203      	movs	r2, #3
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4013      	ands	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d123      	bne.n	800485a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	08da      	lsrs	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3208      	adds	r2, #8
 800481a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	220f      	movs	r2, #15
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4313      	orrs	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	08da      	lsrs	r2, r3, #3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3208      	adds	r2, #8
 8004854:	69b9      	ldr	r1, [r7, #24]
 8004856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	2203      	movs	r2, #3
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0203 	and.w	r2, r3, #3
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80e0 	beq.w	8004a5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800489c:	4b2f      	ldr	r3, [pc, #188]	@ (800495c <HAL_GPIO_Init+0x238>)
 800489e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048a2:	4a2e      	ldr	r2, [pc, #184]	@ (800495c <HAL_GPIO_Init+0x238>)
 80048a4:	f043 0302 	orr.w	r3, r3, #2
 80048a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80048ac:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_GPIO_Init+0x238>)
 80048ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ba:	4a29      	ldr	r2, [pc, #164]	@ (8004960 <HAL_GPIO_Init+0x23c>)
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	3302      	adds	r3, #2
 80048c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	220f      	movs	r2, #15
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a20      	ldr	r2, [pc, #128]	@ (8004964 <HAL_GPIO_Init+0x240>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d052      	beq.n	800498c <HAL_GPIO_Init+0x268>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004968 <HAL_GPIO_Init+0x244>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d031      	beq.n	8004952 <HAL_GPIO_Init+0x22e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <HAL_GPIO_Init+0x248>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d02b      	beq.n	800494e <HAL_GPIO_Init+0x22a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004970 <HAL_GPIO_Init+0x24c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d025      	beq.n	800494a <HAL_GPIO_Init+0x226>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1c      	ldr	r2, [pc, #112]	@ (8004974 <HAL_GPIO_Init+0x250>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <HAL_GPIO_Init+0x222>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1b      	ldr	r2, [pc, #108]	@ (8004978 <HAL_GPIO_Init+0x254>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d019      	beq.n	8004942 <HAL_GPIO_Init+0x21e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1a      	ldr	r2, [pc, #104]	@ (800497c <HAL_GPIO_Init+0x258>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_GPIO_Init+0x21a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a19      	ldr	r2, [pc, #100]	@ (8004980 <HAL_GPIO_Init+0x25c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00d      	beq.n	800493a <HAL_GPIO_Init+0x216>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a18      	ldr	r2, [pc, #96]	@ (8004984 <HAL_GPIO_Init+0x260>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d007      	beq.n	8004936 <HAL_GPIO_Init+0x212>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a17      	ldr	r2, [pc, #92]	@ (8004988 <HAL_GPIO_Init+0x264>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <HAL_GPIO_Init+0x20e>
 800492e:	2309      	movs	r3, #9
 8004930:	e02d      	b.n	800498e <HAL_GPIO_Init+0x26a>
 8004932:	230a      	movs	r3, #10
 8004934:	e02b      	b.n	800498e <HAL_GPIO_Init+0x26a>
 8004936:	2308      	movs	r3, #8
 8004938:	e029      	b.n	800498e <HAL_GPIO_Init+0x26a>
 800493a:	2307      	movs	r3, #7
 800493c:	e027      	b.n	800498e <HAL_GPIO_Init+0x26a>
 800493e:	2306      	movs	r3, #6
 8004940:	e025      	b.n	800498e <HAL_GPIO_Init+0x26a>
 8004942:	2305      	movs	r3, #5
 8004944:	e023      	b.n	800498e <HAL_GPIO_Init+0x26a>
 8004946:	2304      	movs	r3, #4
 8004948:	e021      	b.n	800498e <HAL_GPIO_Init+0x26a>
 800494a:	2303      	movs	r3, #3
 800494c:	e01f      	b.n	800498e <HAL_GPIO_Init+0x26a>
 800494e:	2302      	movs	r3, #2
 8004950:	e01d      	b.n	800498e <HAL_GPIO_Init+0x26a>
 8004952:	2301      	movs	r3, #1
 8004954:	e01b      	b.n	800498e <HAL_GPIO_Init+0x26a>
 8004956:	bf00      	nop
 8004958:	58000080 	.word	0x58000080
 800495c:	58024400 	.word	0x58024400
 8004960:	58000400 	.word	0x58000400
 8004964:	58020000 	.word	0x58020000
 8004968:	58020400 	.word	0x58020400
 800496c:	58020800 	.word	0x58020800
 8004970:	58020c00 	.word	0x58020c00
 8004974:	58021000 	.word	0x58021000
 8004978:	58021400 	.word	0x58021400
 800497c:	58021800 	.word	0x58021800
 8004980:	58021c00 	.word	0x58021c00
 8004984:	58022000 	.word	0x58022000
 8004988:	58022400 	.word	0x58022400
 800498c:	2300      	movs	r3, #0
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	f002 0203 	and.w	r2, r2, #3
 8004994:	0092      	lsls	r2, r2, #2
 8004996:	4093      	lsls	r3, r2
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800499e:	4938      	ldr	r1, [pc, #224]	@ (8004a80 <HAL_GPIO_Init+0x35c>)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	3302      	adds	r3, #2
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f47f ae63 	bne.w	8004738 <HAL_GPIO_Init+0x14>
  }
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	3724      	adds	r7, #36	@ 0x24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	58000400 	.word	0x58000400

08004a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	807b      	strh	r3, [r7, #2]
 8004a90:	4613      	mov	r3, r2
 8004a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a94:	787b      	ldrb	r3, [r7, #1]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a9a:	887a      	ldrh	r2, [r7, #2]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004aa0:	e003      	b.n	8004aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aa2:	887b      	ldrh	r3, [r7, #2]
 8004aa4:	041a      	lsls	r2, r3, #16
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	619a      	str	r2, [r3, #24]
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ac8:	887a      	ldrh	r2, [r7, #2]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	041a      	lsls	r2, r3, #16
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	43d9      	mvns	r1, r3
 8004ad4:	887b      	ldrh	r3, [r7, #2]
 8004ad6:	400b      	ands	r3, r1
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	619a      	str	r2, [r3, #24]
}
 8004ade:	bf00      	nop
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004af4:	4b29      	ldr	r3, [pc, #164]	@ (8004b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	2b06      	cmp	r3, #6
 8004afe:	d00a      	beq.n	8004b16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b00:	4b26      	ldr	r3, [pc, #152]	@ (8004b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d001      	beq.n	8004b12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e040      	b.n	8004b94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e03e      	b.n	8004b94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b16:	4b21      	ldr	r3, [pc, #132]	@ (8004b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004b1e:	491f      	ldr	r1, [pc, #124]	@ (8004b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b26:	f7fd fe17 	bl	8002758 <HAL_GetTick>
 8004b2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b2c:	e009      	b.n	8004b42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b2e:	f7fd fe13 	bl	8002758 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b3c:	d901      	bls.n	8004b42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e028      	b.n	8004b94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b42:	4b16      	ldr	r3, [pc, #88]	@ (8004b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b4e:	d1ee      	bne.n	8004b2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b1e      	cmp	r3, #30
 8004b54:	d008      	beq.n	8004b68 <HAL_PWREx_ConfigSupply+0x7c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b5a:	d005      	beq.n	8004b68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b1d      	cmp	r3, #29
 8004b60:	d002      	beq.n	8004b68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b2d      	cmp	r3, #45	@ 0x2d
 8004b66:	d114      	bne.n	8004b92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004b68:	f7fd fdf6 	bl	8002758 <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b6e:	e009      	b.n	8004b84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b70:	f7fd fdf2 	bl	8002758 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b7e:	d901      	bls.n	8004b84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e007      	b.n	8004b94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b90:	d1ee      	bne.n	8004b70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	58024800 	.word	0x58024800

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	@ 0x30
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f000 bc48 	b.w	8005444 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8088 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc2:	4b99      	ldr	r3, [pc, #612]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bcc:	4b96      	ldr	r3, [pc, #600]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d007      	beq.n	8004be8 <HAL_RCC_OscConfig+0x48>
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bda:	2b18      	cmp	r3, #24
 8004bdc:	d111      	bne.n	8004c02 <HAL_RCC_OscConfig+0x62>
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d10c      	bne.n	8004c02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be8:	4b8f      	ldr	r3, [pc, #572]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d06d      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x130>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d169      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f000 bc21 	b.w	8005444 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0a:	d106      	bne.n	8004c1a <HAL_RCC_OscConfig+0x7a>
 8004c0c:	4b86      	ldr	r3, [pc, #536]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a85      	ldr	r2, [pc, #532]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e02e      	b.n	8004c78 <HAL_RCC_OscConfig+0xd8>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10c      	bne.n	8004c3c <HAL_RCC_OscConfig+0x9c>
 8004c22:	4b81      	ldr	r3, [pc, #516]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a80      	ldr	r2, [pc, #512]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4b7e      	ldr	r3, [pc, #504]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a7d      	ldr	r2, [pc, #500]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e01d      	b.n	8004c78 <HAL_RCC_OscConfig+0xd8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCC_OscConfig+0xc0>
 8004c46:	4b78      	ldr	r3, [pc, #480]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a77      	ldr	r2, [pc, #476]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b75      	ldr	r3, [pc, #468]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a74      	ldr	r2, [pc, #464]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e00b      	b.n	8004c78 <HAL_RCC_OscConfig+0xd8>
 8004c60:	4b71      	ldr	r3, [pc, #452]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a70      	ldr	r2, [pc, #448]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b6e      	ldr	r3, [pc, #440]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a6d      	ldr	r2, [pc, #436]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fd fd6a 	bl	8002758 <HAL_GetTick>
 8004c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fd fd66 	bl	8002758 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e3d4      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c9a:	4b63      	ldr	r3, [pc, #396]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0xe8>
 8004ca6:	e014      	b.n	8004cd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd fd56 	bl	8002758 <HAL_GetTick>
 8004cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb0:	f7fd fd52 	bl	8002758 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b64      	cmp	r3, #100	@ 0x64
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e3c0      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cc2:	4b59      	ldr	r3, [pc, #356]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x110>
 8004cce:	e000      	b.n	8004cd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80ca 	beq.w	8004e74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce0:	4b51      	ldr	r3, [pc, #324]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ce8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cea:	4b4f      	ldr	r3, [pc, #316]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_RCC_OscConfig+0x166>
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	2b18      	cmp	r3, #24
 8004cfa:	d156      	bne.n	8004daa <HAL_RCC_OscConfig+0x20a>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d151      	bne.n	8004daa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d06:	4b48      	ldr	r3, [pc, #288]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_RCC_OscConfig+0x17e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e392      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d1e:	4b42      	ldr	r3, [pc, #264]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 0219 	bic.w	r2, r3, #25
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	493f      	ldr	r1, [pc, #252]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fd fd12 	bl	8002758 <HAL_GetTick>
 8004d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d38:	f7fd fd0e 	bl	8002758 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e37c      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d4a:	4b37      	ldr	r3, [pc, #220]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	f7fd fd0b 	bl	8002770 <HAL_GetREVID>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d817      	bhi.n	8004d94 <HAL_RCC_OscConfig+0x1f4>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	2b40      	cmp	r3, #64	@ 0x40
 8004d6a:	d108      	bne.n	8004d7e <HAL_RCC_OscConfig+0x1de>
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004d74:	4a2c      	ldr	r2, [pc, #176]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d7c:	e07a      	b.n	8004e74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	031b      	lsls	r3, r3, #12
 8004d8c:	4926      	ldr	r1, [pc, #152]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d92:	e06f      	b.n	8004e74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d94:	4b24      	ldr	r3, [pc, #144]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	061b      	lsls	r3, r3, #24
 8004da2:	4921      	ldr	r1, [pc, #132]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da8:	e064      	b.n	8004e74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d047      	beq.n	8004e42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004db2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 0219 	bic.w	r2, r3, #25
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	491a      	ldr	r1, [pc, #104]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc4:	f7fd fcc8 	bl	8002758 <HAL_GetTick>
 8004dc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dcc:	f7fd fcc4 	bl	8002758 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e332      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dde:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dea:	f7fd fcc1 	bl	8002770 <HAL_GetREVID>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d819      	bhi.n	8004e2c <HAL_RCC_OscConfig+0x28c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b40      	cmp	r3, #64	@ 0x40
 8004dfe:	d108      	bne.n	8004e12 <HAL_RCC_OscConfig+0x272>
 8004e00:	4b09      	ldr	r3, [pc, #36]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004e08:	4a07      	ldr	r2, [pc, #28]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e0e:	6053      	str	r3, [r2, #4]
 8004e10:	e030      	b.n	8004e74 <HAL_RCC_OscConfig+0x2d4>
 8004e12:	4b05      	ldr	r3, [pc, #20]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	031b      	lsls	r3, r3, #12
 8004e20:	4901      	ldr	r1, [pc, #4]	@ (8004e28 <HAL_RCC_OscConfig+0x288>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	604b      	str	r3, [r1, #4]
 8004e26:	e025      	b.n	8004e74 <HAL_RCC_OscConfig+0x2d4>
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	4b9a      	ldr	r3, [pc, #616]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	061b      	lsls	r3, r3, #24
 8004e3a:	4997      	ldr	r1, [pc, #604]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]
 8004e40:	e018      	b.n	8004e74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e42:	4b95      	ldr	r3, [pc, #596]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a94      	ldr	r2, [pc, #592]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fd fc83 	bl	8002758 <HAL_GetTick>
 8004e52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e56:	f7fd fc7f 	bl	8002758 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e2ed      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e68:	4b8b      	ldr	r3, [pc, #556]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f0      	bne.n	8004e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a9 	beq.w	8004fd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e82:	4b85      	ldr	r3, [pc, #532]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e8c:	4b82      	ldr	r3, [pc, #520]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d007      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x308>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b18      	cmp	r3, #24
 8004e9c:	d13a      	bne.n	8004f14 <HAL_RCC_OscConfig+0x374>
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d135      	bne.n	8004f14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ea8:	4b7b      	ldr	r3, [pc, #492]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x320>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b80      	cmp	r3, #128	@ 0x80
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e2c1      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ec0:	f7fd fc56 	bl	8002770 <HAL_GetREVID>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d817      	bhi.n	8004efe <HAL_RCC_OscConfig+0x35e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d108      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x348>
 8004ed6:	4b70      	ldr	r3, [pc, #448]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004ede:	4a6e      	ldr	r2, [pc, #440]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004ee0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ee4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ee6:	e075      	b.n	8004fd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ee8:	4b6b      	ldr	r3, [pc, #428]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	069b      	lsls	r3, r3, #26
 8004ef6:	4968      	ldr	r1, [pc, #416]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004efc:	e06a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004efe:	4b66      	ldr	r3, [pc, #408]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	4962      	ldr	r1, [pc, #392]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f12:	e05f      	b.n	8004fd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d042      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f1c:	4b5e      	ldr	r3, [pc, #376]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a5d      	ldr	r2, [pc, #372]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fd fc16 	bl	8002758 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f30:	f7fd fc12 	bl	8002758 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e280      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f42:	4b55      	ldr	r3, [pc, #340]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f4e:	f7fd fc0f 	bl	8002770 <HAL_GetREVID>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d817      	bhi.n	8004f8c <HAL_RCC_OscConfig+0x3ec>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d108      	bne.n	8004f76 <HAL_RCC_OscConfig+0x3d6>
 8004f64:	4b4c      	ldr	r3, [pc, #304]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f72:	6053      	str	r3, [r2, #4]
 8004f74:	e02e      	b.n	8004fd4 <HAL_RCC_OscConfig+0x434>
 8004f76:	4b48      	ldr	r3, [pc, #288]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	069b      	lsls	r3, r3, #26
 8004f84:	4944      	ldr	r1, [pc, #272]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	604b      	str	r3, [r1, #4]
 8004f8a:	e023      	b.n	8004fd4 <HAL_RCC_OscConfig+0x434>
 8004f8c:	4b42      	ldr	r3, [pc, #264]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	493f      	ldr	r1, [pc, #252]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60cb      	str	r3, [r1, #12]
 8004fa0:	e018      	b.n	8004fd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a3c      	ldr	r2, [pc, #240]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004fa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fd fbd3 	bl	8002758 <HAL_GetTick>
 8004fb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fb6:	f7fd fbcf 	bl	8002758 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e23d      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fc8:	4b33      	ldr	r3, [pc, #204]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d036      	beq.n	800504e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d019      	beq.n	800501c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fec:	4a2a      	ldr	r2, [pc, #168]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fd fbb0 	bl	8002758 <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ffc:	f7fd fbac 	bl	8002758 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e21a      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800500e:	4b22      	ldr	r3, [pc, #136]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8005010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x45c>
 800501a:	e018      	b.n	800504e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800501c:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 800501e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005020:	4a1d      	ldr	r2, [pc, #116]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fd fb96 	bl	8002758 <HAL_GetTick>
 800502c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005030:	f7fd fb92 	bl	8002758 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e200      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005042:	4b15      	ldr	r3, [pc, #84]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8005044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d039      	beq.n	80050ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01c      	beq.n	800509c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005062:	4b0d      	ldr	r3, [pc, #52]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a0c      	ldr	r2, [pc, #48]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 8005068:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800506c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800506e:	f7fd fb73 	bl	8002758 <HAL_GetTick>
 8005072:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005076:	f7fd fb6f 	bl	8002758 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e1dd      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005088:	4b03      	ldr	r3, [pc, #12]	@ (8005098 <HAL_RCC_OscConfig+0x4f8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x4d6>
 8005094:	e01b      	b.n	80050ce <HAL_RCC_OscConfig+0x52e>
 8005096:	bf00      	nop
 8005098:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800509c:	4b9b      	ldr	r3, [pc, #620]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a9a      	ldr	r2, [pc, #616]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80050a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050a8:	f7fd fb56 	bl	8002758 <HAL_GetTick>
 80050ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050b0:	f7fd fb52 	bl	8002758 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e1c0      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050c2:	4b92      	ldr	r3, [pc, #584]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 8081 	beq.w	80051de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005310 <HAL_RCC_OscConfig+0x770>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a8b      	ldr	r2, [pc, #556]	@ (8005310 <HAL_RCC_OscConfig+0x770>)
 80050e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050e8:	f7fd fb36 	bl	8002758 <HAL_GetTick>
 80050ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f0:	f7fd fb32 	bl	8002758 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	@ 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e1a0      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005102:	4b83      	ldr	r3, [pc, #524]	@ (8005310 <HAL_RCC_OscConfig+0x770>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d106      	bne.n	8005124 <HAL_RCC_OscConfig+0x584>
 8005116:	4b7d      	ldr	r3, [pc, #500]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511a:	4a7c      	ldr	r2, [pc, #496]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	6713      	str	r3, [r2, #112]	@ 0x70
 8005122:	e02d      	b.n	8005180 <HAL_RCC_OscConfig+0x5e0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10c      	bne.n	8005146 <HAL_RCC_OscConfig+0x5a6>
 800512c:	4b77      	ldr	r3, [pc, #476]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005130:	4a76      	ldr	r2, [pc, #472]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	6713      	str	r3, [r2, #112]	@ 0x70
 8005138:	4b74      	ldr	r3, [pc, #464]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513c:	4a73      	ldr	r2, [pc, #460]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800513e:	f023 0304 	bic.w	r3, r3, #4
 8005142:	6713      	str	r3, [r2, #112]	@ 0x70
 8005144:	e01c      	b.n	8005180 <HAL_RCC_OscConfig+0x5e0>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b05      	cmp	r3, #5
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x5c8>
 800514e:	4b6f      	ldr	r3, [pc, #444]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005152:	4a6e      	ldr	r2, [pc, #440]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005154:	f043 0304 	orr.w	r3, r3, #4
 8005158:	6713      	str	r3, [r2, #112]	@ 0x70
 800515a:	4b6c      	ldr	r3, [pc, #432]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515e:	4a6b      	ldr	r2, [pc, #428]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	6713      	str	r3, [r2, #112]	@ 0x70
 8005166:	e00b      	b.n	8005180 <HAL_RCC_OscConfig+0x5e0>
 8005168:	4b68      	ldr	r3, [pc, #416]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516c:	4a67      	ldr	r2, [pc, #412]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	@ 0x70
 8005174:	4b65      	ldr	r3, [pc, #404]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005178:	4a64      	ldr	r2, [pc, #400]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800517a:	f023 0304 	bic.w	r3, r3, #4
 800517e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d015      	beq.n	80051b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005188:	f7fd fae6 	bl	8002758 <HAL_GetTick>
 800518c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f7fd fae2 	bl	8002758 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e14e      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051a6:	4b59      	ldr	r3, [pc, #356]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ee      	beq.n	8005190 <HAL_RCC_OscConfig+0x5f0>
 80051b2:	e014      	b.n	80051de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7fd fad0 	bl	8002758 <HAL_GetTick>
 80051b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051bc:	f7fd facc 	bl	8002758 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e138      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051d2:	4b4e      	ldr	r3, [pc, #312]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1ee      	bne.n	80051bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 812d 	beq.w	8005442 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051e8:	4b48      	ldr	r3, [pc, #288]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051f0:	2b18      	cmp	r3, #24
 80051f2:	f000 80bd 	beq.w	8005370 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	f040 809e 	bne.w	800533c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005200:	4b42      	ldr	r3, [pc, #264]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a41      	ldr	r2, [pc, #260]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800520a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fd faa4 	bl	8002758 <HAL_GetTick>
 8005210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005214:	f7fd faa0 	bl	8002758 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e10e      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005226:	4b39      	ldr	r3, [pc, #228]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005232:	4b36      	ldr	r3, [pc, #216]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005234:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005236:	4b37      	ldr	r3, [pc, #220]	@ (8005314 <HAL_RCC_OscConfig+0x774>)
 8005238:	4013      	ands	r3, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005242:	0112      	lsls	r2, r2, #4
 8005244:	430a      	orrs	r2, r1
 8005246:	4931      	ldr	r1, [pc, #196]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	628b      	str	r3, [r1, #40]	@ 0x28
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	3b01      	subs	r3, #1
 8005252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525a:	3b01      	subs	r3, #1
 800525c:	025b      	lsls	r3, r3, #9
 800525e:	b29b      	uxth	r3, r3
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005266:	3b01      	subs	r3, #1
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005274:	3b01      	subs	r3, #1
 8005276:	061b      	lsls	r3, r3, #24
 8005278:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800527c:	4923      	ldr	r1, [pc, #140]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005282:	4b22      	ldr	r3, [pc, #136]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	4a21      	ldr	r2, [pc, #132]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800528e:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 8005290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005292:	4b21      	ldr	r3, [pc, #132]	@ (8005318 <HAL_RCC_OscConfig+0x778>)
 8005294:	4013      	ands	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800529a:	00d2      	lsls	r2, r2, #3
 800529c:	491b      	ldr	r1, [pc, #108]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052a2:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a6:	f023 020c 	bic.w	r2, r3, #12
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	4917      	ldr	r1, [pc, #92]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052b4:	4b15      	ldr	r3, [pc, #84]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	f023 0202 	bic.w	r2, r3, #2
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c0:	4912      	ldr	r1, [pc, #72]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052c6:	4b11      	ldr	r3, [pc, #68]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ca:	4a10      	ldr	r2, [pc, #64]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d2:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	4a0d      	ldr	r2, [pc, #52]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052de:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	4a0a      	ldr	r2, [pc, #40]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052ea:	4b08      	ldr	r3, [pc, #32]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	4a07      	ldr	r2, [pc, #28]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f6:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a04      	ldr	r2, [pc, #16]	@ (800530c <HAL_RCC_OscConfig+0x76c>)
 80052fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005302:	f7fd fa29 	bl	8002758 <HAL_GetTick>
 8005306:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005308:	e011      	b.n	800532e <HAL_RCC_OscConfig+0x78e>
 800530a:	bf00      	nop
 800530c:	58024400 	.word	0x58024400
 8005310:	58024800 	.word	0x58024800
 8005314:	fffffc0c 	.word	0xfffffc0c
 8005318:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531c:	f7fd fa1c 	bl	8002758 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e08a      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800532e:	4b47      	ldr	r3, [pc, #284]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x77c>
 800533a:	e082      	b.n	8005442 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533c:	4b43      	ldr	r3, [pc, #268]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a42      	ldr	r2, [pc, #264]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fd fa06 	bl	8002758 <HAL_GetTick>
 800534c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005350:	f7fd fa02 	bl	8002758 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e070      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005362:	4b3a      	ldr	r3, [pc, #232]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x7b0>
 800536e:	e068      	b.n	8005442 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005370:	4b36      	ldr	r3, [pc, #216]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005376:	4b35      	ldr	r3, [pc, #212]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	2b01      	cmp	r3, #1
 8005382:	d031      	beq.n	80053e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f003 0203 	and.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800538e:	429a      	cmp	r2, r3
 8005390:	d12a      	bne.n	80053e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d122      	bne.n	80053e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d11a      	bne.n	80053e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	0a5b      	lsrs	r3, r3, #9
 80053b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d111      	bne.n	80053e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	0c1b      	lsrs	r3, r3, #16
 80053c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d108      	bne.n	80053e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	0e1b      	lsrs	r3, r3, #24
 80053da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e02b      	b.n	8005444 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053ec:	4b17      	ldr	r3, [pc, #92]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 80053ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f0:	08db      	lsrs	r3, r3, #3
 80053f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d01f      	beq.n	8005442 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005402:	4b12      	ldr	r3, [pc, #72]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	4a11      	ldr	r2, [pc, #68]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800540e:	f7fd f9a3 	bl	8002758 <HAL_GetTick>
 8005412:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005414:	bf00      	nop
 8005416:	f7fd f99f 	bl	8002758 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	4293      	cmp	r3, r2
 8005420:	d0f9      	beq.n	8005416 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005422:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005424:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005426:	4b0a      	ldr	r3, [pc, #40]	@ (8005450 <HAL_RCC_OscConfig+0x8b0>)
 8005428:	4013      	ands	r3, r2
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800542e:	00d2      	lsls	r2, r2, #3
 8005430:	4906      	ldr	r1, [pc, #24]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005432:	4313      	orrs	r3, r2
 8005434:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005436:	4b05      	ldr	r3, [pc, #20]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	4a04      	ldr	r2, [pc, #16]	@ (800544c <HAL_RCC_OscConfig+0x8ac>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3730      	adds	r7, #48	@ 0x30
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	58024400 	.word	0x58024400
 8005450:	ffff0007 	.word	0xffff0007

08005454 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e19c      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005468:	4b8a      	ldr	r3, [pc, #552]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d910      	bls.n	8005498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005476:	4b87      	ldr	r3, [pc, #540]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 020f 	bic.w	r2, r3, #15
 800547e:	4985      	ldr	r1, [pc, #532]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b83      	ldr	r3, [pc, #524]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e184      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d010      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	4b7b      	ldr	r3, [pc, #492]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d908      	bls.n	80054c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054b4:	4b78      	ldr	r3, [pc, #480]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	4975      	ldr	r1, [pc, #468]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d010      	beq.n	80054f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	4b70      	ldr	r3, [pc, #448]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054de:	429a      	cmp	r2, r3
 80054e0:	d908      	bls.n	80054f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	496a      	ldr	r1, [pc, #424]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	4b64      	ldr	r3, [pc, #400]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800550c:	429a      	cmp	r2, r3
 800550e:	d908      	bls.n	8005522 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005510:	4b61      	ldr	r3, [pc, #388]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	495e      	ldr	r1, [pc, #376]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800551e:	4313      	orrs	r3, r2
 8005520:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d010      	beq.n	8005550 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69da      	ldr	r2, [r3, #28]
 8005532:	4b59      	ldr	r3, [pc, #356]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800553a:	429a      	cmp	r2, r3
 800553c:	d908      	bls.n	8005550 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800553e:	4b56      	ldr	r3, [pc, #344]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	4953      	ldr	r1, [pc, #332]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800554c:	4313      	orrs	r3, r2
 800554e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d010      	beq.n	800557e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	4b4d      	ldr	r3, [pc, #308]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	429a      	cmp	r2, r3
 800556a:	d908      	bls.n	800557e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556c:	4b4a      	ldr	r3, [pc, #296]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f023 020f 	bic.w	r2, r3, #15
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4947      	ldr	r1, [pc, #284]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800557a:	4313      	orrs	r3, r2
 800557c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d055      	beq.n	8005636 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800558a:	4b43      	ldr	r3, [pc, #268]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	4940      	ldr	r1, [pc, #256]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005598:	4313      	orrs	r3, r2
 800559a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d107      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d121      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0f6      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d107      	bne.n	80055cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055bc:	4b36      	ldr	r3, [pc, #216]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d115      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0ea      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d107      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055d4:	4b30      	ldr	r3, [pc, #192]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0de      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0d6      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055f4:	4b28      	ldr	r3, [pc, #160]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f023 0207 	bic.w	r2, r3, #7
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4925      	ldr	r1, [pc, #148]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005602:	4313      	orrs	r3, r2
 8005604:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005606:	f7fd f8a7 	bl	8002758 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560c:	e00a      	b.n	8005624 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560e:	f7fd f8a3 	bl	8002758 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800561c:	4293      	cmp	r3, r2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e0be      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005624:	4b1c      	ldr	r3, [pc, #112]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	429a      	cmp	r2, r3
 8005634:	d1eb      	bne.n	800560e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d010      	beq.n	8005664 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	4b14      	ldr	r3, [pc, #80]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	429a      	cmp	r2, r3
 8005650:	d208      	bcs.n	8005664 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005652:	4b11      	ldr	r3, [pc, #68]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f023 020f 	bic.w	r2, r3, #15
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	490e      	ldr	r1, [pc, #56]	@ (8005698 <HAL_RCC_ClockConfig+0x244>)
 8005660:	4313      	orrs	r3, r2
 8005662:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005664:	4b0b      	ldr	r3, [pc, #44]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d214      	bcs.n	800569c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 020f 	bic.w	r2, r3, #15
 800567a:	4906      	ldr	r1, [pc, #24]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	4313      	orrs	r3, r2
 8005680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005682:	4b04      	ldr	r3, [pc, #16]	@ (8005694 <HAL_RCC_ClockConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d005      	beq.n	800569c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e086      	b.n	80057a2 <HAL_RCC_ClockConfig+0x34e>
 8005694:	52002000 	.word	0x52002000
 8005698:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	4b3f      	ldr	r3, [pc, #252]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d208      	bcs.n	80056ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056b8:	4b3c      	ldr	r3, [pc, #240]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	4939      	ldr	r1, [pc, #228]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d010      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	4b34      	ldr	r3, [pc, #208]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d208      	bcs.n	80056f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056e6:	4b31      	ldr	r3, [pc, #196]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	492e      	ldr	r1, [pc, #184]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	4b28      	ldr	r3, [pc, #160]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005710:	429a      	cmp	r2, r3
 8005712:	d208      	bcs.n	8005726 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005714:	4b25      	ldr	r3, [pc, #148]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	4922      	ldr	r1, [pc, #136]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005722:	4313      	orrs	r3, r2
 8005724:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d010      	beq.n	8005754 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	4b1d      	ldr	r3, [pc, #116]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800573e:	429a      	cmp	r2, r3
 8005740:	d208      	bcs.n	8005754 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005742:	4b1a      	ldr	r3, [pc, #104]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	4917      	ldr	r1, [pc, #92]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005750:	4313      	orrs	r3, r2
 8005752:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005754:	f000 f834 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	4912      	ldr	r1, [pc, #72]	@ (80057b0 <HAL_RCC_ClockConfig+0x35c>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
 8005770:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005772:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <HAL_RCC_ClockConfig+0x358>)
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	4a0d      	ldr	r2, [pc, #52]	@ (80057b0 <HAL_RCC_ClockConfig+0x35c>)
 800577c:	5cd3      	ldrb	r3, [r2, r3]
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
 8005788:	4a0a      	ldr	r2, [pc, #40]	@ (80057b4 <HAL_RCC_ClockConfig+0x360>)
 800578a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800578c:	4a0a      	ldr	r2, [pc, #40]	@ (80057b8 <HAL_RCC_ClockConfig+0x364>)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005792:	4b0a      	ldr	r3, [pc, #40]	@ (80057bc <HAL_RCC_ClockConfig+0x368>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fc ff94 	bl	80026c4 <HAL_InitTick>
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	58024400 	.word	0x58024400
 80057b0:	08013840 	.word	0x08013840
 80057b4:	24000004 	.word	0x24000004
 80057b8:	24000000 	.word	0x24000000
 80057bc:	2400002c 	.word	0x2400002c

080057c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	@ 0x24
 80057c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057c6:	4bb3      	ldr	r3, [pc, #716]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057ce:	2b18      	cmp	r3, #24
 80057d0:	f200 8155 	bhi.w	8005a7e <HAL_RCC_GetSysClockFreq+0x2be>
 80057d4:	a201      	add	r2, pc, #4	@ (adr r2, 80057dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80057d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057da:	bf00      	nop
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005a7f 	.word	0x08005a7f
 80057e4:	08005a7f 	.word	0x08005a7f
 80057e8:	08005a7f 	.word	0x08005a7f
 80057ec:	08005a7f 	.word	0x08005a7f
 80057f0:	08005a7f 	.word	0x08005a7f
 80057f4:	08005a7f 	.word	0x08005a7f
 80057f8:	08005a7f 	.word	0x08005a7f
 80057fc:	08005867 	.word	0x08005867
 8005800:	08005a7f 	.word	0x08005a7f
 8005804:	08005a7f 	.word	0x08005a7f
 8005808:	08005a7f 	.word	0x08005a7f
 800580c:	08005a7f 	.word	0x08005a7f
 8005810:	08005a7f 	.word	0x08005a7f
 8005814:	08005a7f 	.word	0x08005a7f
 8005818:	08005a7f 	.word	0x08005a7f
 800581c:	0800586d 	.word	0x0800586d
 8005820:	08005a7f 	.word	0x08005a7f
 8005824:	08005a7f 	.word	0x08005a7f
 8005828:	08005a7f 	.word	0x08005a7f
 800582c:	08005a7f 	.word	0x08005a7f
 8005830:	08005a7f 	.word	0x08005a7f
 8005834:	08005a7f 	.word	0x08005a7f
 8005838:	08005a7f 	.word	0x08005a7f
 800583c:	08005873 	.word	0x08005873
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005840:	4b94      	ldr	r3, [pc, #592]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800584c:	4b91      	ldr	r3, [pc, #580]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	08db      	lsrs	r3, r3, #3
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	4a90      	ldr	r2, [pc, #576]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800585e:	e111      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005860:	4b8d      	ldr	r3, [pc, #564]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005862:	61bb      	str	r3, [r7, #24]
      break;
 8005864:	e10e      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005866:	4b8d      	ldr	r3, [pc, #564]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005868:	61bb      	str	r3, [r7, #24]
      break;
 800586a:	e10b      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800586c:	4b8c      	ldr	r3, [pc, #560]	@ (8005aa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800586e:	61bb      	str	r3, [r7, #24]
      break;
 8005870:	e108      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005872:	4b88      	ldr	r3, [pc, #544]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800587c:	4b85      	ldr	r3, [pc, #532]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005886:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005888:	4b82      	ldr	r3, [pc, #520]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005892:	4b80      	ldr	r3, [pc, #512]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005896:	08db      	lsrs	r3, r3, #3
 8005898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	fb02 f303 	mul.w	r3, r2, r3
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80e1 	beq.w	8005a78 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	f000 8083 	beq.w	80059c4 <HAL_RCC_GetSysClockFreq+0x204>
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	f200 80a1 	bhi.w	8005a08 <HAL_RCC_GetSysClockFreq+0x248>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_RCC_GetSysClockFreq+0x114>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d056      	beq.n	8005980 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058d2:	e099      	b.n	8005a08 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d02d      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	08db      	lsrs	r3, r3, #3
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	4a6b      	ldr	r2, [pc, #428]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	ee07 3a90 	vmov	s15, r3
 80058f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590a:	4b62      	ldr	r3, [pc, #392]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591a:	ed97 6a02 	vldr	s12, [r7, #8]
 800591e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800592e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005936:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800593a:	e087      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005946:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800594a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800594e:	4b51      	ldr	r3, [pc, #324]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005962:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800596e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800597e:	e065      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005aac <HAL_RCC_GetSysClockFreq+0x2ec>
 800598e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005992:	4b40      	ldr	r3, [pc, #256]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059c2:	e043      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ab0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a06:	e021      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005aac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a4c:	4b11      	ldr	r3, [pc, #68]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a50:	0a5b      	lsrs	r3, r3, #9
 8005a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a56:	3301      	adds	r3, #1
 8005a58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a70:	ee17 3a90 	vmov	r3, s15
 8005a74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a76:	e005      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
      break;
 8005a7c:	e002      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a7e:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a80:	61bb      	str	r3, [r7, #24]
      break;
 8005a82:	bf00      	nop
  }

  return sysclockfreq;
 8005a84:	69bb      	ldr	r3, [r7, #24]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3724      	adds	r7, #36	@ 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	58024400 	.word	0x58024400
 8005a98:	03d09000 	.word	0x03d09000
 8005a9c:	003d0900 	.word	0x003d0900
 8005aa0:	017d7840 	.word	0x017d7840
 8005aa4:	46000000 	.word	0x46000000
 8005aa8:	4c742400 	.word	0x4c742400
 8005aac:	4a742400 	.word	0x4a742400
 8005ab0:	4bbebc20 	.word	0x4bbebc20

08005ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005aba:	f7ff fe81 	bl	80057c0 <HAL_RCC_GetSysClockFreq>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4b10      	ldr	r3, [pc, #64]	@ (8005b04 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	0a1b      	lsrs	r3, r3, #8
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	490f      	ldr	r1, [pc, #60]	@ (8005b08 <HAL_RCC_GetHCLKFreq+0x54>)
 8005acc:	5ccb      	ldrb	r3, [r1, r3]
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	4a09      	ldr	r2, [pc, #36]	@ (8005b08 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ae2:	5cd3      	ldrb	r3, [r2, r3]
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	fa22 f303 	lsr.w	r3, r2, r3
 8005aee:	4a07      	ldr	r2, [pc, #28]	@ (8005b0c <HAL_RCC_GetHCLKFreq+0x58>)
 8005af0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005af2:	4a07      	ldr	r2, [pc, #28]	@ (8005b10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005af8:	4b04      	ldr	r3, [pc, #16]	@ (8005b0c <HAL_RCC_GetHCLKFreq+0x58>)
 8005afa:	681b      	ldr	r3, [r3, #0]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	58024400 	.word	0x58024400
 8005b08:	08013840 	.word	0x08013840
 8005b0c:	24000004 	.word	0x24000004
 8005b10:	24000000 	.word	0x24000000

08005b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b18:	f7ff ffcc 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	091b      	lsrs	r3, r3, #4
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	4904      	ldr	r1, [pc, #16]	@ (8005b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b2a:	5ccb      	ldrb	r3, [r1, r3]
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	08013840 	.word	0x08013840

08005b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b44:	f7ff ffb6 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4904      	ldr	r1, [pc, #16]	@ (8005b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	58024400 	.word	0x58024400
 8005b68:	08013840 	.word	0x08013840

08005b6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b70:	b0ca      	sub	sp, #296	@ 0x128
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b90:	2500      	movs	r5, #0
 8005b92:	ea54 0305 	orrs.w	r3, r4, r5
 8005b96:	d049      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ba2:	d02f      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ba4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ba8:	d828      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005baa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bae:	d01a      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005bb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bb4:	d822      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005bba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bbe:	d007      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005bc0:	e01c      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc2:	4bb8      	ldr	r3, [pc, #736]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc6:	4ab7      	ldr	r2, [pc, #732]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bce:	e01a      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f002 fb61 	bl	80082a0 <RCCEx_PLL2_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005be4:	e00f      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bea:	3328      	adds	r3, #40	@ 0x28
 8005bec:	2102      	movs	r1, #2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f002 fc08 	bl	8008404 <RCCEx_PLL3_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bfa:	e004      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c02:	e000      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c0e:	4ba5      	ldr	r3, [pc, #660]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c1c:	4aa1      	ldr	r2, [pc, #644]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c22:	e003      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005c38:	f04f 0900 	mov.w	r9, #0
 8005c3c:	ea58 0309 	orrs.w	r3, r8, r9
 8005c40:	d047      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d82a      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005c69 	.word	0x08005c69
 8005c58:	08005c77 	.word	0x08005c77
 8005c5c:	08005c8d 	.word	0x08005c8d
 8005c60:	08005cab 	.word	0x08005cab
 8005c64:	08005cab 	.word	0x08005cab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c68:	4b8e      	ldr	r3, [pc, #568]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	4a8d      	ldr	r2, [pc, #564]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c74:	e01a      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f002 fb0e 	bl	80082a0 <RCCEx_PLL2_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c8a:	e00f      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c90:	3328      	adds	r3, #40	@ 0x28
 8005c92:	2100      	movs	r1, #0
 8005c94:	4618      	mov	r0, r3
 8005c96:	f002 fbb5 	bl	8008404 <RCCEx_PLL3_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ca0:	e004      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ca8:	e000      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb8:	f023 0107 	bic.w	r1, r3, #7
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	4a78      	ldr	r2, [pc, #480]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cc8:	e003      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cda:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005cde:	f04f 0b00 	mov.w	fp, #0
 8005ce2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ce6:	d04c      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cf2:	d030      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cf8:	d829      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005cfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cfc:	d02d      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005cfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d00:	d825      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d02:	2b80      	cmp	r3, #128	@ 0x80
 8005d04:	d018      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005d06:	2b80      	cmp	r3, #128	@ 0x80
 8005d08:	d821      	bhi.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005d0e:	2b40      	cmp	r3, #64	@ 0x40
 8005d10:	d007      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005d12:	e01c      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d14:	4b63      	ldr	r3, [pc, #396]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	4a62      	ldr	r2, [pc, #392]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005d20:	e01c      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	3308      	adds	r3, #8
 8005d28:	2100      	movs	r1, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f002 fab8 	bl	80082a0 <RCCEx_PLL2_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005d36:	e011      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3c:	3328      	adds	r3, #40	@ 0x28
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f002 fb5f 	bl	8008404 <RCCEx_PLL3_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005d4c:	e006      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d54:	e002      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d64:	4b4f      	ldr	r3, [pc, #316]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d72:	4a4c      	ldr	r2, [pc, #304]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d74:	430b      	orrs	r3, r1
 8005d76:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d78:	e003      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005d8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005d92:	2300      	movs	r3, #0
 8005d94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005d98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	d053      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005daa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005dae:	d035      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005db0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005db4:	d82e      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005db6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005dba:	d031      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005dbc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005dc0:	d828      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dc6:	d01a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dcc:	d822      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005dd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dd6:	d007      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005dd8:	e01c      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dda:	4b32      	ldr	r3, [pc, #200]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dde:	4a31      	ldr	r2, [pc, #196]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005de4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005de6:	e01c      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dec:	3308      	adds	r3, #8
 8005dee:	2100      	movs	r1, #0
 8005df0:	4618      	mov	r0, r3
 8005df2:	f002 fa55 	bl	80082a0 <RCCEx_PLL2_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005dfc:	e011      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e02:	3328      	adds	r3, #40	@ 0x28
 8005e04:	2100      	movs	r1, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	f002 fafc 	bl	8008404 <RCCEx_PLL3_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e12:	e006      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e1a:	e002      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e40:	e003      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005e56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005e60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d056      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e76:	d038      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e7c:	d831      	bhi.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e82:	d034      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005e84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e88:	d82b      	bhi.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e8e:	d01d      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005e90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e94:	d825      	bhi.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d006      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005e9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ea0:	e01f      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ea2:	bf00      	nop
 8005ea4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea8:	4ba2      	ldr	r3, [pc, #648]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	4aa1      	ldr	r2, [pc, #644]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eb4:	e01c      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	3308      	adds	r3, #8
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f002 f9ee 	bl	80082a0 <RCCEx_PLL2_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005eca:	e011      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed0:	3328      	adds	r3, #40	@ 0x28
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f002 fa95 	bl	8008404 <RCCEx_PLL3_Config>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ee0:	e006      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ee8:	e002      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ef8:	4b8e      	ldr	r3, [pc, #568]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f08:	4a8a      	ldr	r2, [pc, #552]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f0e:	e003      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	d03a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f3e:	2b30      	cmp	r3, #48	@ 0x30
 8005f40:	d01f      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005f42:	2b30      	cmp	r3, #48	@ 0x30
 8005f44:	d819      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d00c      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d815      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d019      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d111      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f56:	4b77      	ldr	r3, [pc, #476]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	4a76      	ldr	r2, [pc, #472]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005f62:	e011      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f68:	3308      	adds	r3, #8
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f002 f997 	bl	80082a0 <RCCEx_PLL2_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005f78:	e006      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f80:	e002      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f90:	4b68      	ldr	r3, [pc, #416]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9e:	4a65      	ldr	r2, [pc, #404]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005fba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d051      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd8:	d035      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005fda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fde:	d82e      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005fe0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fe4:	d031      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005fe6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fea:	d828      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff0:	d01a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff6:	d822      	bhi.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006000:	d007      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006002:	e01c      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006004:	4b4b      	ldr	r3, [pc, #300]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	4a4a      	ldr	r2, [pc, #296]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800600a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800600e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006010:	e01c      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006016:	3308      	adds	r3, #8
 8006018:	2100      	movs	r1, #0
 800601a:	4618      	mov	r0, r3
 800601c:	f002 f940 	bl	80082a0 <RCCEx_PLL2_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006026:	e011      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602c:	3328      	adds	r3, #40	@ 0x28
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f002 f9e7 	bl	8008404 <RCCEx_PLL3_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800603c:	e006      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006044:	e002      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006046:	bf00      	nop
 8006048:	e000      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800604a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006054:	4b37      	ldr	r3, [pc, #220]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006058:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006062:	4a34      	ldr	r2, [pc, #208]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006064:	430b      	orrs	r3, r1
 8006066:	6513      	str	r3, [r2, #80]	@ 0x50
 8006068:	e003      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800607e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006082:	2300      	movs	r3, #0
 8006084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006088:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800608c:	460b      	mov	r3, r1
 800608e:	4313      	orrs	r3, r2
 8006090:	d056      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800609c:	d033      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800609e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060a2:	d82c      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80060a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060a8:	d02f      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80060aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060ae:	d826      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80060b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060b4:	d02b      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80060b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060ba:	d820      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80060bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060c0:	d012      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80060c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060c6:	d81a      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d022      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d0:	d115      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d6:	3308      	adds	r3, #8
 80060d8:	2101      	movs	r1, #1
 80060da:	4618      	mov	r0, r3
 80060dc:	f002 f8e0 	bl	80082a0 <RCCEx_PLL2_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060e6:	e015      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	3328      	adds	r3, #40	@ 0x28
 80060ee:	2101      	movs	r1, #1
 80060f0:	4618      	mov	r0, r3
 80060f2:	f002 f987 	bl	8008404 <RCCEx_PLL3_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060fc:	e00a      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006104:	e006      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006106:	bf00      	nop
 8006108:	e004      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800610a:	bf00      	nop
 800610c:	e002      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10d      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800611c:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800611e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006120:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800612a:	4a02      	ldr	r2, [pc, #8]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800612c:	430b      	orrs	r3, r1
 800612e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006130:	e006      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006132:	bf00      	nop
 8006134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800614c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006150:	2300      	movs	r3, #0
 8006152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006156:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800615a:	460b      	mov	r3, r1
 800615c:	4313      	orrs	r3, r2
 800615e:	d055      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800616c:	d033      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800616e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006172:	d82c      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006178:	d02f      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617e:	d826      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006180:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006184:	d02b      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006186:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800618a:	d820      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800618c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006190:	d012      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006196:	d81a      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d022      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800619c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061a0:	d115      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a6:	3308      	adds	r3, #8
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f002 f878 	bl	80082a0 <RCCEx_PLL2_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061b6:	e015      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061bc:	3328      	adds	r3, #40	@ 0x28
 80061be:	2101      	movs	r1, #1
 80061c0:	4618      	mov	r0, r3
 80061c2:	f002 f91f 	bl	8008404 <RCCEx_PLL3_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061cc:	e00a      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061d4:	e006      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80061d6:	bf00      	nop
 80061d8:	e004      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80061da:	bf00      	nop
 80061dc:	e002      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80061e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10b      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061ec:	4ba3      	ldr	r3, [pc, #652]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80061fc:	4a9f      	ldr	r2, [pc, #636]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061fe:	430b      	orrs	r3, r1
 8006200:	6593      	str	r3, [r2, #88]	@ 0x58
 8006202:	e003      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800621c:	2300      	movs	r3, #0
 800621e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006222:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006226:	460b      	mov	r3, r1
 8006228:	4313      	orrs	r3, r2
 800622a:	d037      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800622c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006236:	d00e      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006238:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800623c:	d816      	bhi.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d018      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006246:	d111      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006248:	4b8c      	ldr	r3, [pc, #560]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624c:	4a8b      	ldr	r2, [pc, #556]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006254:	e00f      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625a:	3308      	adds	r3, #8
 800625c:	2101      	movs	r1, #1
 800625e:	4618      	mov	r0, r3
 8006260:	f002 f81e 	bl	80082a0 <RCCEx_PLL2_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800626a:	e004      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800627e:	4b7f      	ldr	r3, [pc, #508]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006282:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628c:	4a7b      	ldr	r2, [pc, #492]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800628e:	430b      	orrs	r3, r1
 8006290:	6513      	str	r3, [r2, #80]	@ 0x50
 8006292:	e003      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80062a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062ac:	2300      	movs	r3, #0
 80062ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4313      	orrs	r3, r2
 80062ba:	d039      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80062bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d81c      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80062c6:	a201      	add	r2, pc, #4	@ (adr r2, 80062cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	08006309 	.word	0x08006309
 80062d0:	080062dd 	.word	0x080062dd
 80062d4:	080062eb 	.word	0x080062eb
 80062d8:	08006309 	.word	0x08006309
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062dc:	4b67      	ldr	r3, [pc, #412]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e0:	4a66      	ldr	r2, [pc, #408]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062e8:	e00f      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ee:	3308      	adds	r3, #8
 80062f0:	2102      	movs	r1, #2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 ffd4 	bl	80082a0 <RCCEx_PLL2_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062fe:	e004      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006306:	e000      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10a      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006312:	4b5a      	ldr	r3, [pc, #360]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006316:	f023 0103 	bic.w	r1, r3, #3
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006320:	4a56      	ldr	r2, [pc, #344]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006322:	430b      	orrs	r3, r1
 8006324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006326:	e003      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800632c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800633c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006340:	2300      	movs	r3, #0
 8006342:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006346:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800634a:	460b      	mov	r3, r1
 800634c:	4313      	orrs	r3, r2
 800634e:	f000 809f 	beq.w	8006490 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006352:	4b4b      	ldr	r3, [pc, #300]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a4a      	ldr	r2, [pc, #296]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800635c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800635e:	f7fc f9fb 	bl	8002758 <HAL_GetTick>
 8006362:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006366:	e00b      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006368:	f7fc f9f6 	bl	8002758 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b64      	cmp	r3, #100	@ 0x64
 8006376:	d903      	bls.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800637e:	e005      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006380:	4b3f      	ldr	r3, [pc, #252]	@ (8006480 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0ed      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800638c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006390:	2b00      	cmp	r3, #0
 8006392:	d179      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006394:	4b39      	ldr	r3, [pc, #228]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006396:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063a0:	4053      	eors	r3, r2
 80063a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d015      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063aa:	4b34      	ldr	r3, [pc, #208]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063b6:	4b31      	ldr	r3, [pc, #196]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ba:	4a30      	ldr	r2, [pc, #192]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063c2:	4b2e      	ldr	r3, [pc, #184]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c6:	4a2d      	ldr	r2, [pc, #180]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063ce:	4a2b      	ldr	r2, [pc, #172]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80063de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e2:	d118      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fc f9b8 	bl	8002758 <HAL_GetTick>
 80063e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063ec:	e00d      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ee:	f7fc f9b3 	bl	8002758 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80063f8:	1ad2      	subs	r2, r2, r3
 80063fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80063fe:	429a      	cmp	r2, r3
 8006400:	d903      	bls.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006408:	e005      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800640a:	4b1c      	ldr	r3, [pc, #112]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800640c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0eb      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800641a:	2b00      	cmp	r3, #0
 800641c:	d129      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800642a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800642e:	d10e      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006430:	4b12      	ldr	r3, [pc, #72]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006440:	091a      	lsrs	r2, r3, #4
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006444:	4013      	ands	r3, r2
 8006446:	4a0d      	ldr	r2, [pc, #52]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006448:	430b      	orrs	r3, r1
 800644a:	6113      	str	r3, [r2, #16]
 800644c:	e005      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800644e:	4b0b      	ldr	r3, [pc, #44]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	4a0a      	ldr	r2, [pc, #40]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006454:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006458:	6113      	str	r3, [r2, #16]
 800645a:	4b08      	ldr	r3, [pc, #32]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800645c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006462:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800646a:	4a04      	ldr	r2, [pc, #16]	@ (800647c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800646c:	430b      	orrs	r3, r1
 800646e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006470:	e00e      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800647a:	e009      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800647c:	58024400 	.word	0x58024400
 8006480:	58024800 	.word	0x58024800
 8006484:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800648c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f002 0301 	and.w	r3, r2, #1
 800649c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064a0:	2300      	movs	r3, #0
 80064a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f000 8089 	beq.w	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064b8:	2b28      	cmp	r3, #40	@ 0x28
 80064ba:	d86b      	bhi.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80064bc:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	0800659d 	.word	0x0800659d
 80064c8:	08006595 	.word	0x08006595
 80064cc:	08006595 	.word	0x08006595
 80064d0:	08006595 	.word	0x08006595
 80064d4:	08006595 	.word	0x08006595
 80064d8:	08006595 	.word	0x08006595
 80064dc:	08006595 	.word	0x08006595
 80064e0:	08006595 	.word	0x08006595
 80064e4:	08006569 	.word	0x08006569
 80064e8:	08006595 	.word	0x08006595
 80064ec:	08006595 	.word	0x08006595
 80064f0:	08006595 	.word	0x08006595
 80064f4:	08006595 	.word	0x08006595
 80064f8:	08006595 	.word	0x08006595
 80064fc:	08006595 	.word	0x08006595
 8006500:	08006595 	.word	0x08006595
 8006504:	0800657f 	.word	0x0800657f
 8006508:	08006595 	.word	0x08006595
 800650c:	08006595 	.word	0x08006595
 8006510:	08006595 	.word	0x08006595
 8006514:	08006595 	.word	0x08006595
 8006518:	08006595 	.word	0x08006595
 800651c:	08006595 	.word	0x08006595
 8006520:	08006595 	.word	0x08006595
 8006524:	0800659d 	.word	0x0800659d
 8006528:	08006595 	.word	0x08006595
 800652c:	08006595 	.word	0x08006595
 8006530:	08006595 	.word	0x08006595
 8006534:	08006595 	.word	0x08006595
 8006538:	08006595 	.word	0x08006595
 800653c:	08006595 	.word	0x08006595
 8006540:	08006595 	.word	0x08006595
 8006544:	0800659d 	.word	0x0800659d
 8006548:	08006595 	.word	0x08006595
 800654c:	08006595 	.word	0x08006595
 8006550:	08006595 	.word	0x08006595
 8006554:	08006595 	.word	0x08006595
 8006558:	08006595 	.word	0x08006595
 800655c:	08006595 	.word	0x08006595
 8006560:	08006595 	.word	0x08006595
 8006564:	0800659d 	.word	0x0800659d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656c:	3308      	adds	r3, #8
 800656e:	2101      	movs	r1, #1
 8006570:	4618      	mov	r0, r3
 8006572:	f001 fe95 	bl	80082a0 <RCCEx_PLL2_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800657c:	e00f      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006582:	3328      	adds	r3, #40	@ 0x28
 8006584:	2101      	movs	r1, #1
 8006586:	4618      	mov	r0, r3
 8006588:	f001 ff3c 	bl	8008404 <RCCEx_PLL3_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006592:	e004      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800659a:	e000      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800659c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80065a6:	4bbf      	ldr	r3, [pc, #764]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065b4:	4abb      	ldr	r2, [pc, #748]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065b6:	430b      	orrs	r3, r1
 80065b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80065ba:	e003      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f002 0302 	and.w	r3, r2, #2
 80065d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065d4:	2300      	movs	r3, #0
 80065d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80065de:	460b      	mov	r3, r1
 80065e0:	4313      	orrs	r3, r2
 80065e2:	d041      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80065e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065ea:	2b05      	cmp	r3, #5
 80065ec:	d824      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80065ee:	a201      	add	r2, pc, #4	@ (adr r2, 80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006641 	.word	0x08006641
 80065f8:	0800660d 	.word	0x0800660d
 80065fc:	08006623 	.word	0x08006623
 8006600:	08006641 	.word	0x08006641
 8006604:	08006641 	.word	0x08006641
 8006608:	08006641 	.word	0x08006641
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006610:	3308      	adds	r3, #8
 8006612:	2101      	movs	r1, #1
 8006614:	4618      	mov	r0, r3
 8006616:	f001 fe43 	bl	80082a0 <RCCEx_PLL2_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006620:	e00f      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006626:	3328      	adds	r3, #40	@ 0x28
 8006628:	2101      	movs	r1, #1
 800662a:	4618      	mov	r0, r3
 800662c:	f001 feea 	bl	8008404 <RCCEx_PLL3_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006636:	e004      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800663e:	e000      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800664a:	4b96      	ldr	r3, [pc, #600]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800664c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664e:	f023 0107 	bic.w	r1, r3, #7
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006658:	4a92      	ldr	r2, [pc, #584]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800665a:	430b      	orrs	r3, r1
 800665c:	6553      	str	r3, [r2, #84]	@ 0x54
 800665e:	e003      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f002 0304 	and.w	r3, r2, #4
 8006674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006678:	2300      	movs	r3, #0
 800667a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800667e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006682:	460b      	mov	r3, r1
 8006684:	4313      	orrs	r3, r2
 8006686:	d044      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006690:	2b05      	cmp	r3, #5
 8006692:	d825      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006694:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066e9 	.word	0x080066e9
 80066a0:	080066b5 	.word	0x080066b5
 80066a4:	080066cb 	.word	0x080066cb
 80066a8:	080066e9 	.word	0x080066e9
 80066ac:	080066e9 	.word	0x080066e9
 80066b0:	080066e9 	.word	0x080066e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	3308      	adds	r3, #8
 80066ba:	2101      	movs	r1, #1
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 fdef 	bl	80082a0 <RCCEx_PLL2_Config>
 80066c2:	4603      	mov	r3, r0
 80066c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066c8:	e00f      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	3328      	adds	r3, #40	@ 0x28
 80066d0:	2101      	movs	r1, #1
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 fe96 	bl	8008404 <RCCEx_PLL3_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066de:	e004      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066e6:	e000      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80066e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10b      	bne.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066f2:	4b6c      	ldr	r3, [pc, #432]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f6:	f023 0107 	bic.w	r1, r3, #7
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006702:	4a68      	ldr	r2, [pc, #416]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006704:	430b      	orrs	r3, r1
 8006706:	6593      	str	r3, [r2, #88]	@ 0x58
 8006708:	e003      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f002 0320 	and.w	r3, r2, #32
 800671e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006722:	2300      	movs	r3, #0
 8006724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800672c:	460b      	mov	r3, r1
 800672e:	4313      	orrs	r3, r2
 8006730:	d055      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800673e:	d033      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006744:	d82c      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800674a:	d02f      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006750:	d826      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006752:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006756:	d02b      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006758:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800675c:	d820      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800675e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006762:	d012      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006764:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006768:	d81a      	bhi.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d022      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800676e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006772:	d115      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006778:	3308      	adds	r3, #8
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f001 fd8f 	bl	80082a0 <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006788:	e015      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678e:	3328      	adds	r3, #40	@ 0x28
 8006790:	2102      	movs	r1, #2
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fe36 	bl	8008404 <RCCEx_PLL3_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800679e:	e00a      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067a6:	e006      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80067a8:	bf00      	nop
 80067aa:	e004      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80067ac:	bf00      	nop
 80067ae:	e002      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80067b0:	bf00      	nop
 80067b2:	e000      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80067b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10b      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067be:	4b39      	ldr	r3, [pc, #228]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ce:	4a35      	ldr	r2, [pc, #212]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80067d4:	e003      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80067ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067ee:	2300      	movs	r3, #0
 80067f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80067f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d058      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006806:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800680a:	d033      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800680c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006810:	d82c      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006816:	d02f      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800681c:	d826      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800681e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006822:	d02b      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006824:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006828:	d820      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800682a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800682e:	d012      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006834:	d81a      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d022      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800683a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800683e:	d115      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006844:	3308      	adds	r3, #8
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f001 fd29 	bl	80082a0 <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006854:	e015      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	3328      	adds	r3, #40	@ 0x28
 800685c:	2102      	movs	r1, #2
 800685e:	4618      	mov	r0, r3
 8006860:	f001 fdd0 	bl	8008404 <RCCEx_PLL3_Config>
 8006864:	4603      	mov	r3, r0
 8006866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800686a:	e00a      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006872:	e006      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006874:	bf00      	nop
 8006876:	e004      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006878:	bf00      	nop
 800687a:	e002      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800687c:	bf00      	nop
 800687e:	e000      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10e      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800688c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800689a:	4a02      	ldr	r2, [pc, #8]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800689c:	430b      	orrs	r3, r1
 800689e:	6593      	str	r3, [r2, #88]	@ 0x58
 80068a0:	e006      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80068a2:	bf00      	nop
 80068a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80068bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80068ca:	460b      	mov	r3, r1
 80068cc:	4313      	orrs	r3, r2
 80068ce:	d055      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068dc:	d033      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80068de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80068e2:	d82c      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80068e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068e8:	d02f      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80068ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068ee:	d826      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80068f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068f4:	d02b      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80068f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80068fa:	d820      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80068fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006900:	d012      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006902:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006906:	d81a      	bhi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d022      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800690c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006910:	d115      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	3308      	adds	r3, #8
 8006918:	2100      	movs	r1, #0
 800691a:	4618      	mov	r0, r3
 800691c:	f001 fcc0 	bl	80082a0 <RCCEx_PLL2_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006926:	e015      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692c:	3328      	adds	r3, #40	@ 0x28
 800692e:	2102      	movs	r1, #2
 8006930:	4618      	mov	r0, r3
 8006932:	f001 fd67 	bl	8008404 <RCCEx_PLL3_Config>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800693c:	e00a      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006944:	e006      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006946:	bf00      	nop
 8006948:	e004      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800694a:	bf00      	nop
 800694c:	e002      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800695c:	4ba1      	ldr	r3, [pc, #644]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800695e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006960:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006968:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800696c:	4a9d      	ldr	r2, [pc, #628]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800696e:	430b      	orrs	r3, r1
 8006970:	6593      	str	r3, [r2, #88]	@ 0x58
 8006972:	e003      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800697c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f002 0308 	and.w	r3, r2, #8
 8006988:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800698c:	2300      	movs	r3, #0
 800698e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006992:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006996:	460b      	mov	r3, r1
 8006998:	4313      	orrs	r3, r2
 800699a:	d01e      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800699c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a8:	d10c      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	3328      	adds	r3, #40	@ 0x28
 80069b0:	2102      	movs	r1, #2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 fd26 	bl	8008404 <RCCEx_PLL3_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80069c4:	4b87      	ldr	r3, [pc, #540]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069d4:	4a83      	ldr	r2, [pc, #524]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d6:	430b      	orrs	r3, r1
 80069d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f002 0310 	and.w	r3, r2, #16
 80069e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069ea:	2300      	movs	r3, #0
 80069ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80069f4:	460b      	mov	r3, r1
 80069f6:	4313      	orrs	r3, r2
 80069f8:	d01e      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a06:	d10c      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0c:	3328      	adds	r3, #40	@ 0x28
 8006a0e:	2102      	movs	r1, #2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fcf7 	bl	8008404 <RCCEx_PLL3_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a22:	4b70      	ldr	r3, [pc, #448]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a32:	4a6c      	ldr	r2, [pc, #432]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006a44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006a52:	460b      	mov	r3, r1
 8006a54:	4313      	orrs	r3, r2
 8006a56:	d03e      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a64:	d022      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a6a:	d81b      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a74:	d00b      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006a76:	e015      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 fc0d 	bl	80082a0 <RCCEx_PLL2_Config>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a8c:	e00f      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a92:	3328      	adds	r3, #40	@ 0x28
 8006a94:	2102      	movs	r1, #2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 fcb4 	bl	8008404 <RCCEx_PLL3_Config>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006aa2:	e004      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aaa:	e000      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10b      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ac6:	4a47      	ldr	r2, [pc, #284]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8006acc:	e003      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ae8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006aec:	460b      	mov	r3, r1
 8006aee:	4313      	orrs	r3, r2
 8006af0:	d03b      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006afe:	d01f      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006b00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b04:	d818      	bhi.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b0a:	d003      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006b0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b10:	d007      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006b12:	e011      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b14:	4b33      	ldr	r3, [pc, #204]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	4a32      	ldr	r2, [pc, #200]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b20:	e00f      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b26:	3328      	adds	r3, #40	@ 0x28
 8006b28:	2101      	movs	r1, #1
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 fc6a 	bl	8008404 <RCCEx_PLL3_Config>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b36:	e004      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b4a:	4b26      	ldr	r3, [pc, #152]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b5a:	4a22      	ldr	r2, [pc, #136]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006b76:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b78:	2300      	movs	r3, #0
 8006b7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b80:	460b      	mov	r3, r1
 8006b82:	4313      	orrs	r3, r2
 8006b84:	d034      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b94:	d007      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006b96:	e011      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b98:	4b12      	ldr	r3, [pc, #72]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9c:	4a11      	ldr	r2, [pc, #68]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ba4:	e00e      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006baa:	3308      	adds	r3, #8
 8006bac:	2102      	movs	r1, #2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fb76 	bl	80082a0 <RCCEx_PLL2_Config>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bba:	e003      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10d      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006bcc:	4b05      	ldr	r3, [pc, #20]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bda:	4a02      	ldr	r2, [pc, #8]	@ (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006be0:	e006      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006be2:	bf00      	nop
 8006be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bfe:	2300      	movs	r3, #0
 8006c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006c06:	460b      	mov	r3, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	d00c      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c10:	3328      	adds	r3, #40	@ 0x28
 8006c12:	2102      	movs	r1, #2
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 fbf5 	bl	8008404 <RCCEx_PLL3_Config>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006c32:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c34:	2300      	movs	r3, #0
 8006c36:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	d038      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c4e:	d018      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006c50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c54:	d811      	bhi.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006c56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c5a:	d014      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c60:	d80b      	bhi.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d011      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6a:	d106      	bne.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c6c:	4bc3      	ldr	r3, [pc, #780]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c70:	4ac2      	ldr	r2, [pc, #776]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c78:	e008      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c80:	e004      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c82:	bf00      	nop
 8006c84:	e002      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10b      	bne.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c94:	4bb9      	ldr	r3, [pc, #740]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ca4:	4ab5      	ldr	r2, [pc, #724]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006caa:	e003      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cd0:	4baa      	ldr	r3, [pc, #680]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cde:	4aa7      	ldr	r2, [pc, #668]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006cf0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	d00a      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d00:	4b9e      	ldr	r3, [pc, #632]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006d10:	4a9a      	ldr	r2, [pc, #616]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d12:	430b      	orrs	r3, r1
 8006d14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d24:	2300      	movs	r3, #0
 8006d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	d009      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d32:	4b92      	ldr	r3, [pc, #584]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d36:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d40:	4a8e      	ldr	r2, [pc, #568]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d42:	430b      	orrs	r3, r1
 8006d44:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006d52:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d54:	2300      	movs	r3, #0
 8006d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	d00e      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d62:	4b86      	ldr	r3, [pc, #536]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	4a85      	ldr	r2, [pc, #532]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d6c:	6113      	str	r3, [r2, #16]
 8006d6e:	4b83      	ldr	r3, [pc, #524]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d70:	6919      	ldr	r1, [r3, #16]
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d7a:	4a80      	ldr	r2, [pc, #512]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d8e:	2300      	movs	r3, #0
 8006d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006d96:	460b      	mov	r3, r1
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d9c:	4b77      	ldr	r3, [pc, #476]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006daa:	4a74      	ldr	r2, [pc, #464]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dac:	430b      	orrs	r3, r1
 8006dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	d00a      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ddc:	4a67      	ldr	r2, [pc, #412]	@ (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dde:	430b      	orrs	r3, r1
 8006de0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	2100      	movs	r1, #0
 8006dec:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006df4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	d011      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	3308      	adds	r3, #8
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fa4a 	bl	80082a0 <RCCEx_PLL2_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6239      	str	r1, [r7, #32]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	d011      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e42:	3308      	adds	r3, #8
 8006e44:	2101      	movs	r1, #1
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 fa2a 	bl	80082a0 <RCCEx_PLL2_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	61b9      	str	r1, [r7, #24]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	61fb      	str	r3, [r7, #28]
 8006e74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	d011      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e82:	3308      	adds	r3, #8
 8006e84:	2102      	movs	r1, #2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f001 fa0a 	bl	80082a0 <RCCEx_PLL2_Config>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	2100      	movs	r1, #0
 8006eac:	6139      	str	r1, [r7, #16]
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	d011      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec2:	3328      	adds	r3, #40	@ 0x28
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fa9c 	bl	8008404 <RCCEx_PLL3_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	2100      	movs	r1, #0
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4313      	orrs	r3, r2
 8006efc:	d011      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f02:	3328      	adds	r3, #40	@ 0x28
 8006f04:	2101      	movs	r1, #1
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 fa7c 	bl	8008404 <RCCEx_PLL3_Config>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	607b      	str	r3, [r7, #4]
 8006f34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	d011      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f42:	3328      	adds	r3, #40	@ 0x28
 8006f44:	2102      	movs	r1, #2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f001 fa5c 	bl	8008404 <RCCEx_PLL3_Config>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006f62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e000      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006f76:	46bd      	mov	sp, r7
 8006f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f7c:	58024400 	.word	0x58024400

08006f80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b090      	sub	sp, #64	@ 0x40
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006f92:	430b      	orrs	r3, r1
 8006f94:	f040 8094 	bne.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006f98:	4b9e      	ldr	r3, [pc, #632]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	f200 8087 	bhi.w	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006faa:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fc5 	.word	0x08006fc5
 8006fb4:	08006fed 	.word	0x08006fed
 8006fb8:	08007015 	.word	0x08007015
 8006fbc:	080070b1 	.word	0x080070b1
 8006fc0:	0800703d 	.word	0x0800703d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fc4:	4b93      	ldr	r3, [pc, #588]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fd0:	d108      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 f810 	bl	8007ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fe0:	f000 bd45 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fe8:	f000 bd41 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fec:	4b89      	ldr	r3, [pc, #548]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ff8:	d108      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ffa:	f107 0318 	add.w	r3, r7, #24
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fd54 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007008:	f000 bd31 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007010:	f000 bd2d 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007014:	4b7f      	ldr	r3, [pc, #508]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800701c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007020:	d108      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fe94 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007030:	f000 bd1d 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007038:	f000 bd19 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800703c:	4b75      	ldr	r3, [pc, #468]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800703e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007040:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007046:	4b73      	ldr	r3, [pc, #460]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b04      	cmp	r3, #4
 8007050:	d10c      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007054:	2b00      	cmp	r3, #0
 8007056:	d109      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007058:	4b6e      	ldr	r3, [pc, #440]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	08db      	lsrs	r3, r3, #3
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	4a6d      	ldr	r2, [pc, #436]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
 8007068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800706a:	e01f      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800706c:	4b69      	ldr	r3, [pc, #420]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007078:	d106      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800707a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800707c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007080:	d102      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007082:	4b66      	ldr	r3, [pc, #408]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007086:	e011      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007088:	4b62      	ldr	r3, [pc, #392]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007094:	d106      	bne.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800709c:	d102      	bne.n	80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800709e:	4b60      	ldr	r3, [pc, #384]	@ (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80070a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070a2:	e003      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070a4:	2300      	movs	r3, #0
 80070a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80070a8:	f000 bce1 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070ac:	f000 bcdf 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070b4:	f000 bcdb 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070bc:	f000 bcd7 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80070c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80070c8:	430b      	orrs	r3, r1
 80070ca:	f040 80ad 	bne.w	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80070ce:	4b51      	ldr	r3, [pc, #324]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80070d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070d2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80070d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070de:	d056      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e6:	f200 8090 	bhi.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	2bc0      	cmp	r3, #192	@ 0xc0
 80070ee:	f000 8088 	beq.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80070f6:	f200 8088 	bhi.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	2b80      	cmp	r3, #128	@ 0x80
 80070fe:	d032      	beq.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	2b80      	cmp	r3, #128	@ 0x80
 8007104:	f200 8081 	bhi.w	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007110:	2b40      	cmp	r3, #64	@ 0x40
 8007112:	d014      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007114:	e079      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007116:	4b3f      	ldr	r3, [pc, #252]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800711e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007122:	d108      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007128:	4618      	mov	r0, r3
 800712a:	f000 ff67 	bl	8007ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007132:	f000 bc9c 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800713a:	f000 bc98 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800713e:	4b35      	ldr	r3, [pc, #212]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800714a:	d108      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800714c:	f107 0318 	add.w	r3, r7, #24
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fcab 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800715a:	f000 bc88 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007162:	f000 bc84 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007166:	4b2b      	ldr	r3, [pc, #172]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800716e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007172:	d108      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007174:	f107 030c 	add.w	r3, r7, #12
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fdeb 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007182:	f000 bc74 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800718a:	f000 bc70 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800718e:	4b21      	ldr	r3, [pc, #132]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007192:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007198:	4b1e      	ldr	r3, [pc, #120]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d10c      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80071a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d109      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	08db      	lsrs	r3, r3, #3
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	4a18      	ldr	r2, [pc, #96]	@ (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071bc:	e01f      	b.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071be:	4b15      	ldr	r3, [pc, #84]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ca:	d106      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80071cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071d2:	d102      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80071d4:	4b11      	ldr	r3, [pc, #68]	@ (800721c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80071d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071d8:	e011      	b.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071da:	4b0e      	ldr	r3, [pc, #56]	@ (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071e6:	d106      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80071e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071ee:	d102      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80071f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071f4:	e003      	b.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80071fa:	f000 bc38 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071fe:	f000 bc36 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007202:	4b08      	ldr	r3, [pc, #32]	@ (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007206:	f000 bc32 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800720e:	f000 bc2e 	b.w	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007212:	bf00      	nop
 8007214:	58024400 	.word	0x58024400
 8007218:	03d09000 	.word	0x03d09000
 800721c:	003d0900 	.word	0x003d0900
 8007220:	017d7840 	.word	0x017d7840
 8007224:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800722c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007230:	430b      	orrs	r3, r1
 8007232:	f040 809c 	bne.w	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007236:	4b9e      	ldr	r3, [pc, #632]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800723a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800723e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007242:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007246:	d054      	beq.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800724e:	f200 808b 	bhi.w	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007258:	f000 8083 	beq.w	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800725c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007262:	f200 8081 	bhi.w	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800726c:	d02f      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007274:	d878      	bhi.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007282:	d012      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007284:	e070      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007286:	4b8a      	ldr	r3, [pc, #552]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800728e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007292:	d107      	bne.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007298:	4618      	mov	r0, r3
 800729a:	f000 feaf 	bl	8007ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800729e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072a2:	e3e4      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072a8:	e3e1      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072aa:	4b81      	ldr	r3, [pc, #516]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072b6:	d107      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072b8:	f107 0318 	add.w	r3, r7, #24
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 fbf5 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072c6:	e3d2      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072cc:	e3cf      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072ce:	4b78      	ldr	r3, [pc, #480]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072da:	d107      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072dc:	f107 030c 	add.w	r3, r7, #12
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fd37 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ea:	e3c0      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072f0:	e3bd      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072f2:	4b6f      	ldr	r3, [pc, #444]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80072fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072fc:	4b6c      	ldr	r3, [pc, #432]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b04      	cmp	r3, #4
 8007306:	d10c      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730a:	2b00      	cmp	r3, #0
 800730c:	d109      	bne.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800730e:	4b68      	ldr	r3, [pc, #416]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	08db      	lsrs	r3, r3, #3
 8007314:	f003 0303 	and.w	r3, r3, #3
 8007318:	4a66      	ldr	r2, [pc, #408]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800731a:	fa22 f303 	lsr.w	r3, r2, r3
 800731e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007320:	e01e      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007322:	4b63      	ldr	r3, [pc, #396]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800732a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800732e:	d106      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007336:	d102      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007338:	4b5f      	ldr	r3, [pc, #380]	@ (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800733c:	e010      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800733e:	4b5c      	ldr	r3, [pc, #368]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800734a:	d106      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800734c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007352:	d102      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007354:	4b59      	ldr	r3, [pc, #356]	@ (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007358:	e002      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800735e:	e386      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007360:	e385      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007362:	4b57      	ldr	r3, [pc, #348]	@ (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007366:	e382      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800736c:	e37f      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800736e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007372:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007376:	430b      	orrs	r3, r1
 8007378:	f040 80a7 	bne.w	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800737c:	4b4c      	ldr	r3, [pc, #304]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800737e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007380:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007384:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800738c:	d055      	beq.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007394:	f200 8096 	bhi.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800739e:	f000 8084 	beq.w	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80073a8:	f200 808c 	bhi.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80073ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073b2:	d030      	beq.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073ba:	f200 8083 	bhi.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d004      	beq.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80073c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ca:	d012      	beq.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80073cc:	e07a      	b.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80073ce:	4b38      	ldr	r3, [pc, #224]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073da:	d107      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fe0b 	bl	8007ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ea:	e340      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f0:	e33d      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073f2:	4b2f      	ldr	r3, [pc, #188]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073fe:	d107      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007400:	f107 0318 	add.w	r3, r7, #24
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fb51 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800740e:	e32e      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007414:	e32b      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007416:	4b26      	ldr	r3, [pc, #152]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800741e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007422:	d107      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007424:	f107 030c 	add.w	r3, r7, #12
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fc93 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007432:	e31c      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007438:	e319      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800743a:	4b1d      	ldr	r3, [pc, #116]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800743c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800743e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007442:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007444:	4b1a      	ldr	r3, [pc, #104]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b04      	cmp	r3, #4
 800744e:	d10c      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007456:	4b16      	ldr	r3, [pc, #88]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	08db      	lsrs	r3, r3, #3
 800745c:	f003 0303 	and.w	r3, r3, #3
 8007460:	4a14      	ldr	r2, [pc, #80]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007462:	fa22 f303 	lsr.w	r3, r2, r3
 8007466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007468:	e01e      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800746a:	4b11      	ldr	r3, [pc, #68]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007476:	d106      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800747e:	d102      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007480:	4b0d      	ldr	r3, [pc, #52]	@ (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007484:	e010      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007486:	4b0a      	ldr	r3, [pc, #40]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800748e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007492:	d106      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800749a:	d102      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800749e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074a0:	e002      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80074a6:	e2e2      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074a8:	e2e1      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80074aa:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80074ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ae:	e2de      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80074b0:	58024400 	.word	0x58024400
 80074b4:	03d09000 	.word	0x03d09000
 80074b8:	003d0900 	.word	0x003d0900
 80074bc:	017d7840 	.word	0x017d7840
 80074c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c8:	e2d1      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80074ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80074d2:	430b      	orrs	r3, r1
 80074d4:	f040 809c 	bne.w	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80074d8:	4b93      	ldr	r3, [pc, #588]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80074e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80074e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074e8:	d054      	beq.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80074ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074f0:	f200 808b 	bhi.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80074f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074fa:	f000 8083 	beq.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80074fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007500:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007504:	f200 8081 	bhi.w	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800750e:	d02f      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007516:	d878      	bhi.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751a:	2b00      	cmp	r3, #0
 800751c:	d004      	beq.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800751e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007524:	d012      	beq.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007526:	e070      	b.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007528:	4b7f      	ldr	r3, [pc, #508]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007530:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007534:	d107      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fd5e 	bl	8007ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007544:	e293      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800754a:	e290      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800754c:	4b76      	ldr	r3, [pc, #472]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007558:	d107      	bne.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800755a:	f107 0318 	add.w	r3, r7, #24
 800755e:	4618      	mov	r0, r3
 8007560:	f000 faa4 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007568:	e281      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800756e:	e27e      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007570:	4b6d      	ldr	r3, [pc, #436]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800757c:	d107      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800757e:	f107 030c 	add.w	r3, r7, #12
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fbe6 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800758c:	e26f      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007592:	e26c      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007594:	4b64      	ldr	r3, [pc, #400]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007598:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800759c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800759e:	4b62      	ldr	r3, [pc, #392]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80075aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d109      	bne.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075b0:	4b5d      	ldr	r3, [pc, #372]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	08db      	lsrs	r3, r3, #3
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	4a5c      	ldr	r2, [pc, #368]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80075bc:	fa22 f303 	lsr.w	r3, r2, r3
 80075c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075c2:	e01e      	b.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075c4:	4b58      	ldr	r3, [pc, #352]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075d0:	d106      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80075d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075d8:	d102      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80075da:	4b55      	ldr	r3, [pc, #340]	@ (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80075dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075de:	e010      	b.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075e0:	4b51      	ldr	r3, [pc, #324]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ec:	d106      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80075ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075f4:	d102      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80075f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80075f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075fa:	e002      	b.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007600:	e235      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007602:	e234      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007604:	4b4c      	ldr	r3, [pc, #304]	@ (8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007608:	e231      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800760e:	e22e      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007614:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007618:	430b      	orrs	r3, r1
 800761a:	f040 808f 	bne.w	800773c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800761e:	4b42      	ldr	r3, [pc, #264]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007622:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007626:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800762e:	d06b      	beq.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007632:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007636:	d874      	bhi.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800763e:	d056      	beq.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007642:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007646:	d86c      	bhi.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800764e:	d03b      	beq.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007656:	d864      	bhi.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800765e:	d021      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007666:	d85c      	bhi.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766a:	2b00      	cmp	r3, #0
 800766c:	d004      	beq.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800766e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007674:	d004      	beq.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007676:	e054      	b.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007678:	f7fe fa4c 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 800767c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800767e:	e1f6      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007680:	4b29      	ldr	r3, [pc, #164]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800768c:	d107      	bne.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800768e:	f107 0318 	add.w	r3, r7, #24
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fa0a 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800769c:	e1e7      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a2:	e1e4      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076a4:	4b20      	ldr	r3, [pc, #128]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076b0:	d107      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076b2:	f107 030c 	add.w	r3, r7, #12
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 fb4c 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076c0:	e1d5      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c6:	e1d2      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076c8:	4b17      	ldr	r3, [pc, #92]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d109      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076d4:	4b14      	ldr	r3, [pc, #80]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	08db      	lsrs	r3, r3, #3
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	4a13      	ldr	r2, [pc, #76]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
 80076e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80076e6:	e1c2      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ec:	e1bf      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80076ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076fa:	d102      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80076fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80076fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007700:	e1b5      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007706:	e1b2      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007708:	4b07      	ldr	r3, [pc, #28]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007714:	d102      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007716:	4b07      	ldr	r3, [pc, #28]	@ (8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800771a:	e1a8      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007720:	e1a5      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007722:	2300      	movs	r3, #0
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007726:	e1a2      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007728:	58024400 	.word	0x58024400
 800772c:	03d09000 	.word	0x03d09000
 8007730:	003d0900 	.word	0x003d0900
 8007734:	017d7840 	.word	0x017d7840
 8007738:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800773c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007740:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007744:	430b      	orrs	r3, r1
 8007746:	d173      	bne.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007748:	4b9c      	ldr	r3, [pc, #624]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800774c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007750:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007758:	d02f      	beq.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800775a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007760:	d863      	bhi.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	2b00      	cmp	r3, #0
 8007766:	d004      	beq.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800776e:	d012      	beq.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007770:	e05b      	b.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007772:	4b92      	ldr	r3, [pc, #584]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800777a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800777e:	d107      	bne.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007780:	f107 0318 	add.w	r3, r7, #24
 8007784:	4618      	mov	r0, r3
 8007786:	f000 f991 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800778e:	e16e      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007794:	e16b      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007796:	4b89      	ldr	r3, [pc, #548]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800779e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a2:	d107      	bne.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fad3 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077b2:	e15c      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077b8:	e159      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077ba:	4b80      	ldr	r3, [pc, #512]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077c4:	4b7d      	ldr	r3, [pc, #500]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d10c      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80077d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077d6:	4b79      	ldr	r3, [pc, #484]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	08db      	lsrs	r3, r3, #3
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	4a77      	ldr	r2, [pc, #476]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80077e2:	fa22 f303 	lsr.w	r3, r2, r3
 80077e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077e8:	e01e      	b.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077ea:	4b74      	ldr	r3, [pc, #464]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077f6:	d106      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80077f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077fe:	d102      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007800:	4b70      	ldr	r3, [pc, #448]	@ (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007804:	e010      	b.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007806:	4b6d      	ldr	r3, [pc, #436]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007812:	d106      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8007814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800781a:	d102      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800781c:	4b6a      	ldr	r3, [pc, #424]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800781e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007820:	e002      	b.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007826:	e122      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007828:	e121      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800782e:	e11e      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007834:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007838:	430b      	orrs	r3, r1
 800783a:	d133      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800783c:	4b5f      	ldr	r3, [pc, #380]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800783e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007844:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	2b00      	cmp	r3, #0
 800784a:	d004      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800784c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007852:	d012      	beq.n	800787a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007854:	e023      	b.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007856:	4b59      	ldr	r3, [pc, #356]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800785e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007862:	d107      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fbc7 	bl	8007ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800786e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007872:	e0fc      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007878:	e0f9      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800787a:	4b50      	ldr	r3, [pc, #320]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007886:	d107      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007888:	f107 0318 	add.w	r3, r7, #24
 800788c:	4618      	mov	r0, r3
 800788e:	f000 f90d 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007896:	e0ea      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007898:	2300      	movs	r3, #0
 800789a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800789c:	e0e7      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a2:	e0e4      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80078a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80078ac:	430b      	orrs	r3, r1
 80078ae:	f040 808d 	bne.w	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80078b2:	4b42      	ldr	r3, [pc, #264]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80078b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80078ba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80078bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078c2:	d06b      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80078c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078ca:	d874      	bhi.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d2:	d056      	beq.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80078d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078da:	d86c      	bhi.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80078dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078e2:	d03b      	beq.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80078e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078ea:	d864      	bhi.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078f2:	d021      	beq.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80078f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078fa:	d85c      	bhi.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80078fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d004      	beq.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007908:	d004      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800790a:	e054      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800790c:	f000 f8b8 	bl	8007a80 <HAL_RCCEx_GetD3PCLK1Freq>
 8007910:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007912:	e0ac      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007914:	4b29      	ldr	r3, [pc, #164]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800791c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007920:	d107      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007922:	f107 0318 	add.w	r3, r7, #24
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f8c0 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007930:	e09d      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007936:	e09a      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007938:	4b20      	ldr	r3, [pc, #128]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007944:	d107      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007946:	f107 030c 	add.w	r3, r7, #12
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fa02 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007954:	e08b      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800795a:	e088      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800795c:	4b17      	ldr	r3, [pc, #92]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b04      	cmp	r3, #4
 8007966:	d109      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007968:	4b14      	ldr	r3, [pc, #80]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	08db      	lsrs	r3, r3, #3
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	4a13      	ldr	r2, [pc, #76]	@ (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
 8007978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800797a:	e078      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007980:	e075      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007982:	4b0e      	ldr	r3, [pc, #56]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800798e:	d102      	bne.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007990:	4b0c      	ldr	r3, [pc, #48]	@ (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007994:	e06b      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800799a:	e068      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800799c:	4b07      	ldr	r3, [pc, #28]	@ (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079a8:	d102      	bne.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80079aa:	4b07      	ldr	r3, [pc, #28]	@ (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80079ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ae:	e05e      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079b4:	e05b      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ba:	e058      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80079bc:	58024400 	.word	0x58024400
 80079c0:	03d09000 	.word	0x03d09000
 80079c4:	003d0900 	.word	0x003d0900
 80079c8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80079cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80079d4:	430b      	orrs	r3, r1
 80079d6:	d148      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80079d8:	4b27      	ldr	r3, [pc, #156]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80079da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80079e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80079e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079e8:	d02a      	beq.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f0:	d838      	bhi.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d004      	beq.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80079f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fe:	d00d      	beq.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007a00:	e030      	b.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a02:	4b1d      	ldr	r3, [pc, #116]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a0e:	d102      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007a10:	4b1a      	ldr	r3, [pc, #104]	@ (8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a14:	e02b      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a1a:	e028      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a1c:	4b16      	ldr	r3, [pc, #88]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a28:	d107      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fae4 	bl	8007ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a38:	e019      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a3e:	e016      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a40:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a4c:	d107      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4e:	f107 0318 	add.w	r3, r7, #24
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f82a 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a5c:	e007      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a62:	e004      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a68:	e001      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3740      	adds	r7, #64	@ 0x40
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	58024400 	.word	0x58024400
 8007a7c:	017d7840 	.word	0x017d7840

08007a80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a84:	f7fe f816 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	4b06      	ldr	r3, [pc, #24]	@ (8007aa4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	091b      	lsrs	r3, r3, #4
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	4904      	ldr	r1, [pc, #16]	@ (8007aa8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a96:	5ccb      	ldrb	r3, [r1, r3]
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	58024400 	.word	0x58024400
 8007aa8:	08013840 	.word	0x08013840

08007aac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b089      	sub	sp, #36	@ 0x24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ab4:	4ba1      	ldr	r3, [pc, #644]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab8:	f003 0303 	and.w	r3, r3, #3
 8007abc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007abe:	4b9f      	ldr	r3, [pc, #636]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac2:	0b1b      	lsrs	r3, r3, #12
 8007ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ac8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007aca:	4b9c      	ldr	r3, [pc, #624]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ace:	091b      	lsrs	r3, r3, #4
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007ad6:	4b99      	ldr	r3, [pc, #612]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ada:	08db      	lsrs	r3, r3, #3
 8007adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	fb02 f303 	mul.w	r3, r2, r3
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8111 	beq.w	8007d1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	f000 8083 	beq.w	8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	f200 80a1 	bhi.w	8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d056      	beq.n	8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b16:	e099      	b.n	8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b18:	4b88      	ldr	r3, [pc, #544]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d02d      	beq.n	8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b24:	4b85      	ldr	r3, [pc, #532]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	08db      	lsrs	r3, r3, #3
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	4a84      	ldr	r2, [pc, #528]	@ (8007d40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b30:	fa22 f303 	lsr.w	r3, r2, r3
 8007b34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	ee07 3a90 	vmov	s15, r3
 8007b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b7e:	e087      	b.n	8007c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b92:	4b6a      	ldr	r3, [pc, #424]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bc2:	e065      	b.n	8007c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd6:	4b59      	ldr	r3, [pc, #356]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c06:	e043      	b.n	8007c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1a:	4b48      	ldr	r3, [pc, #288]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c22:	ee07 3a90 	vmov	s15, r3
 8007c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c4a:	e021      	b.n	8007c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5e:	4b37      	ldr	r3, [pc, #220]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c66:	ee07 3a90 	vmov	s15, r3
 8007c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007c90:	4b2a      	ldr	r3, [pc, #168]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c94:	0a5b      	lsrs	r3, r3, #9
 8007c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb6:	ee17 2a90 	vmov	r2, s15
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc2:	0c1b      	lsrs	r3, r3, #16
 8007cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cc8:	ee07 3a90 	vmov	s15, r3
 8007ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce4:	ee17 2a90 	vmov	r2, s15
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007cec:	4b13      	ldr	r3, [pc, #76]	@ (8007d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf0:	0e1b      	lsrs	r3, r3, #24
 8007cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d12:	ee17 2a90 	vmov	r2, s15
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d1a:	e008      	b.n	8007d2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	609a      	str	r2, [r3, #8]
}
 8007d2e:	bf00      	nop
 8007d30:	3724      	adds	r7, #36	@ 0x24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	58024400 	.word	0x58024400
 8007d40:	03d09000 	.word	0x03d09000
 8007d44:	46000000 	.word	0x46000000
 8007d48:	4c742400 	.word	0x4c742400
 8007d4c:	4a742400 	.word	0x4a742400
 8007d50:	4bbebc20 	.word	0x4bbebc20

08007d54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b089      	sub	sp, #36	@ 0x24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d5c:	4ba1      	ldr	r3, [pc, #644]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007d66:	4b9f      	ldr	r3, [pc, #636]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6a:	0d1b      	lsrs	r3, r3, #20
 8007d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d72:	4b9c      	ldr	r3, [pc, #624]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d76:	0a1b      	lsrs	r3, r3, #8
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007d7e:	4b99      	ldr	r3, [pc, #612]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d82:	08db      	lsrs	r3, r3, #3
 8007d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	fb02 f303 	mul.w	r3, r2, r3
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8111 	beq.w	8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	f000 8083 	beq.w	8007eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	f200 80a1 	bhi.w	8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d056      	beq.n	8007e6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007dbe:	e099      	b.n	8007ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc0:	4b88      	ldr	r3, [pc, #544]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d02d      	beq.n	8007e28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dcc:	4b85      	ldr	r3, [pc, #532]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	08db      	lsrs	r3, r3, #3
 8007dd2:	f003 0303 	and.w	r3, r3, #3
 8007dd6:	4a84      	ldr	r2, [pc, #528]	@ (8007fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ddc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	ee07 3a90 	vmov	s15, r3
 8007de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df6:	4b7b      	ldr	r3, [pc, #492]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e26:	e087      	b.n	8007f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	ee07 3a90 	vmov	s15, r3
 8007e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e6a:	e065      	b.n	8007f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7e:	4b59      	ldr	r3, [pc, #356]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eae:	e043      	b.n	8007f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec2:	4b48      	ldr	r3, [pc, #288]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ef2:	e021      	b.n	8007f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	ee07 3a90 	vmov	s15, r3
 8007efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f06:	4b37      	ldr	r3, [pc, #220]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0e:	ee07 3a90 	vmov	s15, r3
 8007f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007f38:	4b2a      	ldr	r3, [pc, #168]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3c:	0a5b      	lsrs	r3, r3, #9
 8007f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f5e:	ee17 2a90 	vmov	r2, s15
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007f66:	4b1f      	ldr	r3, [pc, #124]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	0c1b      	lsrs	r3, r3, #16
 8007f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f70:	ee07 3a90 	vmov	s15, r3
 8007f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f8c:	ee17 2a90 	vmov	r2, s15
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007f94:	4b13      	ldr	r3, [pc, #76]	@ (8007fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f98:	0e1b      	lsrs	r3, r3, #24
 8007f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fba:	ee17 2a90 	vmov	r2, s15
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	609a      	str	r2, [r3, #8]
}
 8007fd6:	bf00      	nop
 8007fd8:	3724      	adds	r7, #36	@ 0x24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	03d09000 	.word	0x03d09000
 8007fec:	46000000 	.word	0x46000000
 8007ff0:	4c742400 	.word	0x4c742400
 8007ff4:	4a742400 	.word	0x4a742400
 8007ff8:	4bbebc20 	.word	0x4bbebc20

08007ffc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b089      	sub	sp, #36	@ 0x24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008004:	4ba0      	ldr	r3, [pc, #640]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008008:	f003 0303 	and.w	r3, r3, #3
 800800c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800800e:	4b9e      	ldr	r3, [pc, #632]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008012:	091b      	lsrs	r3, r3, #4
 8008014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008018:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800801a:	4b9b      	ldr	r3, [pc, #620]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800801c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008024:	4b98      	ldr	r3, [pc, #608]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008028:	08db      	lsrs	r3, r3, #3
 800802a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	fb02 f303 	mul.w	r3, r2, r3
 8008034:	ee07 3a90 	vmov	s15, r3
 8008038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8111 	beq.w	800826a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	2b02      	cmp	r3, #2
 800804c:	f000 8083 	beq.w	8008156 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	2b02      	cmp	r3, #2
 8008054:	f200 80a1 	bhi.w	800819a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d056      	beq.n	8008112 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008064:	e099      	b.n	800819a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008066:	4b88      	ldr	r3, [pc, #544]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b00      	cmp	r3, #0
 8008070:	d02d      	beq.n	80080ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008072:	4b85      	ldr	r3, [pc, #532]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	08db      	lsrs	r3, r3, #3
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	4a83      	ldr	r2, [pc, #524]	@ (800828c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800807e:	fa22 f303 	lsr.w	r3, r2, r3
 8008082:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	ee07 3a90 	vmov	s15, r3
 8008094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809c:	4b7a      	ldr	r3, [pc, #488]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800809e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80080cc:	e087      	b.n	80081de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80080dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e0:	4b69      	ldr	r3, [pc, #420]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80080e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	ee07 3a90 	vmov	s15, r3
 80080ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80080f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008110:	e065      	b.n	80081de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008298 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008124:	4b58      	ldr	r3, [pc, #352]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812c:	ee07 3a90 	vmov	s15, r3
 8008130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008134:	ed97 6a03 	vldr	s12, [r7, #12]
 8008138:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800813c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008140:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008144:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008150:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008154:	e043      	b.n	80081de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	ee07 3a90 	vmov	s15, r3
 800815c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008160:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800829c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008168:	4b47      	ldr	r3, [pc, #284]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800816a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008170:	ee07 3a90 	vmov	s15, r3
 8008174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008178:	ed97 6a03 	vldr	s12, [r7, #12]
 800817c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008180:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008184:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008188:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800818c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008194:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008198:	e021      	b.n	80081de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	ee07 3a90 	vmov	s15, r3
 80081a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008294 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80081a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ac:	4b36      	ldr	r3, [pc, #216]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b4:	ee07 3a90 	vmov	s15, r3
 80081b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80081de:	4b2a      	ldr	r3, [pc, #168]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e2:	0a5b      	lsrs	r3, r3, #9
 80081e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081e8:	ee07 3a90 	vmov	s15, r3
 80081ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80081fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008204:	ee17 2a90 	vmov	r2, s15
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800820c:	4b1e      	ldr	r3, [pc, #120]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008210:	0c1b      	lsrs	r3, r3, #16
 8008212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008216:	ee07 3a90 	vmov	s15, r3
 800821a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008226:	edd7 6a07 	vldr	s13, [r7, #28]
 800822a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800822e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008232:	ee17 2a90 	vmov	r2, s15
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800823a:	4b13      	ldr	r3, [pc, #76]	@ (8008288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823e:	0e1b      	lsrs	r3, r3, #24
 8008240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008254:	edd7 6a07 	vldr	s13, [r7, #28]
 8008258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800825c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008260:	ee17 2a90 	vmov	r2, s15
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008268:	e008      	b.n	800827c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	609a      	str	r2, [r3, #8]
}
 800827c:	bf00      	nop
 800827e:	3724      	adds	r7, #36	@ 0x24
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	58024400 	.word	0x58024400
 800828c:	03d09000 	.word	0x03d09000
 8008290:	46000000 	.word	0x46000000
 8008294:	4c742400 	.word	0x4c742400
 8008298:	4a742400 	.word	0x4a742400
 800829c:	4bbebc20 	.word	0x4bbebc20

080082a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082ae:	4b53      	ldr	r3, [pc, #332]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80082b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d101      	bne.n	80082be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e099      	b.n	80083f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082be:	4b4f      	ldr	r3, [pc, #316]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a4e      	ldr	r2, [pc, #312]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80082c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ca:	f7fa fa45 	bl	8002758 <HAL_GetTick>
 80082ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082d0:	e008      	b.n	80082e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082d2:	f7fa fa41 	bl	8002758 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e086      	b.n	80083f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082e4:	4b45      	ldr	r3, [pc, #276]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1f0      	bne.n	80082d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80082f0:	4b42      	ldr	r3, [pc, #264]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80082f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	031b      	lsls	r3, r3, #12
 80082fe:	493f      	ldr	r1, [pc, #252]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 8008300:	4313      	orrs	r3, r2
 8008302:	628b      	str	r3, [r1, #40]	@ 0x28
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	3b01      	subs	r3, #1
 800830a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	3b01      	subs	r3, #1
 8008314:	025b      	lsls	r3, r3, #9
 8008316:	b29b      	uxth	r3, r3
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	3b01      	subs	r3, #1
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	3b01      	subs	r3, #1
 800832e:	061b      	lsls	r3, r3, #24
 8008330:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008334:	4931      	ldr	r1, [pc, #196]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 8008336:	4313      	orrs	r3, r2
 8008338:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800833a:	4b30      	ldr	r3, [pc, #192]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 800833c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	492d      	ldr	r1, [pc, #180]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 8008348:	4313      	orrs	r3, r2
 800834a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800834c:	4b2b      	ldr	r3, [pc, #172]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 800834e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008350:	f023 0220 	bic.w	r2, r3, #32
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	4928      	ldr	r1, [pc, #160]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 800835a:	4313      	orrs	r3, r2
 800835c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800835e:	4b27      	ldr	r3, [pc, #156]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	4a26      	ldr	r2, [pc, #152]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 8008364:	f023 0310 	bic.w	r3, r3, #16
 8008368:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800836a:	4b24      	ldr	r3, [pc, #144]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 800836c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800836e:	4b24      	ldr	r3, [pc, #144]	@ (8008400 <RCCEx_PLL2_Config+0x160>)
 8008370:	4013      	ands	r3, r2
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	69d2      	ldr	r2, [r2, #28]
 8008376:	00d2      	lsls	r2, r2, #3
 8008378:	4920      	ldr	r1, [pc, #128]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 800837a:	4313      	orrs	r3, r2
 800837c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800837e:	4b1f      	ldr	r3, [pc, #124]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 8008380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008382:	4a1e      	ldr	r2, [pc, #120]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 8008384:	f043 0310 	orr.w	r3, r3, #16
 8008388:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008390:	4b1a      	ldr	r3, [pc, #104]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	4a19      	ldr	r2, [pc, #100]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 8008396:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800839a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800839c:	e00f      	b.n	80083be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d106      	bne.n	80083b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083a4:	4b15      	ldr	r3, [pc, #84]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80083a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a8:	4a14      	ldr	r2, [pc, #80]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80083aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80083b0:	e005      	b.n	80083be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083b2:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b6:	4a11      	ldr	r2, [pc, #68]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80083b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80083bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083be:	4b0f      	ldr	r3, [pc, #60]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a0e      	ldr	r2, [pc, #56]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80083c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ca:	f7fa f9c5 	bl	8002758 <HAL_GetTick>
 80083ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083d0:	e008      	b.n	80083e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083d2:	f7fa f9c1 	bl	8002758 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d901      	bls.n	80083e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e006      	b.n	80083f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083e4:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <RCCEx_PLL2_Config+0x15c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0f0      	beq.n	80083d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	58024400 	.word	0x58024400
 8008400:	ffff0007 	.word	0xffff0007

08008404 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008412:	4b53      	ldr	r3, [pc, #332]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	2b03      	cmp	r3, #3
 800841c:	d101      	bne.n	8008422 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e099      	b.n	8008556 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008422:	4b4f      	ldr	r3, [pc, #316]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a4e      	ldr	r2, [pc, #312]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 8008428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800842c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800842e:	f7fa f993 	bl	8002758 <HAL_GetTick>
 8008432:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008434:	e008      	b.n	8008448 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008436:	f7fa f98f 	bl	8002758 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e086      	b.n	8008556 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008448:	4b45      	ldr	r3, [pc, #276]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1f0      	bne.n	8008436 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008454:	4b42      	ldr	r3, [pc, #264]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 8008456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008458:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	051b      	lsls	r3, r3, #20
 8008462:	493f      	ldr	r1, [pc, #252]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 8008464:	4313      	orrs	r3, r2
 8008466:	628b      	str	r3, [r1, #40]	@ 0x28
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	3b01      	subs	r3, #1
 800846e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	3b01      	subs	r3, #1
 8008478:	025b      	lsls	r3, r3, #9
 800847a:	b29b      	uxth	r3, r3
 800847c:	431a      	orrs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	3b01      	subs	r3, #1
 8008484:	041b      	lsls	r3, r3, #16
 8008486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	3b01      	subs	r3, #1
 8008492:	061b      	lsls	r3, r3, #24
 8008494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008498:	4931      	ldr	r1, [pc, #196]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800849e:	4b30      	ldr	r3, [pc, #192]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	492d      	ldr	r1, [pc, #180]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084b0:	4b2b      	ldr	r3, [pc, #172]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	4928      	ldr	r1, [pc, #160]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084c2:	4b27      	ldr	r3, [pc, #156]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c6:	4a26      	ldr	r2, [pc, #152]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80084ce:	4b24      	ldr	r3, [pc, #144]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084d2:	4b24      	ldr	r3, [pc, #144]	@ (8008564 <RCCEx_PLL3_Config+0x160>)
 80084d4:	4013      	ands	r3, r2
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	69d2      	ldr	r2, [r2, #28]
 80084da:	00d2      	lsls	r2, r2, #3
 80084dc:	4920      	ldr	r1, [pc, #128]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80084e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d106      	bne.n	8008502 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80084f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f8:	4a19      	ldr	r2, [pc, #100]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 80084fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80084fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008500:	e00f      	b.n	8008522 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d106      	bne.n	8008516 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008508:	4b15      	ldr	r3, [pc, #84]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 800850a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850c:	4a14      	ldr	r2, [pc, #80]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 800850e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008514:	e005      	b.n	8008522 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008516:	4b12      	ldr	r3, [pc, #72]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 8008518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851a:	4a11      	ldr	r2, [pc, #68]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 800851c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008520:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008522:	4b0f      	ldr	r3, [pc, #60]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a0e      	ldr	r2, [pc, #56]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 8008528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800852c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852e:	f7fa f913 	bl	8002758 <HAL_GetTick>
 8008532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008534:	e008      	b.n	8008548 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008536:	f7fa f90f 	bl	8002758 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e006      	b.n	8008556 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008548:	4b05      	ldr	r3, [pc, #20]	@ (8008560 <RCCEx_PLL3_Config+0x15c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0f0      	beq.n	8008536 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	58024400 	.word	0x58024400
 8008564:	ffff0007 	.word	0xffff0007

08008568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e049      	b.n	800860e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d106      	bne.n	8008594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7f9 fd56 	bl	8002040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f000 faa2 	bl	8008af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e049      	b.n	80086bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f841 	bl	80086c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2202      	movs	r2, #2
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f000 fa4b 	bl	8008af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e0ff      	b.n	80088f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b14      	cmp	r3, #20
 8008702:	f200 80f0 	bhi.w	80088e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008706:	a201      	add	r2, pc, #4	@ (adr r2, 800870c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870c:	08008761 	.word	0x08008761
 8008710:	080088e7 	.word	0x080088e7
 8008714:	080088e7 	.word	0x080088e7
 8008718:	080088e7 	.word	0x080088e7
 800871c:	080087a1 	.word	0x080087a1
 8008720:	080088e7 	.word	0x080088e7
 8008724:	080088e7 	.word	0x080088e7
 8008728:	080088e7 	.word	0x080088e7
 800872c:	080087e3 	.word	0x080087e3
 8008730:	080088e7 	.word	0x080088e7
 8008734:	080088e7 	.word	0x080088e7
 8008738:	080088e7 	.word	0x080088e7
 800873c:	08008823 	.word	0x08008823
 8008740:	080088e7 	.word	0x080088e7
 8008744:	080088e7 	.word	0x080088e7
 8008748:	080088e7 	.word	0x080088e7
 800874c:	08008865 	.word	0x08008865
 8008750:	080088e7 	.word	0x080088e7
 8008754:	080088e7 	.word	0x080088e7
 8008758:	080088e7 	.word	0x080088e7
 800875c:	080088a5 	.word	0x080088a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68b9      	ldr	r1, [r7, #8]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fa62 	bl	8008c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0208 	orr.w	r2, r2, #8
 800877a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	699a      	ldr	r2, [r3, #24]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0204 	bic.w	r2, r2, #4
 800878a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6999      	ldr	r1, [r3, #24]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	691a      	ldr	r2, [r3, #16]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	619a      	str	r2, [r3, #24]
      break;
 800879e:	e0a5      	b.n	80088ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fad2 	bl	8008d50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699a      	ldr	r2, [r3, #24]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6999      	ldr	r1, [r3, #24]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	021a      	lsls	r2, r3, #8
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	619a      	str	r2, [r3, #24]
      break;
 80087e0:	e084      	b.n	80088ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fb3b 	bl	8008e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69da      	ldr	r2, [r3, #28]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0208 	orr.w	r2, r2, #8
 80087fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69da      	ldr	r2, [r3, #28]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0204 	bic.w	r2, r2, #4
 800880c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69d9      	ldr	r1, [r3, #28]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	691a      	ldr	r2, [r3, #16]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	61da      	str	r2, [r3, #28]
      break;
 8008820:	e064      	b.n	80088ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	4618      	mov	r0, r3
 800882a:	f000 fba3 	bl	8008f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69da      	ldr	r2, [r3, #28]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800883c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69da      	ldr	r2, [r3, #28]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800884c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69d9      	ldr	r1, [r3, #28]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	021a      	lsls	r2, r3, #8
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	61da      	str	r2, [r3, #28]
      break;
 8008862:	e043      	b.n	80088ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68b9      	ldr	r1, [r7, #8]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fbec 	bl	8009048 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0208 	orr.w	r2, r2, #8
 800887e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0204 	bic.w	r2, r2, #4
 800888e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	691a      	ldr	r2, [r3, #16]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80088a2:	e023      	b.n	80088ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fc30 	bl	8009110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	021a      	lsls	r2, r3, #8
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80088e4:	e002      	b.n	80088ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	75fb      	strb	r3, [r7, #23]
      break;
 80088ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop

08008900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_TIM_ConfigClockSource+0x1c>
 8008918:	2302      	movs	r3, #2
 800891a:	e0dc      	b.n	8008ad6 <HAL_TIM_ConfigClockSource+0x1d6>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	4b6a      	ldr	r3, [pc, #424]	@ (8008ae0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008938:	4013      	ands	r3, r2
 800893a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a64      	ldr	r2, [pc, #400]	@ (8008ae4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	f000 80a9 	beq.w	8008aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8008958:	4a62      	ldr	r2, [pc, #392]	@ (8008ae4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	f200 80ae 	bhi.w	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 8008960:	4a61      	ldr	r2, [pc, #388]	@ (8008ae8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	f000 80a1 	beq.w	8008aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8008968:	4a5f      	ldr	r2, [pc, #380]	@ (8008ae8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800896a:	4293      	cmp	r3, r2
 800896c:	f200 80a6 	bhi.w	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 8008970:	4a5e      	ldr	r2, [pc, #376]	@ (8008aec <HAL_TIM_ConfigClockSource+0x1ec>)
 8008972:	4293      	cmp	r3, r2
 8008974:	f000 8099 	beq.w	8008aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8008978:	4a5c      	ldr	r2, [pc, #368]	@ (8008aec <HAL_TIM_ConfigClockSource+0x1ec>)
 800897a:	4293      	cmp	r3, r2
 800897c:	f200 809e 	bhi.w	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 8008980:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008984:	f000 8091 	beq.w	8008aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8008988:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800898c:	f200 8096 	bhi.w	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 8008990:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008994:	f000 8089 	beq.w	8008aaa <HAL_TIM_ConfigClockSource+0x1aa>
 8008998:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800899c:	f200 808e 	bhi.w	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 80089a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089a4:	d03e      	beq.n	8008a24 <HAL_TIM_ConfigClockSource+0x124>
 80089a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089aa:	f200 8087 	bhi.w	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 80089ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089b2:	f000 8086 	beq.w	8008ac2 <HAL_TIM_ConfigClockSource+0x1c2>
 80089b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ba:	d87f      	bhi.n	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 80089bc:	2b70      	cmp	r3, #112	@ 0x70
 80089be:	d01a      	beq.n	80089f6 <HAL_TIM_ConfigClockSource+0xf6>
 80089c0:	2b70      	cmp	r3, #112	@ 0x70
 80089c2:	d87b      	bhi.n	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 80089c4:	2b60      	cmp	r3, #96	@ 0x60
 80089c6:	d050      	beq.n	8008a6a <HAL_TIM_ConfigClockSource+0x16a>
 80089c8:	2b60      	cmp	r3, #96	@ 0x60
 80089ca:	d877      	bhi.n	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 80089cc:	2b50      	cmp	r3, #80	@ 0x50
 80089ce:	d03c      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x14a>
 80089d0:	2b50      	cmp	r3, #80	@ 0x50
 80089d2:	d873      	bhi.n	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 80089d4:	2b40      	cmp	r3, #64	@ 0x40
 80089d6:	d058      	beq.n	8008a8a <HAL_TIM_ConfigClockSource+0x18a>
 80089d8:	2b40      	cmp	r3, #64	@ 0x40
 80089da:	d86f      	bhi.n	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 80089dc:	2b30      	cmp	r3, #48	@ 0x30
 80089de:	d064      	beq.n	8008aaa <HAL_TIM_ConfigClockSource+0x1aa>
 80089e0:	2b30      	cmp	r3, #48	@ 0x30
 80089e2:	d86b      	bhi.n	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	d060      	beq.n	8008aaa <HAL_TIM_ConfigClockSource+0x1aa>
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d867      	bhi.n	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d05c      	beq.n	8008aaa <HAL_TIM_ConfigClockSource+0x1aa>
 80089f0:	2b10      	cmp	r3, #16
 80089f2:	d05a      	beq.n	8008aaa <HAL_TIM_ConfigClockSource+0x1aa>
 80089f4:	e062      	b.n	8008abc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a06:	f000 fc67 	bl	80092d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	609a      	str	r2, [r3, #8]
      break;
 8008a22:	e04f      	b.n	8008ac4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a34:	f000 fc50 	bl	80092d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689a      	ldr	r2, [r3, #8]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a46:	609a      	str	r2, [r3, #8]
      break;
 8008a48:	e03c      	b.n	8008ac4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a56:	461a      	mov	r2, r3
 8008a58:	f000 fbc0 	bl	80091dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2150      	movs	r1, #80	@ 0x50
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fc1a 	bl	800929c <TIM_ITRx_SetConfig>
      break;
 8008a68:	e02c      	b.n	8008ac4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a76:	461a      	mov	r2, r3
 8008a78:	f000 fbdf 	bl	800923a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2160      	movs	r1, #96	@ 0x60
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fc0a 	bl	800929c <TIM_ITRx_SetConfig>
      break;
 8008a88:	e01c      	b.n	8008ac4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a96:	461a      	mov	r2, r3
 8008a98:	f000 fba0 	bl	80091dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2140      	movs	r1, #64	@ 0x40
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 fbfa 	bl	800929c <TIM_ITRx_SetConfig>
      break;
 8008aa8:	e00c      	b.n	8008ac4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f000 fbf1 	bl	800929c <TIM_ITRx_SetConfig>
      break;
 8008aba:	e003      	b.n	8008ac4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac0:	e000      	b.n	8008ac4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	ffceff88 	.word	0xffceff88
 8008ae4:	00100040 	.word	0x00100040
 8008ae8:	00100030 	.word	0x00100030
 8008aec:	00100020 	.word	0x00100020

08008af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a43      	ldr	r2, [pc, #268]	@ (8008c10 <TIM_Base_SetConfig+0x120>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d013      	beq.n	8008b30 <TIM_Base_SetConfig+0x40>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b0e:	d00f      	beq.n	8008b30 <TIM_Base_SetConfig+0x40>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a40      	ldr	r2, [pc, #256]	@ (8008c14 <TIM_Base_SetConfig+0x124>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00b      	beq.n	8008b30 <TIM_Base_SetConfig+0x40>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8008c18 <TIM_Base_SetConfig+0x128>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d007      	beq.n	8008b30 <TIM_Base_SetConfig+0x40>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a3e      	ldr	r2, [pc, #248]	@ (8008c1c <TIM_Base_SetConfig+0x12c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_Base_SetConfig+0x40>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a3d      	ldr	r2, [pc, #244]	@ (8008c20 <TIM_Base_SetConfig+0x130>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d108      	bne.n	8008b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a32      	ldr	r2, [pc, #200]	@ (8008c10 <TIM_Base_SetConfig+0x120>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d01f      	beq.n	8008b8a <TIM_Base_SetConfig+0x9a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b50:	d01b      	beq.n	8008b8a <TIM_Base_SetConfig+0x9a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a2f      	ldr	r2, [pc, #188]	@ (8008c14 <TIM_Base_SetConfig+0x124>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d017      	beq.n	8008b8a <TIM_Base_SetConfig+0x9a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8008c18 <TIM_Base_SetConfig+0x128>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d013      	beq.n	8008b8a <TIM_Base_SetConfig+0x9a>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a2d      	ldr	r2, [pc, #180]	@ (8008c1c <TIM_Base_SetConfig+0x12c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d00f      	beq.n	8008b8a <TIM_Base_SetConfig+0x9a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8008c20 <TIM_Base_SetConfig+0x130>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00b      	beq.n	8008b8a <TIM_Base_SetConfig+0x9a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a2b      	ldr	r2, [pc, #172]	@ (8008c24 <TIM_Base_SetConfig+0x134>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d007      	beq.n	8008b8a <TIM_Base_SetConfig+0x9a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8008c28 <TIM_Base_SetConfig+0x138>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d003      	beq.n	8008b8a <TIM_Base_SetConfig+0x9a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a29      	ldr	r2, [pc, #164]	@ (8008c2c <TIM_Base_SetConfig+0x13c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d108      	bne.n	8008b9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	689a      	ldr	r2, [r3, #8]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a14      	ldr	r2, [pc, #80]	@ (8008c10 <TIM_Base_SetConfig+0x120>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00f      	beq.n	8008be2 <TIM_Base_SetConfig+0xf2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a16      	ldr	r2, [pc, #88]	@ (8008c20 <TIM_Base_SetConfig+0x130>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d00b      	beq.n	8008be2 <TIM_Base_SetConfig+0xf2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a15      	ldr	r2, [pc, #84]	@ (8008c24 <TIM_Base_SetConfig+0x134>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d007      	beq.n	8008be2 <TIM_Base_SetConfig+0xf2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a14      	ldr	r2, [pc, #80]	@ (8008c28 <TIM_Base_SetConfig+0x138>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d003      	beq.n	8008be2 <TIM_Base_SetConfig+0xf2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a13      	ldr	r2, [pc, #76]	@ (8008c2c <TIM_Base_SetConfig+0x13c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d103      	bne.n	8008bea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	691a      	ldr	r2, [r3, #16]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f043 0204 	orr.w	r2, r3, #4
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	601a      	str	r2, [r3, #0]
}
 8008c02:	bf00      	nop
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	40010000 	.word	0x40010000
 8008c14:	40000400 	.word	0x40000400
 8008c18:	40000800 	.word	0x40000800
 8008c1c:	40000c00 	.word	0x40000c00
 8008c20:	40010400 	.word	0x40010400
 8008c24:	40014000 	.word	0x40014000
 8008c28:	40014400 	.word	0x40014400
 8008c2c:	40014800 	.word	0x40014800

08008c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	f023 0201 	bic.w	r2, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	4b37      	ldr	r3, [pc, #220]	@ (8008d38 <TIM_OC1_SetConfig+0x108>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0303 	bic.w	r3, r3, #3
 8008c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f023 0302 	bic.w	r3, r3, #2
 8008c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a2d      	ldr	r2, [pc, #180]	@ (8008d3c <TIM_OC1_SetConfig+0x10c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d00f      	beq.n	8008cac <TIM_OC1_SetConfig+0x7c>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8008d40 <TIM_OC1_SetConfig+0x110>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00b      	beq.n	8008cac <TIM_OC1_SetConfig+0x7c>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a2b      	ldr	r2, [pc, #172]	@ (8008d44 <TIM_OC1_SetConfig+0x114>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d007      	beq.n	8008cac <TIM_OC1_SetConfig+0x7c>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008d48 <TIM_OC1_SetConfig+0x118>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d003      	beq.n	8008cac <TIM_OC1_SetConfig+0x7c>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a29      	ldr	r2, [pc, #164]	@ (8008d4c <TIM_OC1_SetConfig+0x11c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d10c      	bne.n	8008cc6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f023 0308 	bic.w	r3, r3, #8
 8008cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f023 0304 	bic.w	r3, r3, #4
 8008cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d3c <TIM_OC1_SetConfig+0x10c>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00f      	beq.n	8008cee <TIM_OC1_SetConfig+0xbe>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d40 <TIM_OC1_SetConfig+0x110>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00b      	beq.n	8008cee <TIM_OC1_SetConfig+0xbe>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8008d44 <TIM_OC1_SetConfig+0x114>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d007      	beq.n	8008cee <TIM_OC1_SetConfig+0xbe>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a19      	ldr	r2, [pc, #100]	@ (8008d48 <TIM_OC1_SetConfig+0x118>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d003      	beq.n	8008cee <TIM_OC1_SetConfig+0xbe>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a18      	ldr	r2, [pc, #96]	@ (8008d4c <TIM_OC1_SetConfig+0x11c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d111      	bne.n	8008d12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	621a      	str	r2, [r3, #32]
}
 8008d2c:	bf00      	nop
 8008d2e:	371c      	adds	r7, #28
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	fffeff8f 	.word	0xfffeff8f
 8008d3c:	40010000 	.word	0x40010000
 8008d40:	40010400 	.word	0x40010400
 8008d44:	40014000 	.word	0x40014000
 8008d48:	40014400 	.word	0x40014400
 8008d4c:	40014800 	.word	0x40014800

08008d50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	f023 0210 	bic.w	r2, r3, #16
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4b34      	ldr	r3, [pc, #208]	@ (8008e4c <TIM_OC2_SetConfig+0xfc>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f023 0320 	bic.w	r3, r3, #32
 8008d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a29      	ldr	r2, [pc, #164]	@ (8008e50 <TIM_OC2_SetConfig+0x100>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_OC2_SetConfig+0x68>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a28      	ldr	r2, [pc, #160]	@ (8008e54 <TIM_OC2_SetConfig+0x104>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d10d      	bne.n	8008dd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8008e50 <TIM_OC2_SetConfig+0x100>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d00f      	beq.n	8008dfc <TIM_OC2_SetConfig+0xac>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a1d      	ldr	r2, [pc, #116]	@ (8008e54 <TIM_OC2_SetConfig+0x104>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00b      	beq.n	8008dfc <TIM_OC2_SetConfig+0xac>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e58 <TIM_OC2_SetConfig+0x108>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d007      	beq.n	8008dfc <TIM_OC2_SetConfig+0xac>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a1b      	ldr	r2, [pc, #108]	@ (8008e5c <TIM_OC2_SetConfig+0x10c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_OC2_SetConfig+0xac>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a1a      	ldr	r2, [pc, #104]	@ (8008e60 <TIM_OC2_SetConfig+0x110>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d113      	bne.n	8008e24 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	621a      	str	r2, [r3, #32]
}
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	feff8fff 	.word	0xfeff8fff
 8008e50:	40010000 	.word	0x40010000
 8008e54:	40010400 	.word	0x40010400
 8008e58:	40014000 	.word	0x40014000
 8008e5c:	40014400 	.word	0x40014400
 8008e60:	40014800 	.word	0x40014800

08008e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4b33      	ldr	r3, [pc, #204]	@ (8008f5c <TIM_OC3_SetConfig+0xf8>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0303 	bic.w	r3, r3, #3
 8008e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	021b      	lsls	r3, r3, #8
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a28      	ldr	r2, [pc, #160]	@ (8008f60 <TIM_OC3_SetConfig+0xfc>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d003      	beq.n	8008eca <TIM_OC3_SetConfig+0x66>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a27      	ldr	r2, [pc, #156]	@ (8008f64 <TIM_OC3_SetConfig+0x100>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d10d      	bne.n	8008ee6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f60 <TIM_OC3_SetConfig+0xfc>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d00f      	beq.n	8008f0e <TIM_OC3_SetConfig+0xaa>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8008f64 <TIM_OC3_SetConfig+0x100>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d00b      	beq.n	8008f0e <TIM_OC3_SetConfig+0xaa>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8008f68 <TIM_OC3_SetConfig+0x104>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d007      	beq.n	8008f0e <TIM_OC3_SetConfig+0xaa>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a1a      	ldr	r2, [pc, #104]	@ (8008f6c <TIM_OC3_SetConfig+0x108>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d003      	beq.n	8008f0e <TIM_OC3_SetConfig+0xaa>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a19      	ldr	r2, [pc, #100]	@ (8008f70 <TIM_OC3_SetConfig+0x10c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d113      	bne.n	8008f36 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	011b      	lsls	r3, r3, #4
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	011b      	lsls	r3, r3, #4
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	621a      	str	r2, [r3, #32]
}
 8008f50:	bf00      	nop
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	fffeff8f 	.word	0xfffeff8f
 8008f60:	40010000 	.word	0x40010000
 8008f64:	40010400 	.word	0x40010400
 8008f68:	40014000 	.word	0x40014000
 8008f6c:	40014400 	.word	0x40014400
 8008f70:	40014800 	.word	0x40014800

08008f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b087      	sub	sp, #28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4b24      	ldr	r3, [pc, #144]	@ (8009030 <TIM_OC4_SetConfig+0xbc>)
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	031b      	lsls	r3, r3, #12
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a19      	ldr	r2, [pc, #100]	@ (8009034 <TIM_OC4_SetConfig+0xc0>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d00f      	beq.n	8008ff4 <TIM_OC4_SetConfig+0x80>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a18      	ldr	r2, [pc, #96]	@ (8009038 <TIM_OC4_SetConfig+0xc4>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d00b      	beq.n	8008ff4 <TIM_OC4_SetConfig+0x80>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a17      	ldr	r2, [pc, #92]	@ (800903c <TIM_OC4_SetConfig+0xc8>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d007      	beq.n	8008ff4 <TIM_OC4_SetConfig+0x80>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a16      	ldr	r2, [pc, #88]	@ (8009040 <TIM_OC4_SetConfig+0xcc>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d003      	beq.n	8008ff4 <TIM_OC4_SetConfig+0x80>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a15      	ldr	r2, [pc, #84]	@ (8009044 <TIM_OC4_SetConfig+0xd0>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d109      	bne.n	8009008 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	019b      	lsls	r3, r3, #6
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	4313      	orrs	r3, r2
 8009006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	621a      	str	r2, [r3, #32]
}
 8009022:	bf00      	nop
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	feff8fff 	.word	0xfeff8fff
 8009034:	40010000 	.word	0x40010000
 8009038:	40010400 	.word	0x40010400
 800903c:	40014000 	.word	0x40014000
 8009040:	40014400 	.word	0x40014400
 8009044:	40014800 	.word	0x40014800

08009048 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a1b      	ldr	r3, [r3, #32]
 8009056:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800906e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4b21      	ldr	r3, [pc, #132]	@ (80090f8 <TIM_OC5_SetConfig+0xb0>)
 8009074:	4013      	ands	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009088:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	041b      	lsls	r3, r3, #16
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	4313      	orrs	r3, r2
 8009094:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a18      	ldr	r2, [pc, #96]	@ (80090fc <TIM_OC5_SetConfig+0xb4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00f      	beq.n	80090be <TIM_OC5_SetConfig+0x76>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a17      	ldr	r2, [pc, #92]	@ (8009100 <TIM_OC5_SetConfig+0xb8>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00b      	beq.n	80090be <TIM_OC5_SetConfig+0x76>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a16      	ldr	r2, [pc, #88]	@ (8009104 <TIM_OC5_SetConfig+0xbc>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d007      	beq.n	80090be <TIM_OC5_SetConfig+0x76>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a15      	ldr	r2, [pc, #84]	@ (8009108 <TIM_OC5_SetConfig+0xc0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d003      	beq.n	80090be <TIM_OC5_SetConfig+0x76>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a14      	ldr	r2, [pc, #80]	@ (800910c <TIM_OC5_SetConfig+0xc4>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d109      	bne.n	80090d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	621a      	str	r2, [r3, #32]
}
 80090ec:	bf00      	nop
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	fffeff8f 	.word	0xfffeff8f
 80090fc:	40010000 	.word	0x40010000
 8009100:	40010400 	.word	0x40010400
 8009104:	40014000 	.word	0x40014000
 8009108:	40014400 	.word	0x40014400
 800910c:	40014800 	.word	0x40014800

08009110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	4b22      	ldr	r3, [pc, #136]	@ (80091c4 <TIM_OC6_SetConfig+0xb4>)
 800913c:	4013      	ands	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	051b      	lsls	r3, r3, #20
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a19      	ldr	r2, [pc, #100]	@ (80091c8 <TIM_OC6_SetConfig+0xb8>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d00f      	beq.n	8009188 <TIM_OC6_SetConfig+0x78>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a18      	ldr	r2, [pc, #96]	@ (80091cc <TIM_OC6_SetConfig+0xbc>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d00b      	beq.n	8009188 <TIM_OC6_SetConfig+0x78>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a17      	ldr	r2, [pc, #92]	@ (80091d0 <TIM_OC6_SetConfig+0xc0>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d007      	beq.n	8009188 <TIM_OC6_SetConfig+0x78>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a16      	ldr	r2, [pc, #88]	@ (80091d4 <TIM_OC6_SetConfig+0xc4>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d003      	beq.n	8009188 <TIM_OC6_SetConfig+0x78>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a15      	ldr	r2, [pc, #84]	@ (80091d8 <TIM_OC6_SetConfig+0xc8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d109      	bne.n	800919c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800918e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	029b      	lsls	r3, r3, #10
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	4313      	orrs	r3, r2
 800919a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	621a      	str	r2, [r3, #32]
}
 80091b6:	bf00      	nop
 80091b8:	371c      	adds	r7, #28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	feff8fff 	.word	0xfeff8fff
 80091c8:	40010000 	.word	0x40010000
 80091cc:	40010400 	.word	0x40010400
 80091d0:	40014000 	.word	0x40014000
 80091d4:	40014400 	.word	0x40014400
 80091d8:	40014800 	.word	0x40014800

080091dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	f023 0201 	bic.w	r2, r3, #1
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f023 030a 	bic.w	r3, r3, #10
 8009218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	621a      	str	r2, [r3, #32]
}
 800922e:	bf00      	nop
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800923a:	b480      	push	{r7}
 800923c:	b087      	sub	sp, #28
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	f023 0210 	bic.w	r2, r3, #16
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	031b      	lsls	r3, r3, #12
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009276:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	011b      	lsls	r3, r3, #4
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	693a      	ldr	r2, [r7, #16]
 8009286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	621a      	str	r2, [r3, #32]
}
 800928e:	bf00      	nop
 8009290:	371c      	adds	r7, #28
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
	...

0800929c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	4b09      	ldr	r3, [pc, #36]	@ (80092d4 <TIM_ITRx_SetConfig+0x38>)
 80092b0:	4013      	ands	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	f043 0307 	orr.w	r3, r3, #7
 80092be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	609a      	str	r2, [r3, #8]
}
 80092c6:	bf00      	nop
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	ffcfff8f 	.word	0xffcfff8f

080092d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	021a      	lsls	r2, r3, #8
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	431a      	orrs	r2, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	4313      	orrs	r3, r2
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	609a      	str	r2, [r3, #8]
}
 800930c:	bf00      	nop
 800930e:	371c      	adds	r7, #28
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009328:	2b01      	cmp	r3, #1
 800932a:	d101      	bne.n	8009330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800932c:	2302      	movs	r3, #2
 800932e:	e06d      	b.n	800940c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a30      	ldr	r2, [pc, #192]	@ (8009418 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d004      	beq.n	8009364 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a2f      	ldr	r2, [pc, #188]	@ (800941c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d108      	bne.n	8009376 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800936a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	4313      	orrs	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a20      	ldr	r2, [pc, #128]	@ (8009418 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d022      	beq.n	80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a2:	d01d      	beq.n	80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009420 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d018      	beq.n	80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009424 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d013      	beq.n	80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a1a      	ldr	r2, [pc, #104]	@ (8009428 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00e      	beq.n	80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a15      	ldr	r2, [pc, #84]	@ (800941c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d009      	beq.n	80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a16      	ldr	r2, [pc, #88]	@ (800942c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d004      	beq.n	80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a15      	ldr	r2, [pc, #84]	@ (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d10c      	bne.n	80093fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	40010000 	.word	0x40010000
 800941c:	40010400 	.word	0x40010400
 8009420:	40000400 	.word	0x40000400
 8009424:	40000800 	.word	0x40000800
 8009428:	40000c00 	.word	0x40000c00
 800942c:	40001800 	.word	0x40001800
 8009430:	40014000 	.word	0x40014000

08009434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e042      	b.n	80094cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7f8 fe95 	bl	8002188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2224      	movs	r2, #36	@ 0x24
 8009462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 0201 	bic.w	r2, r2, #1
 8009474:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947a:	2b00      	cmp	r3, #0
 800947c:	d002      	beq.n	8009484 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fa60 	bl	800a944 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fcf5 	bl	8009e74 <UART_SetConfig>
 800948a:	4603      	mov	r3, r0
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e01b      	b.n	80094cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80094a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689a      	ldr	r2, [r3, #8]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80094b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f042 0201 	orr.w	r2, r2, #1
 80094c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 fadf 	bl	800aa88 <UART_CheckIdleState>
 80094ca:	4603      	mov	r3, r0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08a      	sub	sp, #40	@ 0x28
 80094d8:	af02      	add	r7, sp, #8
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	4613      	mov	r3, r2
 80094e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	d17b      	bne.n	80095e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <HAL_UART_Transmit+0x26>
 80094f4:	88fb      	ldrh	r3, [r7, #6]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e074      	b.n	80095e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2221      	movs	r2, #33	@ 0x21
 800950a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800950e:	f7f9 f923 	bl	8002758 <HAL_GetTick>
 8009512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	88fa      	ldrh	r2, [r7, #6]
 8009518:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	88fa      	ldrh	r2, [r7, #6]
 8009520:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800952c:	d108      	bne.n	8009540 <HAL_UART_Transmit+0x6c>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d104      	bne.n	8009540 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009536:	2300      	movs	r3, #0
 8009538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	e003      	b.n	8009548 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009548:	e030      	b.n	80095ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2200      	movs	r2, #0
 8009552:	2180      	movs	r1, #128	@ 0x80
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f001 fb41 	bl	800abdc <UART_WaitOnFlagUntilTimeout>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2220      	movs	r2, #32
 8009564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e03d      	b.n	80095e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10b      	bne.n	800958a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009580:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	3302      	adds	r3, #2
 8009586:	61bb      	str	r3, [r7, #24]
 8009588:	e007      	b.n	800959a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	781a      	ldrb	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	3301      	adds	r3, #1
 8009598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	3b01      	subs	r3, #1
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1c8      	bne.n	800954a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2200      	movs	r2, #0
 80095c0:	2140      	movs	r1, #64	@ 0x40
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 fb0a 	bl	800abdc <UART_WaitOnFlagUntilTimeout>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2220      	movs	r2, #32
 80095d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e006      	b.n	80095e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2220      	movs	r2, #32
 80095de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e000      	b.n	80095e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80095e6:	2302      	movs	r3, #2
  }
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3720      	adds	r7, #32
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08a      	sub	sp, #40	@ 0x28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4613      	mov	r3, r2
 80095fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009604:	2b20      	cmp	r3, #32
 8009606:	d137      	bne.n	8009678 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <HAL_UART_Receive_IT+0x24>
 800960e:	88fb      	ldrh	r3, [r7, #6]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e030      	b.n	800967a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a18      	ldr	r2, [pc, #96]	@ (8009684 <HAL_UART_Receive_IT+0x94>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d01f      	beq.n	8009668 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d018      	beq.n	8009668 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	613b      	str	r3, [r7, #16]
   return(result);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800964a:	627b      	str	r3, [r7, #36]	@ 0x24
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009654:	623b      	str	r3, [r7, #32]
 8009656:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	69f9      	ldr	r1, [r7, #28]
 800965a:	6a3a      	ldr	r2, [r7, #32]
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	61bb      	str	r3, [r7, #24]
   return(result);
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e6      	bne.n	8009636 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009668:	88fb      	ldrh	r3, [r7, #6]
 800966a:	461a      	mov	r2, r3
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f001 fb22 	bl	800acb8 <UART_Start_Receive_IT>
 8009674:	4603      	mov	r3, r0
 8009676:	e000      	b.n	800967a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009678:	2302      	movs	r3, #2
  }
}
 800967a:	4618      	mov	r0, r3
 800967c:	3728      	adds	r7, #40	@ 0x28
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	58000c00 	.word	0x58000c00

08009688 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b0ba      	sub	sp, #232	@ 0xe8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80096b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096b6:	4013      	ands	r3, r2
 80096b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80096bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d11b      	bne.n	80096fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096c8:	f003 0320 	and.w	r3, r3, #32
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d015      	beq.n	80096fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096d4:	f003 0320 	and.w	r3, r3, #32
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d105      	bne.n	80096e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d009      	beq.n	80096fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 8393 	beq.w	8009e18 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	4798      	blx	r3
      }
      return;
 80096fa:	e38d      	b.n	8009e18 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 8123 	beq.w	800994c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009706:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800970a:	4b8d      	ldr	r3, [pc, #564]	@ (8009940 <HAL_UART_IRQHandler+0x2b8>)
 800970c:	4013      	ands	r3, r2
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009712:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009716:	4b8b      	ldr	r3, [pc, #556]	@ (8009944 <HAL_UART_IRQHandler+0x2bc>)
 8009718:	4013      	ands	r3, r2
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 8116 	beq.w	800994c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d011      	beq.n	8009750 <HAL_UART_IRQHandler+0xc8>
 800972c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2201      	movs	r2, #1
 800973e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009746:	f043 0201 	orr.w	r2, r3, #1
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d011      	beq.n	8009780 <HAL_UART_IRQHandler+0xf8>
 800975c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2202      	movs	r2, #2
 800976e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009776:	f043 0204 	orr.w	r2, r3, #4
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009784:	f003 0304 	and.w	r3, r3, #4
 8009788:	2b00      	cmp	r3, #0
 800978a:	d011      	beq.n	80097b0 <HAL_UART_IRQHandler+0x128>
 800978c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2204      	movs	r2, #4
 800979e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a6:	f043 0202 	orr.w	r2, r3, #2
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097b4:	f003 0308 	and.w	r3, r3, #8
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d017      	beq.n	80097ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097c0:	f003 0320 	and.w	r3, r3, #32
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d105      	bne.n	80097d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80097c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80097cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009940 <HAL_UART_IRQHandler+0x2b8>)
 80097ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2208      	movs	r2, #8
 80097da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097e2:	f043 0208 	orr.w	r2, r3, #8
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d012      	beq.n	800981e <HAL_UART_IRQHandler+0x196>
 80097f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00c      	beq.n	800981e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800980c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009814:	f043 0220 	orr.w	r2, r3, #32
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 82f9 	beq.w	8009e1c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800982a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b00      	cmp	r3, #0
 8009834:	d013      	beq.n	800985e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800983a:	f003 0320 	and.w	r3, r3, #32
 800983e:	2b00      	cmp	r3, #0
 8009840:	d105      	bne.n	800984e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d007      	beq.n	800985e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009864:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009872:	2b40      	cmp	r3, #64	@ 0x40
 8009874:	d005      	beq.n	8009882 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800987a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800987e:	2b00      	cmp	r3, #0
 8009880:	d054      	beq.n	800992c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f001 fb3a 	bl	800aefc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009892:	2b40      	cmp	r3, #64	@ 0x40
 8009894:	d146      	bne.n	8009924 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3308      	adds	r3, #8
 800989c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3308      	adds	r3, #8
 80098be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098d2:	e841 2300 	strex	r3, r2, [r1]
 80098d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1d9      	bne.n	8009896 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d017      	beq.n	800991c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098f2:	4a15      	ldr	r2, [pc, #84]	@ (8009948 <HAL_UART_IRQHandler+0x2c0>)
 80098f4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fa fc5b 	bl	80041b8 <HAL_DMA_Abort_IT>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d019      	beq.n	800993c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800990e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009916:	4610      	mov	r0, r2
 8009918:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800991a:	e00f      	b.n	800993c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fa93 	bl	8009e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009922:	e00b      	b.n	800993c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fa8f 	bl	8009e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800992a:	e007      	b.n	800993c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fa8b 	bl	8009e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800993a:	e26f      	b.n	8009e1c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800993c:	bf00      	nop
    return;
 800993e:	e26d      	b.n	8009e1c <HAL_UART_IRQHandler+0x794>
 8009940:	10000001 	.word	0x10000001
 8009944:	04000120 	.word	0x04000120
 8009948:	0800afc9 	.word	0x0800afc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009950:	2b01      	cmp	r3, #1
 8009952:	f040 8203 	bne.w	8009d5c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800995a:	f003 0310 	and.w	r3, r3, #16
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 81fc 	beq.w	8009d5c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009968:	f003 0310 	and.w	r3, r3, #16
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 81f5 	beq.w	8009d5c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2210      	movs	r2, #16
 8009978:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009984:	2b40      	cmp	r3, #64	@ 0x40
 8009986:	f040 816d 	bne.w	8009c64 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4aa4      	ldr	r2, [pc, #656]	@ (8009c24 <HAL_UART_IRQHandler+0x59c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d068      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4aa1      	ldr	r2, [pc, #644]	@ (8009c28 <HAL_UART_IRQHandler+0x5a0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d061      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a9f      	ldr	r2, [pc, #636]	@ (8009c2c <HAL_UART_IRQHandler+0x5a4>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d05a      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a9c      	ldr	r2, [pc, #624]	@ (8009c30 <HAL_UART_IRQHandler+0x5a8>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d053      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a9a      	ldr	r2, [pc, #616]	@ (8009c34 <HAL_UART_IRQHandler+0x5ac>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d04c      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a97      	ldr	r2, [pc, #604]	@ (8009c38 <HAL_UART_IRQHandler+0x5b0>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d045      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a95      	ldr	r2, [pc, #596]	@ (8009c3c <HAL_UART_IRQHandler+0x5b4>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d03e      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a92      	ldr	r2, [pc, #584]	@ (8009c40 <HAL_UART_IRQHandler+0x5b8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d037      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a90      	ldr	r2, [pc, #576]	@ (8009c44 <HAL_UART_IRQHandler+0x5bc>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d030      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a8d      	ldr	r2, [pc, #564]	@ (8009c48 <HAL_UART_IRQHandler+0x5c0>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d029      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a8b      	ldr	r2, [pc, #556]	@ (8009c4c <HAL_UART_IRQHandler+0x5c4>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d022      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a88      	ldr	r2, [pc, #544]	@ (8009c50 <HAL_UART_IRQHandler+0x5c8>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d01b      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a86      	ldr	r2, [pc, #536]	@ (8009c54 <HAL_UART_IRQHandler+0x5cc>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d014      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a83      	ldr	r2, [pc, #524]	@ (8009c58 <HAL_UART_IRQHandler+0x5d0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d00d      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a81      	ldr	r2, [pc, #516]	@ (8009c5c <HAL_UART_IRQHandler+0x5d4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d006      	beq.n	8009a6a <HAL_UART_IRQHandler+0x3e2>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a7e      	ldr	r2, [pc, #504]	@ (8009c60 <HAL_UART_IRQHandler+0x5d8>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d106      	bne.n	8009a78 <HAL_UART_IRQHandler+0x3f0>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	e005      	b.n	8009a84 <HAL_UART_IRQHandler+0x3fc>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 80ad 	beq.w	8009bec <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	f080 80a5 	bcs.w	8009bec <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab2:	69db      	ldr	r3, [r3, #28]
 8009ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ab8:	f000 8087 	beq.w	8009bca <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ac8:	e853 3f00 	ldrex	r3, [r3]
 8009acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009aea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1da      	bne.n	8009abc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b18:	f023 0301 	bic.w	r3, r3, #1
 8009b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3308      	adds	r3, #8
 8009b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e1      	bne.n	8009b06 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3308      	adds	r3, #8
 8009b48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3308      	adds	r3, #8
 8009b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e3      	bne.n	8009b42 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b98:	f023 0310 	bic.w	r3, r3, #16
 8009b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009baa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bb2:	e841 2300 	strex	r3, r2, [r1]
 8009bb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1e4      	bne.n	8009b88 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7f9 ffd9 	bl	8003b7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f939 	bl	8009e5c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009bea:	e119      	b.n	8009e20 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	f040 8112 	bne.w	8009e20 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c08:	f040 810a 	bne.w	8009e20 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f91e 	bl	8009e5c <HAL_UARTEx_RxEventCallback>
      return;
 8009c20:	e0fe      	b.n	8009e20 <HAL_UART_IRQHandler+0x798>
 8009c22:	bf00      	nop
 8009c24:	40020010 	.word	0x40020010
 8009c28:	40020028 	.word	0x40020028
 8009c2c:	40020040 	.word	0x40020040
 8009c30:	40020058 	.word	0x40020058
 8009c34:	40020070 	.word	0x40020070
 8009c38:	40020088 	.word	0x40020088
 8009c3c:	400200a0 	.word	0x400200a0
 8009c40:	400200b8 	.word	0x400200b8
 8009c44:	40020410 	.word	0x40020410
 8009c48:	40020428 	.word	0x40020428
 8009c4c:	40020440 	.word	0x40020440
 8009c50:	40020458 	.word	0x40020458
 8009c54:	40020470 	.word	0x40020470
 8009c58:	40020488 	.word	0x40020488
 8009c5c:	400204a0 	.word	0x400204a0
 8009c60:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 80cf 	beq.w	8009e24 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009c86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 80ca 	beq.w	8009e24 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	461a      	mov	r2, r3
 8009cae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cb4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cba:	e841 2300 	strex	r3, r2, [r1]
 8009cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e4      	bne.n	8009c90 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3308      	adds	r3, #8
 8009ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	623b      	str	r3, [r7, #32]
   return(result);
 8009cd6:	6a3a      	ldr	r2, [r7, #32]
 8009cd8:	4b55      	ldr	r3, [pc, #340]	@ (8009e30 <HAL_UART_IRQHandler+0x7a8>)
 8009cda:	4013      	ands	r3, r2
 8009cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009cea:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cf2:	e841 2300 	strex	r3, r2, [r1]
 8009cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1e3      	bne.n	8009cc6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0310 	bic.w	r3, r3, #16
 8009d26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	69b9      	ldr	r1, [r7, #24]
 8009d3a:	69fa      	ldr	r2, [r7, #28]
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	617b      	str	r3, [r7, #20]
   return(result);
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e4      	bne.n	8009d12 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f881 	bl	8009e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d5a:	e063      	b.n	8009e24 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00e      	beq.n	8009d86 <HAL_UART_IRQHandler+0x6fe>
 8009d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d008      	beq.n	8009d86 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009d7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f001 fe80 	bl	800ba84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d84:	e051      	b.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d014      	beq.n	8009dbc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d105      	bne.n	8009daa <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009da2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d03a      	beq.n	8009e28 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	4798      	blx	r3
    }
    return;
 8009dba:	e035      	b.n	8009e28 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d009      	beq.n	8009ddc <HAL_UART_IRQHandler+0x754>
 8009dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f001 f909 	bl	800afec <UART_EndTransmit_IT>
    return;
 8009dda:	e026      	b.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009de0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d009      	beq.n	8009dfc <HAL_UART_IRQHandler+0x774>
 8009de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f001 fe59 	bl	800baac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dfa:	e016      	b.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d010      	beq.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
 8009e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	da0c      	bge.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 fe41 	bl	800ba98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e16:	e008      	b.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e18:	bf00      	nop
 8009e1a:	e006      	b.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009e1c:	bf00      	nop
 8009e1e:	e004      	b.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e20:	bf00      	nop
 8009e22:	e002      	b.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009e24:	bf00      	nop
 8009e26:	e000      	b.n	8009e2a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009e28:	bf00      	nop
  }
}
 8009e2a:	37e8      	adds	r7, #232	@ 0xe8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	effffffe 	.word	0xeffffffe

08009e34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e78:	b092      	sub	sp, #72	@ 0x48
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	689a      	ldr	r2, [r3, #8]
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	431a      	orrs	r2, r3
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4bbe      	ldr	r3, [pc, #760]	@ (800a19c <UART_SetConfig+0x328>)
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	6812      	ldr	r2, [r2, #0]
 8009eaa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009eac:	430b      	orrs	r3, r1
 8009eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4ab3      	ldr	r2, [pc, #716]	@ (800a1a0 <UART_SetConfig+0x32c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d004      	beq.n	8009ee0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009edc:	4313      	orrs	r3, r2
 8009ede:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	4baf      	ldr	r3, [pc, #700]	@ (800a1a4 <UART_SetConfig+0x330>)
 8009ee8:	4013      	ands	r3, r2
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	6812      	ldr	r2, [r2, #0]
 8009eee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ef0:	430b      	orrs	r3, r1
 8009ef2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efa:	f023 010f 	bic.w	r1, r3, #15
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4aa6      	ldr	r2, [pc, #664]	@ (800a1a8 <UART_SetConfig+0x334>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d177      	bne.n	800a004 <UART_SetConfig+0x190>
 8009f14:	4ba5      	ldr	r3, [pc, #660]	@ (800a1ac <UART_SetConfig+0x338>)
 8009f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f1c:	2b28      	cmp	r3, #40	@ 0x28
 8009f1e:	d86d      	bhi.n	8009ffc <UART_SetConfig+0x188>
 8009f20:	a201      	add	r2, pc, #4	@ (adr r2, 8009f28 <UART_SetConfig+0xb4>)
 8009f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f26:	bf00      	nop
 8009f28:	08009fcd 	.word	0x08009fcd
 8009f2c:	08009ffd 	.word	0x08009ffd
 8009f30:	08009ffd 	.word	0x08009ffd
 8009f34:	08009ffd 	.word	0x08009ffd
 8009f38:	08009ffd 	.word	0x08009ffd
 8009f3c:	08009ffd 	.word	0x08009ffd
 8009f40:	08009ffd 	.word	0x08009ffd
 8009f44:	08009ffd 	.word	0x08009ffd
 8009f48:	08009fd5 	.word	0x08009fd5
 8009f4c:	08009ffd 	.word	0x08009ffd
 8009f50:	08009ffd 	.word	0x08009ffd
 8009f54:	08009ffd 	.word	0x08009ffd
 8009f58:	08009ffd 	.word	0x08009ffd
 8009f5c:	08009ffd 	.word	0x08009ffd
 8009f60:	08009ffd 	.word	0x08009ffd
 8009f64:	08009ffd 	.word	0x08009ffd
 8009f68:	08009fdd 	.word	0x08009fdd
 8009f6c:	08009ffd 	.word	0x08009ffd
 8009f70:	08009ffd 	.word	0x08009ffd
 8009f74:	08009ffd 	.word	0x08009ffd
 8009f78:	08009ffd 	.word	0x08009ffd
 8009f7c:	08009ffd 	.word	0x08009ffd
 8009f80:	08009ffd 	.word	0x08009ffd
 8009f84:	08009ffd 	.word	0x08009ffd
 8009f88:	08009fe5 	.word	0x08009fe5
 8009f8c:	08009ffd 	.word	0x08009ffd
 8009f90:	08009ffd 	.word	0x08009ffd
 8009f94:	08009ffd 	.word	0x08009ffd
 8009f98:	08009ffd 	.word	0x08009ffd
 8009f9c:	08009ffd 	.word	0x08009ffd
 8009fa0:	08009ffd 	.word	0x08009ffd
 8009fa4:	08009ffd 	.word	0x08009ffd
 8009fa8:	08009fed 	.word	0x08009fed
 8009fac:	08009ffd 	.word	0x08009ffd
 8009fb0:	08009ffd 	.word	0x08009ffd
 8009fb4:	08009ffd 	.word	0x08009ffd
 8009fb8:	08009ffd 	.word	0x08009ffd
 8009fbc:	08009ffd 	.word	0x08009ffd
 8009fc0:	08009ffd 	.word	0x08009ffd
 8009fc4:	08009ffd 	.word	0x08009ffd
 8009fc8:	08009ff5 	.word	0x08009ff5
 8009fcc:	2301      	movs	r3, #1
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fd2:	e222      	b.n	800a41a <UART_SetConfig+0x5a6>
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fda:	e21e      	b.n	800a41a <UART_SetConfig+0x5a6>
 8009fdc:	2308      	movs	r3, #8
 8009fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe2:	e21a      	b.n	800a41a <UART_SetConfig+0x5a6>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fea:	e216      	b.n	800a41a <UART_SetConfig+0x5a6>
 8009fec:	2320      	movs	r3, #32
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff2:	e212      	b.n	800a41a <UART_SetConfig+0x5a6>
 8009ff4:	2340      	movs	r3, #64	@ 0x40
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffa:	e20e      	b.n	800a41a <UART_SetConfig+0x5a6>
 8009ffc:	2380      	movs	r3, #128	@ 0x80
 8009ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a002:	e20a      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a69      	ldr	r2, [pc, #420]	@ (800a1b0 <UART_SetConfig+0x33c>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d130      	bne.n	800a070 <UART_SetConfig+0x1fc>
 800a00e:	4b67      	ldr	r3, [pc, #412]	@ (800a1ac <UART_SetConfig+0x338>)
 800a010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a012:	f003 0307 	and.w	r3, r3, #7
 800a016:	2b05      	cmp	r3, #5
 800a018:	d826      	bhi.n	800a068 <UART_SetConfig+0x1f4>
 800a01a:	a201      	add	r2, pc, #4	@ (adr r2, 800a020 <UART_SetConfig+0x1ac>)
 800a01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a020:	0800a039 	.word	0x0800a039
 800a024:	0800a041 	.word	0x0800a041
 800a028:	0800a049 	.word	0x0800a049
 800a02c:	0800a051 	.word	0x0800a051
 800a030:	0800a059 	.word	0x0800a059
 800a034:	0800a061 	.word	0x0800a061
 800a038:	2300      	movs	r3, #0
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a03e:	e1ec      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a040:	2304      	movs	r3, #4
 800a042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a046:	e1e8      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a048:	2308      	movs	r3, #8
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04e:	e1e4      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a050:	2310      	movs	r3, #16
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a056:	e1e0      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a058:	2320      	movs	r3, #32
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05e:	e1dc      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a060:	2340      	movs	r3, #64	@ 0x40
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a066:	e1d8      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a068:	2380      	movs	r3, #128	@ 0x80
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06e:	e1d4      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a4f      	ldr	r2, [pc, #316]	@ (800a1b4 <UART_SetConfig+0x340>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d130      	bne.n	800a0dc <UART_SetConfig+0x268>
 800a07a:	4b4c      	ldr	r3, [pc, #304]	@ (800a1ac <UART_SetConfig+0x338>)
 800a07c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a07e:	f003 0307 	and.w	r3, r3, #7
 800a082:	2b05      	cmp	r3, #5
 800a084:	d826      	bhi.n	800a0d4 <UART_SetConfig+0x260>
 800a086:	a201      	add	r2, pc, #4	@ (adr r2, 800a08c <UART_SetConfig+0x218>)
 800a088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08c:	0800a0a5 	.word	0x0800a0a5
 800a090:	0800a0ad 	.word	0x0800a0ad
 800a094:	0800a0b5 	.word	0x0800a0b5
 800a098:	0800a0bd 	.word	0x0800a0bd
 800a09c:	0800a0c5 	.word	0x0800a0c5
 800a0a0:	0800a0cd 	.word	0x0800a0cd
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0aa:	e1b6      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0b2:	e1b2      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a0b4:	2308      	movs	r3, #8
 800a0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ba:	e1ae      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a0bc:	2310      	movs	r3, #16
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	e1aa      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a0c4:	2320      	movs	r3, #32
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ca:	e1a6      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a0cc:	2340      	movs	r3, #64	@ 0x40
 800a0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d2:	e1a2      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a0d4:	2380      	movs	r3, #128	@ 0x80
 800a0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0da:	e19e      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a35      	ldr	r2, [pc, #212]	@ (800a1b8 <UART_SetConfig+0x344>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d130      	bne.n	800a148 <UART_SetConfig+0x2d4>
 800a0e6:	4b31      	ldr	r3, [pc, #196]	@ (800a1ac <UART_SetConfig+0x338>)
 800a0e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ea:	f003 0307 	and.w	r3, r3, #7
 800a0ee:	2b05      	cmp	r3, #5
 800a0f0:	d826      	bhi.n	800a140 <UART_SetConfig+0x2cc>
 800a0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f8 <UART_SetConfig+0x284>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a111 	.word	0x0800a111
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	0800a121 	.word	0x0800a121
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a131 	.word	0x0800a131
 800a10c:	0800a139 	.word	0x0800a139
 800a110:	2300      	movs	r3, #0
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a116:	e180      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a118:	2304      	movs	r3, #4
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11e:	e17c      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a120:	2308      	movs	r3, #8
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a126:	e178      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a128:	2310      	movs	r3, #16
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e174      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a130:	2320      	movs	r3, #32
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a136:	e170      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a138:	2340      	movs	r3, #64	@ 0x40
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13e:	e16c      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a140:	2380      	movs	r3, #128	@ 0x80
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a146:	e168      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a1b      	ldr	r2, [pc, #108]	@ (800a1bc <UART_SetConfig+0x348>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d142      	bne.n	800a1d8 <UART_SetConfig+0x364>
 800a152:	4b16      	ldr	r3, [pc, #88]	@ (800a1ac <UART_SetConfig+0x338>)
 800a154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b05      	cmp	r3, #5
 800a15c:	d838      	bhi.n	800a1d0 <UART_SetConfig+0x35c>
 800a15e:	a201      	add	r2, pc, #4	@ (adr r2, 800a164 <UART_SetConfig+0x2f0>)
 800a160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a164:	0800a17d 	.word	0x0800a17d
 800a168:	0800a185 	.word	0x0800a185
 800a16c:	0800a18d 	.word	0x0800a18d
 800a170:	0800a195 	.word	0x0800a195
 800a174:	0800a1c1 	.word	0x0800a1c1
 800a178:	0800a1c9 	.word	0x0800a1c9
 800a17c:	2300      	movs	r3, #0
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a182:	e14a      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a184:	2304      	movs	r3, #4
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18a:	e146      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a18c:	2308      	movs	r3, #8
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a192:	e142      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a194:	2310      	movs	r3, #16
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e13e      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a19c:	cfff69f3 	.word	0xcfff69f3
 800a1a0:	58000c00 	.word	0x58000c00
 800a1a4:	11fff4ff 	.word	0x11fff4ff
 800a1a8:	40011000 	.word	0x40011000
 800a1ac:	58024400 	.word	0x58024400
 800a1b0:	40004400 	.word	0x40004400
 800a1b4:	40004800 	.word	0x40004800
 800a1b8:	40004c00 	.word	0x40004c00
 800a1bc:	40005000 	.word	0x40005000
 800a1c0:	2320      	movs	r3, #32
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c6:	e128      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a1c8:	2340      	movs	r3, #64	@ 0x40
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ce:	e124      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a1d0:	2380      	movs	r3, #128	@ 0x80
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d6:	e120      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4acb      	ldr	r2, [pc, #812]	@ (800a50c <UART_SetConfig+0x698>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d176      	bne.n	800a2d0 <UART_SetConfig+0x45c>
 800a1e2:	4bcb      	ldr	r3, [pc, #812]	@ (800a510 <UART_SetConfig+0x69c>)
 800a1e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1ea:	2b28      	cmp	r3, #40	@ 0x28
 800a1ec:	d86c      	bhi.n	800a2c8 <UART_SetConfig+0x454>
 800a1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f4 <UART_SetConfig+0x380>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	0800a299 	.word	0x0800a299
 800a1f8:	0800a2c9 	.word	0x0800a2c9
 800a1fc:	0800a2c9 	.word	0x0800a2c9
 800a200:	0800a2c9 	.word	0x0800a2c9
 800a204:	0800a2c9 	.word	0x0800a2c9
 800a208:	0800a2c9 	.word	0x0800a2c9
 800a20c:	0800a2c9 	.word	0x0800a2c9
 800a210:	0800a2c9 	.word	0x0800a2c9
 800a214:	0800a2a1 	.word	0x0800a2a1
 800a218:	0800a2c9 	.word	0x0800a2c9
 800a21c:	0800a2c9 	.word	0x0800a2c9
 800a220:	0800a2c9 	.word	0x0800a2c9
 800a224:	0800a2c9 	.word	0x0800a2c9
 800a228:	0800a2c9 	.word	0x0800a2c9
 800a22c:	0800a2c9 	.word	0x0800a2c9
 800a230:	0800a2c9 	.word	0x0800a2c9
 800a234:	0800a2a9 	.word	0x0800a2a9
 800a238:	0800a2c9 	.word	0x0800a2c9
 800a23c:	0800a2c9 	.word	0x0800a2c9
 800a240:	0800a2c9 	.word	0x0800a2c9
 800a244:	0800a2c9 	.word	0x0800a2c9
 800a248:	0800a2c9 	.word	0x0800a2c9
 800a24c:	0800a2c9 	.word	0x0800a2c9
 800a250:	0800a2c9 	.word	0x0800a2c9
 800a254:	0800a2b1 	.word	0x0800a2b1
 800a258:	0800a2c9 	.word	0x0800a2c9
 800a25c:	0800a2c9 	.word	0x0800a2c9
 800a260:	0800a2c9 	.word	0x0800a2c9
 800a264:	0800a2c9 	.word	0x0800a2c9
 800a268:	0800a2c9 	.word	0x0800a2c9
 800a26c:	0800a2c9 	.word	0x0800a2c9
 800a270:	0800a2c9 	.word	0x0800a2c9
 800a274:	0800a2b9 	.word	0x0800a2b9
 800a278:	0800a2c9 	.word	0x0800a2c9
 800a27c:	0800a2c9 	.word	0x0800a2c9
 800a280:	0800a2c9 	.word	0x0800a2c9
 800a284:	0800a2c9 	.word	0x0800a2c9
 800a288:	0800a2c9 	.word	0x0800a2c9
 800a28c:	0800a2c9 	.word	0x0800a2c9
 800a290:	0800a2c9 	.word	0x0800a2c9
 800a294:	0800a2c1 	.word	0x0800a2c1
 800a298:	2301      	movs	r3, #1
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29e:	e0bc      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a6:	e0b8      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ae:	e0b4      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b6:	e0b0      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a2b8:	2320      	movs	r3, #32
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2be:	e0ac      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a2c0:	2340      	movs	r3, #64	@ 0x40
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c6:	e0a8      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a2c8:	2380      	movs	r3, #128	@ 0x80
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ce:	e0a4      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a8f      	ldr	r2, [pc, #572]	@ (800a514 <UART_SetConfig+0x6a0>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d130      	bne.n	800a33c <UART_SetConfig+0x4c8>
 800a2da:	4b8d      	ldr	r3, [pc, #564]	@ (800a510 <UART_SetConfig+0x69c>)
 800a2dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2de:	f003 0307 	and.w	r3, r3, #7
 800a2e2:	2b05      	cmp	r3, #5
 800a2e4:	d826      	bhi.n	800a334 <UART_SetConfig+0x4c0>
 800a2e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2ec <UART_SetConfig+0x478>)
 800a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ec:	0800a305 	.word	0x0800a305
 800a2f0:	0800a30d 	.word	0x0800a30d
 800a2f4:	0800a315 	.word	0x0800a315
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	0800a32d 	.word	0x0800a32d
 800a304:	2300      	movs	r3, #0
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30a:	e086      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a30c:	2304      	movs	r3, #4
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a312:	e082      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a314:	2308      	movs	r3, #8
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a31a:	e07e      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a31c:	2310      	movs	r3, #16
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a322:	e07a      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a324:	2320      	movs	r3, #32
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32a:	e076      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a32c:	2340      	movs	r3, #64	@ 0x40
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a332:	e072      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a334:	2380      	movs	r3, #128	@ 0x80
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33a:	e06e      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a75      	ldr	r2, [pc, #468]	@ (800a518 <UART_SetConfig+0x6a4>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d130      	bne.n	800a3a8 <UART_SetConfig+0x534>
 800a346:	4b72      	ldr	r3, [pc, #456]	@ (800a510 <UART_SetConfig+0x69c>)
 800a348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	2b05      	cmp	r3, #5
 800a350:	d826      	bhi.n	800a3a0 <UART_SetConfig+0x52c>
 800a352:	a201      	add	r2, pc, #4	@ (adr r2, 800a358 <UART_SetConfig+0x4e4>)
 800a354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a358:	0800a371 	.word	0x0800a371
 800a35c:	0800a379 	.word	0x0800a379
 800a360:	0800a381 	.word	0x0800a381
 800a364:	0800a389 	.word	0x0800a389
 800a368:	0800a391 	.word	0x0800a391
 800a36c:	0800a399 	.word	0x0800a399
 800a370:	2300      	movs	r3, #0
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a376:	e050      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a378:	2304      	movs	r3, #4
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37e:	e04c      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a380:	2308      	movs	r3, #8
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a386:	e048      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a388:	2310      	movs	r3, #16
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38e:	e044      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a390:	2320      	movs	r3, #32
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e040      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a398:	2340      	movs	r3, #64	@ 0x40
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e03c      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a3a0:	2380      	movs	r3, #128	@ 0x80
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a6:	e038      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a5b      	ldr	r2, [pc, #364]	@ (800a51c <UART_SetConfig+0x6a8>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d130      	bne.n	800a414 <UART_SetConfig+0x5a0>
 800a3b2:	4b57      	ldr	r3, [pc, #348]	@ (800a510 <UART_SetConfig+0x69c>)
 800a3b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b05      	cmp	r3, #5
 800a3bc:	d826      	bhi.n	800a40c <UART_SetConfig+0x598>
 800a3be:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c4 <UART_SetConfig+0x550>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a3dd 	.word	0x0800a3dd
 800a3c8:	0800a3e5 	.word	0x0800a3e5
 800a3cc:	0800a3ed 	.word	0x0800a3ed
 800a3d0:	0800a3f5 	.word	0x0800a3f5
 800a3d4:	0800a3fd 	.word	0x0800a3fd
 800a3d8:	0800a405 	.word	0x0800a405
 800a3dc:	2302      	movs	r3, #2
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e2:	e01a      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a3e4:	2304      	movs	r3, #4
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ea:	e016      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a3ec:	2308      	movs	r3, #8
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f2:	e012      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a3f4:	2310      	movs	r3, #16
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fa:	e00e      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a3fc:	2320      	movs	r3, #32
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e00a      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a404:	2340      	movs	r3, #64	@ 0x40
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e006      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a40c:	2380      	movs	r3, #128	@ 0x80
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e002      	b.n	800a41a <UART_SetConfig+0x5a6>
 800a414:	2380      	movs	r3, #128	@ 0x80
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a3f      	ldr	r2, [pc, #252]	@ (800a51c <UART_SetConfig+0x6a8>)
 800a420:	4293      	cmp	r3, r2
 800a422:	f040 80f8 	bne.w	800a616 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a426:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a42a:	2b20      	cmp	r3, #32
 800a42c:	dc46      	bgt.n	800a4bc <UART_SetConfig+0x648>
 800a42e:	2b02      	cmp	r3, #2
 800a430:	f2c0 8082 	blt.w	800a538 <UART_SetConfig+0x6c4>
 800a434:	3b02      	subs	r3, #2
 800a436:	2b1e      	cmp	r3, #30
 800a438:	d87e      	bhi.n	800a538 <UART_SetConfig+0x6c4>
 800a43a:	a201      	add	r2, pc, #4	@ (adr r2, 800a440 <UART_SetConfig+0x5cc>)
 800a43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a440:	0800a4c3 	.word	0x0800a4c3
 800a444:	0800a539 	.word	0x0800a539
 800a448:	0800a4cb 	.word	0x0800a4cb
 800a44c:	0800a539 	.word	0x0800a539
 800a450:	0800a539 	.word	0x0800a539
 800a454:	0800a539 	.word	0x0800a539
 800a458:	0800a4db 	.word	0x0800a4db
 800a45c:	0800a539 	.word	0x0800a539
 800a460:	0800a539 	.word	0x0800a539
 800a464:	0800a539 	.word	0x0800a539
 800a468:	0800a539 	.word	0x0800a539
 800a46c:	0800a539 	.word	0x0800a539
 800a470:	0800a539 	.word	0x0800a539
 800a474:	0800a539 	.word	0x0800a539
 800a478:	0800a4eb 	.word	0x0800a4eb
 800a47c:	0800a539 	.word	0x0800a539
 800a480:	0800a539 	.word	0x0800a539
 800a484:	0800a539 	.word	0x0800a539
 800a488:	0800a539 	.word	0x0800a539
 800a48c:	0800a539 	.word	0x0800a539
 800a490:	0800a539 	.word	0x0800a539
 800a494:	0800a539 	.word	0x0800a539
 800a498:	0800a539 	.word	0x0800a539
 800a49c:	0800a539 	.word	0x0800a539
 800a4a0:	0800a539 	.word	0x0800a539
 800a4a4:	0800a539 	.word	0x0800a539
 800a4a8:	0800a539 	.word	0x0800a539
 800a4ac:	0800a539 	.word	0x0800a539
 800a4b0:	0800a539 	.word	0x0800a539
 800a4b4:	0800a539 	.word	0x0800a539
 800a4b8:	0800a52b 	.word	0x0800a52b
 800a4bc:	2b40      	cmp	r3, #64	@ 0x40
 800a4be:	d037      	beq.n	800a530 <UART_SetConfig+0x6bc>
 800a4c0:	e03a      	b.n	800a538 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4c2:	f7fd fadd 	bl	8007a80 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4c8:	e03c      	b.n	800a544 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fd faec 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d8:	e034      	b.n	800a544 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4da:	f107 0318 	add.w	r3, r7, #24
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fd fc38 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e8:	e02c      	b.n	800a544 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4ea:	4b09      	ldr	r3, [pc, #36]	@ (800a510 <UART_SetConfig+0x69c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0320 	and.w	r3, r3, #32
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d016      	beq.n	800a524 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4f6:	4b06      	ldr	r3, [pc, #24]	@ (800a510 <UART_SetConfig+0x69c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	08db      	lsrs	r3, r3, #3
 800a4fc:	f003 0303 	and.w	r3, r3, #3
 800a500:	4a07      	ldr	r2, [pc, #28]	@ (800a520 <UART_SetConfig+0x6ac>)
 800a502:	fa22 f303 	lsr.w	r3, r2, r3
 800a506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a508:	e01c      	b.n	800a544 <UART_SetConfig+0x6d0>
 800a50a:	bf00      	nop
 800a50c:	40011400 	.word	0x40011400
 800a510:	58024400 	.word	0x58024400
 800a514:	40007800 	.word	0x40007800
 800a518:	40007c00 	.word	0x40007c00
 800a51c:	58000c00 	.word	0x58000c00
 800a520:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a524:	4b9d      	ldr	r3, [pc, #628]	@ (800a79c <UART_SetConfig+0x928>)
 800a526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a528:	e00c      	b.n	800a544 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a52a:	4b9d      	ldr	r3, [pc, #628]	@ (800a7a0 <UART_SetConfig+0x92c>)
 800a52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a52e:	e009      	b.n	800a544 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a536:	e005      	b.n	800a544 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a538:	2300      	movs	r3, #0
 800a53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a542:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 81de 	beq.w	800a908 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a550:	4a94      	ldr	r2, [pc, #592]	@ (800a7a4 <UART_SetConfig+0x930>)
 800a552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a556:	461a      	mov	r2, r3
 800a558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a55e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	4613      	mov	r3, r2
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	4413      	add	r3, r2
 800a56a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d305      	bcc.n	800a57c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a578:	429a      	cmp	r2, r3
 800a57a:	d903      	bls.n	800a584 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a582:	e1c1      	b.n	800a908 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a586:	2200      	movs	r2, #0
 800a588:	60bb      	str	r3, [r7, #8]
 800a58a:	60fa      	str	r2, [r7, #12]
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a590:	4a84      	ldr	r2, [pc, #528]	@ (800a7a4 <UART_SetConfig+0x930>)
 800a592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a596:	b29b      	uxth	r3, r3
 800a598:	2200      	movs	r2, #0
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	607a      	str	r2, [r7, #4]
 800a59e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5a6:	f7f6 f8bf 	bl	8000728 <__aeabi_uldivmod>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f04f 0200 	mov.w	r2, #0
 800a5b6:	f04f 0300 	mov.w	r3, #0
 800a5ba:	020b      	lsls	r3, r1, #8
 800a5bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5c0:	0202      	lsls	r2, r0, #8
 800a5c2:	6979      	ldr	r1, [r7, #20]
 800a5c4:	6849      	ldr	r1, [r1, #4]
 800a5c6:	0849      	lsrs	r1, r1, #1
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	eb12 0804 	adds.w	r8, r2, r4
 800a5d2:	eb43 0905 	adc.w	r9, r3, r5
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	469a      	mov	sl, r3
 800a5de:	4693      	mov	fp, r2
 800a5e0:	4652      	mov	r2, sl
 800a5e2:	465b      	mov	r3, fp
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	4649      	mov	r1, r9
 800a5e8:	f7f6 f89e 	bl	8000728 <__aeabi_uldivmod>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5fa:	d308      	bcc.n	800a60e <UART_SetConfig+0x79a>
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a602:	d204      	bcs.n	800a60e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a60a:	60da      	str	r2, [r3, #12]
 800a60c:	e17c      	b.n	800a908 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a614:	e178      	b.n	800a908 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a61e:	f040 80c5 	bne.w	800a7ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a622:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a626:	2b20      	cmp	r3, #32
 800a628:	dc48      	bgt.n	800a6bc <UART_SetConfig+0x848>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	db7b      	blt.n	800a726 <UART_SetConfig+0x8b2>
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d879      	bhi.n	800a726 <UART_SetConfig+0x8b2>
 800a632:	a201      	add	r2, pc, #4	@ (adr r2, 800a638 <UART_SetConfig+0x7c4>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a6c3 	.word	0x0800a6c3
 800a63c:	0800a6cb 	.word	0x0800a6cb
 800a640:	0800a727 	.word	0x0800a727
 800a644:	0800a727 	.word	0x0800a727
 800a648:	0800a6d3 	.word	0x0800a6d3
 800a64c:	0800a727 	.word	0x0800a727
 800a650:	0800a727 	.word	0x0800a727
 800a654:	0800a727 	.word	0x0800a727
 800a658:	0800a6e3 	.word	0x0800a6e3
 800a65c:	0800a727 	.word	0x0800a727
 800a660:	0800a727 	.word	0x0800a727
 800a664:	0800a727 	.word	0x0800a727
 800a668:	0800a727 	.word	0x0800a727
 800a66c:	0800a727 	.word	0x0800a727
 800a670:	0800a727 	.word	0x0800a727
 800a674:	0800a727 	.word	0x0800a727
 800a678:	0800a6f3 	.word	0x0800a6f3
 800a67c:	0800a727 	.word	0x0800a727
 800a680:	0800a727 	.word	0x0800a727
 800a684:	0800a727 	.word	0x0800a727
 800a688:	0800a727 	.word	0x0800a727
 800a68c:	0800a727 	.word	0x0800a727
 800a690:	0800a727 	.word	0x0800a727
 800a694:	0800a727 	.word	0x0800a727
 800a698:	0800a727 	.word	0x0800a727
 800a69c:	0800a727 	.word	0x0800a727
 800a6a0:	0800a727 	.word	0x0800a727
 800a6a4:	0800a727 	.word	0x0800a727
 800a6a8:	0800a727 	.word	0x0800a727
 800a6ac:	0800a727 	.word	0x0800a727
 800a6b0:	0800a727 	.word	0x0800a727
 800a6b4:	0800a727 	.word	0x0800a727
 800a6b8:	0800a719 	.word	0x0800a719
 800a6bc:	2b40      	cmp	r3, #64	@ 0x40
 800a6be:	d02e      	beq.n	800a71e <UART_SetConfig+0x8aa>
 800a6c0:	e031      	b.n	800a726 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6c2:	f7fb fa27 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 800a6c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6c8:	e033      	b.n	800a732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6ca:	f7fb fa39 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 800a6ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6d0:	e02f      	b.n	800a732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fd f9e8 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e0:	e027      	b.n	800a732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6e2:	f107 0318 	add.w	r3, r7, #24
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd fb34 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f0:	e01f      	b.n	800a732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6f2:	4b2d      	ldr	r3, [pc, #180]	@ (800a7a8 <UART_SetConfig+0x934>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0320 	and.w	r3, r3, #32
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d009      	beq.n	800a712 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6fe:	4b2a      	ldr	r3, [pc, #168]	@ (800a7a8 <UART_SetConfig+0x934>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	08db      	lsrs	r3, r3, #3
 800a704:	f003 0303 	and.w	r3, r3, #3
 800a708:	4a24      	ldr	r2, [pc, #144]	@ (800a79c <UART_SetConfig+0x928>)
 800a70a:	fa22 f303 	lsr.w	r3, r2, r3
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a710:	e00f      	b.n	800a732 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a712:	4b22      	ldr	r3, [pc, #136]	@ (800a79c <UART_SetConfig+0x928>)
 800a714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a716:	e00c      	b.n	800a732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a718:	4b21      	ldr	r3, [pc, #132]	@ (800a7a0 <UART_SetConfig+0x92c>)
 800a71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a71c:	e009      	b.n	800a732 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a71e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a724:	e005      	b.n	800a732 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a726:	2300      	movs	r3, #0
 800a728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a730:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 80e7 	beq.w	800a908 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73e:	4a19      	ldr	r2, [pc, #100]	@ (800a7a4 <UART_SetConfig+0x930>)
 800a740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a744:	461a      	mov	r2, r3
 800a746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a748:	fbb3 f3f2 	udiv	r3, r3, r2
 800a74c:	005a      	lsls	r2, r3, #1
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	085b      	lsrs	r3, r3, #1
 800a754:	441a      	add	r2, r3
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a75e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a762:	2b0f      	cmp	r3, #15
 800a764:	d916      	bls.n	800a794 <UART_SetConfig+0x920>
 800a766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a76c:	d212      	bcs.n	800a794 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a770:	b29b      	uxth	r3, r3
 800a772:	f023 030f 	bic.w	r3, r3, #15
 800a776:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77a:	085b      	lsrs	r3, r3, #1
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	f003 0307 	and.w	r3, r3, #7
 800a782:	b29a      	uxth	r2, r3
 800a784:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a786:	4313      	orrs	r3, r2
 800a788:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a790:	60da      	str	r2, [r3, #12]
 800a792:	e0b9      	b.n	800a908 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a79a:	e0b5      	b.n	800a908 <UART_SetConfig+0xa94>
 800a79c:	03d09000 	.word	0x03d09000
 800a7a0:	003d0900 	.word	0x003d0900
 800a7a4:	08013880 	.word	0x08013880
 800a7a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7b0:	2b20      	cmp	r3, #32
 800a7b2:	dc49      	bgt.n	800a848 <UART_SetConfig+0x9d4>
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	db7c      	blt.n	800a8b2 <UART_SetConfig+0xa3e>
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d87a      	bhi.n	800a8b2 <UART_SetConfig+0xa3e>
 800a7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c4 <UART_SetConfig+0x950>)
 800a7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c2:	bf00      	nop
 800a7c4:	0800a84f 	.word	0x0800a84f
 800a7c8:	0800a857 	.word	0x0800a857
 800a7cc:	0800a8b3 	.word	0x0800a8b3
 800a7d0:	0800a8b3 	.word	0x0800a8b3
 800a7d4:	0800a85f 	.word	0x0800a85f
 800a7d8:	0800a8b3 	.word	0x0800a8b3
 800a7dc:	0800a8b3 	.word	0x0800a8b3
 800a7e0:	0800a8b3 	.word	0x0800a8b3
 800a7e4:	0800a86f 	.word	0x0800a86f
 800a7e8:	0800a8b3 	.word	0x0800a8b3
 800a7ec:	0800a8b3 	.word	0x0800a8b3
 800a7f0:	0800a8b3 	.word	0x0800a8b3
 800a7f4:	0800a8b3 	.word	0x0800a8b3
 800a7f8:	0800a8b3 	.word	0x0800a8b3
 800a7fc:	0800a8b3 	.word	0x0800a8b3
 800a800:	0800a8b3 	.word	0x0800a8b3
 800a804:	0800a87f 	.word	0x0800a87f
 800a808:	0800a8b3 	.word	0x0800a8b3
 800a80c:	0800a8b3 	.word	0x0800a8b3
 800a810:	0800a8b3 	.word	0x0800a8b3
 800a814:	0800a8b3 	.word	0x0800a8b3
 800a818:	0800a8b3 	.word	0x0800a8b3
 800a81c:	0800a8b3 	.word	0x0800a8b3
 800a820:	0800a8b3 	.word	0x0800a8b3
 800a824:	0800a8b3 	.word	0x0800a8b3
 800a828:	0800a8b3 	.word	0x0800a8b3
 800a82c:	0800a8b3 	.word	0x0800a8b3
 800a830:	0800a8b3 	.word	0x0800a8b3
 800a834:	0800a8b3 	.word	0x0800a8b3
 800a838:	0800a8b3 	.word	0x0800a8b3
 800a83c:	0800a8b3 	.word	0x0800a8b3
 800a840:	0800a8b3 	.word	0x0800a8b3
 800a844:	0800a8a5 	.word	0x0800a8a5
 800a848:	2b40      	cmp	r3, #64	@ 0x40
 800a84a:	d02e      	beq.n	800a8aa <UART_SetConfig+0xa36>
 800a84c:	e031      	b.n	800a8b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a84e:	f7fb f961 	bl	8005b14 <HAL_RCC_GetPCLK1Freq>
 800a852:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a854:	e033      	b.n	800a8be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a856:	f7fb f973 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 800a85a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a85c:	e02f      	b.n	800a8be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a85e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a862:	4618      	mov	r0, r3
 800a864:	f7fd f922 	bl	8007aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a86c:	e027      	b.n	800a8be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a86e:	f107 0318 	add.w	r3, r7, #24
 800a872:	4618      	mov	r0, r3
 800a874:	f7fd fa6e 	bl	8007d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a87c:	e01f      	b.n	800a8be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a87e:	4b2d      	ldr	r3, [pc, #180]	@ (800a934 <UART_SetConfig+0xac0>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0320 	and.w	r3, r3, #32
 800a886:	2b00      	cmp	r3, #0
 800a888:	d009      	beq.n	800a89e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a88a:	4b2a      	ldr	r3, [pc, #168]	@ (800a934 <UART_SetConfig+0xac0>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	08db      	lsrs	r3, r3, #3
 800a890:	f003 0303 	and.w	r3, r3, #3
 800a894:	4a28      	ldr	r2, [pc, #160]	@ (800a938 <UART_SetConfig+0xac4>)
 800a896:	fa22 f303 	lsr.w	r3, r2, r3
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a89c:	e00f      	b.n	800a8be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a89e:	4b26      	ldr	r3, [pc, #152]	@ (800a938 <UART_SetConfig+0xac4>)
 800a8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a2:	e00c      	b.n	800a8be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8a4:	4b25      	ldr	r3, [pc, #148]	@ (800a93c <UART_SetConfig+0xac8>)
 800a8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a8:	e009      	b.n	800a8be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b0:	e005      	b.n	800a8be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8bc:	bf00      	nop
    }

    if (pclk != 0U)
 800a8be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d021      	beq.n	800a908 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a940 <UART_SetConfig+0xacc>)
 800a8ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	085b      	lsrs	r3, r3, #1
 800a8dc:	441a      	add	r2, r3
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ea:	2b0f      	cmp	r3, #15
 800a8ec:	d909      	bls.n	800a902 <UART_SetConfig+0xa8e>
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8f4:	d205      	bcs.n	800a902 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60da      	str	r2, [r3, #12]
 800a900:	e002      	b.n	800a908 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	2201      	movs	r2, #1
 800a914:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2200      	movs	r2, #0
 800a91c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	2200      	movs	r2, #0
 800a922:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a924:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3748      	adds	r7, #72	@ 0x48
 800a92c:	46bd      	mov	sp, r7
 800a92e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a932:	bf00      	nop
 800a934:	58024400 	.word	0x58024400
 800a938:	03d09000 	.word	0x03d09000
 800a93c:	003d0900 	.word	0x003d0900
 800a940:	08013880 	.word	0x08013880

0800a944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a950:	f003 0308 	and.w	r3, r3, #8
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00a      	beq.n	800a96e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	430a      	orrs	r2, r1
 800a98e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00a      	beq.n	800a9b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	430a      	orrs	r2, r1
 800a9b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b6:	f003 0304 	and.w	r3, r3, #4
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00a      	beq.n	800a9d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d8:	f003 0310 	and.w	r3, r3, #16
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00a      	beq.n	800a9f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	430a      	orrs	r2, r1
 800a9f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9fa:	f003 0320 	and.w	r3, r3, #32
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00a      	beq.n	800aa18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d01a      	beq.n	800aa5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	430a      	orrs	r2, r1
 800aa38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa42:	d10a      	bne.n	800aa5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	430a      	orrs	r2, r1
 800aa58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00a      	beq.n	800aa7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	605a      	str	r2, [r3, #4]
  }
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b098      	sub	sp, #96	@ 0x60
 800aa8c:	af02      	add	r7, sp, #8
 800aa8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa98:	f7f7 fe5e 	bl	8002758 <HAL_GetTick>
 800aa9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0308 	and.w	r3, r3, #8
 800aaa8:	2b08      	cmp	r3, #8
 800aaaa:	d12f      	bne.n	800ab0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aab4:	2200      	movs	r2, #0
 800aab6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f88e 	bl	800abdc <UART_WaitOnFlagUntilTimeout>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d022      	beq.n	800ab0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aace:	e853 3f00 	ldrex	r3, [r3]
 800aad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aada:	653b      	str	r3, [r7, #80]	@ 0x50
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	461a      	mov	r2, r3
 800aae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aae4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aae6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aaea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaec:	e841 2300 	strex	r3, r2, [r1]
 800aaf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e6      	bne.n	800aac6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e063      	b.n	800abd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0304 	and.w	r3, r3, #4
 800ab16:	2b04      	cmp	r3, #4
 800ab18:	d149      	bne.n	800abae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab22:	2200      	movs	r2, #0
 800ab24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f857 	bl	800abdc <UART_WaitOnFlagUntilTimeout>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d03c      	beq.n	800abae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3c:	e853 3f00 	ldrex	r3, [r3]
 800ab40:	623b      	str	r3, [r7, #32]
   return(result);
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab52:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab5a:	e841 2300 	strex	r3, r2, [r1]
 800ab5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1e6      	bne.n	800ab34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f023 0301 	bic.w	r3, r3, #1
 800ab7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3308      	adds	r3, #8
 800ab84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab86:	61fa      	str	r2, [r7, #28]
 800ab88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	69b9      	ldr	r1, [r7, #24]
 800ab8c:	69fa      	ldr	r2, [r7, #28]
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	617b      	str	r3, [r7, #20]
   return(result);
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e5      	bne.n	800ab66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2220      	movs	r2, #32
 800ab9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	e012      	b.n	800abd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2220      	movs	r2, #32
 800abb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2220      	movs	r2, #32
 800abba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3758      	adds	r7, #88	@ 0x58
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	4613      	mov	r3, r2
 800abea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abec:	e04f      	b.n	800ac8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abf4:	d04b      	beq.n	800ac8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abf6:	f7f7 fdaf 	bl	8002758 <HAL_GetTick>
 800abfa:	4602      	mov	r2, r0
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	69ba      	ldr	r2, [r7, #24]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d302      	bcc.n	800ac0c <UART_WaitOnFlagUntilTimeout+0x30>
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e04e      	b.n	800acae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0304 	and.w	r3, r3, #4
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d037      	beq.n	800ac8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b80      	cmp	r3, #128	@ 0x80
 800ac22:	d034      	beq.n	800ac8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2b40      	cmp	r3, #64	@ 0x40
 800ac28:	d031      	beq.n	800ac8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	69db      	ldr	r3, [r3, #28]
 800ac30:	f003 0308 	and.w	r3, r3, #8
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d110      	bne.n	800ac5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2208      	movs	r2, #8
 800ac3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 f95b 	bl	800aefc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2208      	movs	r2, #8
 800ac4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e029      	b.n	800acae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	69db      	ldr	r3, [r3, #28]
 800ac60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac68:	d111      	bne.n	800ac8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 f941 	bl	800aefc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e00f      	b.n	800acae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	69da      	ldr	r2, [r3, #28]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	4013      	ands	r3, r2
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	bf0c      	ite	eq
 800ac9e:	2301      	moveq	r3, #1
 800aca0:	2300      	movne	r3, #0
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	461a      	mov	r2, r3
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d0a0      	beq.n	800abee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acb8:	b480      	push	{r7}
 800acba:	b0a3      	sub	sp, #140	@ 0x8c
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	4613      	mov	r3, r2
 800acc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	88fa      	ldrh	r2, [r7, #6]
 800acd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	88fa      	ldrh	r2, [r7, #6]
 800acd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acea:	d10e      	bne.n	800ad0a <UART_Start_Receive_IT+0x52>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d105      	bne.n	800ad00 <UART_Start_Receive_IT+0x48>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800acfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800acfe:	e02d      	b.n	800ad5c <UART_Start_Receive_IT+0xa4>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	22ff      	movs	r2, #255	@ 0xff
 800ad04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad08:	e028      	b.n	800ad5c <UART_Start_Receive_IT+0xa4>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10d      	bne.n	800ad2e <UART_Start_Receive_IT+0x76>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d104      	bne.n	800ad24 <UART_Start_Receive_IT+0x6c>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	22ff      	movs	r2, #255	@ 0xff
 800ad1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad22:	e01b      	b.n	800ad5c <UART_Start_Receive_IT+0xa4>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	227f      	movs	r2, #127	@ 0x7f
 800ad28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad2c:	e016      	b.n	800ad5c <UART_Start_Receive_IT+0xa4>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad36:	d10d      	bne.n	800ad54 <UART_Start_Receive_IT+0x9c>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d104      	bne.n	800ad4a <UART_Start_Receive_IT+0x92>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	227f      	movs	r2, #127	@ 0x7f
 800ad44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad48:	e008      	b.n	800ad5c <UART_Start_Receive_IT+0xa4>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	223f      	movs	r2, #63	@ 0x3f
 800ad4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ad52:	e003      	b.n	800ad5c <UART_Start_Receive_IT+0xa4>
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2222      	movs	r2, #34	@ 0x22
 800ad68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3308      	adds	r3, #8
 800ad72:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ad7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad7e:	f043 0301 	orr.w	r3, r3, #1
 800ad82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ad90:	673a      	str	r2, [r7, #112]	@ 0x70
 800ad92:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ad96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ad98:	e841 2300 	strex	r3, r2, [r1]
 800ad9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ad9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1e3      	bne.n	800ad6c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ada8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adac:	d14f      	bne.n	800ae4e <UART_Start_Receive_IT+0x196>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800adb4:	88fa      	ldrh	r2, [r7, #6]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d349      	bcc.n	800ae4e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adc2:	d107      	bne.n	800add4 <UART_Start_Receive_IT+0x11c>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d103      	bne.n	800add4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4a47      	ldr	r2, [pc, #284]	@ (800aeec <UART_Start_Receive_IT+0x234>)
 800add0:	675a      	str	r2, [r3, #116]	@ 0x74
 800add2:	e002      	b.n	800adda <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4a46      	ldr	r2, [pc, #280]	@ (800aef0 <UART_Start_Receive_IT+0x238>)
 800add8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d01a      	beq.n	800ae18 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adea:	e853 3f00 	ldrex	r3, [r3]
 800adee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800adf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ae04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae06:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ae0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ae0c:	e841 2300 	strex	r3, r2, [r1]
 800ae10:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ae12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1e4      	bne.n	800ade2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae22:	e853 3f00 	ldrex	r3, [r3]
 800ae26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3308      	adds	r3, #8
 800ae36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ae38:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ae3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ae3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae40:	e841 2300 	strex	r3, r2, [r1]
 800ae44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ae46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1e5      	bne.n	800ae18 <UART_Start_Receive_IT+0x160>
 800ae4c:	e046      	b.n	800aedc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae56:	d107      	bne.n	800ae68 <UART_Start_Receive_IT+0x1b0>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d103      	bne.n	800ae68 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4a24      	ldr	r2, [pc, #144]	@ (800aef4 <UART_Start_Receive_IT+0x23c>)
 800ae64:	675a      	str	r2, [r3, #116]	@ 0x74
 800ae66:	e002      	b.n	800ae6e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4a23      	ldr	r2, [pc, #140]	@ (800aef8 <UART_Start_Receive_IT+0x240>)
 800ae6c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d019      	beq.n	800aeaa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7e:	e853 3f00 	ldrex	r3, [r3]
 800ae82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae86:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ae8a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	461a      	mov	r2, r3
 800ae92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae94:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae96:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae9c:	e841 2300 	strex	r3, r2, [r1]
 800aea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1e6      	bne.n	800ae76 <UART_Start_Receive_IT+0x1be>
 800aea8:	e018      	b.n	800aedc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	e853 3f00 	ldrex	r3, [r3]
 800aeb6:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	f043 0320 	orr.w	r3, r3, #32
 800aebe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	461a      	mov	r2, r3
 800aec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aec8:	623b      	str	r3, [r7, #32]
 800aeca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aecc:	69f9      	ldr	r1, [r7, #28]
 800aece:	6a3a      	ldr	r2, [r7, #32]
 800aed0:	e841 2300 	strex	r3, r2, [r1]
 800aed4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1e6      	bne.n	800aeaa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	378c      	adds	r7, #140	@ 0x8c
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	0800b719 	.word	0x0800b719
 800aef0:	0800b3b5 	.word	0x0800b3b5
 800aef4:	0800b1fd 	.word	0x0800b1fd
 800aef8:	0800b045 	.word	0x0800b045

0800aefc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b095      	sub	sp, #84	@ 0x54
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af0c:	e853 3f00 	ldrex	r3, [r3]
 800af10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af22:	643b      	str	r3, [r7, #64]	@ 0x40
 800af24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af2a:	e841 2300 	strex	r3, r2, [r1]
 800af2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1e6      	bne.n	800af04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	3308      	adds	r3, #8
 800af3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	e853 3f00 	ldrex	r3, [r3]
 800af44:	61fb      	str	r3, [r7, #28]
   return(result);
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	4b1e      	ldr	r3, [pc, #120]	@ (800afc4 <UART_EndRxTransfer+0xc8>)
 800af4a:	4013      	ands	r3, r2
 800af4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3308      	adds	r3, #8
 800af54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af5e:	e841 2300 	strex	r3, r2, [r1]
 800af62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1e5      	bne.n	800af36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d118      	bne.n	800afa4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	e853 3f00 	ldrex	r3, [r3]
 800af7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f023 0310 	bic.w	r3, r3, #16
 800af86:	647b      	str	r3, [r7, #68]	@ 0x44
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	461a      	mov	r2, r3
 800af8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af90:	61bb      	str	r3, [r7, #24]
 800af92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af94:	6979      	ldr	r1, [r7, #20]
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	e841 2300 	strex	r3, r2, [r1]
 800af9c:	613b      	str	r3, [r7, #16]
   return(result);
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1e6      	bne.n	800af72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afb8:	bf00      	nop
 800afba:	3754      	adds	r7, #84	@ 0x54
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	effffffe 	.word	0xeffffffe

0800afc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afde:	68f8      	ldr	r0, [r7, #12]
 800afe0:	f7fe ff32 	bl	8009e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afe4:	bf00      	nop
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b088      	sub	sp, #32
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	60bb      	str	r3, [r7, #8]
   return(result);
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b008:	61fb      	str	r3, [r7, #28]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	61bb      	str	r3, [r7, #24]
 800b014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	6979      	ldr	r1, [r7, #20]
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	613b      	str	r3, [r7, #16]
   return(result);
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e6      	bne.n	800aff4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2220      	movs	r2, #32
 800b02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7fe fefd 	bl	8009e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b03a:	bf00      	nop
 800b03c:	3720      	adds	r7, #32
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
	...

0800b044 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b09c      	sub	sp, #112	@ 0x70
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b052:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b05c:	2b22      	cmp	r3, #34	@ 0x22
 800b05e:	f040 80be 	bne.w	800b1de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b068:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b06c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b070:	b2d9      	uxtb	r1, r3
 800b072:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b076:	b2da      	uxtb	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b07c:	400a      	ands	r2, r1
 800b07e:	b2d2      	uxtb	r2, r2
 800b080:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b092:	b29b      	uxth	r3, r3
 800b094:	3b01      	subs	r3, #1
 800b096:	b29a      	uxth	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f040 80a1 	bne.w	800b1ee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0b4:	e853 3f00 	ldrex	r3, [r3]
 800b0b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b0ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0d2:	e841 2300 	strex	r3, r2, [r1]
 800b0d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e6      	bne.n	800b0ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0f0:	f023 0301 	bic.w	r3, r3, #1
 800b0f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b0fe:	647a      	str	r2, [r7, #68]	@ 0x44
 800b100:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b104:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e5      	bne.n	800b0de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2220      	movs	r2, #32
 800b116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a33      	ldr	r2, [pc, #204]	@ (800b1f8 <UART_RxISR_8BIT+0x1b4>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d01f      	beq.n	800b170 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d018      	beq.n	800b170 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b146:	e853 3f00 	ldrex	r3, [r3]
 800b14a:	623b      	str	r3, [r7, #32]
   return(result);
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b152:	663b      	str	r3, [r7, #96]	@ 0x60
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	461a      	mov	r2, r3
 800b15a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b15c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b15e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b160:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b164:	e841 2300 	strex	r3, r2, [r1]
 800b168:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1e6      	bne.n	800b13e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b174:	2b01      	cmp	r3, #1
 800b176:	d12e      	bne.n	800b1d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	e853 3f00 	ldrex	r3, [r3]
 800b18a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f023 0310 	bic.w	r3, r3, #16
 800b192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	461a      	mov	r2, r3
 800b19a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b19c:	61fb      	str	r3, [r7, #28]
 800b19e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a0:	69b9      	ldr	r1, [r7, #24]
 800b1a2:	69fa      	ldr	r2, [r7, #28]
 800b1a4:	e841 2300 	strex	r3, r2, [r1]
 800b1a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1e6      	bne.n	800b17e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	f003 0310 	and.w	r3, r3, #16
 800b1ba:	2b10      	cmp	r3, #16
 800b1bc:	d103      	bne.n	800b1c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2210      	movs	r2, #16
 800b1c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7fe fe44 	bl	8009e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1d4:	e00b      	b.n	800b1ee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7f6 fcc6 	bl	8001b68 <HAL_UART_RxCpltCallback>
}
 800b1dc:	e007      	b.n	800b1ee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	699a      	ldr	r2, [r3, #24]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f042 0208 	orr.w	r2, r2, #8
 800b1ec:	619a      	str	r2, [r3, #24]
}
 800b1ee:	bf00      	nop
 800b1f0:	3770      	adds	r7, #112	@ 0x70
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	58000c00 	.word	0x58000c00

0800b1fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b09c      	sub	sp, #112	@ 0x70
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b20a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b214:	2b22      	cmp	r3, #34	@ 0x22
 800b216:	f040 80be 	bne.w	800b396 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b220:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b228:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b22a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b22e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b232:	4013      	ands	r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b238:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b23e:	1c9a      	adds	r2, r3, #2
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	3b01      	subs	r3, #1
 800b24e:	b29a      	uxth	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f040 80a1 	bne.w	800b3a6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b26c:	e853 3f00 	ldrex	r3, [r3]
 800b270:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b278:	667b      	str	r3, [r7, #100]	@ 0x64
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	461a      	mov	r2, r3
 800b280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b282:	657b      	str	r3, [r7, #84]	@ 0x54
 800b284:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b288:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e6      	bne.n	800b264 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3308      	adds	r3, #8
 800b29c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a8:	f023 0301 	bic.w	r3, r3, #1
 800b2ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b2b6:	643a      	str	r2, [r7, #64]	@ 0x40
 800b2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b2bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e5      	bne.n	800b296 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a33      	ldr	r2, [pc, #204]	@ (800b3b0 <UART_RxISR_16BIT+0x1b4>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d01f      	beq.n	800b328 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d018      	beq.n	800b328 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	e853 3f00 	ldrex	r3, [r3]
 800b302:	61fb      	str	r3, [r7, #28]
   return(result);
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b30a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b316:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b31a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e6      	bne.n	800b2f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d12e      	bne.n	800b38e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	e853 3f00 	ldrex	r3, [r3]
 800b342:	60bb      	str	r3, [r7, #8]
   return(result);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	f023 0310 	bic.w	r3, r3, #16
 800b34a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	461a      	mov	r2, r3
 800b352:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b354:	61bb      	str	r3, [r7, #24]
 800b356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	6979      	ldr	r1, [r7, #20]
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	613b      	str	r3, [r7, #16]
   return(result);
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e6      	bne.n	800b336 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	69db      	ldr	r3, [r3, #28]
 800b36e:	f003 0310 	and.w	r3, r3, #16
 800b372:	2b10      	cmp	r3, #16
 800b374:	d103      	bne.n	800b37e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2210      	movs	r2, #16
 800b37c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7fe fd68 	bl	8009e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b38c:	e00b      	b.n	800b3a6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7f6 fbea 	bl	8001b68 <HAL_UART_RxCpltCallback>
}
 800b394:	e007      	b.n	800b3a6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	699a      	ldr	r2, [r3, #24]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f042 0208 	orr.w	r2, r2, #8
 800b3a4:	619a      	str	r2, [r3, #24]
}
 800b3a6:	bf00      	nop
 800b3a8:	3770      	adds	r7, #112	@ 0x70
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	58000c00 	.word	0x58000c00

0800b3b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b0ac      	sub	sp, #176	@ 0xb0
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b3c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	69db      	ldr	r3, [r3, #28]
 800b3cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3ea:	2b22      	cmp	r3, #34	@ 0x22
 800b3ec:	f040 8181 	bne.w	800b6f2 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b3f6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b3fa:	e124      	b.n	800b646 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b402:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b406:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b40a:	b2d9      	uxtb	r1, r3
 800b40c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b410:	b2da      	uxtb	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b416:	400a      	ands	r2, r1
 800b418:	b2d2      	uxtb	r2, r2
 800b41a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b420:	1c5a      	adds	r2, r3, #1
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	3b01      	subs	r3, #1
 800b430:	b29a      	uxth	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	69db      	ldr	r3, [r3, #28]
 800b43e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d053      	beq.n	800b4f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b44e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b452:	f003 0301 	and.w	r3, r3, #1
 800b456:	2b00      	cmp	r3, #0
 800b458:	d011      	beq.n	800b47e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b45a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b45e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00b      	beq.n	800b47e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2201      	movs	r2, #1
 800b46c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b474:	f043 0201 	orr.w	r2, r3, #1
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b47e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b482:	f003 0302 	and.w	r3, r3, #2
 800b486:	2b00      	cmp	r3, #0
 800b488:	d011      	beq.n	800b4ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b48a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00b      	beq.n	800b4ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2202      	movs	r2, #2
 800b49c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4a4:	f043 0204 	orr.w	r2, r3, #4
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b4b2:	f003 0304 	and.w	r3, r3, #4
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d011      	beq.n	800b4de <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b4ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b4be:	f003 0301 	and.w	r3, r3, #1
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00b      	beq.n	800b4de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2204      	movs	r2, #4
 800b4cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4d4:	f043 0202 	orr.w	r2, r3, #2
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d006      	beq.n	800b4f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7fe fcad 	bl	8009e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f040 80a1 	bne.w	800b646 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b50c:	e853 3f00 	ldrex	r3, [r3]
 800b510:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	461a      	mov	r2, r3
 800b522:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b526:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b528:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b52c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b52e:	e841 2300 	strex	r3, r2, [r1]
 800b532:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b534:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1e4      	bne.n	800b504 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3308      	adds	r3, #8
 800b540:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b544:	e853 3f00 	ldrex	r3, [r3]
 800b548:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b54a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b54c:	4b6f      	ldr	r3, [pc, #444]	@ (800b70c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b54e:	4013      	ands	r3, r2
 800b550:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3308      	adds	r3, #8
 800b55a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b55e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b560:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b562:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b564:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b566:	e841 2300 	strex	r3, r2, [r1]
 800b56a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b56c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1e3      	bne.n	800b53a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2220      	movs	r2, #32
 800b576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a61      	ldr	r2, [pc, #388]	@ (800b710 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d021      	beq.n	800b5d4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d01a      	beq.n	800b5d4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5a6:	e853 3f00 	ldrex	r3, [r3]
 800b5aa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b5ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b5b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b5c0:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5c2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b5c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b5c8:	e841 2300 	strex	r3, r2, [r1]
 800b5cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b5ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e4      	bne.n	800b59e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d130      	bne.n	800b63e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ea:	e853 3f00 	ldrex	r3, [r3]
 800b5ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f2:	f023 0310 	bic.w	r3, r3, #16
 800b5f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b604:	643b      	str	r3, [r7, #64]	@ 0x40
 800b606:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b608:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b60a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b60c:	e841 2300 	strex	r3, r2, [r1]
 800b610:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1e4      	bne.n	800b5e2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	69db      	ldr	r3, [r3, #28]
 800b61e:	f003 0310 	and.w	r3, r3, #16
 800b622:	2b10      	cmp	r3, #16
 800b624:	d103      	bne.n	800b62e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2210      	movs	r2, #16
 800b62c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7fe fc10 	bl	8009e5c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b63c:	e00e      	b.n	800b65c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7f6 fa92 	bl	8001b68 <HAL_UART_RxCpltCallback>
        break;
 800b644:	e00a      	b.n	800b65c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b646:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d006      	beq.n	800b65c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800b64e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b652:	f003 0320 	and.w	r3, r3, #32
 800b656:	2b00      	cmp	r3, #0
 800b658:	f47f aed0 	bne.w	800b3fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b662:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b666:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d049      	beq.n	800b702 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b674:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800b678:	429a      	cmp	r2, r3
 800b67a:	d242      	bcs.n	800b702 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3308      	adds	r3, #8
 800b682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	e853 3f00 	ldrex	r3, [r3]
 800b68a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b692:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3308      	adds	r3, #8
 800b69c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b6a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b6a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b6a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6a8:	e841 2300 	strex	r3, r2, [r1]
 800b6ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1e3      	bne.n	800b67c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4a17      	ldr	r2, [pc, #92]	@ (800b714 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800b6b8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	e853 3f00 	ldrex	r3, [r3]
 800b6c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	f043 0320 	orr.w	r3, r3, #32
 800b6ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b6dc:	61bb      	str	r3, [r7, #24]
 800b6de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e0:	6979      	ldr	r1, [r7, #20]
 800b6e2:	69ba      	ldr	r2, [r7, #24]
 800b6e4:	e841 2300 	strex	r3, r2, [r1]
 800b6e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1e4      	bne.n	800b6ba <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b6f0:	e007      	b.n	800b702 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	699a      	ldr	r2, [r3, #24]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f042 0208 	orr.w	r2, r2, #8
 800b700:	619a      	str	r2, [r3, #24]
}
 800b702:	bf00      	nop
 800b704:	37b0      	adds	r7, #176	@ 0xb0
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	effffffe 	.word	0xeffffffe
 800b710:	58000c00 	.word	0x58000c00
 800b714:	0800b045 	.word	0x0800b045

0800b718 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b0ae      	sub	sp, #184	@ 0xb8
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b726:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b74e:	2b22      	cmp	r3, #34	@ 0x22
 800b750:	f040 8185 	bne.w	800ba5e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b75a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b75e:	e128      	b.n	800b9b2 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b766:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b76e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b772:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800b776:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800b77a:	4013      	ands	r3, r2
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b782:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b788:	1c9a      	adds	r2, r3, #2
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b794:	b29b      	uxth	r3, r3
 800b796:	3b01      	subs	r3, #1
 800b798:	b29a      	uxth	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b7aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d053      	beq.n	800b85e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d011      	beq.n	800b7e6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b7c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00b      	beq.n	800b7e6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7dc:	f043 0201 	orr.w	r2, r3, #1
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d011      	beq.n	800b816 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b7f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00b      	beq.n	800b816 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2202      	movs	r2, #2
 800b804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b80c:	f043 0204 	orr.w	r2, r3, #4
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b816:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b81a:	f003 0304 	and.w	r3, r3, #4
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d011      	beq.n	800b846 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00b      	beq.n	800b846 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2204      	movs	r2, #4
 800b834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b83c:	f043 0202 	orr.w	r2, r3, #2
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d006      	beq.n	800b85e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7fe faf9 	bl	8009e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b864:	b29b      	uxth	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	f040 80a3 	bne.w	800b9b2 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b874:	e853 3f00 	ldrex	r3, [r3]
 800b878:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b87a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b87c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b880:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	461a      	mov	r2, r3
 800b88a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b88e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b892:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b894:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b896:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b8a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e2      	bne.n	800b86c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8b0:	e853 3f00 	ldrex	r3, [r3]
 800b8b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b8b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b8b8:	4b6f      	ldr	r3, [pc, #444]	@ (800ba78 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b8ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b8cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b8d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b8d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e3      	bne.n	800b8a6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a61      	ldr	r2, [pc, #388]	@ (800ba7c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d021      	beq.n	800b940 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b906:	2b00      	cmp	r3, #0
 800b908:	d01a      	beq.n	800b940 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b912:	e853 3f00 	ldrex	r3, [r3]
 800b916:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b91a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b91e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b92c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b92e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b932:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b93a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e4      	bne.n	800b90a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b944:	2b01      	cmp	r3, #1
 800b946:	d130      	bne.n	800b9aa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b956:	e853 3f00 	ldrex	r3, [r3]
 800b95a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b95e:	f023 0310 	bic.w	r3, r3, #16
 800b962:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b970:	647b      	str	r3, [r7, #68]	@ 0x44
 800b972:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b974:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b978:	e841 2300 	strex	r3, r2, [r1]
 800b97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1e4      	bne.n	800b94e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	69db      	ldr	r3, [r3, #28]
 800b98a:	f003 0310 	and.w	r3, r3, #16
 800b98e:	2b10      	cmp	r3, #16
 800b990:	d103      	bne.n	800b99a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2210      	movs	r2, #16
 800b998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7fe fa5a 	bl	8009e5c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800b9a8:	e00e      	b.n	800b9c8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7f6 f8dc 	bl	8001b68 <HAL_UART_RxCpltCallback>
        break;
 800b9b0:	e00a      	b.n	800b9c8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b9b2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d006      	beq.n	800b9c8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800b9ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b9be:	f003 0320 	and.w	r3, r3, #32
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f47f aecc 	bne.w	800b760 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9ce:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b9d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d049      	beq.n	800ba6e <UART_RxISR_16BIT_FIFOEN+0x356>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b9e0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d242      	bcs.n	800ba6e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3308      	adds	r3, #8
 800b9ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	e853 3f00 	ldrex	r3, [r3]
 800b9f6:	623b      	str	r3, [r7, #32]
   return(result);
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	3308      	adds	r3, #8
 800ba08:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ba0c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba14:	e841 2300 	strex	r3, r2, [r1]
 800ba18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1e3      	bne.n	800b9e8 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a17      	ldr	r2, [pc, #92]	@ (800ba80 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800ba24:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	e853 3f00 	ldrex	r3, [r3]
 800ba32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f043 0320 	orr.w	r3, r3, #32
 800ba3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	461a      	mov	r2, r3
 800ba44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba48:	61fb      	str	r3, [r7, #28]
 800ba4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4c:	69b9      	ldr	r1, [r7, #24]
 800ba4e:	69fa      	ldr	r2, [r7, #28]
 800ba50:	e841 2300 	strex	r3, r2, [r1]
 800ba54:	617b      	str	r3, [r7, #20]
   return(result);
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1e4      	bne.n	800ba26 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba5c:	e007      	b.n	800ba6e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	699a      	ldr	r2, [r3, #24]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f042 0208 	orr.w	r2, r2, #8
 800ba6c:	619a      	str	r2, [r3, #24]
}
 800ba6e:	bf00      	nop
 800ba70:	37b8      	adds	r7, #184	@ 0xb8
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	effffffe 	.word	0xeffffffe
 800ba7c:	58000c00 	.word	0x58000c00
 800ba80:	0800b1fd 	.word	0x0800b1fd

0800ba84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d101      	bne.n	800bad6 <HAL_UARTEx_DisableFifoMode+0x16>
 800bad2:	2302      	movs	r3, #2
 800bad4:	e027      	b.n	800bb26 <HAL_UARTEx_DisableFifoMode+0x66>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2201      	movs	r2, #1
 800bada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2224      	movs	r2, #36	@ 0x24
 800bae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f022 0201 	bic.w	r2, r2, #1
 800bafc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2220      	movs	r2, #32
 800bb18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3714      	adds	r7, #20
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b084      	sub	sp, #16
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d101      	bne.n	800bb4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb46:	2302      	movs	r3, #2
 800bb48:	e02d      	b.n	800bba6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2224      	movs	r2, #36	@ 0x24
 800bb56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f022 0201 	bic.w	r2, r2, #1
 800bb70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	430a      	orrs	r2, r1
 800bb84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f850 	bl	800bc2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2220      	movs	r2, #32
 800bb98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b084      	sub	sp, #16
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d101      	bne.n	800bbc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbc2:	2302      	movs	r3, #2
 800bbc4:	e02d      	b.n	800bc22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2224      	movs	r2, #36	@ 0x24
 800bbd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f022 0201 	bic.w	r2, r2, #1
 800bbec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	430a      	orrs	r2, r1
 800bc00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f812 	bl	800bc2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
	...

0800bc2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d108      	bne.n	800bc4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc4c:	e031      	b.n	800bcb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc4e:	2310      	movs	r3, #16
 800bc50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc52:	2310      	movs	r3, #16
 800bc54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	0e5b      	lsrs	r3, r3, #25
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	f003 0307 	and.w	r3, r3, #7
 800bc64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	0f5b      	lsrs	r3, r3, #29
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	f003 0307 	and.w	r3, r3, #7
 800bc74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc76:	7bbb      	ldrb	r3, [r7, #14]
 800bc78:	7b3a      	ldrb	r2, [r7, #12]
 800bc7a:	4911      	ldr	r1, [pc, #68]	@ (800bcc0 <UARTEx_SetNbDataToProcess+0x94>)
 800bc7c:	5c8a      	ldrb	r2, [r1, r2]
 800bc7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc82:	7b3a      	ldrb	r2, [r7, #12]
 800bc84:	490f      	ldr	r1, [pc, #60]	@ (800bcc4 <UARTEx_SetNbDataToProcess+0x98>)
 800bc86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc88:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
 800bc96:	7b7a      	ldrb	r2, [r7, #13]
 800bc98:	4909      	ldr	r1, [pc, #36]	@ (800bcc0 <UARTEx_SetNbDataToProcess+0x94>)
 800bc9a:	5c8a      	ldrb	r2, [r1, r2]
 800bc9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bca0:	7b7a      	ldrb	r2, [r7, #13]
 800bca2:	4908      	ldr	r1, [pc, #32]	@ (800bcc4 <UARTEx_SetNbDataToProcess+0x98>)
 800bca4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bca6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bcb2:	bf00      	nop
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	08013898 	.word	0x08013898
 800bcc4:	080138a0 	.word	0x080138a0

0800bcc8 <__NVIC_SetPriority>:
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	6039      	str	r1, [r7, #0]
 800bcd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bcd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	db0a      	blt.n	800bcf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	490c      	ldr	r1, [pc, #48]	@ (800bd14 <__NVIC_SetPriority+0x4c>)
 800bce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bce6:	0112      	lsls	r2, r2, #4
 800bce8:	b2d2      	uxtb	r2, r2
 800bcea:	440b      	add	r3, r1
 800bcec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bcf0:	e00a      	b.n	800bd08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	4908      	ldr	r1, [pc, #32]	@ (800bd18 <__NVIC_SetPriority+0x50>)
 800bcf8:	88fb      	ldrh	r3, [r7, #6]
 800bcfa:	f003 030f 	and.w	r3, r3, #15
 800bcfe:	3b04      	subs	r3, #4
 800bd00:	0112      	lsls	r2, r2, #4
 800bd02:	b2d2      	uxtb	r2, r2
 800bd04:	440b      	add	r3, r1
 800bd06:	761a      	strb	r2, [r3, #24]
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	e000e100 	.word	0xe000e100
 800bd18:	e000ed00 	.word	0xe000ed00

0800bd1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd20:	2100      	movs	r1, #0
 800bd22:	f06f 0004 	mvn.w	r0, #4
 800bd26:	f7ff ffcf 	bl	800bcc8 <__NVIC_SetPriority>
#endif
}
 800bd2a:	bf00      	nop
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd36:	f3ef 8305 	mrs	r3, IPSR
 800bd3a:	603b      	str	r3, [r7, #0]
  return(result);
 800bd3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d003      	beq.n	800bd4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd42:	f06f 0305 	mvn.w	r3, #5
 800bd46:	607b      	str	r3, [r7, #4]
 800bd48:	e00c      	b.n	800bd64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd4a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd74 <osKernelInitialize+0x44>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d105      	bne.n	800bd5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd52:	4b08      	ldr	r3, [pc, #32]	@ (800bd74 <osKernelInitialize+0x44>)
 800bd54:	2201      	movs	r2, #1
 800bd56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	607b      	str	r3, [r7, #4]
 800bd5c:	e002      	b.n	800bd64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd64:	687b      	ldr	r3, [r7, #4]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	2400047c 	.word	0x2400047c

0800bd78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd7e:	f3ef 8305 	mrs	r3, IPSR
 800bd82:	603b      	str	r3, [r7, #0]
  return(result);
 800bd84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d003      	beq.n	800bd92 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bd8a:	f06f 0305 	mvn.w	r3, #5
 800bd8e:	607b      	str	r3, [r7, #4]
 800bd90:	e010      	b.n	800bdb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bd92:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc0 <osKernelStart+0x48>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d109      	bne.n	800bdae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bd9a:	f7ff ffbf 	bl	800bd1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bd9e:	4b08      	ldr	r3, [pc, #32]	@ (800bdc0 <osKernelStart+0x48>)
 800bda0:	2202      	movs	r2, #2
 800bda2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bda4:	f002 f8bc 	bl	800df20 <vTaskStartScheduler>
      stat = osOK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	607b      	str	r3, [r7, #4]
 800bdac:	e002      	b.n	800bdb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bdae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bdb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bdb4:	687b      	ldr	r3, [r7, #4]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	2400047c 	.word	0x2400047c

0800bdc4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdca:	f3ef 8305 	mrs	r3, IPSR
 800bdce:	603b      	str	r3, [r7, #0]
  return(result);
 800bdd0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d003      	beq.n	800bdde <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800bdd6:	f002 f9c7 	bl	800e168 <xTaskGetTickCountFromISR>
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	e002      	b.n	800bde4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800bdde:	f002 f9b3 	bl	800e148 <xTaskGetTickCount>
 800bde2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800bde4:	687b      	ldr	r3, [r7, #4]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b08e      	sub	sp, #56	@ 0x38
 800bdf2:	af04      	add	r7, sp, #16
 800bdf4:	60f8      	str	r0, [r7, #12]
 800bdf6:	60b9      	str	r1, [r7, #8]
 800bdf8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdfe:	f3ef 8305 	mrs	r3, IPSR
 800be02:	617b      	str	r3, [r7, #20]
  return(result);
 800be04:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800be06:	2b00      	cmp	r3, #0
 800be08:	d17e      	bne.n	800bf08 <osThreadNew+0x11a>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d07b      	beq.n	800bf08 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800be10:	2380      	movs	r3, #128	@ 0x80
 800be12:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800be14:	2318      	movs	r3, #24
 800be16:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800be18:	2300      	movs	r3, #0
 800be1a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800be1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d045      	beq.n	800beb4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <osThreadNew+0x48>
        name = attr->name;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d008      	beq.n	800be5c <osThreadNew+0x6e>
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	2b38      	cmp	r3, #56	@ 0x38
 800be4e:	d805      	bhi.n	800be5c <osThreadNew+0x6e>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <osThreadNew+0x72>
        return (NULL);
 800be5c:	2300      	movs	r3, #0
 800be5e:	e054      	b.n	800bf0a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	695b      	ldr	r3, [r3, #20]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	089b      	lsrs	r3, r3, #2
 800be6e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00e      	beq.n	800be96 <osThreadNew+0xa8>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	2b5b      	cmp	r3, #91	@ 0x5b
 800be7e:	d90a      	bls.n	800be96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be84:	2b00      	cmp	r3, #0
 800be86:	d006      	beq.n	800be96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d002      	beq.n	800be96 <osThreadNew+0xa8>
        mem = 1;
 800be90:	2301      	movs	r3, #1
 800be92:	61bb      	str	r3, [r7, #24]
 800be94:	e010      	b.n	800beb8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10c      	bne.n	800beb8 <osThreadNew+0xca>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d108      	bne.n	800beb8 <osThreadNew+0xca>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d104      	bne.n	800beb8 <osThreadNew+0xca>
          mem = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	61bb      	str	r3, [r7, #24]
 800beb2:	e001      	b.n	800beb8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d110      	bne.n	800bee0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bec6:	9202      	str	r2, [sp, #8]
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	6a3a      	ldr	r2, [r7, #32]
 800bed2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f001 fdc7 	bl	800da68 <xTaskCreateStatic>
 800beda:	4603      	mov	r3, r0
 800bedc:	613b      	str	r3, [r7, #16]
 800bede:	e013      	b.n	800bf08 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d110      	bne.n	800bf08 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	b29a      	uxth	r2, r3
 800beea:	f107 0310 	add.w	r3, r7, #16
 800beee:	9301      	str	r3, [sp, #4]
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f001 fe15 	bl	800db28 <xTaskCreate>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d001      	beq.n	800bf08 <osThreadNew+0x11a>
            hTask = NULL;
 800bf04:	2300      	movs	r3, #0
 800bf06:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bf08:	693b      	ldr	r3, [r7, #16]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3728      	adds	r7, #40	@ 0x28
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b084      	sub	sp, #16
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf1a:	f3ef 8305 	mrs	r3, IPSR
 800bf1e:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d003      	beq.n	800bf2e <osDelay+0x1c>
    stat = osErrorISR;
 800bf26:	f06f 0305 	mvn.w	r3, #5
 800bf2a:	60fb      	str	r3, [r7, #12]
 800bf2c:	e007      	b.n	800bf3e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d002      	beq.n	800bf3e <osDelay+0x2c>
      vTaskDelay(ticks);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f001 ffbb 	bl	800deb4 <vTaskDelay>
    }
  }

  return (stat);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf50:	f3ef 8305 	mrs	r3, IPSR
 800bf54:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf56:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d003      	beq.n	800bf64 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800bf5c:	f06f 0305 	mvn.w	r3, #5
 800bf60:	617b      	str	r3, [r7, #20]
 800bf62:	e019      	b.n	800bf98 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800bf64:	2300      	movs	r3, #0
 800bf66:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800bf68:	f002 f8ee 	bl	800e148 <xTaskGetTickCount>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d009      	beq.n	800bf92 <osDelayUntil+0x4a>
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	db06      	blt.n	800bf92 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800bf84:	f107 0308 	add.w	r3, r7, #8
 800bf88:	6939      	ldr	r1, [r7, #16]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f001 ff12 	bl	800ddb4 <vTaskDelayUntil>
 800bf90:	e002      	b.n	800bf98 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800bf92:	f06f 0303 	mvn.w	r3, #3
 800bf96:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bf98:	697b      	ldr	r3, [r7, #20]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3718      	adds	r7, #24
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b088      	sub	sp, #32
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfae:	f3ef 8305 	mrs	r3, IPSR
 800bfb2:	60bb      	str	r3, [r7, #8]
  return(result);
 800bfb4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d174      	bne.n	800c0a4 <osMutexNew+0x102>
    if (attr != NULL) {
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	61bb      	str	r3, [r7, #24]
 800bfc6:	e001      	b.n	800bfcc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <osMutexNew+0x3a>
      rmtx = 1U;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	617b      	str	r3, [r7, #20]
 800bfda:	e001      	b.n	800bfe0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	f003 0308 	and.w	r3, r3, #8
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d15c      	bne.n	800c0a4 <osMutexNew+0x102>
      mem = -1;
 800bfea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfee:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d015      	beq.n	800c022 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d006      	beq.n	800c00c <osMutexNew+0x6a>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	2b4f      	cmp	r3, #79	@ 0x4f
 800c004:	d902      	bls.n	800c00c <osMutexNew+0x6a>
          mem = 1;
 800c006:	2301      	movs	r3, #1
 800c008:	613b      	str	r3, [r7, #16]
 800c00a:	e00c      	b.n	800c026 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d108      	bne.n	800c026 <osMutexNew+0x84>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d104      	bne.n	800c026 <osMutexNew+0x84>
            mem = 0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	613b      	str	r3, [r7, #16]
 800c020:	e001      	b.n	800c026 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d112      	bne.n	800c052 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d007      	beq.n	800c042 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	4619      	mov	r1, r3
 800c038:	2004      	movs	r0, #4
 800c03a:	f000 ff76 	bl	800cf2a <xQueueCreateMutexStatic>
 800c03e:	61f8      	str	r0, [r7, #28]
 800c040:	e016      	b.n	800c070 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	4619      	mov	r1, r3
 800c048:	2001      	movs	r0, #1
 800c04a:	f000 ff6e 	bl	800cf2a <xQueueCreateMutexStatic>
 800c04e:	61f8      	str	r0, [r7, #28]
 800c050:	e00e      	b.n	800c070 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10b      	bne.n	800c070 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d004      	beq.n	800c068 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c05e:	2004      	movs	r0, #4
 800c060:	f000 ff4b 	bl	800cefa <xQueueCreateMutex>
 800c064:	61f8      	str	r0, [r7, #28]
 800c066:	e003      	b.n	800c070 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c068:	2001      	movs	r0, #1
 800c06a:	f000 ff46 	bl	800cefa <xQueueCreateMutex>
 800c06e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00c      	beq.n	800c090 <osMutexNew+0xee>
        if (attr != NULL) {
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d003      	beq.n	800c084 <osMutexNew+0xe2>
          name = attr->name;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	60fb      	str	r3, [r7, #12]
 800c082:	e001      	b.n	800c088 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c088:	68f9      	ldr	r1, [r7, #12]
 800c08a:	69f8      	ldr	r0, [r7, #28]
 800c08c:	f001 fc8e 	bl	800d9ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d006      	beq.n	800c0a4 <osMutexNew+0x102>
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d003      	beq.n	800c0a4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	f043 0301 	orr.w	r3, r3, #1
 800c0a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c0a4:	69fb      	ldr	r3, [r7, #28]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3720      	adds	r7, #32
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b086      	sub	sp, #24
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f023 0301 	bic.w	r3, r3, #1
 800c0be:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0cc:	f3ef 8305 	mrs	r3, IPSR
 800c0d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0d2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c0d8:	f06f 0305 	mvn.w	r3, #5
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	e02c      	b.n	800c13a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d103      	bne.n	800c0ee <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c0e6:	f06f 0303 	mvn.w	r3, #3
 800c0ea:	617b      	str	r3, [r7, #20]
 800c0ec:	e025      	b.n	800c13a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d011      	beq.n	800c118 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c0f4:	6839      	ldr	r1, [r7, #0]
 800c0f6:	6938      	ldr	r0, [r7, #16]
 800c0f8:	f000 ff67 	bl	800cfca <xQueueTakeMutexRecursive>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d01b      	beq.n	800c13a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d003      	beq.n	800c110 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c108:	f06f 0301 	mvn.w	r3, #1
 800c10c:	617b      	str	r3, [r7, #20]
 800c10e:	e014      	b.n	800c13a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c110:	f06f 0302 	mvn.w	r3, #2
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	e010      	b.n	800c13a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6938      	ldr	r0, [r7, #16]
 800c11c:	f001 fa0e 	bl	800d53c <xQueueSemaphoreTake>
 800c120:	4603      	mov	r3, r0
 800c122:	2b01      	cmp	r3, #1
 800c124:	d009      	beq.n	800c13a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c12c:	f06f 0301 	mvn.w	r3, #1
 800c130:	617b      	str	r3, [r7, #20]
 800c132:	e002      	b.n	800c13a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c134:	f06f 0302 	mvn.w	r3, #2
 800c138:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c13a:	697b      	ldr	r3, [r7, #20]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3718      	adds	r7, #24
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f023 0301 	bic.w	r3, r3, #1
 800c152:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c160:	f3ef 8305 	mrs	r3, IPSR
 800c164:	60bb      	str	r3, [r7, #8]
  return(result);
 800c166:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c16c:	f06f 0305 	mvn.w	r3, #5
 800c170:	617b      	str	r3, [r7, #20]
 800c172:	e01f      	b.n	800c1b4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d103      	bne.n	800c182 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c17a:	f06f 0303 	mvn.w	r3, #3
 800c17e:	617b      	str	r3, [r7, #20]
 800c180:	e018      	b.n	800c1b4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d009      	beq.n	800c19c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c188:	6938      	ldr	r0, [r7, #16]
 800c18a:	f000 fee9 	bl	800cf60 <xQueueGiveMutexRecursive>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b01      	cmp	r3, #1
 800c192:	d00f      	beq.n	800c1b4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c194:	f06f 0302 	mvn.w	r3, #2
 800c198:	617b      	str	r3, [r7, #20]
 800c19a:	e00b      	b.n	800c1b4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c19c:	2300      	movs	r3, #0
 800c19e:	2200      	movs	r2, #0
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	6938      	ldr	r0, [r7, #16]
 800c1a4:	f000 ff48 	bl	800d038 <xQueueGenericSend>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d002      	beq.n	800c1b4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c1ae:	f06f 0302 	mvn.w	r3, #2
 800c1b2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c1b4:	697b      	ldr	r3, [r7, #20]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	4a07      	ldr	r2, [pc, #28]	@ (800c1ec <vApplicationGetIdleTaskMemory+0x2c>)
 800c1d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	4a06      	ldr	r2, [pc, #24]	@ (800c1f0 <vApplicationGetIdleTaskMemory+0x30>)
 800c1d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2280      	movs	r2, #128	@ 0x80
 800c1dc:	601a      	str	r2, [r3, #0]
}
 800c1de:	bf00      	nop
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	24000480 	.word	0x24000480
 800c1f0:	240004dc 	.word	0x240004dc

0800c1f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	4a07      	ldr	r2, [pc, #28]	@ (800c220 <vApplicationGetTimerTaskMemory+0x2c>)
 800c204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	4a06      	ldr	r2, [pc, #24]	@ (800c224 <vApplicationGetTimerTaskMemory+0x30>)
 800c20a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c212:	601a      	str	r2, [r3, #0]
}
 800c214:	bf00      	nop
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	240006dc 	.word	0x240006dc
 800c224:	24000738 	.word	0x24000738

0800c228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08a      	sub	sp, #40	@ 0x28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c230:	2300      	movs	r3, #0
 800c232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c234:	f001 fedc 	bl	800dff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c238:	4b5c      	ldr	r3, [pc, #368]	@ (800c3ac <pvPortMalloc+0x184>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c240:	f000 f93c 	bl	800c4bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c244:	4b5a      	ldr	r3, [pc, #360]	@ (800c3b0 <pvPortMalloc+0x188>)
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4013      	ands	r3, r2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f040 8095 	bne.w	800c37c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d01e      	beq.n	800c296 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c258:	2208      	movs	r2, #8
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4413      	add	r3, r2
 800c25e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f003 0307 	and.w	r3, r3, #7
 800c266:	2b00      	cmp	r3, #0
 800c268:	d015      	beq.n	800c296 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f023 0307 	bic.w	r3, r3, #7
 800c270:	3308      	adds	r3, #8
 800c272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f003 0307 	and.w	r3, r3, #7
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00b      	beq.n	800c296 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c27e:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c290:	bf00      	nop
 800c292:	bf00      	nop
 800c294:	e7fd      	b.n	800c292 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d06f      	beq.n	800c37c <pvPortMalloc+0x154>
 800c29c:	4b45      	ldr	r3, [pc, #276]	@ (800c3b4 <pvPortMalloc+0x18c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d86a      	bhi.n	800c37c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2a6:	4b44      	ldr	r3, [pc, #272]	@ (800c3b8 <pvPortMalloc+0x190>)
 800c2a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2aa:	4b43      	ldr	r3, [pc, #268]	@ (800c3b8 <pvPortMalloc+0x190>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b0:	e004      	b.n	800c2bc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d903      	bls.n	800c2ce <pvPortMalloc+0xa6>
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1f1      	bne.n	800c2b2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2ce:	4b37      	ldr	r3, [pc, #220]	@ (800c3ac <pvPortMalloc+0x184>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d051      	beq.n	800c37c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2d8:	6a3b      	ldr	r3, [r7, #32]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2208      	movs	r2, #8
 800c2de:	4413      	add	r3, r2
 800c2e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	1ad2      	subs	r2, r2, r3
 800c2f2:	2308      	movs	r3, #8
 800c2f4:	005b      	lsls	r3, r3, #1
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d920      	bls.n	800c33c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4413      	add	r3, r2
 800c300:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00b      	beq.n	800c324 <pvPortMalloc+0xfc>
	__asm volatile
 800c30c:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	613b      	str	r3, [r7, #16]
}
 800c31e:	bf00      	nop
 800c320:	bf00      	nop
 800c322:	e7fd      	b.n	800c320 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	1ad2      	subs	r2, r2, r3
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c336:	69b8      	ldr	r0, [r7, #24]
 800c338:	f000 f922 	bl	800c580 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c33c:	4b1d      	ldr	r3, [pc, #116]	@ (800c3b4 <pvPortMalloc+0x18c>)
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	4a1b      	ldr	r2, [pc, #108]	@ (800c3b4 <pvPortMalloc+0x18c>)
 800c348:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c34a:	4b1a      	ldr	r3, [pc, #104]	@ (800c3b4 <pvPortMalloc+0x18c>)
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	4b1b      	ldr	r3, [pc, #108]	@ (800c3bc <pvPortMalloc+0x194>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	429a      	cmp	r2, r3
 800c354:	d203      	bcs.n	800c35e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c356:	4b17      	ldr	r3, [pc, #92]	@ (800c3b4 <pvPortMalloc+0x18c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a18      	ldr	r2, [pc, #96]	@ (800c3bc <pvPortMalloc+0x194>)
 800c35c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	4b13      	ldr	r3, [pc, #76]	@ (800c3b0 <pvPortMalloc+0x188>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	431a      	orrs	r2, r3
 800c368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36e:	2200      	movs	r2, #0
 800c370:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c372:	4b13      	ldr	r3, [pc, #76]	@ (800c3c0 <pvPortMalloc+0x198>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	3301      	adds	r3, #1
 800c378:	4a11      	ldr	r2, [pc, #68]	@ (800c3c0 <pvPortMalloc+0x198>)
 800c37a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c37c:	f001 fe46 	bl	800e00c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	f003 0307 	and.w	r3, r3, #7
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00b      	beq.n	800c3a2 <pvPortMalloc+0x17a>
	__asm volatile
 800c38a:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	60fb      	str	r3, [r7, #12]
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	e7fd      	b.n	800c39e <pvPortMalloc+0x176>
	return pvReturn;
 800c3a2:	69fb      	ldr	r3, [r7, #28]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3728      	adds	r7, #40	@ 0x28
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	24004740 	.word	0x24004740
 800c3b0:	24004754 	.word	0x24004754
 800c3b4:	24004744 	.word	0x24004744
 800c3b8:	24004738 	.word	0x24004738
 800c3bc:	24004748 	.word	0x24004748
 800c3c0:	2400474c 	.word	0x2400474c

0800c3c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d04f      	beq.n	800c476 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3d6:	2308      	movs	r3, #8
 800c3d8:	425b      	negs	r3, r3
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	4413      	add	r3, r2
 800c3de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	685a      	ldr	r2, [r3, #4]
 800c3e8:	4b25      	ldr	r3, [pc, #148]	@ (800c480 <vPortFree+0xbc>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10b      	bne.n	800c40a <vPortFree+0x46>
	__asm volatile
 800c3f2:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	60fb      	str	r3, [r7, #12]
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	e7fd      	b.n	800c406 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00b      	beq.n	800c42a <vPortFree+0x66>
	__asm volatile
 800c412:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	60bb      	str	r3, [r7, #8]
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop
 800c428:	e7fd      	b.n	800c426 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	685a      	ldr	r2, [r3, #4]
 800c42e:	4b14      	ldr	r3, [pc, #80]	@ (800c480 <vPortFree+0xbc>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4013      	ands	r3, r2
 800c434:	2b00      	cmp	r3, #0
 800c436:	d01e      	beq.n	800c476 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d11a      	bne.n	800c476 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	685a      	ldr	r2, [r3, #4]
 800c444:	4b0e      	ldr	r3, [pc, #56]	@ (800c480 <vPortFree+0xbc>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	43db      	mvns	r3, r3
 800c44a:	401a      	ands	r2, r3
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c450:	f001 fdce 	bl	800dff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	685a      	ldr	r2, [r3, #4]
 800c458:	4b0a      	ldr	r3, [pc, #40]	@ (800c484 <vPortFree+0xc0>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4413      	add	r3, r2
 800c45e:	4a09      	ldr	r2, [pc, #36]	@ (800c484 <vPortFree+0xc0>)
 800c460:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c462:	6938      	ldr	r0, [r7, #16]
 800c464:	f000 f88c 	bl	800c580 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c468:	4b07      	ldr	r3, [pc, #28]	@ (800c488 <vPortFree+0xc4>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3301      	adds	r3, #1
 800c46e:	4a06      	ldr	r2, [pc, #24]	@ (800c488 <vPortFree+0xc4>)
 800c470:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c472:	f001 fdcb 	bl	800e00c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c476:	bf00      	nop
 800c478:	3718      	adds	r7, #24
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	24004754 	.word	0x24004754
 800c484:	24004744 	.word	0x24004744
 800c488:	24004750 	.word	0x24004750

0800c48c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c48c:	b480      	push	{r7}
 800c48e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c490:	4b03      	ldr	r3, [pc, #12]	@ (800c4a0 <xPortGetFreeHeapSize+0x14>)
 800c492:	681b      	ldr	r3, [r3, #0]
}
 800c494:	4618      	mov	r0, r3
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	24004744 	.word	0x24004744

0800c4a4 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800c4a8:	4b03      	ldr	r3, [pc, #12]	@ (800c4b8 <xPortGetMinimumEverFreeHeapSize+0x14>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	24004748 	.word	0x24004748

0800c4bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c4c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4c8:	4b27      	ldr	r3, [pc, #156]	@ (800c568 <prvHeapInit+0xac>)
 800c4ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f003 0307 	and.w	r3, r3, #7
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00c      	beq.n	800c4f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3307      	adds	r3, #7
 800c4da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f023 0307 	bic.w	r3, r3, #7
 800c4e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	4a1f      	ldr	r2, [pc, #124]	@ (800c568 <prvHeapInit+0xac>)
 800c4ec:	4413      	add	r3, r2
 800c4ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c56c <prvHeapInit+0xb0>)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4fa:	4b1c      	ldr	r3, [pc, #112]	@ (800c56c <prvHeapInit+0xb0>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	4413      	add	r3, r2
 800c506:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c508:	2208      	movs	r2, #8
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	1a9b      	subs	r3, r3, r2
 800c50e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f023 0307 	bic.w	r3, r3, #7
 800c516:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	4a15      	ldr	r2, [pc, #84]	@ (800c570 <prvHeapInit+0xb4>)
 800c51c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c51e:	4b14      	ldr	r3, [pc, #80]	@ (800c570 <prvHeapInit+0xb4>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2200      	movs	r2, #0
 800c524:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c526:	4b12      	ldr	r3, [pc, #72]	@ (800c570 <prvHeapInit+0xb4>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2200      	movs	r2, #0
 800c52c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	1ad2      	subs	r2, r2, r3
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c53c:	4b0c      	ldr	r3, [pc, #48]	@ (800c570 <prvHeapInit+0xb4>)
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	4a0a      	ldr	r2, [pc, #40]	@ (800c574 <prvHeapInit+0xb8>)
 800c54a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	4a09      	ldr	r2, [pc, #36]	@ (800c578 <prvHeapInit+0xbc>)
 800c552:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c554:	4b09      	ldr	r3, [pc, #36]	@ (800c57c <prvHeapInit+0xc0>)
 800c556:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c55a:	601a      	str	r2, [r3, #0]
}
 800c55c:	bf00      	nop
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	24000b38 	.word	0x24000b38
 800c56c:	24004738 	.word	0x24004738
 800c570:	24004740 	.word	0x24004740
 800c574:	24004748 	.word	0x24004748
 800c578:	24004744 	.word	0x24004744
 800c57c:	24004754 	.word	0x24004754

0800c580 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c588:	4b28      	ldr	r3, [pc, #160]	@ (800c62c <prvInsertBlockIntoFreeList+0xac>)
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	e002      	b.n	800c594 <prvInsertBlockIntoFreeList+0x14>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	60fb      	str	r3, [r7, #12]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d8f7      	bhi.n	800c58e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d108      	bne.n	800c5c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	441a      	add	r2, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	441a      	add	r2, r3
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d118      	bne.n	800c608 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	4b15      	ldr	r3, [pc, #84]	@ (800c630 <prvInsertBlockIntoFreeList+0xb0>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d00d      	beq.n	800c5fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	441a      	add	r2, r3
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	e008      	b.n	800c610 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c630 <prvInsertBlockIntoFreeList+0xb0>)
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	601a      	str	r2, [r3, #0]
 800c606:	e003      	b.n	800c610 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	429a      	cmp	r2, r3
 800c616:	d002      	beq.n	800c61e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c61e:	bf00      	nop
 800c620:	3714      	adds	r7, #20
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	24004738 	.word	0x24004738
 800c630:	24004740 	.word	0x24004740

0800c634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f103 0208 	add.w	r2, r3, #8
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c64c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f103 0208 	add.w	r2, r3, #8
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f103 0208 	add.w	r2, r3, #8
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c682:	bf00      	nop
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c68e:	b480      	push	{r7}
 800c690:	b085      	sub	sp, #20
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	689a      	ldr	r2, [r3, #8]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	1c5a      	adds	r2, r3, #1
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	601a      	str	r2, [r3, #0]
}
 800c6ca:	bf00      	nop
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b085      	sub	sp, #20
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6ec:	d103      	bne.n	800c6f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	e00c      	b.n	800c710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	3308      	adds	r3, #8
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	e002      	b.n	800c704 <vListInsert+0x2e>
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d2f6      	bcs.n	800c6fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	683a      	ldr	r2, [r7, #0]
 800c72a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	601a      	str	r2, [r3, #0]
}
 800c73c:	bf00      	nop
 800c73e:	3714      	adds	r7, #20
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	6892      	ldr	r2, [r2, #8]
 800c75e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	6852      	ldr	r2, [r2, #4]
 800c768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	429a      	cmp	r2, r3
 800c772:	d103      	bne.n	800c77c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	689a      	ldr	r2, [r3, #8]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	1e5a      	subs	r2, r3, #1
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	3b04      	subs	r3, #4
 800c7ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c7b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3b04      	subs	r3, #4
 800c7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	f023 0201 	bic.w	r2, r3, #1
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3b04      	subs	r3, #4
 800c7ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c800 <pxPortInitialiseStack+0x64>)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3b14      	subs	r3, #20
 800c7d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3b04      	subs	r3, #4
 800c7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f06f 0202 	mvn.w	r2, #2
 800c7ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3b20      	subs	r3, #32
 800c7f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	0800c805 	.word	0x0800c805

0800c804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c80e:	4b13      	ldr	r3, [pc, #76]	@ (800c85c <prvTaskExitError+0x58>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c816:	d00b      	beq.n	800c830 <prvTaskExitError+0x2c>
	__asm volatile
 800c818:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	60fb      	str	r3, [r7, #12]
}
 800c82a:	bf00      	nop
 800c82c:	bf00      	nop
 800c82e:	e7fd      	b.n	800c82c <prvTaskExitError+0x28>
	__asm volatile
 800c830:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	60bb      	str	r3, [r7, #8]
}
 800c842:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c844:	bf00      	nop
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0fc      	beq.n	800c846 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c84c:	bf00      	nop
 800c84e:	bf00      	nop
 800c850:	3714      	adds	r7, #20
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	24000034 	.word	0x24000034

0800c860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c860:	4b07      	ldr	r3, [pc, #28]	@ (800c880 <pxCurrentTCBConst2>)
 800c862:	6819      	ldr	r1, [r3, #0]
 800c864:	6808      	ldr	r0, [r1, #0]
 800c866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86a:	f380 8809 	msr	PSP, r0
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f04f 0000 	mov.w	r0, #0
 800c876:	f380 8811 	msr	BASEPRI, r0
 800c87a:	4770      	bx	lr
 800c87c:	f3af 8000 	nop.w

0800c880 <pxCurrentTCBConst2>:
 800c880:	240047a0 	.word	0x240047a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c884:	bf00      	nop
 800c886:	bf00      	nop

0800c888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c888:	4808      	ldr	r0, [pc, #32]	@ (800c8ac <prvPortStartFirstTask+0x24>)
 800c88a:	6800      	ldr	r0, [r0, #0]
 800c88c:	6800      	ldr	r0, [r0, #0]
 800c88e:	f380 8808 	msr	MSP, r0
 800c892:	f04f 0000 	mov.w	r0, #0
 800c896:	f380 8814 	msr	CONTROL, r0
 800c89a:	b662      	cpsie	i
 800c89c:	b661      	cpsie	f
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	df00      	svc	0
 800c8a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c8aa:	bf00      	nop
 800c8ac:	e000ed08 	.word	0xe000ed08

0800c8b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c8b6:	4b47      	ldr	r3, [pc, #284]	@ (800c9d4 <xPortStartScheduler+0x124>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a47      	ldr	r2, [pc, #284]	@ (800c9d8 <xPortStartScheduler+0x128>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d10b      	bne.n	800c8d8 <xPortStartScheduler+0x28>
	__asm volatile
 800c8c0:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c8c4:	f383 8811 	msr	BASEPRI, r3
 800c8c8:	f3bf 8f6f 	isb	sy
 800c8cc:	f3bf 8f4f 	dsb	sy
 800c8d0:	60fb      	str	r3, [r7, #12]
}
 800c8d2:	bf00      	nop
 800c8d4:	bf00      	nop
 800c8d6:	e7fd      	b.n	800c8d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c8d8:	4b3e      	ldr	r3, [pc, #248]	@ (800c9d4 <xPortStartScheduler+0x124>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a3f      	ldr	r2, [pc, #252]	@ (800c9dc <xPortStartScheduler+0x12c>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d10b      	bne.n	800c8fa <xPortStartScheduler+0x4a>
	__asm volatile
 800c8e2:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	613b      	str	r3, [r7, #16]
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop
 800c8f8:	e7fd      	b.n	800c8f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8fa:	4b39      	ldr	r3, [pc, #228]	@ (800c9e0 <xPortStartScheduler+0x130>)
 800c8fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	b2db      	uxtb	r3, r3
 800c904:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	22ff      	movs	r2, #255	@ 0xff
 800c90a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	b2db      	uxtb	r3, r3
 800c912:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c914:	78fb      	ldrb	r3, [r7, #3]
 800c916:	b2db      	uxtb	r3, r3
 800c918:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	4b31      	ldr	r3, [pc, #196]	@ (800c9e4 <xPortStartScheduler+0x134>)
 800c920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c922:	4b31      	ldr	r3, [pc, #196]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c924:	2207      	movs	r2, #7
 800c926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c928:	e009      	b.n	800c93e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c92a:	4b2f      	ldr	r3, [pc, #188]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	3b01      	subs	r3, #1
 800c930:	4a2d      	ldr	r2, [pc, #180]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c934:	78fb      	ldrb	r3, [r7, #3]
 800c936:	b2db      	uxtb	r3, r3
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c93e:	78fb      	ldrb	r3, [r7, #3]
 800c940:	b2db      	uxtb	r3, r3
 800c942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c946:	2b80      	cmp	r3, #128	@ 0x80
 800c948:	d0ef      	beq.n	800c92a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c94a:	4b27      	ldr	r3, [pc, #156]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f1c3 0307 	rsb	r3, r3, #7
 800c952:	2b04      	cmp	r3, #4
 800c954:	d00b      	beq.n	800c96e <xPortStartScheduler+0xbe>
	__asm volatile
 800c956:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	60bb      	str	r3, [r7, #8]
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	e7fd      	b.n	800c96a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c96e:	4b1e      	ldr	r3, [pc, #120]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	021b      	lsls	r3, r3, #8
 800c974:	4a1c      	ldr	r2, [pc, #112]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c978:	4b1b      	ldr	r3, [pc, #108]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c980:	4a19      	ldr	r2, [pc, #100]	@ (800c9e8 <xPortStartScheduler+0x138>)
 800c982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	b2da      	uxtb	r2, r3
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c98c:	4b17      	ldr	r3, [pc, #92]	@ (800c9ec <xPortStartScheduler+0x13c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a16      	ldr	r2, [pc, #88]	@ (800c9ec <xPortStartScheduler+0x13c>)
 800c992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c998:	4b14      	ldr	r3, [pc, #80]	@ (800c9ec <xPortStartScheduler+0x13c>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a13      	ldr	r2, [pc, #76]	@ (800c9ec <xPortStartScheduler+0x13c>)
 800c99e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9a4:	f000 f8da 	bl	800cb5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9a8:	4b11      	ldr	r3, [pc, #68]	@ (800c9f0 <xPortStartScheduler+0x140>)
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c9ae:	f000 f8f9 	bl	800cba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c9b2:	4b10      	ldr	r3, [pc, #64]	@ (800c9f4 <xPortStartScheduler+0x144>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c9f4 <xPortStartScheduler+0x144>)
 800c9b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c9bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9be:	f7ff ff63 	bl	800c888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9c2:	f001 fc9d 	bl	800e300 <vTaskSwitchContext>
	prvTaskExitError();
 800c9c6:	f7ff ff1d 	bl	800c804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3718      	adds	r7, #24
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	e000ed00 	.word	0xe000ed00
 800c9d8:	410fc271 	.word	0x410fc271
 800c9dc:	410fc270 	.word	0x410fc270
 800c9e0:	e000e400 	.word	0xe000e400
 800c9e4:	24004758 	.word	0x24004758
 800c9e8:	2400475c 	.word	0x2400475c
 800c9ec:	e000ed20 	.word	0xe000ed20
 800c9f0:	24000034 	.word	0x24000034
 800c9f4:	e000ef34 	.word	0xe000ef34

0800c9f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9fe:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	607b      	str	r3, [r7, #4]
}
 800ca10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca12:	4b10      	ldr	r3, [pc, #64]	@ (800ca54 <vPortEnterCritical+0x5c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	3301      	adds	r3, #1
 800ca18:	4a0e      	ldr	r2, [pc, #56]	@ (800ca54 <vPortEnterCritical+0x5c>)
 800ca1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ca54 <vPortEnterCritical+0x5c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d110      	bne.n	800ca46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca24:	4b0c      	ldr	r3, [pc, #48]	@ (800ca58 <vPortEnterCritical+0x60>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <vPortEnterCritical+0x4e>
	__asm volatile
 800ca2e:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	603b      	str	r3, [r7, #0]
}
 800ca40:	bf00      	nop
 800ca42:	bf00      	nop
 800ca44:	e7fd      	b.n	800ca42 <vPortEnterCritical+0x4a>
	}
}
 800ca46:	bf00      	nop
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	24000034 	.word	0x24000034
 800ca58:	e000ed04 	.word	0xe000ed04

0800ca5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca62:	4b12      	ldr	r3, [pc, #72]	@ (800caac <vPortExitCritical+0x50>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10b      	bne.n	800ca82 <vPortExitCritical+0x26>
	__asm volatile
 800ca6a:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	607b      	str	r3, [r7, #4]
}
 800ca7c:	bf00      	nop
 800ca7e:	bf00      	nop
 800ca80:	e7fd      	b.n	800ca7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca82:	4b0a      	ldr	r3, [pc, #40]	@ (800caac <vPortExitCritical+0x50>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	4a08      	ldr	r2, [pc, #32]	@ (800caac <vPortExitCritical+0x50>)
 800ca8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca8c:	4b07      	ldr	r3, [pc, #28]	@ (800caac <vPortExitCritical+0x50>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d105      	bne.n	800caa0 <vPortExitCritical+0x44>
 800ca94:	2300      	movs	r3, #0
 800ca96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800caa0:	bf00      	nop
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	24000034 	.word	0x24000034

0800cab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cab0:	f3ef 8009 	mrs	r0, PSP
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	4b15      	ldr	r3, [pc, #84]	@ (800cb10 <pxCurrentTCBConst>)
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	f01e 0f10 	tst.w	lr, #16
 800cac0:	bf08      	it	eq
 800cac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caca:	6010      	str	r0, [r2, #0]
 800cacc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cad0:	f04f 0080 	mov.w	r0, #128	@ 0x80
 800cad4:	f380 8811 	msr	BASEPRI, r0
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f001 fc0e 	bl	800e300 <vTaskSwitchContext>
 800cae4:	f04f 0000 	mov.w	r0, #0
 800cae8:	f380 8811 	msr	BASEPRI, r0
 800caec:	bc09      	pop	{r0, r3}
 800caee:	6819      	ldr	r1, [r3, #0]
 800caf0:	6808      	ldr	r0, [r1, #0]
 800caf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf6:	f01e 0f10 	tst.w	lr, #16
 800cafa:	bf08      	it	eq
 800cafc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb00:	f380 8809 	msr	PSP, r0
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	f3af 8000 	nop.w

0800cb10 <pxCurrentTCBConst>:
 800cb10:	240047a0 	.word	0x240047a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop

0800cb18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb1e:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	607b      	str	r3, [r7, #4]
}
 800cb30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb32:	f001 fb2b 	bl	800e18c <xTaskIncrementTick>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d003      	beq.n	800cb44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb3c:	4b06      	ldr	r3, [pc, #24]	@ (800cb58 <xPortSysTickHandler+0x40>)
 800cb3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	2300      	movs	r3, #0
 800cb46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	f383 8811 	msr	BASEPRI, r3
}
 800cb4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb50:	bf00      	nop
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	e000ed04 	.word	0xe000ed04

0800cb5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb60:	4b0b      	ldr	r3, [pc, #44]	@ (800cb90 <vPortSetupTimerInterrupt+0x34>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb66:	4b0b      	ldr	r3, [pc, #44]	@ (800cb94 <vPortSetupTimerInterrupt+0x38>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb98 <vPortSetupTimerInterrupt+0x3c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a0a      	ldr	r2, [pc, #40]	@ (800cb9c <vPortSetupTimerInterrupt+0x40>)
 800cb72:	fba2 2303 	umull	r2, r3, r2, r3
 800cb76:	099b      	lsrs	r3, r3, #6
 800cb78:	4a09      	ldr	r2, [pc, #36]	@ (800cba0 <vPortSetupTimerInterrupt+0x44>)
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb7e:	4b04      	ldr	r3, [pc, #16]	@ (800cb90 <vPortSetupTimerInterrupt+0x34>)
 800cb80:	2207      	movs	r2, #7
 800cb82:	601a      	str	r2, [r3, #0]
}
 800cb84:	bf00      	nop
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	e000e010 	.word	0xe000e010
 800cb94:	e000e018 	.word	0xe000e018
 800cb98:	24000000 	.word	0x24000000
 800cb9c:	10624dd3 	.word	0x10624dd3
 800cba0:	e000e014 	.word	0xe000e014

0800cba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cbb4 <vPortEnableVFP+0x10>
 800cba8:	6801      	ldr	r1, [r0, #0]
 800cbaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cbae:	6001      	str	r1, [r0, #0]
 800cbb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cbb2:	bf00      	nop
 800cbb4:	e000ed88 	.word	0xe000ed88

0800cbb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cbbe:	f3ef 8305 	mrs	r3, IPSR
 800cbc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2b0f      	cmp	r3, #15
 800cbc8:	d915      	bls.n	800cbf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cbca:	4a18      	ldr	r2, [pc, #96]	@ (800cc2c <vPortValidateInterruptPriority+0x74>)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	4413      	add	r3, r2
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cbd4:	4b16      	ldr	r3, [pc, #88]	@ (800cc30 <vPortValidateInterruptPriority+0x78>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	7afa      	ldrb	r2, [r7, #11]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d20b      	bcs.n	800cbf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cbde:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cbe2:	f383 8811 	msr	BASEPRI, r3
 800cbe6:	f3bf 8f6f 	isb	sy
 800cbea:	f3bf 8f4f 	dsb	sy
 800cbee:	607b      	str	r3, [r7, #4]
}
 800cbf0:	bf00      	nop
 800cbf2:	bf00      	nop
 800cbf4:	e7fd      	b.n	800cbf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbf6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc34 <vPortValidateInterruptPriority+0x7c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cbfe:	4b0e      	ldr	r3, [pc, #56]	@ (800cc38 <vPortValidateInterruptPriority+0x80>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d90b      	bls.n	800cc1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cc06:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cc0a:	f383 8811 	msr	BASEPRI, r3
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	603b      	str	r3, [r7, #0]
}
 800cc18:	bf00      	nop
 800cc1a:	bf00      	nop
 800cc1c:	e7fd      	b.n	800cc1a <vPortValidateInterruptPriority+0x62>
	}
 800cc1e:	bf00      	nop
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	e000e3f0 	.word	0xe000e3f0
 800cc30:	24004758 	.word	0x24004758
 800cc34:	e000ed0c 	.word	0xe000ed0c
 800cc38:	2400475c 	.word	0x2400475c

0800cc3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10b      	bne.n	800cc68 <xQueueGenericReset+0x2c>
	__asm volatile
 800cc50:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	60bb      	str	r3, [r7, #8]
}
 800cc62:	bf00      	nop
 800cc64:	bf00      	nop
 800cc66:	e7fd      	b.n	800cc64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc68:	f7ff fec6 	bl	800c9f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc74:	68f9      	ldr	r1, [r7, #12]
 800cc76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc78:	fb01 f303 	mul.w	r3, r1, r3
 800cc7c:	441a      	add	r2, r3
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	68f9      	ldr	r1, [r7, #12]
 800cc9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cc9e:	fb01 f303 	mul.w	r3, r1, r3
 800cca2:	441a      	add	r2, r3
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	22ff      	movs	r2, #255	@ 0xff
 800ccac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	22ff      	movs	r2, #255	@ 0xff
 800ccb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d114      	bne.n	800cce8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d01a      	beq.n	800ccfc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	3310      	adds	r3, #16
 800ccca:	4618      	mov	r0, r3
 800cccc:	f001 fbc8 	bl	800e460 <xTaskRemoveFromEventList>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d012      	beq.n	800ccfc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ccd6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <xQueueGenericReset+0xd0>)
 800ccd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	e009      	b.n	800ccfc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	3310      	adds	r3, #16
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fca1 	bl	800c634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	3324      	adds	r3, #36	@ 0x24
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7ff fc9c 	bl	800c634 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ccfc:	f7ff feae 	bl	800ca5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd00:	2301      	movs	r3, #1
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	e000ed04 	.word	0xe000ed04

0800cd10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b08e      	sub	sp, #56	@ 0x38
 800cd14:	af02      	add	r7, sp, #8
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
 800cd1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10b      	bne.n	800cd3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cd24:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd36:	bf00      	nop
 800cd38:	bf00      	nop
 800cd3a:	e7fd      	b.n	800cd38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10b      	bne.n	800cd5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cd42:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd54:	bf00      	nop
 800cd56:	bf00      	nop
 800cd58:	e7fd      	b.n	800cd56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <xQueueGenericCreateStatic+0x56>
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <xQueueGenericCreateStatic+0x5a>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e000      	b.n	800cd6c <xQueueGenericCreateStatic+0x5c>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10b      	bne.n	800cd88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cd70:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	623b      	str	r3, [r7, #32]
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	e7fd      	b.n	800cd84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d102      	bne.n	800cd94 <xQueueGenericCreateStatic+0x84>
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <xQueueGenericCreateStatic+0x88>
 800cd94:	2301      	movs	r3, #1
 800cd96:	e000      	b.n	800cd9a <xQueueGenericCreateStatic+0x8a>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10b      	bne.n	800cdb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800cd9e:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	61fb      	str	r3, [r7, #28]
}
 800cdb0:	bf00      	nop
 800cdb2:	bf00      	nop
 800cdb4:	e7fd      	b.n	800cdb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cdb6:	2350      	movs	r3, #80	@ 0x50
 800cdb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2b50      	cmp	r3, #80	@ 0x50
 800cdbe:	d00b      	beq.n	800cdd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cdc0:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	61bb      	str	r3, [r7, #24]
}
 800cdd2:	bf00      	nop
 800cdd4:	bf00      	nop
 800cdd6:	e7fd      	b.n	800cdd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cdd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00d      	beq.n	800ce00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	68b9      	ldr	r1, [r7, #8]
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f000 f840 	bl	800ce80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3730      	adds	r7, #48	@ 0x30
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce0a:	b580      	push	{r7, lr}
 800ce0c:	b08a      	sub	sp, #40	@ 0x28
 800ce0e:	af02      	add	r7, sp, #8
 800ce10:	60f8      	str	r0, [r7, #12]
 800ce12:	60b9      	str	r1, [r7, #8]
 800ce14:	4613      	mov	r3, r2
 800ce16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10b      	bne.n	800ce36 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ce1e:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	613b      	str	r3, [r7, #16]
}
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
 800ce34:	e7fd      	b.n	800ce32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	fb02 f303 	mul.w	r3, r2, r3
 800ce3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	3350      	adds	r3, #80	@ 0x50
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7ff f9ef 	bl	800c228 <pvPortMalloc>
 800ce4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d011      	beq.n	800ce76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	3350      	adds	r3, #80	@ 0x50
 800ce5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce64:	79fa      	ldrb	r2, [r7, #7]
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	68b9      	ldr	r1, [r7, #8]
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f000 f805 	bl	800ce80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce76:	69bb      	ldr	r3, [r7, #24]
	}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3720      	adds	r7, #32
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d103      	bne.n	800ce9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	69ba      	ldr	r2, [r7, #24]
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	e002      	b.n	800cea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ceae:	2101      	movs	r1, #1
 800ceb0:	69b8      	ldr	r0, [r7, #24]
 800ceb2:	f7ff fec3 	bl	800cc3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	78fa      	ldrb	r2, [r7, #3]
 800ceba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cebe:	bf00      	nop
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b082      	sub	sp, #8
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00e      	beq.n	800cef2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cee6:	2300      	movs	r3, #0
 800cee8:	2200      	movs	r2, #0
 800ceea:	2100      	movs	r1, #0
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f8a3 	bl	800d038 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cef2:	bf00      	nop
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b086      	sub	sp, #24
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	4603      	mov	r3, r0
 800cf02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf04:	2301      	movs	r3, #1
 800cf06:	617b      	str	r3, [r7, #20]
 800cf08:	2300      	movs	r3, #0
 800cf0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cf0c:	79fb      	ldrb	r3, [r7, #7]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	6939      	ldr	r1, [r7, #16]
 800cf12:	6978      	ldr	r0, [r7, #20]
 800cf14:	f7ff ff79 	bl	800ce0a <xQueueGenericCreate>
 800cf18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f7ff ffd3 	bl	800cec6 <prvInitialiseMutex>

		return xNewQueue;
 800cf20:	68fb      	ldr	r3, [r7, #12]
	}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b088      	sub	sp, #32
 800cf2e:	af02      	add	r7, sp, #8
 800cf30:	4603      	mov	r3, r0
 800cf32:	6039      	str	r1, [r7, #0]
 800cf34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf36:	2301      	movs	r3, #1
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cf3e:	79fb      	ldrb	r3, [r7, #7]
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2200      	movs	r2, #0
 800cf46:	6939      	ldr	r1, [r7, #16]
 800cf48:	6978      	ldr	r0, [r7, #20]
 800cf4a:	f7ff fee1 	bl	800cd10 <xQueueGenericCreateStatic>
 800cf4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f7ff ffb8 	bl	800cec6 <prvInitialiseMutex>

		return xNewQueue;
 800cf56:	68fb      	ldr	r3, [r7, #12]
	}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cf60:	b590      	push	{r4, r7, lr}
 800cf62:	b087      	sub	sp, #28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10b      	bne.n	800cf8a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800cf72:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	60fb      	str	r3, [r7, #12]
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop
 800cf88:	e7fd      	b.n	800cf86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	689c      	ldr	r4, [r3, #8]
 800cf8e:	f001 fc5f 	bl	800e850 <xTaskGetCurrentTaskHandle>
 800cf92:	4603      	mov	r3, r0
 800cf94:	429c      	cmp	r4, r3
 800cf96:	d111      	bne.n	800cfbc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	1e5a      	subs	r2, r3, #1
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d105      	bne.n	800cfb6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cfaa:	2300      	movs	r3, #0
 800cfac:	2200      	movs	r2, #0
 800cfae:	2100      	movs	r1, #0
 800cfb0:	6938      	ldr	r0, [r7, #16]
 800cfb2:	f000 f841 	bl	800d038 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	617b      	str	r3, [r7, #20]
 800cfba:	e001      	b.n	800cfc0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cfc0:	697b      	ldr	r3, [r7, #20]
	}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	371c      	adds	r7, #28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd90      	pop	{r4, r7, pc}

0800cfca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cfca:	b590      	push	{r4, r7, lr}
 800cfcc:	b087      	sub	sp, #28
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d10b      	bne.n	800cff6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800cfde:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	60fb      	str	r3, [r7, #12]
}
 800cff0:	bf00      	nop
 800cff2:	bf00      	nop
 800cff4:	e7fd      	b.n	800cff2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	689c      	ldr	r4, [r3, #8]
 800cffa:	f001 fc29 	bl	800e850 <xTaskGetCurrentTaskHandle>
 800cffe:	4603      	mov	r3, r0
 800d000:	429c      	cmp	r4, r3
 800d002:	d107      	bne.n	800d014 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	1c5a      	adds	r2, r3, #1
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d00e:	2301      	movs	r3, #1
 800d010:	617b      	str	r3, [r7, #20]
 800d012:	e00c      	b.n	800d02e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d014:	6839      	ldr	r1, [r7, #0]
 800d016:	6938      	ldr	r0, [r7, #16]
 800d018:	f000 fa90 	bl	800d53c <xQueueSemaphoreTake>
 800d01c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d004      	beq.n	800d02e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	1c5a      	adds	r2, r3, #1
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d02e:	697b      	ldr	r3, [r7, #20]
	}
 800d030:	4618      	mov	r0, r3
 800d032:	371c      	adds	r7, #28
 800d034:	46bd      	mov	sp, r7
 800d036:	bd90      	pop	{r4, r7, pc}

0800d038 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b08e      	sub	sp, #56	@ 0x38
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
 800d044:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d046:	2300      	movs	r3, #0
 800d048:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10b      	bne.n	800d06c <xQueueGenericSend+0x34>
	__asm volatile
 800d054:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d058:	f383 8811 	msr	BASEPRI, r3
 800d05c:	f3bf 8f6f 	isb	sy
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d066:	bf00      	nop
 800d068:	bf00      	nop
 800d06a:	e7fd      	b.n	800d068 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d103      	bne.n	800d07a <xQueueGenericSend+0x42>
 800d072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <xQueueGenericSend+0x46>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e000      	b.n	800d080 <xQueueGenericSend+0x48>
 800d07e:	2300      	movs	r3, #0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10b      	bne.n	800d09c <xQueueGenericSend+0x64>
	__asm volatile
 800d084:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d103      	bne.n	800d0aa <xQueueGenericSend+0x72>
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d101      	bne.n	800d0ae <xQueueGenericSend+0x76>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <xQueueGenericSend+0x78>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10b      	bne.n	800d0cc <xQueueGenericSend+0x94>
	__asm volatile
 800d0b4:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	623b      	str	r3, [r7, #32]
}
 800d0c6:	bf00      	nop
 800d0c8:	bf00      	nop
 800d0ca:	e7fd      	b.n	800d0c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0cc:	f001 fbd0 	bl	800e870 <xTaskGetSchedulerState>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d102      	bne.n	800d0dc <xQueueGenericSend+0xa4>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d101      	bne.n	800d0e0 <xQueueGenericSend+0xa8>
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e000      	b.n	800d0e2 <xQueueGenericSend+0xaa>
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10b      	bne.n	800d0fe <xQueueGenericSend+0xc6>
	__asm volatile
 800d0e6:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	61fb      	str	r3, [r7, #28]
}
 800d0f8:	bf00      	nop
 800d0fa:	bf00      	nop
 800d0fc:	e7fd      	b.n	800d0fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0fe:	f7ff fc7b 	bl	800c9f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d302      	bcc.n	800d114 <xQueueGenericSend+0xdc>
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	2b02      	cmp	r3, #2
 800d112:	d129      	bne.n	800d168 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	68b9      	ldr	r1, [r7, #8]
 800d118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d11a:	f000 fb37 	bl	800d78c <prvCopyDataToQueue>
 800d11e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d124:	2b00      	cmp	r3, #0
 800d126:	d010      	beq.n	800d14a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12a:	3324      	adds	r3, #36	@ 0x24
 800d12c:	4618      	mov	r0, r3
 800d12e:	f001 f997 	bl	800e460 <xTaskRemoveFromEventList>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d013      	beq.n	800d160 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d138:	4b3f      	ldr	r3, [pc, #252]	@ (800d238 <xQueueGenericSend+0x200>)
 800d13a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	e00a      	b.n	800d160 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d007      	beq.n	800d160 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d150:	4b39      	ldr	r3, [pc, #228]	@ (800d238 <xQueueGenericSend+0x200>)
 800d152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d156:	601a      	str	r2, [r3, #0]
 800d158:	f3bf 8f4f 	dsb	sy
 800d15c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d160:	f7ff fc7c 	bl	800ca5c <vPortExitCritical>
				return pdPASS;
 800d164:	2301      	movs	r3, #1
 800d166:	e063      	b.n	800d230 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d103      	bne.n	800d176 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d16e:	f7ff fc75 	bl	800ca5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d172:	2300      	movs	r3, #0
 800d174:	e05c      	b.n	800d230 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d106      	bne.n	800d18a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d17c:	f107 0314 	add.w	r3, r7, #20
 800d180:	4618      	mov	r0, r3
 800d182:	f001 f9d1 	bl	800e528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d186:	2301      	movs	r3, #1
 800d188:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d18a:	f7ff fc67 	bl	800ca5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d18e:	f000 ff2f 	bl	800dff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d192:	f7ff fc31 	bl	800c9f8 <vPortEnterCritical>
 800d196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d19c:	b25b      	sxtb	r3, r3
 800d19e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1a2:	d103      	bne.n	800d1ac <xQueueGenericSend+0x174>
 800d1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1b2:	b25b      	sxtb	r3, r3
 800d1b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1b8:	d103      	bne.n	800d1c2 <xQueueGenericSend+0x18a>
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1c2:	f7ff fc4b 	bl	800ca5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1c6:	1d3a      	adds	r2, r7, #4
 800d1c8:	f107 0314 	add.w	r3, r7, #20
 800d1cc:	4611      	mov	r1, r2
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f001 f9c0 	bl	800e554 <xTaskCheckForTimeOut>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d124      	bne.n	800d224 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d1da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1dc:	f000 fbce 	bl	800d97c <prvIsQueueFull>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d018      	beq.n	800d218 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e8:	3310      	adds	r3, #16
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	4611      	mov	r1, r2
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f001 f8e4 	bl	800e3bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d1f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1f6:	f000 fb59 	bl	800d8ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d1fa:	f000 ff07 	bl	800e00c <xTaskResumeAll>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	f47f af7c 	bne.w	800d0fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d206:	4b0c      	ldr	r3, [pc, #48]	@ (800d238 <xQueueGenericSend+0x200>)
 800d208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	e772      	b.n	800d0fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d21a:	f000 fb47 	bl	800d8ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d21e:	f000 fef5 	bl	800e00c <xTaskResumeAll>
 800d222:	e76c      	b.n	800d0fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d226:	f000 fb41 	bl	800d8ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d22a:	f000 feef 	bl	800e00c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d22e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d230:	4618      	mov	r0, r3
 800d232:	3738      	adds	r7, #56	@ 0x38
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	e000ed04 	.word	0xe000ed04

0800d23c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b090      	sub	sp, #64	@ 0x40
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d250:	2b00      	cmp	r3, #0
 800d252:	d10b      	bne.n	800d26c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d254:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d258:	f383 8811 	msr	BASEPRI, r3
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d266:	bf00      	nop
 800d268:	bf00      	nop
 800d26a:	e7fd      	b.n	800d268 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d103      	bne.n	800d27a <xQueueGenericSendFromISR+0x3e>
 800d272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d276:	2b00      	cmp	r3, #0
 800d278:	d101      	bne.n	800d27e <xQueueGenericSendFromISR+0x42>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e000      	b.n	800d280 <xQueueGenericSendFromISR+0x44>
 800d27e:	2300      	movs	r3, #0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10b      	bne.n	800d29c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d284:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d296:	bf00      	nop
 800d298:	bf00      	nop
 800d29a:	e7fd      	b.n	800d298 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	d103      	bne.n	800d2aa <xQueueGenericSendFromISR+0x6e>
 800d2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d101      	bne.n	800d2ae <xQueueGenericSendFromISR+0x72>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e000      	b.n	800d2b0 <xQueueGenericSendFromISR+0x74>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d10b      	bne.n	800d2cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d2b4:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	623b      	str	r3, [r7, #32]
}
 800d2c6:	bf00      	nop
 800d2c8:	bf00      	nop
 800d2ca:	e7fd      	b.n	800d2c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2cc:	f7ff fc74 	bl	800cbb8 <vPortValidateInterruptPriority>
	__asm volatile
 800d2d0:	f3ef 8211 	mrs	r2, BASEPRI
 800d2d4:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d2d8:	f383 8811 	msr	BASEPRI, r3
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	61fa      	str	r2, [r7, #28]
 800d2e6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d2e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d302      	bcc.n	800d2fe <xQueueGenericSendFromISR+0xc2>
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	2b02      	cmp	r3, #2
 800d2fc:	d12f      	bne.n	800d35e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d300:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d304:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d30e:	683a      	ldr	r2, [r7, #0]
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d314:	f000 fa3a 	bl	800d78c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d318:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d31c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d320:	d112      	bne.n	800d348 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d326:	2b00      	cmp	r3, #0
 800d328:	d016      	beq.n	800d358 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32c:	3324      	adds	r3, #36	@ 0x24
 800d32e:	4618      	mov	r0, r3
 800d330:	f001 f896 	bl	800e460 <xTaskRemoveFromEventList>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00e      	beq.n	800d358 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00b      	beq.n	800d358 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	e007      	b.n	800d358 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d348:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d34c:	3301      	adds	r3, #1
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	b25a      	sxtb	r2, r3
 800d352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d358:	2301      	movs	r3, #1
 800d35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d35c:	e001      	b.n	800d362 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d364:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f383 8811 	msr	BASEPRI, r3
}
 800d36c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d370:	4618      	mov	r0, r3
 800d372:	3740      	adds	r7, #64	@ 0x40
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08c      	sub	sp, #48	@ 0x30
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d384:	2300      	movs	r3, #0
 800d386:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10b      	bne.n	800d3aa <xQueueReceive+0x32>
	__asm volatile
 800d392:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	623b      	str	r3, [r7, #32]
}
 800d3a4:	bf00      	nop
 800d3a6:	bf00      	nop
 800d3a8:	e7fd      	b.n	800d3a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d103      	bne.n	800d3b8 <xQueueReceive+0x40>
 800d3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d101      	bne.n	800d3bc <xQueueReceive+0x44>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e000      	b.n	800d3be <xQueueReceive+0x46>
 800d3bc:	2300      	movs	r3, #0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10b      	bne.n	800d3da <xQueueReceive+0x62>
	__asm volatile
 800d3c2:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	61fb      	str	r3, [r7, #28]
}
 800d3d4:	bf00      	nop
 800d3d6:	bf00      	nop
 800d3d8:	e7fd      	b.n	800d3d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d3da:	f001 fa49 	bl	800e870 <xTaskGetSchedulerState>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d102      	bne.n	800d3ea <xQueueReceive+0x72>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d101      	bne.n	800d3ee <xQueueReceive+0x76>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e000      	b.n	800d3f0 <xQueueReceive+0x78>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10b      	bne.n	800d40c <xQueueReceive+0x94>
	__asm volatile
 800d3f4:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d3f8:	f383 8811 	msr	BASEPRI, r3
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	61bb      	str	r3, [r7, #24]
}
 800d406:	bf00      	nop
 800d408:	bf00      	nop
 800d40a:	e7fd      	b.n	800d408 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d40c:	f7ff faf4 	bl	800c9f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d414:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d01f      	beq.n	800d45c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d41c:	68b9      	ldr	r1, [r7, #8]
 800d41e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d420:	f000 fa1e 	bl	800d860 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d426:	1e5a      	subs	r2, r3, #1
 800d428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d42a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d42e:	691b      	ldr	r3, [r3, #16]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00f      	beq.n	800d454 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d436:	3310      	adds	r3, #16
 800d438:	4618      	mov	r0, r3
 800d43a:	f001 f811 	bl	800e460 <xTaskRemoveFromEventList>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d007      	beq.n	800d454 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d444:	4b3c      	ldr	r3, [pc, #240]	@ (800d538 <xQueueReceive+0x1c0>)
 800d446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d44a:	601a      	str	r2, [r3, #0]
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d454:	f7ff fb02 	bl	800ca5c <vPortExitCritical>
				return pdPASS;
 800d458:	2301      	movs	r3, #1
 800d45a:	e069      	b.n	800d530 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d103      	bne.n	800d46a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d462:	f7ff fafb 	bl	800ca5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d466:	2300      	movs	r3, #0
 800d468:	e062      	b.n	800d530 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d106      	bne.n	800d47e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d470:	f107 0310 	add.w	r3, r7, #16
 800d474:	4618      	mov	r0, r3
 800d476:	f001 f857 	bl	800e528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d47a:	2301      	movs	r3, #1
 800d47c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d47e:	f7ff faed 	bl	800ca5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d482:	f000 fdb5 	bl	800dff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d486:	f7ff fab7 	bl	800c9f8 <vPortEnterCritical>
 800d48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d490:	b25b      	sxtb	r3, r3
 800d492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d496:	d103      	bne.n	800d4a0 <xQueueReceive+0x128>
 800d498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d49a:	2200      	movs	r2, #0
 800d49c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4a6:	b25b      	sxtb	r3, r3
 800d4a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4ac:	d103      	bne.n	800d4b6 <xQueueReceive+0x13e>
 800d4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4b6:	f7ff fad1 	bl	800ca5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4ba:	1d3a      	adds	r2, r7, #4
 800d4bc:	f107 0310 	add.w	r3, r7, #16
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f001 f846 	bl	800e554 <xTaskCheckForTimeOut>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d123      	bne.n	800d516 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4d0:	f000 fa3e 	bl	800d950 <prvIsQueueEmpty>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d017      	beq.n	800d50a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4dc:	3324      	adds	r3, #36	@ 0x24
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4611      	mov	r1, r2
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 ff6a 	bl	800e3bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d4e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4ea:	f000 f9df 	bl	800d8ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d4ee:	f000 fd8d 	bl	800e00c <xTaskResumeAll>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d189      	bne.n	800d40c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d4f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d538 <xQueueReceive+0x1c0>)
 800d4fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4fe:	601a      	str	r2, [r3, #0]
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	f3bf 8f6f 	isb	sy
 800d508:	e780      	b.n	800d40c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d50a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d50c:	f000 f9ce 	bl	800d8ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d510:	f000 fd7c 	bl	800e00c <xTaskResumeAll>
 800d514:	e77a      	b.n	800d40c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d518:	f000 f9c8 	bl	800d8ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d51c:	f000 fd76 	bl	800e00c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d520:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d522:	f000 fa15 	bl	800d950 <prvIsQueueEmpty>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f43f af6f 	beq.w	800d40c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d52e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d530:	4618      	mov	r0, r3
 800d532:	3730      	adds	r7, #48	@ 0x30
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	e000ed04 	.word	0xe000ed04

0800d53c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08e      	sub	sp, #56	@ 0x38
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d546:	2300      	movs	r3, #0
 800d548:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d54e:	2300      	movs	r3, #0
 800d550:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10b      	bne.n	800d570 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d558:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d55c:	f383 8811 	msr	BASEPRI, r3
 800d560:	f3bf 8f6f 	isb	sy
 800d564:	f3bf 8f4f 	dsb	sy
 800d568:	623b      	str	r3, [r7, #32]
}
 800d56a:	bf00      	nop
 800d56c:	bf00      	nop
 800d56e:	e7fd      	b.n	800d56c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00b      	beq.n	800d590 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d578:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	61fb      	str	r3, [r7, #28]
}
 800d58a:	bf00      	nop
 800d58c:	bf00      	nop
 800d58e:	e7fd      	b.n	800d58c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d590:	f001 f96e 	bl	800e870 <xTaskGetSchedulerState>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d102      	bne.n	800d5a0 <xQueueSemaphoreTake+0x64>
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <xQueueSemaphoreTake+0x68>
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	e000      	b.n	800d5a6 <xQueueSemaphoreTake+0x6a>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10b      	bne.n	800d5c2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d5aa:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	61bb      	str	r3, [r7, #24]
}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	e7fd      	b.n	800d5be <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5c2:	f7ff fa19 	bl	800c9f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d024      	beq.n	800d61c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d4:	1e5a      	subs	r2, r3, #1
 800d5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5d8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d104      	bne.n	800d5ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d5e2:	f001 fabf 	bl	800eb64 <pvTaskIncrementMutexHeldCount>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ee:	691b      	ldr	r3, [r3, #16]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00f      	beq.n	800d614 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f6:	3310      	adds	r3, #16
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f000 ff31 	bl	800e460 <xTaskRemoveFromEventList>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d007      	beq.n	800d614 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d604:	4b54      	ldr	r3, [pc, #336]	@ (800d758 <xQueueSemaphoreTake+0x21c>)
 800d606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d60a:	601a      	str	r2, [r3, #0]
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d614:	f7ff fa22 	bl	800ca5c <vPortExitCritical>
				return pdPASS;
 800d618:	2301      	movs	r3, #1
 800d61a:	e098      	b.n	800d74e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d112      	bne.n	800d648 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00b      	beq.n	800d640 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d628:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800d62c:	f383 8811 	msr	BASEPRI, r3
 800d630:	f3bf 8f6f 	isb	sy
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	617b      	str	r3, [r7, #20]
}
 800d63a:	bf00      	nop
 800d63c:	bf00      	nop
 800d63e:	e7fd      	b.n	800d63c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d640:	f7ff fa0c 	bl	800ca5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d644:	2300      	movs	r3, #0
 800d646:	e082      	b.n	800d74e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d106      	bne.n	800d65c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d64e:	f107 030c 	add.w	r3, r7, #12
 800d652:	4618      	mov	r0, r3
 800d654:	f000 ff68 	bl	800e528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d658:	2301      	movs	r3, #1
 800d65a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d65c:	f7ff f9fe 	bl	800ca5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d660:	f000 fcc6 	bl	800dff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d664:	f7ff f9c8 	bl	800c9f8 <vPortEnterCritical>
 800d668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d66e:	b25b      	sxtb	r3, r3
 800d670:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d674:	d103      	bne.n	800d67e <xQueueSemaphoreTake+0x142>
 800d676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d678:	2200      	movs	r2, #0
 800d67a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d684:	b25b      	sxtb	r3, r3
 800d686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d68a:	d103      	bne.n	800d694 <xQueueSemaphoreTake+0x158>
 800d68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68e:	2200      	movs	r2, #0
 800d690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d694:	f7ff f9e2 	bl	800ca5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d698:	463a      	mov	r2, r7
 800d69a:	f107 030c 	add.w	r3, r7, #12
 800d69e:	4611      	mov	r1, r2
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f000 ff57 	bl	800e554 <xTaskCheckForTimeOut>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d132      	bne.n	800d712 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6ae:	f000 f94f 	bl	800d950 <prvIsQueueEmpty>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d026      	beq.n	800d706 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d109      	bne.n	800d6d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d6c0:	f7ff f99a 	bl	800c9f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f001 f8ef 	bl	800e8ac <xTaskPriorityInherit>
 800d6ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d6d0:	f7ff f9c4 	bl	800ca5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d6:	3324      	adds	r3, #36	@ 0x24
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	4611      	mov	r1, r2
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f000 fe6d 	bl	800e3bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6e4:	f000 f8e2 	bl	800d8ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6e8:	f000 fc90 	bl	800e00c <xTaskResumeAll>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f47f af67 	bne.w	800d5c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d6f4:	4b18      	ldr	r3, [pc, #96]	@ (800d758 <xQueueSemaphoreTake+0x21c>)
 800d6f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6fa:	601a      	str	r2, [r3, #0]
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	e75d      	b.n	800d5c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d706:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d708:	f000 f8d0 	bl	800d8ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d70c:	f000 fc7e 	bl	800e00c <xTaskResumeAll>
 800d710:	e757      	b.n	800d5c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d712:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d714:	f000 f8ca 	bl	800d8ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d718:	f000 fc78 	bl	800e00c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d71c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d71e:	f000 f917 	bl	800d950 <prvIsQueueEmpty>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	f43f af4c 	beq.w	800d5c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00d      	beq.n	800d74c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d730:	f7ff f962 	bl	800c9f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d734:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d736:	f000 f811 	bl	800d75c <prvGetDisinheritPriorityAfterTimeout>
 800d73a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d742:	4618      	mov	r0, r3
 800d744:	f001 f98a 	bl	800ea5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d748:	f7ff f988 	bl	800ca5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d74c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3738      	adds	r7, #56	@ 0x38
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	e000ed04 	.word	0xe000ed04

0800d75c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d006      	beq.n	800d77a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d776:	60fb      	str	r3, [r7, #12]
 800d778:	e001      	b.n	800d77e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d77a:	2300      	movs	r3, #0
 800d77c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d77e:	68fb      	ldr	r3, [r7, #12]
	}
 800d780:	4618      	mov	r0, r3
 800d782:	3714      	adds	r7, #20
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b086      	sub	sp, #24
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d798:	2300      	movs	r3, #0
 800d79a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10d      	bne.n	800d7c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d14d      	bne.n	800d84e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 f8e0 	bl	800e97c <xTaskPriorityDisinherit>
 800d7bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	609a      	str	r2, [r3, #8]
 800d7c4:	e043      	b.n	800d84e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d119      	bne.n	800d800 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6858      	ldr	r0, [r3, #4]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	68b9      	ldr	r1, [r7, #8]
 800d7d8:	f003 fa31 	bl	8010c3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	685a      	ldr	r2, [r3, #4]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7e4:	441a      	add	r2, r3
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	685a      	ldr	r2, [r3, #4]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d32b      	bcc.n	800d84e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	605a      	str	r2, [r3, #4]
 800d7fe:	e026      	b.n	800d84e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	68d8      	ldr	r0, [r3, #12]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d808:	461a      	mov	r2, r3
 800d80a:	68b9      	ldr	r1, [r7, #8]
 800d80c:	f003 fa17 	bl	8010c3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	68da      	ldr	r2, [r3, #12]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d818:	425b      	negs	r3, r3
 800d81a:	441a      	add	r2, r3
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	68da      	ldr	r2, [r3, #12]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d207      	bcs.n	800d83c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	689a      	ldr	r2, [r3, #8]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d834:	425b      	negs	r3, r3
 800d836:	441a      	add	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b02      	cmp	r3, #2
 800d840:	d105      	bne.n	800d84e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	3b01      	subs	r3, #1
 800d84c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	1c5a      	adds	r2, r3, #1
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d856:	697b      	ldr	r3, [r7, #20]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3718      	adds	r7, #24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d018      	beq.n	800d8a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	68da      	ldr	r2, [r3, #12]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d87a:	441a      	add	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d303      	bcc.n	800d894 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	68d9      	ldr	r1, [r3, #12]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d89c:	461a      	mov	r2, r3
 800d89e:	6838      	ldr	r0, [r7, #0]
 800d8a0:	f003 f9cd 	bl	8010c3e <memcpy>
	}
}
 800d8a4:	bf00      	nop
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d8b4:	f7ff f8a0 	bl	800c9f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8c0:	e011      	b.n	800d8e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d012      	beq.n	800d8f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	3324      	adds	r3, #36	@ 0x24
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f000 fdc6 	bl	800e460 <xTaskRemoveFromEventList>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d001      	beq.n	800d8de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d8da:	f000 fe9f 	bl	800e61c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d8de:	7bfb      	ldrb	r3, [r7, #15]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	dce9      	bgt.n	800d8c2 <prvUnlockQueue+0x16>
 800d8ee:	e000      	b.n	800d8f2 <prvUnlockQueue+0x46>
					break;
 800d8f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	22ff      	movs	r2, #255	@ 0xff
 800d8f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d8fa:	f7ff f8af 	bl	800ca5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d8fe:	f7ff f87b 	bl	800c9f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d908:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d90a:	e011      	b.n	800d930 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d012      	beq.n	800d93a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	3310      	adds	r3, #16
 800d918:	4618      	mov	r0, r3
 800d91a:	f000 fda1 	bl	800e460 <xTaskRemoveFromEventList>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d924:	f000 fe7a 	bl	800e61c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d928:	7bbb      	ldrb	r3, [r7, #14]
 800d92a:	3b01      	subs	r3, #1
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d934:	2b00      	cmp	r3, #0
 800d936:	dce9      	bgt.n	800d90c <prvUnlockQueue+0x60>
 800d938:	e000      	b.n	800d93c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d93a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	22ff      	movs	r2, #255	@ 0xff
 800d940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d944:	f7ff f88a 	bl	800ca5c <vPortExitCritical>
}
 800d948:	bf00      	nop
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d958:	f7ff f84e 	bl	800c9f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d960:	2b00      	cmp	r3, #0
 800d962:	d102      	bne.n	800d96a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d964:	2301      	movs	r3, #1
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	e001      	b.n	800d96e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d96e:	f7ff f875 	bl	800ca5c <vPortExitCritical>

	return xReturn;
 800d972:	68fb      	ldr	r3, [r7, #12]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3710      	adds	r7, #16
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d984:	f7ff f838 	bl	800c9f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d990:	429a      	cmp	r2, r3
 800d992:	d102      	bne.n	800d99a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d994:	2301      	movs	r3, #1
 800d996:	60fb      	str	r3, [r7, #12]
 800d998:	e001      	b.n	800d99e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d99a:	2300      	movs	r3, #0
 800d99c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d99e:	f7ff f85d 	bl	800ca5c <vPortExitCritical>

	return xReturn;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60fb      	str	r3, [r7, #12]
 800d9ba:	e014      	b.n	800d9e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d9bc:	4a0f      	ldr	r2, [pc, #60]	@ (800d9fc <vQueueAddToRegistry+0x50>)
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10b      	bne.n	800d9e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d9c8:	490c      	ldr	r1, [pc, #48]	@ (800d9fc <vQueueAddToRegistry+0x50>)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d9d2:	4a0a      	ldr	r2, [pc, #40]	@ (800d9fc <vQueueAddToRegistry+0x50>)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	4413      	add	r3, r2
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d9de:	e006      	b.n	800d9ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	60fb      	str	r3, [r7, #12]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2b07      	cmp	r3, #7
 800d9ea:	d9e7      	bls.n	800d9bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d9ec:	bf00      	nop
 800d9ee:	bf00      	nop
 800d9f0:	3714      	adds	r7, #20
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	24004760 	.word	0x24004760

0800da00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da10:	f7fe fff2 	bl	800c9f8 <vPortEnterCritical>
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da1a:	b25b      	sxtb	r3, r3
 800da1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da20:	d103      	bne.n	800da2a <vQueueWaitForMessageRestricted+0x2a>
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	2200      	movs	r2, #0
 800da26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da30:	b25b      	sxtb	r3, r3
 800da32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da36:	d103      	bne.n	800da40 <vQueueWaitForMessageRestricted+0x40>
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da40:	f7ff f80c 	bl	800ca5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d106      	bne.n	800da5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	3324      	adds	r3, #36	@ 0x24
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	68b9      	ldr	r1, [r7, #8]
 800da54:	4618      	mov	r0, r3
 800da56:	f000 fcd7 	bl	800e408 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800da5a:	6978      	ldr	r0, [r7, #20]
 800da5c:	f7ff ff26 	bl	800d8ac <prvUnlockQueue>
	}
 800da60:	bf00      	nop
 800da62:	3718      	adds	r7, #24
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08e      	sub	sp, #56	@ 0x38
 800da6c:	af04      	add	r7, sp, #16
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	607a      	str	r2, [r7, #4]
 800da74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800da76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10b      	bne.n	800da94 <xTaskCreateStatic+0x2c>
	__asm volatile
 800da7c:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	623b      	str	r3, [r7, #32]
}
 800da8e:	bf00      	nop
 800da90:	bf00      	nop
 800da92:	e7fd      	b.n	800da90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800da94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10b      	bne.n	800dab2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800da9a:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	61fb      	str	r3, [r7, #28]
}
 800daac:	bf00      	nop
 800daae:	bf00      	nop
 800dab0:	e7fd      	b.n	800daae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dab2:	235c      	movs	r3, #92	@ 0x5c
 800dab4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	2b5c      	cmp	r3, #92	@ 0x5c
 800daba:	d00b      	beq.n	800dad4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800dabc:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800dac0:	f383 8811 	msr	BASEPRI, r3
 800dac4:	f3bf 8f6f 	isb	sy
 800dac8:	f3bf 8f4f 	dsb	sy
 800dacc:	61bb      	str	r3, [r7, #24]
}
 800dace:	bf00      	nop
 800dad0:	bf00      	nop
 800dad2:	e7fd      	b.n	800dad0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dad4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d01e      	beq.n	800db1a <xTaskCreateStatic+0xb2>
 800dadc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d01b      	beq.n	800db1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800daea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800daec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daee:	2202      	movs	r2, #2
 800daf0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800daf4:	2300      	movs	r3, #0
 800daf6:	9303      	str	r3, [sp, #12]
 800daf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dafa:	9302      	str	r3, [sp, #8]
 800dafc:	f107 0314 	add.w	r3, r7, #20
 800db00:	9301      	str	r3, [sp, #4]
 800db02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	68b9      	ldr	r1, [r7, #8]
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f000 f850 	bl	800dbb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db14:	f000 f8de 	bl	800dcd4 <prvAddNewTaskToReadyList>
 800db18:	e001      	b.n	800db1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db1e:	697b      	ldr	r3, [r7, #20]
	}
 800db20:	4618      	mov	r0, r3
 800db22:	3728      	adds	r7, #40	@ 0x28
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b08c      	sub	sp, #48	@ 0x30
 800db2c:	af04      	add	r7, sp, #16
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	603b      	str	r3, [r7, #0]
 800db34:	4613      	mov	r3, r2
 800db36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db38:	88fb      	ldrh	r3, [r7, #6]
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fe fb73 	bl	800c228 <pvPortMalloc>
 800db42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00e      	beq.n	800db68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db4a:	205c      	movs	r0, #92	@ 0x5c
 800db4c:	f7fe fb6c 	bl	800c228 <pvPortMalloc>
 800db50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d003      	beq.n	800db60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	697a      	ldr	r2, [r7, #20]
 800db5c:	631a      	str	r2, [r3, #48]	@ 0x30
 800db5e:	e005      	b.n	800db6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800db60:	6978      	ldr	r0, [r7, #20]
 800db62:	f7fe fc2f 	bl	800c3c4 <vPortFree>
 800db66:	e001      	b.n	800db6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800db68:	2300      	movs	r3, #0
 800db6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d017      	beq.n	800dba2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	2200      	movs	r2, #0
 800db76:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800db7a:	88fa      	ldrh	r2, [r7, #6]
 800db7c:	2300      	movs	r3, #0
 800db7e:	9303      	str	r3, [sp, #12]
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	9302      	str	r3, [sp, #8]
 800db84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db86:	9301      	str	r3, [sp, #4]
 800db88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	68b9      	ldr	r1, [r7, #8]
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f000 f80e 	bl	800dbb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db96:	69f8      	ldr	r0, [r7, #28]
 800db98:	f000 f89c 	bl	800dcd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db9c:	2301      	movs	r3, #1
 800db9e:	61bb      	str	r3, [r7, #24]
 800dba0:	e002      	b.n	800dba8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dba6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dba8:	69bb      	ldr	r3, [r7, #24]
	}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3720      	adds	r7, #32
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b088      	sub	sp, #32
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	60f8      	str	r0, [r7, #12]
 800dbba:	60b9      	str	r1, [r7, #8]
 800dbbc:	607a      	str	r2, [r7, #4]
 800dbbe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	461a      	mov	r2, r3
 800dbca:	21a5      	movs	r1, #165	@ 0xa5
 800dbcc:	f002 ff9d 	bl	8010b0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dbd4:	6879      	ldr	r1, [r7, #4]
 800dbd6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800dbda:	440b      	add	r3, r1
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	f023 0307 	bic.w	r3, r3, #7
 800dbe8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	f003 0307 	and.w	r3, r3, #7
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00b      	beq.n	800dc0c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800dbf4:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800dbf8:	f383 8811 	msr	BASEPRI, r3
 800dbfc:	f3bf 8f6f 	isb	sy
 800dc00:	f3bf 8f4f 	dsb	sy
 800dc04:	617b      	str	r3, [r7, #20]
}
 800dc06:	bf00      	nop
 800dc08:	bf00      	nop
 800dc0a:	e7fd      	b.n	800dc08 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d01f      	beq.n	800dc52 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc12:	2300      	movs	r3, #0
 800dc14:	61fb      	str	r3, [r7, #28]
 800dc16:	e012      	b.n	800dc3e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	7819      	ldrb	r1, [r3, #0]
 800dc20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	4413      	add	r3, r2
 800dc26:	3334      	adds	r3, #52	@ 0x34
 800dc28:	460a      	mov	r2, r1
 800dc2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	4413      	add	r3, r2
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d006      	beq.n	800dc46 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	61fb      	str	r3, [r7, #28]
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	2b0f      	cmp	r3, #15
 800dc42:	d9e9      	bls.n	800dc18 <prvInitialiseNewTask+0x66>
 800dc44:	e000      	b.n	800dc48 <prvInitialiseNewTask+0x96>
			{
				break;
 800dc46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dc50:	e003      	b.n	800dc5a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc5c:	2b37      	cmp	r3, #55	@ 0x37
 800dc5e:	d901      	bls.n	800dc64 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc60:	2337      	movs	r3, #55	@ 0x37
 800dc62:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc68:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc6e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc72:	2200      	movs	r2, #0
 800dc74:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc78:	3304      	adds	r3, #4
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fcfa 	bl	800c674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc82:	3318      	adds	r3, #24
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fe fcf5 	bl	800c674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc9e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca2:	2200      	movs	r2, #0
 800dca4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcae:	683a      	ldr	r2, [r7, #0]
 800dcb0:	68f9      	ldr	r1, [r7, #12]
 800dcb2:	69b8      	ldr	r0, [r7, #24]
 800dcb4:	f7fe fd72 	bl	800c79c <pxPortInitialiseStack>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d002      	beq.n	800dcca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcca:	bf00      	nop
 800dccc:	3720      	adds	r7, #32
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dcdc:	f7fe fe8c 	bl	800c9f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dce0:	4b2d      	ldr	r3, [pc, #180]	@ (800dd98 <prvAddNewTaskToReadyList+0xc4>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	3301      	adds	r3, #1
 800dce6:	4a2c      	ldr	r2, [pc, #176]	@ (800dd98 <prvAddNewTaskToReadyList+0xc4>)
 800dce8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dcea:	4b2c      	ldr	r3, [pc, #176]	@ (800dd9c <prvAddNewTaskToReadyList+0xc8>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d109      	bne.n	800dd06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dcf2:	4a2a      	ldr	r2, [pc, #168]	@ (800dd9c <prvAddNewTaskToReadyList+0xc8>)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcf8:	4b27      	ldr	r3, [pc, #156]	@ (800dd98 <prvAddNewTaskToReadyList+0xc4>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d110      	bne.n	800dd22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd00:	f000 fcb0 	bl	800e664 <prvInitialiseTaskLists>
 800dd04:	e00d      	b.n	800dd22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd06:	4b26      	ldr	r3, [pc, #152]	@ (800dda0 <prvAddNewTaskToReadyList+0xcc>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d109      	bne.n	800dd22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd0e:	4b23      	ldr	r3, [pc, #140]	@ (800dd9c <prvAddNewTaskToReadyList+0xc8>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d802      	bhi.n	800dd22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd1c:	4a1f      	ldr	r2, [pc, #124]	@ (800dd9c <prvAddNewTaskToReadyList+0xc8>)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd22:	4b20      	ldr	r3, [pc, #128]	@ (800dda4 <prvAddNewTaskToReadyList+0xd0>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3301      	adds	r3, #1
 800dd28:	4a1e      	ldr	r2, [pc, #120]	@ (800dda4 <prvAddNewTaskToReadyList+0xd0>)
 800dd2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dd2c:	4b1d      	ldr	r3, [pc, #116]	@ (800dda4 <prvAddNewTaskToReadyList+0xd0>)
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd38:	4b1b      	ldr	r3, [pc, #108]	@ (800dda8 <prvAddNewTaskToReadyList+0xd4>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d903      	bls.n	800dd48 <prvAddNewTaskToReadyList+0x74>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd44:	4a18      	ldr	r2, [pc, #96]	@ (800dda8 <prvAddNewTaskToReadyList+0xd4>)
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4413      	add	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4a15      	ldr	r2, [pc, #84]	@ (800ddac <prvAddNewTaskToReadyList+0xd8>)
 800dd56:	441a      	add	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	4610      	mov	r0, r2
 800dd60:	f7fe fc95 	bl	800c68e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd64:	f7fe fe7a 	bl	800ca5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd68:	4b0d      	ldr	r3, [pc, #52]	@ (800dda0 <prvAddNewTaskToReadyList+0xcc>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00e      	beq.n	800dd8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd70:	4b0a      	ldr	r3, [pc, #40]	@ (800dd9c <prvAddNewTaskToReadyList+0xc8>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d207      	bcs.n	800dd8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dd7e:	4b0c      	ldr	r3, [pc, #48]	@ (800ddb0 <prvAddNewTaskToReadyList+0xdc>)
 800dd80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd84:	601a      	str	r2, [r3, #0]
 800dd86:	f3bf 8f4f 	dsb	sy
 800dd8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd8e:	bf00      	nop
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	24004c74 	.word	0x24004c74
 800dd9c:	240047a0 	.word	0x240047a0
 800dda0:	24004c80 	.word	0x24004c80
 800dda4:	24004c90 	.word	0x24004c90
 800dda8:	24004c7c 	.word	0x24004c7c
 800ddac:	240047a4 	.word	0x240047a4
 800ddb0:	e000ed04 	.word	0xe000ed04

0800ddb4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b08a      	sub	sp, #40	@ 0x28
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d10b      	bne.n	800dde0 <vTaskDelayUntil+0x2c>
	__asm volatile
 800ddc8:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ddcc:	f383 8811 	msr	BASEPRI, r3
 800ddd0:	f3bf 8f6f 	isb	sy
 800ddd4:	f3bf 8f4f 	dsb	sy
 800ddd8:	617b      	str	r3, [r7, #20]
}
 800ddda:	bf00      	nop
 800dddc:	bf00      	nop
 800ddde:	e7fd      	b.n	800dddc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10b      	bne.n	800ddfe <vTaskDelayUntil+0x4a>
	__asm volatile
 800dde6:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ddea:	f383 8811 	msr	BASEPRI, r3
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	613b      	str	r3, [r7, #16]
}
 800ddf8:	bf00      	nop
 800ddfa:	bf00      	nop
 800ddfc:	e7fd      	b.n	800ddfa <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800ddfe:	4b2a      	ldr	r3, [pc, #168]	@ (800dea8 <vTaskDelayUntil+0xf4>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00b      	beq.n	800de1e <vTaskDelayUntil+0x6a>
	__asm volatile
 800de06:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	60fb      	str	r3, [r7, #12]
}
 800de18:	bf00      	nop
 800de1a:	bf00      	nop
 800de1c:	e7fd      	b.n	800de1a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800de1e:	f000 f8e7 	bl	800dff0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800de22:	4b22      	ldr	r3, [pc, #136]	@ (800deac <vTaskDelayUntil+0xf8>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	4413      	add	r3, r2
 800de30:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	6a3a      	ldr	r2, [r7, #32]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d20b      	bcs.n	800de54 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	69fa      	ldr	r2, [r7, #28]
 800de42:	429a      	cmp	r2, r3
 800de44:	d211      	bcs.n	800de6a <vTaskDelayUntil+0xb6>
 800de46:	69fa      	ldr	r2, [r7, #28]
 800de48:	6a3b      	ldr	r3, [r7, #32]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d90d      	bls.n	800de6a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800de4e:	2301      	movs	r3, #1
 800de50:	627b      	str	r3, [r7, #36]	@ 0x24
 800de52:	e00a      	b.n	800de6a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	69fa      	ldr	r2, [r7, #28]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d303      	bcc.n	800de66 <vTaskDelayUntil+0xb2>
 800de5e:	69fa      	ldr	r2, [r7, #28]
 800de60:	6a3b      	ldr	r3, [r7, #32]
 800de62:	429a      	cmp	r2, r3
 800de64:	d901      	bls.n	800de6a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800de66:	2301      	movs	r3, #1
 800de68:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	69fa      	ldr	r2, [r7, #28]
 800de6e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800de70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de72:	2b00      	cmp	r3, #0
 800de74:	d006      	beq.n	800de84 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800de76:	69fa      	ldr	r2, [r7, #28]
 800de78:	6a3b      	ldr	r3, [r7, #32]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	2100      	movs	r1, #0
 800de7e:	4618      	mov	r0, r3
 800de80:	f000 ff60 	bl	800ed44 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800de84:	f000 f8c2 	bl	800e00c <xTaskResumeAll>
 800de88:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d107      	bne.n	800dea0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800de90:	4b07      	ldr	r3, [pc, #28]	@ (800deb0 <vTaskDelayUntil+0xfc>)
 800de92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de96:	601a      	str	r2, [r3, #0]
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dea0:	bf00      	nop
 800dea2:	3728      	adds	r7, #40	@ 0x28
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	24004c9c 	.word	0x24004c9c
 800deac:	24004c78 	.word	0x24004c78
 800deb0:	e000ed04 	.word	0xe000ed04

0800deb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800debc:	2300      	movs	r3, #0
 800debe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d018      	beq.n	800def8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dec6:	4b14      	ldr	r3, [pc, #80]	@ (800df18 <vTaskDelay+0x64>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00b      	beq.n	800dee6 <vTaskDelay+0x32>
	__asm volatile
 800dece:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	60bb      	str	r3, [r7, #8]
}
 800dee0:	bf00      	nop
 800dee2:	bf00      	nop
 800dee4:	e7fd      	b.n	800dee2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dee6:	f000 f883 	bl	800dff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800deea:	2100      	movs	r1, #0
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 ff29 	bl	800ed44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800def2:	f000 f88b 	bl	800e00c <xTaskResumeAll>
 800def6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d107      	bne.n	800df0e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800defe:	4b07      	ldr	r3, [pc, #28]	@ (800df1c <vTaskDelay+0x68>)
 800df00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df04:	601a      	str	r2, [r3, #0]
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df0e:	bf00      	nop
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	24004c9c 	.word	0x24004c9c
 800df1c:	e000ed04 	.word	0xe000ed04

0800df20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b08a      	sub	sp, #40	@ 0x28
 800df24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df26:	2300      	movs	r3, #0
 800df28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df2e:	463a      	mov	r2, r7
 800df30:	1d39      	adds	r1, r7, #4
 800df32:	f107 0308 	add.w	r3, r7, #8
 800df36:	4618      	mov	r0, r3
 800df38:	f7fe f942 	bl	800c1c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df3c:	6839      	ldr	r1, [r7, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	68ba      	ldr	r2, [r7, #8]
 800df42:	9202      	str	r2, [sp, #8]
 800df44:	9301      	str	r3, [sp, #4]
 800df46:	2300      	movs	r3, #0
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	2300      	movs	r3, #0
 800df4c:	460a      	mov	r2, r1
 800df4e:	4922      	ldr	r1, [pc, #136]	@ (800dfd8 <vTaskStartScheduler+0xb8>)
 800df50:	4822      	ldr	r0, [pc, #136]	@ (800dfdc <vTaskStartScheduler+0xbc>)
 800df52:	f7ff fd89 	bl	800da68 <xTaskCreateStatic>
 800df56:	4603      	mov	r3, r0
 800df58:	4a21      	ldr	r2, [pc, #132]	@ (800dfe0 <vTaskStartScheduler+0xc0>)
 800df5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df5c:	4b20      	ldr	r3, [pc, #128]	@ (800dfe0 <vTaskStartScheduler+0xc0>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df64:	2301      	movs	r3, #1
 800df66:	617b      	str	r3, [r7, #20]
 800df68:	e001      	b.n	800df6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df6a:	2300      	movs	r3, #0
 800df6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	2b01      	cmp	r3, #1
 800df72:	d102      	bne.n	800df7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800df74:	f000 ff3a 	bl	800edec <xTimerCreateTimerTask>
 800df78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d116      	bne.n	800dfae <vTaskStartScheduler+0x8e>
	__asm volatile
 800df80:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800df84:	f383 8811 	msr	BASEPRI, r3
 800df88:	f3bf 8f6f 	isb	sy
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	613b      	str	r3, [r7, #16]
}
 800df92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df94:	4b13      	ldr	r3, [pc, #76]	@ (800dfe4 <vTaskStartScheduler+0xc4>)
 800df96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df9c:	4b12      	ldr	r3, [pc, #72]	@ (800dfe8 <vTaskStartScheduler+0xc8>)
 800df9e:	2201      	movs	r2, #1
 800dfa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfa2:	4b12      	ldr	r3, [pc, #72]	@ (800dfec <vTaskStartScheduler+0xcc>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfa8:	f7fe fc82 	bl	800c8b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfac:	e00f      	b.n	800dfce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfb4:	d10b      	bne.n	800dfce <vTaskStartScheduler+0xae>
	__asm volatile
 800dfb6:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800dfba:	f383 8811 	msr	BASEPRI, r3
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f3bf 8f4f 	dsb	sy
 800dfc6:	60fb      	str	r3, [r7, #12]
}
 800dfc8:	bf00      	nop
 800dfca:	bf00      	nop
 800dfcc:	e7fd      	b.n	800dfca <vTaskStartScheduler+0xaa>
}
 800dfce:	bf00      	nop
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	08013828 	.word	0x08013828
 800dfdc:	0800e635 	.word	0x0800e635
 800dfe0:	24004c98 	.word	0x24004c98
 800dfe4:	24004c94 	.word	0x24004c94
 800dfe8:	24004c80 	.word	0x24004c80
 800dfec:	24004c78 	.word	0x24004c78

0800dff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dff0:	b480      	push	{r7}
 800dff2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dff4:	4b04      	ldr	r3, [pc, #16]	@ (800e008 <vTaskSuspendAll+0x18>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	3301      	adds	r3, #1
 800dffa:	4a03      	ldr	r2, [pc, #12]	@ (800e008 <vTaskSuspendAll+0x18>)
 800dffc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dffe:	bf00      	nop
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr
 800e008:	24004c9c 	.word	0x24004c9c

0800e00c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e012:	2300      	movs	r3, #0
 800e014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e016:	2300      	movs	r3, #0
 800e018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e01a:	4b42      	ldr	r3, [pc, #264]	@ (800e124 <xTaskResumeAll+0x118>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10b      	bne.n	800e03a <xTaskResumeAll+0x2e>
	__asm volatile
 800e022:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	603b      	str	r3, [r7, #0]
}
 800e034:	bf00      	nop
 800e036:	bf00      	nop
 800e038:	e7fd      	b.n	800e036 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e03a:	f7fe fcdd 	bl	800c9f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e03e:	4b39      	ldr	r3, [pc, #228]	@ (800e124 <xTaskResumeAll+0x118>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	3b01      	subs	r3, #1
 800e044:	4a37      	ldr	r2, [pc, #220]	@ (800e124 <xTaskResumeAll+0x118>)
 800e046:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e048:	4b36      	ldr	r3, [pc, #216]	@ (800e124 <xTaskResumeAll+0x118>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d162      	bne.n	800e116 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e050:	4b35      	ldr	r3, [pc, #212]	@ (800e128 <xTaskResumeAll+0x11c>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d05e      	beq.n	800e116 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e058:	e02f      	b.n	800e0ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e05a:	4b34      	ldr	r3, [pc, #208]	@ (800e12c <xTaskResumeAll+0x120>)
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	3318      	adds	r3, #24
 800e066:	4618      	mov	r0, r3
 800e068:	f7fe fb6e 	bl	800c748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	3304      	adds	r3, #4
 800e070:	4618      	mov	r0, r3
 800e072:	f7fe fb69 	bl	800c748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e07a:	4b2d      	ldr	r3, [pc, #180]	@ (800e130 <xTaskResumeAll+0x124>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d903      	bls.n	800e08a <xTaskResumeAll+0x7e>
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e086:	4a2a      	ldr	r2, [pc, #168]	@ (800e130 <xTaskResumeAll+0x124>)
 800e088:	6013      	str	r3, [r2, #0]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e08e:	4613      	mov	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4413      	add	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4a27      	ldr	r2, [pc, #156]	@ (800e134 <xTaskResumeAll+0x128>)
 800e098:	441a      	add	r2, r3
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3304      	adds	r3, #4
 800e09e:	4619      	mov	r1, r3
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	f7fe faf4 	bl	800c68e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0aa:	4b23      	ldr	r3, [pc, #140]	@ (800e138 <xTaskResumeAll+0x12c>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d302      	bcc.n	800e0ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e0b4:	4b21      	ldr	r3, [pc, #132]	@ (800e13c <xTaskResumeAll+0x130>)
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0ba:	4b1c      	ldr	r3, [pc, #112]	@ (800e12c <xTaskResumeAll+0x120>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d1cb      	bne.n	800e05a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d001      	beq.n	800e0cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e0c8:	f000 fba2 	bl	800e810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e0cc:	4b1c      	ldr	r3, [pc, #112]	@ (800e140 <xTaskResumeAll+0x134>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d010      	beq.n	800e0fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e0d8:	f000 f858 	bl	800e18c <xTaskIncrementTick>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d002      	beq.n	800e0e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e0e2:	4b16      	ldr	r3, [pc, #88]	@ (800e13c <xTaskResumeAll+0x130>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d1f1      	bne.n	800e0d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e0f4:	4b12      	ldr	r3, [pc, #72]	@ (800e140 <xTaskResumeAll+0x134>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e0fa:	4b10      	ldr	r3, [pc, #64]	@ (800e13c <xTaskResumeAll+0x130>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d009      	beq.n	800e116 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e102:	2301      	movs	r3, #1
 800e104:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e106:	4b0f      	ldr	r3, [pc, #60]	@ (800e144 <xTaskResumeAll+0x138>)
 800e108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e116:	f7fe fca1 	bl	800ca5c <vPortExitCritical>

	return xAlreadyYielded;
 800e11a:	68bb      	ldr	r3, [r7, #8]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}
 800e124:	24004c9c 	.word	0x24004c9c
 800e128:	24004c74 	.word	0x24004c74
 800e12c:	24004c34 	.word	0x24004c34
 800e130:	24004c7c 	.word	0x24004c7c
 800e134:	240047a4 	.word	0x240047a4
 800e138:	240047a0 	.word	0x240047a0
 800e13c:	24004c88 	.word	0x24004c88
 800e140:	24004c84 	.word	0x24004c84
 800e144:	e000ed04 	.word	0xe000ed04

0800e148 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e14e:	4b05      	ldr	r3, [pc, #20]	@ (800e164 <xTaskGetTickCount+0x1c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e154:	687b      	ldr	r3, [r7, #4]
}
 800e156:	4618      	mov	r0, r3
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop
 800e164:	24004c78 	.word	0x24004c78

0800e168 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e16e:	f7fe fd23 	bl	800cbb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e172:	2300      	movs	r3, #0
 800e174:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e176:	4b04      	ldr	r3, [pc, #16]	@ (800e188 <xTaskGetTickCountFromISR+0x20>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e17c:	683b      	ldr	r3, [r7, #0]
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	24004c78 	.word	0x24004c78

0800e18c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e192:	2300      	movs	r3, #0
 800e194:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e196:	4b4f      	ldr	r3, [pc, #316]	@ (800e2d4 <xTaskIncrementTick+0x148>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f040 8090 	bne.w	800e2c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e1a0:	4b4d      	ldr	r3, [pc, #308]	@ (800e2d8 <xTaskIncrementTick+0x14c>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e1a8:	4a4b      	ldr	r2, [pc, #300]	@ (800e2d8 <xTaskIncrementTick+0x14c>)
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d121      	bne.n	800e1f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e1b4:	4b49      	ldr	r3, [pc, #292]	@ (800e2dc <xTaskIncrementTick+0x150>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00b      	beq.n	800e1d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e1be:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	603b      	str	r3, [r7, #0]
}
 800e1d0:	bf00      	nop
 800e1d2:	bf00      	nop
 800e1d4:	e7fd      	b.n	800e1d2 <xTaskIncrementTick+0x46>
 800e1d6:	4b41      	ldr	r3, [pc, #260]	@ (800e2dc <xTaskIncrementTick+0x150>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	60fb      	str	r3, [r7, #12]
 800e1dc:	4b40      	ldr	r3, [pc, #256]	@ (800e2e0 <xTaskIncrementTick+0x154>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a3e      	ldr	r2, [pc, #248]	@ (800e2dc <xTaskIncrementTick+0x150>)
 800e1e2:	6013      	str	r3, [r2, #0]
 800e1e4:	4a3e      	ldr	r2, [pc, #248]	@ (800e2e0 <xTaskIncrementTick+0x154>)
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6013      	str	r3, [r2, #0]
 800e1ea:	4b3e      	ldr	r3, [pc, #248]	@ (800e2e4 <xTaskIncrementTick+0x158>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	4a3c      	ldr	r2, [pc, #240]	@ (800e2e4 <xTaskIncrementTick+0x158>)
 800e1f2:	6013      	str	r3, [r2, #0]
 800e1f4:	f000 fb0c 	bl	800e810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e1f8:	4b3b      	ldr	r3, [pc, #236]	@ (800e2e8 <xTaskIncrementTick+0x15c>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d349      	bcc.n	800e296 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e202:	4b36      	ldr	r3, [pc, #216]	@ (800e2dc <xTaskIncrementTick+0x150>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d104      	bne.n	800e216 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e20c:	4b36      	ldr	r3, [pc, #216]	@ (800e2e8 <xTaskIncrementTick+0x15c>)
 800e20e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e212:	601a      	str	r2, [r3, #0]
					break;
 800e214:	e03f      	b.n	800e296 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e216:	4b31      	ldr	r3, [pc, #196]	@ (800e2dc <xTaskIncrementTick+0x150>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e226:	693a      	ldr	r2, [r7, #16]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d203      	bcs.n	800e236 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e22e:	4a2e      	ldr	r2, [pc, #184]	@ (800e2e8 <xTaskIncrementTick+0x15c>)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e234:	e02f      	b.n	800e296 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	3304      	adds	r3, #4
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe fa84 	bl	800c748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e244:	2b00      	cmp	r3, #0
 800e246:	d004      	beq.n	800e252 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	3318      	adds	r3, #24
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fe fa7b 	bl	800c748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e256:	4b25      	ldr	r3, [pc, #148]	@ (800e2ec <xTaskIncrementTick+0x160>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d903      	bls.n	800e266 <xTaskIncrementTick+0xda>
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e262:	4a22      	ldr	r2, [pc, #136]	@ (800e2ec <xTaskIncrementTick+0x160>)
 800e264:	6013      	str	r3, [r2, #0]
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e26a:	4613      	mov	r3, r2
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	4413      	add	r3, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	4a1f      	ldr	r2, [pc, #124]	@ (800e2f0 <xTaskIncrementTick+0x164>)
 800e274:	441a      	add	r2, r3
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	3304      	adds	r3, #4
 800e27a:	4619      	mov	r1, r3
 800e27c:	4610      	mov	r0, r2
 800e27e:	f7fe fa06 	bl	800c68e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e286:	4b1b      	ldr	r3, [pc, #108]	@ (800e2f4 <xTaskIncrementTick+0x168>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d3b8      	bcc.n	800e202 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e290:	2301      	movs	r3, #1
 800e292:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e294:	e7b5      	b.n	800e202 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e296:	4b17      	ldr	r3, [pc, #92]	@ (800e2f4 <xTaskIncrementTick+0x168>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e29c:	4914      	ldr	r1, [pc, #80]	@ (800e2f0 <xTaskIncrementTick+0x164>)
 800e29e:	4613      	mov	r3, r2
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	4413      	add	r3, r2
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	440b      	add	r3, r1
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d901      	bls.n	800e2b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e2b2:	4b11      	ldr	r3, [pc, #68]	@ (800e2f8 <xTaskIncrementTick+0x16c>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d007      	beq.n	800e2ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	e004      	b.n	800e2ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e2c0:	4b0e      	ldr	r3, [pc, #56]	@ (800e2fc <xTaskIncrementTick+0x170>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	4a0d      	ldr	r2, [pc, #52]	@ (800e2fc <xTaskIncrementTick+0x170>)
 800e2c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e2ca:	697b      	ldr	r3, [r7, #20]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	24004c9c 	.word	0x24004c9c
 800e2d8:	24004c78 	.word	0x24004c78
 800e2dc:	24004c2c 	.word	0x24004c2c
 800e2e0:	24004c30 	.word	0x24004c30
 800e2e4:	24004c8c 	.word	0x24004c8c
 800e2e8:	24004c94 	.word	0x24004c94
 800e2ec:	24004c7c 	.word	0x24004c7c
 800e2f0:	240047a4 	.word	0x240047a4
 800e2f4:	240047a0 	.word	0x240047a0
 800e2f8:	24004c88 	.word	0x24004c88
 800e2fc:	24004c84 	.word	0x24004c84

0800e300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e306:	4b28      	ldr	r3, [pc, #160]	@ (800e3a8 <vTaskSwitchContext+0xa8>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d003      	beq.n	800e316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e30e:	4b27      	ldr	r3, [pc, #156]	@ (800e3ac <vTaskSwitchContext+0xac>)
 800e310:	2201      	movs	r2, #1
 800e312:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e314:	e042      	b.n	800e39c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800e316:	4b25      	ldr	r3, [pc, #148]	@ (800e3ac <vTaskSwitchContext+0xac>)
 800e318:	2200      	movs	r2, #0
 800e31a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e31c:	4b24      	ldr	r3, [pc, #144]	@ (800e3b0 <vTaskSwitchContext+0xb0>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	60fb      	str	r3, [r7, #12]
 800e322:	e011      	b.n	800e348 <vTaskSwitchContext+0x48>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10b      	bne.n	800e342 <vTaskSwitchContext+0x42>
	__asm volatile
 800e32a:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	607b      	str	r3, [r7, #4]
}
 800e33c:	bf00      	nop
 800e33e:	bf00      	nop
 800e340:	e7fd      	b.n	800e33e <vTaskSwitchContext+0x3e>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3b01      	subs	r3, #1
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	491a      	ldr	r1, [pc, #104]	@ (800e3b4 <vTaskSwitchContext+0xb4>)
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	4613      	mov	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4413      	add	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	440b      	add	r3, r1
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d0e3      	beq.n	800e324 <vTaskSwitchContext+0x24>
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	4613      	mov	r3, r2
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	4413      	add	r3, r2
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4a13      	ldr	r2, [pc, #76]	@ (800e3b4 <vTaskSwitchContext+0xb4>)
 800e368:	4413      	add	r3, r2
 800e36a:	60bb      	str	r3, [r7, #8]
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	685a      	ldr	r2, [r3, #4]
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	605a      	str	r2, [r3, #4]
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	685a      	ldr	r2, [r3, #4]
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	3308      	adds	r3, #8
 800e37e:	429a      	cmp	r2, r3
 800e380:	d104      	bne.n	800e38c <vTaskSwitchContext+0x8c>
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	685a      	ldr	r2, [r3, #4]
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	605a      	str	r2, [r3, #4]
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	4a09      	ldr	r2, [pc, #36]	@ (800e3b8 <vTaskSwitchContext+0xb8>)
 800e394:	6013      	str	r3, [r2, #0]
 800e396:	4a06      	ldr	r2, [pc, #24]	@ (800e3b0 <vTaskSwitchContext+0xb0>)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6013      	str	r3, [r2, #0]
}
 800e39c:	bf00      	nop
 800e39e:	3714      	adds	r7, #20
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	24004c9c 	.word	0x24004c9c
 800e3ac:	24004c88 	.word	0x24004c88
 800e3b0:	24004c7c 	.word	0x24004c7c
 800e3b4:	240047a4 	.word	0x240047a4
 800e3b8:	240047a0 	.word	0x240047a0

0800e3bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d10b      	bne.n	800e3e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e3cc:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e3d0:	f383 8811 	msr	BASEPRI, r3
 800e3d4:	f3bf 8f6f 	isb	sy
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	60fb      	str	r3, [r7, #12]
}
 800e3de:	bf00      	nop
 800e3e0:	bf00      	nop
 800e3e2:	e7fd      	b.n	800e3e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e3e4:	4b07      	ldr	r3, [pc, #28]	@ (800e404 <vTaskPlaceOnEventList+0x48>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	3318      	adds	r3, #24
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7fe f972 	bl	800c6d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e3f2:	2101      	movs	r1, #1
 800e3f4:	6838      	ldr	r0, [r7, #0]
 800e3f6:	f000 fca5 	bl	800ed44 <prvAddCurrentTaskToDelayedList>
}
 800e3fa:	bf00      	nop
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	240047a0 	.word	0x240047a0

0800e408 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10b      	bne.n	800e432 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e41a:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	617b      	str	r3, [r7, #20]
}
 800e42c:	bf00      	nop
 800e42e:	bf00      	nop
 800e430:	e7fd      	b.n	800e42e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e432:	4b0a      	ldr	r3, [pc, #40]	@ (800e45c <vTaskPlaceOnEventListRestricted+0x54>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	3318      	adds	r3, #24
 800e438:	4619      	mov	r1, r3
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f7fe f927 	bl	800c68e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e446:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e44a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e44c:	6879      	ldr	r1, [r7, #4]
 800e44e:	68b8      	ldr	r0, [r7, #8]
 800e450:	f000 fc78 	bl	800ed44 <prvAddCurrentTaskToDelayedList>
	}
 800e454:	bf00      	nop
 800e456:	3718      	adds	r7, #24
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	240047a0 	.word	0x240047a0

0800e460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d10b      	bne.n	800e48e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e476:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e47a:	f383 8811 	msr	BASEPRI, r3
 800e47e:	f3bf 8f6f 	isb	sy
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	60fb      	str	r3, [r7, #12]
}
 800e488:	bf00      	nop
 800e48a:	bf00      	nop
 800e48c:	e7fd      	b.n	800e48a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	3318      	adds	r3, #24
 800e492:	4618      	mov	r0, r3
 800e494:	f7fe f958 	bl	800c748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e498:	4b1d      	ldr	r3, [pc, #116]	@ (800e510 <xTaskRemoveFromEventList+0xb0>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d11d      	bne.n	800e4dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7fe f94f 	bl	800c748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ae:	4b19      	ldr	r3, [pc, #100]	@ (800e514 <xTaskRemoveFromEventList+0xb4>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d903      	bls.n	800e4be <xTaskRemoveFromEventList+0x5e>
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ba:	4a16      	ldr	r2, [pc, #88]	@ (800e514 <xTaskRemoveFromEventList+0xb4>)
 800e4bc:	6013      	str	r3, [r2, #0]
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4a13      	ldr	r2, [pc, #76]	@ (800e518 <xTaskRemoveFromEventList+0xb8>)
 800e4cc:	441a      	add	r2, r3
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	3304      	adds	r3, #4
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	f7fe f8da 	bl	800c68e <vListInsertEnd>
 800e4da:	e005      	b.n	800e4e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	3318      	adds	r3, #24
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	480e      	ldr	r0, [pc, #56]	@ (800e51c <xTaskRemoveFromEventList+0xbc>)
 800e4e4:	f7fe f8d3 	bl	800c68e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800e520 <xTaskRemoveFromEventList+0xc0>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d905      	bls.n	800e502 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800e524 <xTaskRemoveFromEventList+0xc4>)
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	601a      	str	r2, [r3, #0]
 800e500:	e001      	b.n	800e506 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e502:	2300      	movs	r3, #0
 800e504:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e506:	697b      	ldr	r3, [r7, #20]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3718      	adds	r7, #24
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	24004c9c 	.word	0x24004c9c
 800e514:	24004c7c 	.word	0x24004c7c
 800e518:	240047a4 	.word	0x240047a4
 800e51c:	24004c34 	.word	0x24004c34
 800e520:	240047a0 	.word	0x240047a0
 800e524:	24004c88 	.word	0x24004c88

0800e528 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e528:	b480      	push	{r7}
 800e52a:	b083      	sub	sp, #12
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e530:	4b06      	ldr	r3, [pc, #24]	@ (800e54c <vTaskInternalSetTimeOutState+0x24>)
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e538:	4b05      	ldr	r3, [pc, #20]	@ (800e550 <vTaskInternalSetTimeOutState+0x28>)
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	605a      	str	r2, [r3, #4]
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr
 800e54c:	24004c8c 	.word	0x24004c8c
 800e550:	24004c78 	.word	0x24004c78

0800e554 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b088      	sub	sp, #32
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d10b      	bne.n	800e57c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e564:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e568:	f383 8811 	msr	BASEPRI, r3
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	613b      	str	r3, [r7, #16]
}
 800e576:	bf00      	nop
 800e578:	bf00      	nop
 800e57a:	e7fd      	b.n	800e578 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d10b      	bne.n	800e59a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e582:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	60fb      	str	r3, [r7, #12]
}
 800e594:	bf00      	nop
 800e596:	bf00      	nop
 800e598:	e7fd      	b.n	800e596 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e59a:	f7fe fa2d 	bl	800c9f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e59e:	4b1d      	ldr	r3, [pc, #116]	@ (800e614 <xTaskCheckForTimeOut+0xc0>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	69ba      	ldr	r2, [r7, #24]
 800e5aa:	1ad3      	subs	r3, r2, r3
 800e5ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5b6:	d102      	bne.n	800e5be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	61fb      	str	r3, [r7, #28]
 800e5bc:	e023      	b.n	800e606 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	4b15      	ldr	r3, [pc, #84]	@ (800e618 <xTaskCheckForTimeOut+0xc4>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d007      	beq.n	800e5da <xTaskCheckForTimeOut+0x86>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	69ba      	ldr	r2, [r7, #24]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d302      	bcc.n	800e5da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	61fb      	str	r3, [r7, #28]
 800e5d8:	e015      	b.n	800e606 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d20b      	bcs.n	800e5fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	1ad2      	subs	r2, r2, r3
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7ff ff99 	bl	800e528 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	61fb      	str	r3, [r7, #28]
 800e5fa:	e004      	b.n	800e606 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2200      	movs	r2, #0
 800e600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e602:	2301      	movs	r3, #1
 800e604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e606:	f7fe fa29 	bl	800ca5c <vPortExitCritical>

	return xReturn;
 800e60a:	69fb      	ldr	r3, [r7, #28]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3720      	adds	r7, #32
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	24004c78 	.word	0x24004c78
 800e618:	24004c8c 	.word	0x24004c8c

0800e61c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e61c:	b480      	push	{r7}
 800e61e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e620:	4b03      	ldr	r3, [pc, #12]	@ (800e630 <vTaskMissedYield+0x14>)
 800e622:	2201      	movs	r2, #1
 800e624:	601a      	str	r2, [r3, #0]
}
 800e626:	bf00      	nop
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr
 800e630:	24004c88 	.word	0x24004c88

0800e634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e63c:	f000 f852 	bl	800e6e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e640:	4b06      	ldr	r3, [pc, #24]	@ (800e65c <prvIdleTask+0x28>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d9f9      	bls.n	800e63c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e648:	4b05      	ldr	r3, [pc, #20]	@ (800e660 <prvIdleTask+0x2c>)
 800e64a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e64e:	601a      	str	r2, [r3, #0]
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e658:	e7f0      	b.n	800e63c <prvIdleTask+0x8>
 800e65a:	bf00      	nop
 800e65c:	240047a4 	.word	0x240047a4
 800e660:	e000ed04 	.word	0xe000ed04

0800e664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e66a:	2300      	movs	r3, #0
 800e66c:	607b      	str	r3, [r7, #4]
 800e66e:	e00c      	b.n	800e68a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	4613      	mov	r3, r2
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	4413      	add	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4a12      	ldr	r2, [pc, #72]	@ (800e6c4 <prvInitialiseTaskLists+0x60>)
 800e67c:	4413      	add	r3, r2
 800e67e:	4618      	mov	r0, r3
 800e680:	f7fd ffd8 	bl	800c634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	3301      	adds	r3, #1
 800e688:	607b      	str	r3, [r7, #4]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2b37      	cmp	r3, #55	@ 0x37
 800e68e:	d9ef      	bls.n	800e670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e690:	480d      	ldr	r0, [pc, #52]	@ (800e6c8 <prvInitialiseTaskLists+0x64>)
 800e692:	f7fd ffcf 	bl	800c634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e696:	480d      	ldr	r0, [pc, #52]	@ (800e6cc <prvInitialiseTaskLists+0x68>)
 800e698:	f7fd ffcc 	bl	800c634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e69c:	480c      	ldr	r0, [pc, #48]	@ (800e6d0 <prvInitialiseTaskLists+0x6c>)
 800e69e:	f7fd ffc9 	bl	800c634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e6a2:	480c      	ldr	r0, [pc, #48]	@ (800e6d4 <prvInitialiseTaskLists+0x70>)
 800e6a4:	f7fd ffc6 	bl	800c634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e6a8:	480b      	ldr	r0, [pc, #44]	@ (800e6d8 <prvInitialiseTaskLists+0x74>)
 800e6aa:	f7fd ffc3 	bl	800c634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e6dc <prvInitialiseTaskLists+0x78>)
 800e6b0:	4a05      	ldr	r2, [pc, #20]	@ (800e6c8 <prvInitialiseTaskLists+0x64>)
 800e6b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e6b4:	4b0a      	ldr	r3, [pc, #40]	@ (800e6e0 <prvInitialiseTaskLists+0x7c>)
 800e6b6:	4a05      	ldr	r2, [pc, #20]	@ (800e6cc <prvInitialiseTaskLists+0x68>)
 800e6b8:	601a      	str	r2, [r3, #0]
}
 800e6ba:	bf00      	nop
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	240047a4 	.word	0x240047a4
 800e6c8:	24004c04 	.word	0x24004c04
 800e6cc:	24004c18 	.word	0x24004c18
 800e6d0:	24004c34 	.word	0x24004c34
 800e6d4:	24004c48 	.word	0x24004c48
 800e6d8:	24004c60 	.word	0x24004c60
 800e6dc:	24004c2c 	.word	0x24004c2c
 800e6e0:	24004c30 	.word	0x24004c30

0800e6e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6ea:	e019      	b.n	800e720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e6ec:	f7fe f984 	bl	800c9f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6f0:	4b10      	ldr	r3, [pc, #64]	@ (800e734 <prvCheckTasksWaitingTermination+0x50>)
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fe f823 	bl	800c748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e702:	4b0d      	ldr	r3, [pc, #52]	@ (800e738 <prvCheckTasksWaitingTermination+0x54>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3b01      	subs	r3, #1
 800e708:	4a0b      	ldr	r2, [pc, #44]	@ (800e738 <prvCheckTasksWaitingTermination+0x54>)
 800e70a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e70c:	4b0b      	ldr	r3, [pc, #44]	@ (800e73c <prvCheckTasksWaitingTermination+0x58>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3b01      	subs	r3, #1
 800e712:	4a0a      	ldr	r2, [pc, #40]	@ (800e73c <prvCheckTasksWaitingTermination+0x58>)
 800e714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e716:	f7fe f9a1 	bl	800ca5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 f848 	bl	800e7b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e720:	4b06      	ldr	r3, [pc, #24]	@ (800e73c <prvCheckTasksWaitingTermination+0x58>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1e1      	bne.n	800e6ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e728:	bf00      	nop
 800e72a:	bf00      	nop
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	24004c48 	.word	0x24004c48
 800e738:	24004c74 	.word	0x24004c74
 800e73c:	24004c5c 	.word	0x24004c5c

0800e740 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800e740:	b480      	push	{r7}
 800e742:	b085      	sub	sp, #20
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800e748:	2300      	movs	r3, #0
 800e74a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e74c:	e005      	b.n	800e75a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	3301      	adds	r3, #1
 800e752:	607b      	str	r3, [r7, #4]
			ulCount++;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	3301      	adds	r3, #1
 800e758:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2ba5      	cmp	r3, #165	@ 0xa5
 800e760:	d0f5      	beq.n	800e74e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	089b      	lsrs	r3, r3, #2
 800e766:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	b29b      	uxth	r3, r3
	}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3714      	adds	r7, #20
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d102      	bne.n	800e78c <uxTaskGetStackHighWaterMark+0x14>
 800e786:	4b09      	ldr	r3, [pc, #36]	@ (800e7ac <uxTaskGetStackHighWaterMark+0x34>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	e000      	b.n	800e78e <uxTaskGetStackHighWaterMark+0x16>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e794:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800e796:	6938      	ldr	r0, [r7, #16]
 800e798:	f7ff ffd2 	bl	800e740 <prvTaskCheckFreeStackSpace>
 800e79c:	4603      	mov	r3, r0
 800e79e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
	}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3718      	adds	r7, #24
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	240047a0 	.word	0x240047a0

0800e7b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d108      	bne.n	800e7d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7fd fdfc 	bl	800c3c4 <vPortFree>
				vPortFree( pxTCB );
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7fd fdf9 	bl	800c3c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e7d2:	e019      	b.n	800e808 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d103      	bne.n	800e7e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7fd fdf0 	bl	800c3c4 <vPortFree>
	}
 800e7e4:	e010      	b.n	800e808 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d00b      	beq.n	800e808 <prvDeleteTCB+0x58>
	__asm volatile
 800e7f0:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	60fb      	str	r3, [r7, #12]
}
 800e802:	bf00      	nop
 800e804:	bf00      	nop
 800e806:	e7fd      	b.n	800e804 <prvDeleteTCB+0x54>
	}
 800e808:	bf00      	nop
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e816:	4b0c      	ldr	r3, [pc, #48]	@ (800e848 <prvResetNextTaskUnblockTime+0x38>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d104      	bne.n	800e82a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e820:	4b0a      	ldr	r3, [pc, #40]	@ (800e84c <prvResetNextTaskUnblockTime+0x3c>)
 800e822:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e828:	e008      	b.n	800e83c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e82a:	4b07      	ldr	r3, [pc, #28]	@ (800e848 <prvResetNextTaskUnblockTime+0x38>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	4a04      	ldr	r2, [pc, #16]	@ (800e84c <prvResetNextTaskUnblockTime+0x3c>)
 800e83a:	6013      	str	r3, [r2, #0]
}
 800e83c:	bf00      	nop
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr
 800e848:	24004c2c 	.word	0x24004c2c
 800e84c:	24004c94 	.word	0x24004c94

0800e850 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e856:	4b05      	ldr	r3, [pc, #20]	@ (800e86c <xTaskGetCurrentTaskHandle+0x1c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e85c:	687b      	ldr	r3, [r7, #4]
	}
 800e85e:	4618      	mov	r0, r3
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	240047a0 	.word	0x240047a0

0800e870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e876:	4b0b      	ldr	r3, [pc, #44]	@ (800e8a4 <xTaskGetSchedulerState+0x34>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d102      	bne.n	800e884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e87e:	2301      	movs	r3, #1
 800e880:	607b      	str	r3, [r7, #4]
 800e882:	e008      	b.n	800e896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e884:	4b08      	ldr	r3, [pc, #32]	@ (800e8a8 <xTaskGetSchedulerState+0x38>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d102      	bne.n	800e892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e88c:	2302      	movs	r3, #2
 800e88e:	607b      	str	r3, [r7, #4]
 800e890:	e001      	b.n	800e896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e892:	2300      	movs	r3, #0
 800e894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e896:	687b      	ldr	r3, [r7, #4]
	}
 800e898:	4618      	mov	r0, r3
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	24004c80 	.word	0x24004c80
 800e8a8:	24004c9c 	.word	0x24004c9c

0800e8ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d051      	beq.n	800e966 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8c6:	4b2a      	ldr	r3, [pc, #168]	@ (800e970 <xTaskPriorityInherit+0xc4>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d241      	bcs.n	800e954 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	db06      	blt.n	800e8e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8d8:	4b25      	ldr	r3, [pc, #148]	@ (800e970 <xTaskPriorityInherit+0xc4>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	6959      	ldr	r1, [r3, #20]
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4a1f      	ldr	r2, [pc, #124]	@ (800e974 <xTaskPriorityInherit+0xc8>)
 800e8f8:	4413      	add	r3, r2
 800e8fa:	4299      	cmp	r1, r3
 800e8fc:	d122      	bne.n	800e944 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	3304      	adds	r3, #4
 800e902:	4618      	mov	r0, r3
 800e904:	f7fd ff20 	bl	800c748 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e908:	4b19      	ldr	r3, [pc, #100]	@ (800e970 <xTaskPriorityInherit+0xc4>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e916:	4b18      	ldr	r3, [pc, #96]	@ (800e978 <xTaskPriorityInherit+0xcc>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d903      	bls.n	800e926 <xTaskPriorityInherit+0x7a>
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e922:	4a15      	ldr	r2, [pc, #84]	@ (800e978 <xTaskPriorityInherit+0xcc>)
 800e924:	6013      	str	r3, [r2, #0]
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e92a:	4613      	mov	r3, r2
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	4413      	add	r3, r2
 800e930:	009b      	lsls	r3, r3, #2
 800e932:	4a10      	ldr	r2, [pc, #64]	@ (800e974 <xTaskPriorityInherit+0xc8>)
 800e934:	441a      	add	r2, r3
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	3304      	adds	r3, #4
 800e93a:	4619      	mov	r1, r3
 800e93c:	4610      	mov	r0, r2
 800e93e:	f7fd fea6 	bl	800c68e <vListInsertEnd>
 800e942:	e004      	b.n	800e94e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e944:	4b0a      	ldr	r3, [pc, #40]	@ (800e970 <xTaskPriorityInherit+0xc4>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e94e:	2301      	movs	r3, #1
 800e950:	60fb      	str	r3, [r7, #12]
 800e952:	e008      	b.n	800e966 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e958:	4b05      	ldr	r3, [pc, #20]	@ (800e970 <xTaskPriorityInherit+0xc4>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e95e:	429a      	cmp	r2, r3
 800e960:	d201      	bcs.n	800e966 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e962:	2301      	movs	r3, #1
 800e964:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e966:	68fb      	ldr	r3, [r7, #12]
	}
 800e968:	4618      	mov	r0, r3
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	240047a0 	.word	0x240047a0
 800e974:	240047a4 	.word	0x240047a4
 800e978:	24004c7c 	.word	0x24004c7c

0800e97c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e988:	2300      	movs	r3, #0
 800e98a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d058      	beq.n	800ea44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e992:	4b2f      	ldr	r3, [pc, #188]	@ (800ea50 <xTaskPriorityDisinherit+0xd4>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	693a      	ldr	r2, [r7, #16]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d00b      	beq.n	800e9b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e99c:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e9a0:	f383 8811 	msr	BASEPRI, r3
 800e9a4:	f3bf 8f6f 	isb	sy
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	60fb      	str	r3, [r7, #12]
}
 800e9ae:	bf00      	nop
 800e9b0:	bf00      	nop
 800e9b2:	e7fd      	b.n	800e9b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10b      	bne.n	800e9d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e9bc:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800e9c0:	f383 8811 	msr	BASEPRI, r3
 800e9c4:	f3bf 8f6f 	isb	sy
 800e9c8:	f3bf 8f4f 	dsb	sy
 800e9cc:	60bb      	str	r3, [r7, #8]
}
 800e9ce:	bf00      	nop
 800e9d0:	bf00      	nop
 800e9d2:	e7fd      	b.n	800e9d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9d8:	1e5a      	subs	r2, r3, #1
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d02c      	beq.n	800ea44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d128      	bne.n	800ea44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	3304      	adds	r3, #4
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fd fea6 	bl	800c748 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea14:	4b0f      	ldr	r3, [pc, #60]	@ (800ea54 <xTaskPriorityDisinherit+0xd8>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d903      	bls.n	800ea24 <xTaskPriorityDisinherit+0xa8>
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea20:	4a0c      	ldr	r2, [pc, #48]	@ (800ea54 <xTaskPriorityDisinherit+0xd8>)
 800ea22:	6013      	str	r3, [r2, #0]
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea28:	4613      	mov	r3, r2
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	4413      	add	r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	4a09      	ldr	r2, [pc, #36]	@ (800ea58 <xTaskPriorityDisinherit+0xdc>)
 800ea32:	441a      	add	r2, r3
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	3304      	adds	r3, #4
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4610      	mov	r0, r2
 800ea3c:	f7fd fe27 	bl	800c68e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ea40:	2301      	movs	r3, #1
 800ea42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ea44:	697b      	ldr	r3, [r7, #20]
	}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3718      	adds	r7, #24
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	240047a0 	.word	0x240047a0
 800ea54:	24004c7c 	.word	0x24004c7c
 800ea58:	240047a4 	.word	0x240047a4

0800ea5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b088      	sub	sp, #32
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d06c      	beq.n	800eb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d10b      	bne.n	800ea94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ea7c:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ea80:	f383 8811 	msr	BASEPRI, r3
 800ea84:	f3bf 8f6f 	isb	sy
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	60fb      	str	r3, [r7, #12]
}
 800ea8e:	bf00      	nop
 800ea90:	bf00      	nop
 800ea92:	e7fd      	b.n	800ea90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d902      	bls.n	800eaa4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	61fb      	str	r3, [r7, #28]
 800eaa2:	e002      	b.n	800eaaa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eaa8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eaaa:	69bb      	ldr	r3, [r7, #24]
 800eaac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaae:	69fa      	ldr	r2, [r7, #28]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d04c      	beq.n	800eb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d147      	bne.n	800eb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eabe:	4b26      	ldr	r3, [pc, #152]	@ (800eb58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	69ba      	ldr	r2, [r7, #24]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d10b      	bne.n	800eae0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800eac8:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800eacc:	f383 8811 	msr	BASEPRI, r3
 800ead0:	f3bf 8f6f 	isb	sy
 800ead4:	f3bf 8f4f 	dsb	sy
 800ead8:	60bb      	str	r3, [r7, #8]
}
 800eada:	bf00      	nop
 800eadc:	bf00      	nop
 800eade:	e7fd      	b.n	800eadc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eae4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eae6:	69bb      	ldr	r3, [r7, #24]
 800eae8:	69fa      	ldr	r2, [r7, #28]
 800eaea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	699b      	ldr	r3, [r3, #24]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	db04      	blt.n	800eafe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	6959      	ldr	r1, [r3, #20]
 800eb02:	693a      	ldr	r2, [r7, #16]
 800eb04:	4613      	mov	r3, r2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	4a13      	ldr	r2, [pc, #76]	@ (800eb5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eb0e:	4413      	add	r3, r2
 800eb10:	4299      	cmp	r1, r3
 800eb12:	d11c      	bne.n	800eb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb14:	69bb      	ldr	r3, [r7, #24]
 800eb16:	3304      	adds	r3, #4
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fd fe15 	bl	800c748 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb22:	4b0f      	ldr	r3, [pc, #60]	@ (800eb60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d903      	bls.n	800eb32 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb2e:	4a0c      	ldr	r2, [pc, #48]	@ (800eb60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eb30:	6013      	str	r3, [r2, #0]
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb36:	4613      	mov	r3, r2
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	4413      	add	r3, r2
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	4a07      	ldr	r2, [pc, #28]	@ (800eb5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eb40:	441a      	add	r2, r3
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	3304      	adds	r3, #4
 800eb46:	4619      	mov	r1, r3
 800eb48:	4610      	mov	r0, r2
 800eb4a:	f7fd fda0 	bl	800c68e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb4e:	bf00      	nop
 800eb50:	3720      	adds	r7, #32
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
 800eb56:	bf00      	nop
 800eb58:	240047a0 	.word	0x240047a0
 800eb5c:	240047a4 	.word	0x240047a4
 800eb60:	24004c7c 	.word	0x24004c7c

0800eb64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eb64:	b480      	push	{r7}
 800eb66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eb68:	4b07      	ldr	r3, [pc, #28]	@ (800eb88 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d004      	beq.n	800eb7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eb70:	4b05      	ldr	r3, [pc, #20]	@ (800eb88 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb76:	3201      	adds	r2, #1
 800eb78:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800eb7a:	4b03      	ldr	r3, [pc, #12]	@ (800eb88 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
	}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr
 800eb88:	240047a0 	.word	0x240047a0

0800eb8c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800eb96:	f7fd ff2f 	bl	800c9f8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800eb9a:	4b1e      	ldr	r3, [pc, #120]	@ (800ec14 <ulTaskNotifyTake+0x88>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d113      	bne.n	800ebcc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800eba4:	4b1b      	ldr	r3, [pc, #108]	@ (800ec14 <ulTaskNotifyTake+0x88>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00b      	beq.n	800ebcc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ebb4:	2101      	movs	r1, #1
 800ebb6:	6838      	ldr	r0, [r7, #0]
 800ebb8:	f000 f8c4 	bl	800ed44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ebbc:	4b16      	ldr	r3, [pc, #88]	@ (800ec18 <ulTaskNotifyTake+0x8c>)
 800ebbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ebc2:	601a      	str	r2, [r3, #0]
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ebcc:	f7fd ff46 	bl	800ca5c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ebd0:	f7fd ff12 	bl	800c9f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ebd4:	4b0f      	ldr	r3, [pc, #60]	@ (800ec14 <ulTaskNotifyTake+0x88>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebda:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00c      	beq.n	800ebfc <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d004      	beq.n	800ebf2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ebe8:	4b0a      	ldr	r3, [pc, #40]	@ (800ec14 <ulTaskNotifyTake+0x88>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2200      	movs	r2, #0
 800ebee:	655a      	str	r2, [r3, #84]	@ 0x54
 800ebf0:	e004      	b.n	800ebfc <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ebf2:	4b08      	ldr	r3, [pc, #32]	@ (800ec14 <ulTaskNotifyTake+0x88>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68fa      	ldr	r2, [r7, #12]
 800ebf8:	3a01      	subs	r2, #1
 800ebfa:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ebfc:	4b05      	ldr	r3, [pc, #20]	@ (800ec14 <ulTaskNotifyTake+0x88>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800ec06:	f7fd ff29 	bl	800ca5c <vPortExitCritical>

		return ulReturn;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
	}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	240047a0 	.word	0x240047a0
 800ec18:	e000ed04 	.word	0xe000ed04

0800ec1c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b08a      	sub	sp, #40	@ 0x28
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10b      	bne.n	800ec44 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800ec2c:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ec30:	f383 8811 	msr	BASEPRI, r3
 800ec34:	f3bf 8f6f 	isb	sy
 800ec38:	f3bf 8f4f 	dsb	sy
 800ec3c:	61bb      	str	r3, [r7, #24]
}
 800ec3e:	bf00      	nop
 800ec40:	bf00      	nop
 800ec42:	e7fd      	b.n	800ec40 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec44:	f7fd ffb8 	bl	800cbb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800ec4c:	f3ef 8211 	mrs	r2, BASEPRI
 800ec50:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ec54:	f383 8811 	msr	BASEPRI, r3
 800ec58:	f3bf 8f6f 	isb	sy
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	617a      	str	r2, [r7, #20]
 800ec62:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ec64:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec66:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ec68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ec6e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ec70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec72:	2202      	movs	r2, #2
 800ec74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800ec78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec7c:	1c5a      	adds	r2, r3, #1
 800ec7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec80:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ec82:	7ffb      	ldrb	r3, [r7, #31]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d147      	bne.n	800ed18 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ec88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00b      	beq.n	800eca8 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800ec90:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	60fb      	str	r3, [r7, #12]
}
 800eca2:	bf00      	nop
 800eca4:	bf00      	nop
 800eca6:	e7fd      	b.n	800eca4 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eca8:	4b20      	ldr	r3, [pc, #128]	@ (800ed2c <vTaskNotifyGiveFromISR+0x110>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d11d      	bne.n	800ecec <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fd fd47 	bl	800c748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecbe:	4b1c      	ldr	r3, [pc, #112]	@ (800ed30 <vTaskNotifyGiveFromISR+0x114>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d903      	bls.n	800ecce <vTaskNotifyGiveFromISR+0xb2>
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecca:	4a19      	ldr	r2, [pc, #100]	@ (800ed30 <vTaskNotifyGiveFromISR+0x114>)
 800eccc:	6013      	str	r3, [r2, #0]
 800ecce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecd2:	4613      	mov	r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4a16      	ldr	r2, [pc, #88]	@ (800ed34 <vTaskNotifyGiveFromISR+0x118>)
 800ecdc:	441a      	add	r2, r3
 800ecde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece0:	3304      	adds	r3, #4
 800ece2:	4619      	mov	r1, r3
 800ece4:	4610      	mov	r0, r2
 800ece6:	f7fd fcd2 	bl	800c68e <vListInsertEnd>
 800ecea:	e005      	b.n	800ecf8 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ecec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecee:	3318      	adds	r3, #24
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	4811      	ldr	r0, [pc, #68]	@ (800ed38 <vTaskNotifyGiveFromISR+0x11c>)
 800ecf4:	f7fd fccb 	bl	800c68e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ed3c <vTaskNotifyGiveFromISR+0x120>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d908      	bls.n	800ed18 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ed12:	4b0b      	ldr	r3, [pc, #44]	@ (800ed40 <vTaskNotifyGiveFromISR+0x124>)
 800ed14:	2201      	movs	r2, #1
 800ed16:	601a      	str	r2, [r3, #0]
 800ed18:	6a3b      	ldr	r3, [r7, #32]
 800ed1a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	f383 8811 	msr	BASEPRI, r3
}
 800ed22:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800ed24:	bf00      	nop
 800ed26:	3728      	adds	r7, #40	@ 0x28
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	24004c9c 	.word	0x24004c9c
 800ed30:	24004c7c 	.word	0x24004c7c
 800ed34:	240047a4 	.word	0x240047a4
 800ed38:	24004c34 	.word	0x24004c34
 800ed3c:	240047a0 	.word	0x240047a0
 800ed40:	24004c88 	.word	0x24004c88

0800ed44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed4e:	4b21      	ldr	r3, [pc, #132]	@ (800edd4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed54:	4b20      	ldr	r3, [pc, #128]	@ (800edd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	3304      	adds	r3, #4
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fd fcf4 	bl	800c748 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed66:	d10a      	bne.n	800ed7e <prvAddCurrentTaskToDelayedList+0x3a>
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d007      	beq.n	800ed7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed6e:	4b1a      	ldr	r3, [pc, #104]	@ (800edd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	3304      	adds	r3, #4
 800ed74:	4619      	mov	r1, r3
 800ed76:	4819      	ldr	r0, [pc, #100]	@ (800eddc <prvAddCurrentTaskToDelayedList+0x98>)
 800ed78:	f7fd fc89 	bl	800c68e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ed7c:	e026      	b.n	800edcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ed7e:	68fa      	ldr	r2, [r7, #12]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	4413      	add	r3, r2
 800ed84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed86:	4b14      	ldr	r3, [pc, #80]	@ (800edd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed8e:	68ba      	ldr	r2, [r7, #8]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d209      	bcs.n	800edaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed96:	4b12      	ldr	r3, [pc, #72]	@ (800ede0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	4b0f      	ldr	r3, [pc, #60]	@ (800edd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	3304      	adds	r3, #4
 800eda0:	4619      	mov	r1, r3
 800eda2:	4610      	mov	r0, r2
 800eda4:	f7fd fc97 	bl	800c6d6 <vListInsert>
}
 800eda8:	e010      	b.n	800edcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edaa:	4b0e      	ldr	r3, [pc, #56]	@ (800ede4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	4b0a      	ldr	r3, [pc, #40]	@ (800edd8 <prvAddCurrentTaskToDelayedList+0x94>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	3304      	adds	r3, #4
 800edb4:	4619      	mov	r1, r3
 800edb6:	4610      	mov	r0, r2
 800edb8:	f7fd fc8d 	bl	800c6d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800edbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ede8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	68ba      	ldr	r2, [r7, #8]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d202      	bcs.n	800edcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800edc6:	4a08      	ldr	r2, [pc, #32]	@ (800ede8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	6013      	str	r3, [r2, #0]
}
 800edcc:	bf00      	nop
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	24004c78 	.word	0x24004c78
 800edd8:	240047a0 	.word	0x240047a0
 800eddc:	24004c60 	.word	0x24004c60
 800ede0:	24004c30 	.word	0x24004c30
 800ede4:	24004c2c 	.word	0x24004c2c
 800ede8:	24004c94 	.word	0x24004c94

0800edec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b08a      	sub	sp, #40	@ 0x28
 800edf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800edf2:	2300      	movs	r3, #0
 800edf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800edf6:	f000 fb13 	bl	800f420 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800edfa:	4b1d      	ldr	r3, [pc, #116]	@ (800ee70 <xTimerCreateTimerTask+0x84>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d021      	beq.n	800ee46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ee02:	2300      	movs	r3, #0
 800ee04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ee06:	2300      	movs	r3, #0
 800ee08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee0a:	1d3a      	adds	r2, r7, #4
 800ee0c:	f107 0108 	add.w	r1, r7, #8
 800ee10:	f107 030c 	add.w	r3, r7, #12
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fd f9ed 	bl	800c1f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee1a:	6879      	ldr	r1, [r7, #4]
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	68fa      	ldr	r2, [r7, #12]
 800ee20:	9202      	str	r2, [sp, #8]
 800ee22:	9301      	str	r3, [sp, #4]
 800ee24:	2302      	movs	r3, #2
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	2300      	movs	r3, #0
 800ee2a:	460a      	mov	r2, r1
 800ee2c:	4911      	ldr	r1, [pc, #68]	@ (800ee74 <xTimerCreateTimerTask+0x88>)
 800ee2e:	4812      	ldr	r0, [pc, #72]	@ (800ee78 <xTimerCreateTimerTask+0x8c>)
 800ee30:	f7fe fe1a 	bl	800da68 <xTaskCreateStatic>
 800ee34:	4603      	mov	r3, r0
 800ee36:	4a11      	ldr	r2, [pc, #68]	@ (800ee7c <xTimerCreateTimerTask+0x90>)
 800ee38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ee3a:	4b10      	ldr	r3, [pc, #64]	@ (800ee7c <xTimerCreateTimerTask+0x90>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ee42:	2301      	movs	r3, #1
 800ee44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10b      	bne.n	800ee64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ee4c:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ee50:	f383 8811 	msr	BASEPRI, r3
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	f3bf 8f4f 	dsb	sy
 800ee5c:	613b      	str	r3, [r7, #16]
}
 800ee5e:	bf00      	nop
 800ee60:	bf00      	nop
 800ee62:	e7fd      	b.n	800ee60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ee64:	697b      	ldr	r3, [r7, #20]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3718      	adds	r7, #24
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	24004cd0 	.word	0x24004cd0
 800ee74:	08013830 	.word	0x08013830
 800ee78:	0800efb9 	.word	0x0800efb9
 800ee7c:	24004cd4 	.word	0x24004cd4

0800ee80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b08a      	sub	sp, #40	@ 0x28
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d10b      	bne.n	800eeb0 <xTimerGenericCommand+0x30>
	__asm volatile
 800ee98:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ee9c:	f383 8811 	msr	BASEPRI, r3
 800eea0:	f3bf 8f6f 	isb	sy
 800eea4:	f3bf 8f4f 	dsb	sy
 800eea8:	623b      	str	r3, [r7, #32]
}
 800eeaa:	bf00      	nop
 800eeac:	bf00      	nop
 800eeae:	e7fd      	b.n	800eeac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eeb0:	4b19      	ldr	r3, [pc, #100]	@ (800ef18 <xTimerGenericCommand+0x98>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d02a      	beq.n	800ef0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	2b05      	cmp	r3, #5
 800eec8:	dc18      	bgt.n	800eefc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eeca:	f7ff fcd1 	bl	800e870 <xTaskGetSchedulerState>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b02      	cmp	r3, #2
 800eed2:	d109      	bne.n	800eee8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eed4:	4b10      	ldr	r3, [pc, #64]	@ (800ef18 <xTimerGenericCommand+0x98>)
 800eed6:	6818      	ldr	r0, [r3, #0]
 800eed8:	f107 0110 	add.w	r1, r7, #16
 800eedc:	2300      	movs	r3, #0
 800eede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eee0:	f7fe f8aa 	bl	800d038 <xQueueGenericSend>
 800eee4:	6278      	str	r0, [r7, #36]	@ 0x24
 800eee6:	e012      	b.n	800ef0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eee8:	4b0b      	ldr	r3, [pc, #44]	@ (800ef18 <xTimerGenericCommand+0x98>)
 800eeea:	6818      	ldr	r0, [r3, #0]
 800eeec:	f107 0110 	add.w	r1, r7, #16
 800eef0:	2300      	movs	r3, #0
 800eef2:	2200      	movs	r2, #0
 800eef4:	f7fe f8a0 	bl	800d038 <xQueueGenericSend>
 800eef8:	6278      	str	r0, [r7, #36]	@ 0x24
 800eefa:	e008      	b.n	800ef0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eefc:	4b06      	ldr	r3, [pc, #24]	@ (800ef18 <xTimerGenericCommand+0x98>)
 800eefe:	6818      	ldr	r0, [r3, #0]
 800ef00:	f107 0110 	add.w	r1, r7, #16
 800ef04:	2300      	movs	r3, #0
 800ef06:	683a      	ldr	r2, [r7, #0]
 800ef08:	f7fe f998 	bl	800d23c <xQueueGenericSendFromISR>
 800ef0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3728      	adds	r7, #40	@ 0x28
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	24004cd0 	.word	0x24004cd0

0800ef1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b088      	sub	sp, #32
 800ef20:	af02      	add	r7, sp, #8
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef26:	4b23      	ldr	r3, [pc, #140]	@ (800efb4 <prvProcessExpiredTimer+0x98>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	3304      	adds	r3, #4
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7fd fc07 	bl	800c748 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef40:	f003 0304 	and.w	r3, r3, #4
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d023      	beq.n	800ef90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	699a      	ldr	r2, [r3, #24]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	18d1      	adds	r1, r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	683a      	ldr	r2, [r7, #0]
 800ef54:	6978      	ldr	r0, [r7, #20]
 800ef56:	f000 f8d5 	bl	800f104 <prvInsertTimerInActiveList>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d020      	beq.n	800efa2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef60:	2300      	movs	r3, #0
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	2300      	movs	r3, #0
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	2100      	movs	r1, #0
 800ef6a:	6978      	ldr	r0, [r7, #20]
 800ef6c:	f7ff ff88 	bl	800ee80 <xTimerGenericCommand>
 800ef70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d114      	bne.n	800efa2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ef78:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800ef7c:	f383 8811 	msr	BASEPRI, r3
 800ef80:	f3bf 8f6f 	isb	sy
 800ef84:	f3bf 8f4f 	dsb	sy
 800ef88:	60fb      	str	r3, [r7, #12]
}
 800ef8a:	bf00      	nop
 800ef8c:	bf00      	nop
 800ef8e:	e7fd      	b.n	800ef8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ef96:	f023 0301 	bic.w	r3, r3, #1
 800ef9a:	b2da      	uxtb	r2, r3
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	6a1b      	ldr	r3, [r3, #32]
 800efa6:	6978      	ldr	r0, [r7, #20]
 800efa8:	4798      	blx	r3
}
 800efaa:	bf00      	nop
 800efac:	3718      	adds	r7, #24
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	24004cc8 	.word	0x24004cc8

0800efb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800efc0:	f107 0308 	add.w	r3, r7, #8
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 f859 	bl	800f07c <prvGetNextExpireTime>
 800efca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	4619      	mov	r1, r3
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f000 f805 	bl	800efe0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800efd6:	f000 f8d7 	bl	800f188 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800efda:	bf00      	nop
 800efdc:	e7f0      	b.n	800efc0 <prvTimerTask+0x8>
	...

0800efe0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800efea:	f7ff f801 	bl	800dff0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efee:	f107 0308 	add.w	r3, r7, #8
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 f866 	bl	800f0c4 <prvSampleTimeNow>
 800eff8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d130      	bne.n	800f062 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d10a      	bne.n	800f01c <prvProcessTimerOrBlockTask+0x3c>
 800f006:	687a      	ldr	r2, [r7, #4]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d806      	bhi.n	800f01c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f00e:	f7fe fffd 	bl	800e00c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f012:	68f9      	ldr	r1, [r7, #12]
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7ff ff81 	bl	800ef1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f01a:	e024      	b.n	800f066 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d008      	beq.n	800f034 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f022:	4b13      	ldr	r3, [pc, #76]	@ (800f070 <prvProcessTimerOrBlockTask+0x90>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d101      	bne.n	800f030 <prvProcessTimerOrBlockTask+0x50>
 800f02c:	2301      	movs	r3, #1
 800f02e:	e000      	b.n	800f032 <prvProcessTimerOrBlockTask+0x52>
 800f030:	2300      	movs	r3, #0
 800f032:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f034:	4b0f      	ldr	r3, [pc, #60]	@ (800f074 <prvProcessTimerOrBlockTask+0x94>)
 800f036:	6818      	ldr	r0, [r3, #0]
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	1ad3      	subs	r3, r2, r3
 800f03e:	683a      	ldr	r2, [r7, #0]
 800f040:	4619      	mov	r1, r3
 800f042:	f7fe fcdd 	bl	800da00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f046:	f7fe ffe1 	bl	800e00c <xTaskResumeAll>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10a      	bne.n	800f066 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f050:	4b09      	ldr	r3, [pc, #36]	@ (800f078 <prvProcessTimerOrBlockTask+0x98>)
 800f052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f056:	601a      	str	r2, [r3, #0]
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	f3bf 8f6f 	isb	sy
}
 800f060:	e001      	b.n	800f066 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f062:	f7fe ffd3 	bl	800e00c <xTaskResumeAll>
}
 800f066:	bf00      	nop
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	24004ccc 	.word	0x24004ccc
 800f074:	24004cd0 	.word	0x24004cd0
 800f078:	e000ed04 	.word	0xe000ed04

0800f07c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f07c:	b480      	push	{r7}
 800f07e:	b085      	sub	sp, #20
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f084:	4b0e      	ldr	r3, [pc, #56]	@ (800f0c0 <prvGetNextExpireTime+0x44>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d101      	bne.n	800f092 <prvGetNextExpireTime+0x16>
 800f08e:	2201      	movs	r2, #1
 800f090:	e000      	b.n	800f094 <prvGetNextExpireTime+0x18>
 800f092:	2200      	movs	r2, #0
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d105      	bne.n	800f0ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0a0:	4b07      	ldr	r3, [pc, #28]	@ (800f0c0 <prvGetNextExpireTime+0x44>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	60fb      	str	r3, [r7, #12]
 800f0aa:	e001      	b.n	800f0b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3714      	adds	r7, #20
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	24004cc8 	.word	0x24004cc8

0800f0c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f0cc:	f7ff f83c 	bl	800e148 <xTaskGetTickCount>
 800f0d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800f100 <prvSampleTimeNow+0x3c>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68fa      	ldr	r2, [r7, #12]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d205      	bcs.n	800f0e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f0dc:	f000 f93a 	bl	800f354 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	e002      	b.n	800f0ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f0ee:	4a04      	ldr	r2, [pc, #16]	@ (800f100 <prvSampleTimeNow+0x3c>)
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	24004cd8 	.word	0x24004cd8

0800f104 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b086      	sub	sp, #24
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
 800f110:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f112:	2300      	movs	r3, #0
 800f114:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	429a      	cmp	r2, r3
 800f128:	d812      	bhi.n	800f150 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	1ad2      	subs	r2, r2, r3
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	699b      	ldr	r3, [r3, #24]
 800f134:	429a      	cmp	r2, r3
 800f136:	d302      	bcc.n	800f13e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f138:	2301      	movs	r3, #1
 800f13a:	617b      	str	r3, [r7, #20]
 800f13c:	e01b      	b.n	800f176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f13e:	4b10      	ldr	r3, [pc, #64]	@ (800f180 <prvInsertTimerInActiveList+0x7c>)
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	3304      	adds	r3, #4
 800f146:	4619      	mov	r1, r3
 800f148:	4610      	mov	r0, r2
 800f14a:	f7fd fac4 	bl	800c6d6 <vListInsert>
 800f14e:	e012      	b.n	800f176 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	429a      	cmp	r2, r3
 800f156:	d206      	bcs.n	800f166 <prvInsertTimerInActiveList+0x62>
 800f158:	68ba      	ldr	r2, [r7, #8]
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d302      	bcc.n	800f166 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f160:	2301      	movs	r3, #1
 800f162:	617b      	str	r3, [r7, #20]
 800f164:	e007      	b.n	800f176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f166:	4b07      	ldr	r3, [pc, #28]	@ (800f184 <prvInsertTimerInActiveList+0x80>)
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	3304      	adds	r3, #4
 800f16e:	4619      	mov	r1, r3
 800f170:	4610      	mov	r0, r2
 800f172:	f7fd fab0 	bl	800c6d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f176:	697b      	ldr	r3, [r7, #20]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3718      	adds	r7, #24
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}
 800f180:	24004ccc 	.word	0x24004ccc
 800f184:	24004cc8 	.word	0x24004cc8

0800f188 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08e      	sub	sp, #56	@ 0x38
 800f18c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f18e:	e0ce      	b.n	800f32e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	da19      	bge.n	800f1ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f196:	1d3b      	adds	r3, r7, #4
 800f198:	3304      	adds	r3, #4
 800f19a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d10b      	bne.n	800f1ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f1a2:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800f1a6:	f383 8811 	msr	BASEPRI, r3
 800f1aa:	f3bf 8f6f 	isb	sy
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	61fb      	str	r3, [r7, #28]
}
 800f1b4:	bf00      	nop
 800f1b6:	bf00      	nop
 800f1b8:	e7fd      	b.n	800f1b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1c0:	6850      	ldr	r0, [r2, #4]
 800f1c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1c4:	6892      	ldr	r2, [r2, #8]
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f2c0 80ae 	blt.w	800f32e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d8:	695b      	ldr	r3, [r3, #20]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d004      	beq.n	800f1e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e0:	3304      	adds	r3, #4
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fd fab0 	bl	800c748 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1e8:	463b      	mov	r3, r7
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7ff ff6a 	bl	800f0c4 <prvSampleTimeNow>
 800f1f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2b09      	cmp	r3, #9
 800f1f6:	f200 8097 	bhi.w	800f328 <prvProcessReceivedCommands+0x1a0>
 800f1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f200 <prvProcessReceivedCommands+0x78>)
 800f1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f200:	0800f229 	.word	0x0800f229
 800f204:	0800f229 	.word	0x0800f229
 800f208:	0800f229 	.word	0x0800f229
 800f20c:	0800f29f 	.word	0x0800f29f
 800f210:	0800f2b3 	.word	0x0800f2b3
 800f214:	0800f2ff 	.word	0x0800f2ff
 800f218:	0800f229 	.word	0x0800f229
 800f21c:	0800f229 	.word	0x0800f229
 800f220:	0800f29f 	.word	0x0800f29f
 800f224:	0800f2b3 	.word	0x0800f2b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f22a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f22e:	f043 0301 	orr.w	r3, r3, #1
 800f232:	b2da      	uxtb	r2, r3
 800f234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f236:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f23e:	699b      	ldr	r3, [r3, #24]
 800f240:	18d1      	adds	r1, r2, r3
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f248:	f7ff ff5c 	bl	800f104 <prvInsertTimerInActiveList>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d06c      	beq.n	800f32c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f254:	6a1b      	ldr	r3, [r3, #32]
 800f256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f258:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f25c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f260:	f003 0304 	and.w	r3, r3, #4
 800f264:	2b00      	cmp	r3, #0
 800f266:	d061      	beq.n	800f32c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f26c:	699b      	ldr	r3, [r3, #24]
 800f26e:	441a      	add	r2, r3
 800f270:	2300      	movs	r3, #0
 800f272:	9300      	str	r3, [sp, #0]
 800f274:	2300      	movs	r3, #0
 800f276:	2100      	movs	r1, #0
 800f278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f27a:	f7ff fe01 	bl	800ee80 <xTimerGenericCommand>
 800f27e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f280:	6a3b      	ldr	r3, [r7, #32]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d152      	bne.n	800f32c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f286:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800f28a:	f383 8811 	msr	BASEPRI, r3
 800f28e:	f3bf 8f6f 	isb	sy
 800f292:	f3bf 8f4f 	dsb	sy
 800f296:	61bb      	str	r3, [r7, #24]
}
 800f298:	bf00      	nop
 800f29a:	bf00      	nop
 800f29c:	e7fd      	b.n	800f29a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2a4:	f023 0301 	bic.w	r3, r3, #1
 800f2a8:	b2da      	uxtb	r2, r3
 800f2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f2b0:	e03d      	b.n	800f32e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f2b8:	f043 0301 	orr.w	r3, r3, #1
 800f2bc:	b2da      	uxtb	r2, r3
 800f2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f2c4:	68ba      	ldr	r2, [r7, #8]
 800f2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2cc:	699b      	ldr	r3, [r3, #24]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d10b      	bne.n	800f2ea <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f2d2:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800f2d6:	f383 8811 	msr	BASEPRI, r3
 800f2da:	f3bf 8f6f 	isb	sy
 800f2de:	f3bf 8f4f 	dsb	sy
 800f2e2:	617b      	str	r3, [r7, #20]
}
 800f2e4:	bf00      	nop
 800f2e6:	bf00      	nop
 800f2e8:	e7fd      	b.n	800f2e6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ec:	699a      	ldr	r2, [r3, #24]
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f0:	18d1      	adds	r1, r2, r3
 800f2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2f8:	f7ff ff04 	bl	800f104 <prvInsertTimerInActiveList>
					break;
 800f2fc:	e017      	b.n	800f32e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f304:	f003 0302 	and.w	r3, r3, #2
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d103      	bne.n	800f314 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f30c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f30e:	f7fd f859 	bl	800c3c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f312:	e00c      	b.n	800f32e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f316:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f31a:	f023 0301 	bic.w	r3, r3, #1
 800f31e:	b2da      	uxtb	r2, r3
 800f320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f322:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f326:	e002      	b.n	800f32e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f328:	bf00      	nop
 800f32a:	e000      	b.n	800f32e <prvProcessReceivedCommands+0x1a6>
					break;
 800f32c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f32e:	4b08      	ldr	r3, [pc, #32]	@ (800f350 <prvProcessReceivedCommands+0x1c8>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	1d39      	adds	r1, r7, #4
 800f334:	2200      	movs	r2, #0
 800f336:	4618      	mov	r0, r3
 800f338:	f7fe f81e 	bl	800d378 <xQueueReceive>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	f47f af26 	bne.w	800f190 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f344:	bf00      	nop
 800f346:	bf00      	nop
 800f348:	3730      	adds	r7, #48	@ 0x30
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	24004cd0 	.word	0x24004cd0

0800f354 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b088      	sub	sp, #32
 800f358:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f35a:	e049      	b.n	800f3f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f35c:	4b2e      	ldr	r3, [pc, #184]	@ (800f418 <prvSwitchTimerLists+0xc4>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f366:	4b2c      	ldr	r3, [pc, #176]	@ (800f418 <prvSwitchTimerLists+0xc4>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	3304      	adds	r3, #4
 800f374:	4618      	mov	r0, r3
 800f376:	f7fd f9e7 	bl	800c748 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	6a1b      	ldr	r3, [r3, #32]
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f388:	f003 0304 	and.w	r3, r3, #4
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d02f      	beq.n	800f3f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	693a      	ldr	r2, [r7, #16]
 800f396:	4413      	add	r3, r2
 800f398:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f39a:	68ba      	ldr	r2, [r7, #8]
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d90e      	bls.n	800f3c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3ae:	4b1a      	ldr	r3, [pc, #104]	@ (800f418 <prvSwitchTimerLists+0xc4>)
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	3304      	adds	r3, #4
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	4610      	mov	r0, r2
 800f3ba:	f7fd f98c 	bl	800c6d6 <vListInsert>
 800f3be:	e017      	b.n	800f3f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	693a      	ldr	r2, [r7, #16]
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7ff fd58 	bl	800ee80 <xTimerGenericCommand>
 800f3d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d10b      	bne.n	800f3f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f3d8:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800f3dc:	f383 8811 	msr	BASEPRI, r3
 800f3e0:	f3bf 8f6f 	isb	sy
 800f3e4:	f3bf 8f4f 	dsb	sy
 800f3e8:	603b      	str	r3, [r7, #0]
}
 800f3ea:	bf00      	nop
 800f3ec:	bf00      	nop
 800f3ee:	e7fd      	b.n	800f3ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3f0:	4b09      	ldr	r3, [pc, #36]	@ (800f418 <prvSwitchTimerLists+0xc4>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d1b0      	bne.n	800f35c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f3fa:	4b07      	ldr	r3, [pc, #28]	@ (800f418 <prvSwitchTimerLists+0xc4>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f400:	4b06      	ldr	r3, [pc, #24]	@ (800f41c <prvSwitchTimerLists+0xc8>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a04      	ldr	r2, [pc, #16]	@ (800f418 <prvSwitchTimerLists+0xc4>)
 800f406:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f408:	4a04      	ldr	r2, [pc, #16]	@ (800f41c <prvSwitchTimerLists+0xc8>)
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	6013      	str	r3, [r2, #0]
}
 800f40e:	bf00      	nop
 800f410:	3718      	adds	r7, #24
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
 800f416:	bf00      	nop
 800f418:	24004cc8 	.word	0x24004cc8
 800f41c:	24004ccc 	.word	0x24004ccc

0800f420 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f426:	f7fd fae7 	bl	800c9f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f42a:	4b15      	ldr	r3, [pc, #84]	@ (800f480 <prvCheckForValidListAndQueue+0x60>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d120      	bne.n	800f474 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f432:	4814      	ldr	r0, [pc, #80]	@ (800f484 <prvCheckForValidListAndQueue+0x64>)
 800f434:	f7fd f8fe 	bl	800c634 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f438:	4813      	ldr	r0, [pc, #76]	@ (800f488 <prvCheckForValidListAndQueue+0x68>)
 800f43a:	f7fd f8fb 	bl	800c634 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f43e:	4b13      	ldr	r3, [pc, #76]	@ (800f48c <prvCheckForValidListAndQueue+0x6c>)
 800f440:	4a10      	ldr	r2, [pc, #64]	@ (800f484 <prvCheckForValidListAndQueue+0x64>)
 800f442:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f444:	4b12      	ldr	r3, [pc, #72]	@ (800f490 <prvCheckForValidListAndQueue+0x70>)
 800f446:	4a10      	ldr	r2, [pc, #64]	@ (800f488 <prvCheckForValidListAndQueue+0x68>)
 800f448:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f44a:	2300      	movs	r3, #0
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	4b11      	ldr	r3, [pc, #68]	@ (800f494 <prvCheckForValidListAndQueue+0x74>)
 800f450:	4a11      	ldr	r2, [pc, #68]	@ (800f498 <prvCheckForValidListAndQueue+0x78>)
 800f452:	2110      	movs	r1, #16
 800f454:	200a      	movs	r0, #10
 800f456:	f7fd fc5b 	bl	800cd10 <xQueueGenericCreateStatic>
 800f45a:	4603      	mov	r3, r0
 800f45c:	4a08      	ldr	r2, [pc, #32]	@ (800f480 <prvCheckForValidListAndQueue+0x60>)
 800f45e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f460:	4b07      	ldr	r3, [pc, #28]	@ (800f480 <prvCheckForValidListAndQueue+0x60>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d005      	beq.n	800f474 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f468:	4b05      	ldr	r3, [pc, #20]	@ (800f480 <prvCheckForValidListAndQueue+0x60>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	490b      	ldr	r1, [pc, #44]	@ (800f49c <prvCheckForValidListAndQueue+0x7c>)
 800f46e:	4618      	mov	r0, r3
 800f470:	f7fe fa9c 	bl	800d9ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f474:	f7fd faf2 	bl	800ca5c <vPortExitCritical>
}
 800f478:	bf00      	nop
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	24004cd0 	.word	0x24004cd0
 800f484:	24004ca0 	.word	0x24004ca0
 800f488:	24004cb4 	.word	0x24004cb4
 800f48c:	24004cc8 	.word	0x24004cc8
 800f490:	24004ccc 	.word	0x24004ccc
 800f494:	24004d7c 	.word	0x24004d7c
 800f498:	24004cdc 	.word	0x24004cdc
 800f49c:	08013838 	.word	0x08013838

0800f4a0 <atof>:
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	f000 bdb7 	b.w	8010014 <strtod>

0800f4a6 <sulp>:
 800f4a6:	b570      	push	{r4, r5, r6, lr}
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	460d      	mov	r5, r1
 800f4ac:	4616      	mov	r6, r2
 800f4ae:	ec45 4b10 	vmov	d0, r4, r5
 800f4b2:	f003 f97b 	bl	80127ac <__ulp>
 800f4b6:	b17e      	cbz	r6, 800f4d8 <sulp+0x32>
 800f4b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f4bc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	dd09      	ble.n	800f4d8 <sulp+0x32>
 800f4c4:	051b      	lsls	r3, r3, #20
 800f4c6:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800f4ca:	2000      	movs	r0, #0
 800f4cc:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800f4d0:	ec41 0b17 	vmov	d7, r0, r1
 800f4d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f4d8:	bd70      	pop	{r4, r5, r6, pc}
 800f4da:	0000      	movs	r0, r0
 800f4dc:	0000      	movs	r0, r0
	...

0800f4e0 <_strtod_l>:
 800f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e4:	ed2d 8b0a 	vpush	{d8-d12}
 800f4e8:	b097      	sub	sp, #92	@ 0x5c
 800f4ea:	4688      	mov	r8, r1
 800f4ec:	920e      	str	r2, [sp, #56]	@ 0x38
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	9212      	str	r2, [sp, #72]	@ 0x48
 800f4f2:	9005      	str	r0, [sp, #20]
 800f4f4:	f04f 0a00 	mov.w	sl, #0
 800f4f8:	f04f 0b00 	mov.w	fp, #0
 800f4fc:	460a      	mov	r2, r1
 800f4fe:	9211      	str	r2, [sp, #68]	@ 0x44
 800f500:	7811      	ldrb	r1, [r2, #0]
 800f502:	292b      	cmp	r1, #43	@ 0x2b
 800f504:	d04c      	beq.n	800f5a0 <_strtod_l+0xc0>
 800f506:	d839      	bhi.n	800f57c <_strtod_l+0x9c>
 800f508:	290d      	cmp	r1, #13
 800f50a:	d833      	bhi.n	800f574 <_strtod_l+0x94>
 800f50c:	2908      	cmp	r1, #8
 800f50e:	d833      	bhi.n	800f578 <_strtod_l+0x98>
 800f510:	2900      	cmp	r1, #0
 800f512:	d03c      	beq.n	800f58e <_strtod_l+0xae>
 800f514:	2200      	movs	r2, #0
 800f516:	9208      	str	r2, [sp, #32]
 800f518:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800f51a:	782a      	ldrb	r2, [r5, #0]
 800f51c:	2a30      	cmp	r2, #48	@ 0x30
 800f51e:	f040 80b7 	bne.w	800f690 <_strtod_l+0x1b0>
 800f522:	786a      	ldrb	r2, [r5, #1]
 800f524:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f528:	2a58      	cmp	r2, #88	@ 0x58
 800f52a:	d170      	bne.n	800f60e <_strtod_l+0x12e>
 800f52c:	9302      	str	r3, [sp, #8]
 800f52e:	9b08      	ldr	r3, [sp, #32]
 800f530:	9301      	str	r3, [sp, #4]
 800f532:	ab12      	add	r3, sp, #72	@ 0x48
 800f534:	9300      	str	r3, [sp, #0]
 800f536:	4a90      	ldr	r2, [pc, #576]	@ (800f778 <_strtod_l+0x298>)
 800f538:	9805      	ldr	r0, [sp, #20]
 800f53a:	ab13      	add	r3, sp, #76	@ 0x4c
 800f53c:	a911      	add	r1, sp, #68	@ 0x44
 800f53e:	f002 fa2f 	bl	80119a0 <__gethex>
 800f542:	f010 060f 	ands.w	r6, r0, #15
 800f546:	4604      	mov	r4, r0
 800f548:	d005      	beq.n	800f556 <_strtod_l+0x76>
 800f54a:	2e06      	cmp	r6, #6
 800f54c:	d12a      	bne.n	800f5a4 <_strtod_l+0xc4>
 800f54e:	3501      	adds	r5, #1
 800f550:	2300      	movs	r3, #0
 800f552:	9511      	str	r5, [sp, #68]	@ 0x44
 800f554:	9308      	str	r3, [sp, #32]
 800f556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f040 8537 	bne.w	800ffcc <_strtod_l+0xaec>
 800f55e:	9b08      	ldr	r3, [sp, #32]
 800f560:	ec4b ab10 	vmov	d0, sl, fp
 800f564:	b1cb      	cbz	r3, 800f59a <_strtod_l+0xba>
 800f566:	eeb1 0b40 	vneg.f64	d0, d0
 800f56a:	b017      	add	sp, #92	@ 0x5c
 800f56c:	ecbd 8b0a 	vpop	{d8-d12}
 800f570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f574:	2920      	cmp	r1, #32
 800f576:	d1cd      	bne.n	800f514 <_strtod_l+0x34>
 800f578:	3201      	adds	r2, #1
 800f57a:	e7c0      	b.n	800f4fe <_strtod_l+0x1e>
 800f57c:	292d      	cmp	r1, #45	@ 0x2d
 800f57e:	d1c9      	bne.n	800f514 <_strtod_l+0x34>
 800f580:	2101      	movs	r1, #1
 800f582:	9108      	str	r1, [sp, #32]
 800f584:	1c51      	adds	r1, r2, #1
 800f586:	9111      	str	r1, [sp, #68]	@ 0x44
 800f588:	7852      	ldrb	r2, [r2, #1]
 800f58a:	2a00      	cmp	r2, #0
 800f58c:	d1c4      	bne.n	800f518 <_strtod_l+0x38>
 800f58e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f590:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800f594:	2b00      	cmp	r3, #0
 800f596:	f040 8517 	bne.w	800ffc8 <_strtod_l+0xae8>
 800f59a:	ec4b ab10 	vmov	d0, sl, fp
 800f59e:	e7e4      	b.n	800f56a <_strtod_l+0x8a>
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	e7ee      	b.n	800f582 <_strtod_l+0xa2>
 800f5a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f5a6:	b13a      	cbz	r2, 800f5b8 <_strtod_l+0xd8>
 800f5a8:	2135      	movs	r1, #53	@ 0x35
 800f5aa:	a814      	add	r0, sp, #80	@ 0x50
 800f5ac:	f003 f9f5 	bl	801299a <__copybits>
 800f5b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f5b2:	9805      	ldr	r0, [sp, #20]
 800f5b4:	f002 fdce 	bl	8012154 <_Bfree>
 800f5b8:	1e73      	subs	r3, r6, #1
 800f5ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f5bc:	2b04      	cmp	r3, #4
 800f5be:	d806      	bhi.n	800f5ce <_strtod_l+0xee>
 800f5c0:	e8df f003 	tbb	[pc, r3]
 800f5c4:	201d0314 	.word	0x201d0314
 800f5c8:	14          	.byte	0x14
 800f5c9:	00          	.byte	0x00
 800f5ca:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800f5ce:	05e3      	lsls	r3, r4, #23
 800f5d0:	bf48      	it	mi
 800f5d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f5d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f5da:	0d1b      	lsrs	r3, r3, #20
 800f5dc:	051b      	lsls	r3, r3, #20
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1b9      	bne.n	800f556 <_strtod_l+0x76>
 800f5e2:	f001 faf7 	bl	8010bd4 <__errno>
 800f5e6:	2322      	movs	r3, #34	@ 0x22
 800f5e8:	6003      	str	r3, [r0, #0]
 800f5ea:	e7b4      	b.n	800f556 <_strtod_l+0x76>
 800f5ec:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800f5f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f5f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f5f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f5fc:	e7e7      	b.n	800f5ce <_strtod_l+0xee>
 800f5fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f780 <_strtod_l+0x2a0>
 800f602:	e7e4      	b.n	800f5ce <_strtod_l+0xee>
 800f604:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f608:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f60c:	e7df      	b.n	800f5ce <_strtod_l+0xee>
 800f60e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f610:	1c5a      	adds	r2, r3, #1
 800f612:	9211      	str	r2, [sp, #68]	@ 0x44
 800f614:	785b      	ldrb	r3, [r3, #1]
 800f616:	2b30      	cmp	r3, #48	@ 0x30
 800f618:	d0f9      	beq.n	800f60e <_strtod_l+0x12e>
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d09b      	beq.n	800f556 <_strtod_l+0x76>
 800f61e:	2301      	movs	r3, #1
 800f620:	9307      	str	r3, [sp, #28]
 800f622:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f624:	930a      	str	r3, [sp, #40]	@ 0x28
 800f626:	2300      	movs	r3, #0
 800f628:	9306      	str	r3, [sp, #24]
 800f62a:	4699      	mov	r9, r3
 800f62c:	461d      	mov	r5, r3
 800f62e:	220a      	movs	r2, #10
 800f630:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800f632:	7804      	ldrb	r4, [r0, #0]
 800f634:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800f638:	b2d9      	uxtb	r1, r3
 800f63a:	2909      	cmp	r1, #9
 800f63c:	d92a      	bls.n	800f694 <_strtod_l+0x1b4>
 800f63e:	494f      	ldr	r1, [pc, #316]	@ (800f77c <_strtod_l+0x29c>)
 800f640:	2201      	movs	r2, #1
 800f642:	f001 fa6a 	bl	8010b1a <strncmp>
 800f646:	b398      	cbz	r0, 800f6b0 <_strtod_l+0x1d0>
 800f648:	2000      	movs	r0, #0
 800f64a:	4622      	mov	r2, r4
 800f64c:	462b      	mov	r3, r5
 800f64e:	4607      	mov	r7, r0
 800f650:	4601      	mov	r1, r0
 800f652:	2a65      	cmp	r2, #101	@ 0x65
 800f654:	d001      	beq.n	800f65a <_strtod_l+0x17a>
 800f656:	2a45      	cmp	r2, #69	@ 0x45
 800f658:	d118      	bne.n	800f68c <_strtod_l+0x1ac>
 800f65a:	b91b      	cbnz	r3, 800f664 <_strtod_l+0x184>
 800f65c:	9b07      	ldr	r3, [sp, #28]
 800f65e:	4303      	orrs	r3, r0
 800f660:	d095      	beq.n	800f58e <_strtod_l+0xae>
 800f662:	2300      	movs	r3, #0
 800f664:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800f668:	f108 0201 	add.w	r2, r8, #1
 800f66c:	9211      	str	r2, [sp, #68]	@ 0x44
 800f66e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f672:	2a2b      	cmp	r2, #43	@ 0x2b
 800f674:	d074      	beq.n	800f760 <_strtod_l+0x280>
 800f676:	2a2d      	cmp	r2, #45	@ 0x2d
 800f678:	d07a      	beq.n	800f770 <_strtod_l+0x290>
 800f67a:	f04f 0e00 	mov.w	lr, #0
 800f67e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800f682:	2c09      	cmp	r4, #9
 800f684:	f240 8082 	bls.w	800f78c <_strtod_l+0x2ac>
 800f688:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800f68c:	2400      	movs	r4, #0
 800f68e:	e09d      	b.n	800f7cc <_strtod_l+0x2ec>
 800f690:	2300      	movs	r3, #0
 800f692:	e7c5      	b.n	800f620 <_strtod_l+0x140>
 800f694:	2d08      	cmp	r5, #8
 800f696:	bfc8      	it	gt
 800f698:	9906      	ldrgt	r1, [sp, #24]
 800f69a:	f100 0001 	add.w	r0, r0, #1
 800f69e:	bfca      	itet	gt
 800f6a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f6a4:	fb02 3909 	mlale	r9, r2, r9, r3
 800f6a8:	9306      	strgt	r3, [sp, #24]
 800f6aa:	3501      	adds	r5, #1
 800f6ac:	9011      	str	r0, [sp, #68]	@ 0x44
 800f6ae:	e7bf      	b.n	800f630 <_strtod_l+0x150>
 800f6b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f6b2:	1c5a      	adds	r2, r3, #1
 800f6b4:	9211      	str	r2, [sp, #68]	@ 0x44
 800f6b6:	785a      	ldrb	r2, [r3, #1]
 800f6b8:	b3bd      	cbz	r5, 800f72a <_strtod_l+0x24a>
 800f6ba:	4607      	mov	r7, r0
 800f6bc:	462b      	mov	r3, r5
 800f6be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f6c2:	2909      	cmp	r1, #9
 800f6c4:	d912      	bls.n	800f6ec <_strtod_l+0x20c>
 800f6c6:	2101      	movs	r1, #1
 800f6c8:	e7c3      	b.n	800f652 <_strtod_l+0x172>
 800f6ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f6cc:	1c5a      	adds	r2, r3, #1
 800f6ce:	9211      	str	r2, [sp, #68]	@ 0x44
 800f6d0:	785a      	ldrb	r2, [r3, #1]
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	2a30      	cmp	r2, #48	@ 0x30
 800f6d6:	d0f8      	beq.n	800f6ca <_strtod_l+0x1ea>
 800f6d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f6dc:	2b08      	cmp	r3, #8
 800f6de:	f200 847a 	bhi.w	800ffd6 <_strtod_l+0xaf6>
 800f6e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f6e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6e6:	4607      	mov	r7, r0
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	3a30      	subs	r2, #48	@ 0x30
 800f6ee:	f100 0101 	add.w	r1, r0, #1
 800f6f2:	d014      	beq.n	800f71e <_strtod_l+0x23e>
 800f6f4:	440f      	add	r7, r1
 800f6f6:	469c      	mov	ip, r3
 800f6f8:	f04f 0e0a 	mov.w	lr, #10
 800f6fc:	f10c 0401 	add.w	r4, ip, #1
 800f700:	1ae6      	subs	r6, r4, r3
 800f702:	42b1      	cmp	r1, r6
 800f704:	dc13      	bgt.n	800f72e <_strtod_l+0x24e>
 800f706:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f70a:	1819      	adds	r1, r3, r0
 800f70c:	2908      	cmp	r1, #8
 800f70e:	f103 0301 	add.w	r3, r3, #1
 800f712:	4403      	add	r3, r0
 800f714:	dc19      	bgt.n	800f74a <_strtod_l+0x26a>
 800f716:	210a      	movs	r1, #10
 800f718:	fb01 2909 	mla	r9, r1, r9, r2
 800f71c:	2100      	movs	r1, #0
 800f71e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f720:	1c50      	adds	r0, r2, #1
 800f722:	9011      	str	r0, [sp, #68]	@ 0x44
 800f724:	7852      	ldrb	r2, [r2, #1]
 800f726:	4608      	mov	r0, r1
 800f728:	e7c9      	b.n	800f6be <_strtod_l+0x1de>
 800f72a:	4628      	mov	r0, r5
 800f72c:	e7d2      	b.n	800f6d4 <_strtod_l+0x1f4>
 800f72e:	f1bc 0f08 	cmp.w	ip, #8
 800f732:	dc03      	bgt.n	800f73c <_strtod_l+0x25c>
 800f734:	fb0e f909 	mul.w	r9, lr, r9
 800f738:	46a4      	mov	ip, r4
 800f73a:	e7df      	b.n	800f6fc <_strtod_l+0x21c>
 800f73c:	2c10      	cmp	r4, #16
 800f73e:	bfde      	ittt	le
 800f740:	9e06      	ldrle	r6, [sp, #24]
 800f742:	fb0e f606 	mulle.w	r6, lr, r6
 800f746:	9606      	strle	r6, [sp, #24]
 800f748:	e7f6      	b.n	800f738 <_strtod_l+0x258>
 800f74a:	290f      	cmp	r1, #15
 800f74c:	bfdf      	itttt	le
 800f74e:	9806      	ldrle	r0, [sp, #24]
 800f750:	210a      	movle	r1, #10
 800f752:	fb01 2200 	mlale	r2, r1, r0, r2
 800f756:	9206      	strle	r2, [sp, #24]
 800f758:	e7e0      	b.n	800f71c <_strtod_l+0x23c>
 800f75a:	2700      	movs	r7, #0
 800f75c:	2101      	movs	r1, #1
 800f75e:	e77d      	b.n	800f65c <_strtod_l+0x17c>
 800f760:	f04f 0e00 	mov.w	lr, #0
 800f764:	f108 0202 	add.w	r2, r8, #2
 800f768:	9211      	str	r2, [sp, #68]	@ 0x44
 800f76a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f76e:	e786      	b.n	800f67e <_strtod_l+0x19e>
 800f770:	f04f 0e01 	mov.w	lr, #1
 800f774:	e7f6      	b.n	800f764 <_strtod_l+0x284>
 800f776:	bf00      	nop
 800f778:	08013a90 	.word	0x08013a90
 800f77c:	080138a8 	.word	0x080138a8
 800f780:	7ff00000 	.word	0x7ff00000
 800f784:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f786:	1c54      	adds	r4, r2, #1
 800f788:	9411      	str	r4, [sp, #68]	@ 0x44
 800f78a:	7852      	ldrb	r2, [r2, #1]
 800f78c:	2a30      	cmp	r2, #48	@ 0x30
 800f78e:	d0f9      	beq.n	800f784 <_strtod_l+0x2a4>
 800f790:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800f794:	2c08      	cmp	r4, #8
 800f796:	f63f af79 	bhi.w	800f68c <_strtod_l+0x1ac>
 800f79a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800f79e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f7a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f7a4:	1c54      	adds	r4, r2, #1
 800f7a6:	9411      	str	r4, [sp, #68]	@ 0x44
 800f7a8:	7852      	ldrb	r2, [r2, #1]
 800f7aa:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800f7ae:	2e09      	cmp	r6, #9
 800f7b0:	d937      	bls.n	800f822 <_strtod_l+0x342>
 800f7b2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800f7b4:	1ba4      	subs	r4, r4, r6
 800f7b6:	2c08      	cmp	r4, #8
 800f7b8:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800f7bc:	dc02      	bgt.n	800f7c4 <_strtod_l+0x2e4>
 800f7be:	4564      	cmp	r4, ip
 800f7c0:	bfa8      	it	ge
 800f7c2:	4664      	movge	r4, ip
 800f7c4:	f1be 0f00 	cmp.w	lr, #0
 800f7c8:	d000      	beq.n	800f7cc <_strtod_l+0x2ec>
 800f7ca:	4264      	negs	r4, r4
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d14d      	bne.n	800f86c <_strtod_l+0x38c>
 800f7d0:	9b07      	ldr	r3, [sp, #28]
 800f7d2:	4318      	orrs	r0, r3
 800f7d4:	f47f aebf 	bne.w	800f556 <_strtod_l+0x76>
 800f7d8:	2900      	cmp	r1, #0
 800f7da:	f47f aed8 	bne.w	800f58e <_strtod_l+0xae>
 800f7de:	2a69      	cmp	r2, #105	@ 0x69
 800f7e0:	d027      	beq.n	800f832 <_strtod_l+0x352>
 800f7e2:	dc24      	bgt.n	800f82e <_strtod_l+0x34e>
 800f7e4:	2a49      	cmp	r2, #73	@ 0x49
 800f7e6:	d024      	beq.n	800f832 <_strtod_l+0x352>
 800f7e8:	2a4e      	cmp	r2, #78	@ 0x4e
 800f7ea:	f47f aed0 	bne.w	800f58e <_strtod_l+0xae>
 800f7ee:	4997      	ldr	r1, [pc, #604]	@ (800fa4c <_strtod_l+0x56c>)
 800f7f0:	a811      	add	r0, sp, #68	@ 0x44
 800f7f2:	f002 faf7 	bl	8011de4 <__match>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	f43f aec9 	beq.w	800f58e <_strtod_l+0xae>
 800f7fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	2b28      	cmp	r3, #40	@ 0x28
 800f802:	d12d      	bne.n	800f860 <_strtod_l+0x380>
 800f804:	4992      	ldr	r1, [pc, #584]	@ (800fa50 <_strtod_l+0x570>)
 800f806:	aa14      	add	r2, sp, #80	@ 0x50
 800f808:	a811      	add	r0, sp, #68	@ 0x44
 800f80a:	f002 faff 	bl	8011e0c <__hexnan>
 800f80e:	2805      	cmp	r0, #5
 800f810:	d126      	bne.n	800f860 <_strtod_l+0x380>
 800f812:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f814:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800f818:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f81c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f820:	e699      	b.n	800f556 <_strtod_l+0x76>
 800f822:	240a      	movs	r4, #10
 800f824:	fb04 2c0c 	mla	ip, r4, ip, r2
 800f828:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800f82c:	e7b9      	b.n	800f7a2 <_strtod_l+0x2c2>
 800f82e:	2a6e      	cmp	r2, #110	@ 0x6e
 800f830:	e7db      	b.n	800f7ea <_strtod_l+0x30a>
 800f832:	4988      	ldr	r1, [pc, #544]	@ (800fa54 <_strtod_l+0x574>)
 800f834:	a811      	add	r0, sp, #68	@ 0x44
 800f836:	f002 fad5 	bl	8011de4 <__match>
 800f83a:	2800      	cmp	r0, #0
 800f83c:	f43f aea7 	beq.w	800f58e <_strtod_l+0xae>
 800f840:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f842:	4985      	ldr	r1, [pc, #532]	@ (800fa58 <_strtod_l+0x578>)
 800f844:	3b01      	subs	r3, #1
 800f846:	a811      	add	r0, sp, #68	@ 0x44
 800f848:	9311      	str	r3, [sp, #68]	@ 0x44
 800f84a:	f002 facb 	bl	8011de4 <__match>
 800f84e:	b910      	cbnz	r0, 800f856 <_strtod_l+0x376>
 800f850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f852:	3301      	adds	r3, #1
 800f854:	9311      	str	r3, [sp, #68]	@ 0x44
 800f856:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800fa6c <_strtod_l+0x58c>
 800f85a:	f04f 0a00 	mov.w	sl, #0
 800f85e:	e67a      	b.n	800f556 <_strtod_l+0x76>
 800f860:	487e      	ldr	r0, [pc, #504]	@ (800fa5c <_strtod_l+0x57c>)
 800f862:	f001 f9fd 	bl	8010c60 <nan>
 800f866:	ec5b ab10 	vmov	sl, fp, d0
 800f86a:	e674      	b.n	800f556 <_strtod_l+0x76>
 800f86c:	ee07 9a90 	vmov	s15, r9
 800f870:	1be2      	subs	r2, r4, r7
 800f872:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f876:	2d00      	cmp	r5, #0
 800f878:	bf08      	it	eq
 800f87a:	461d      	moveq	r5, r3
 800f87c:	2b10      	cmp	r3, #16
 800f87e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f880:	461a      	mov	r2, r3
 800f882:	bfa8      	it	ge
 800f884:	2210      	movge	r2, #16
 800f886:	2b09      	cmp	r3, #9
 800f888:	ec5b ab17 	vmov	sl, fp, d7
 800f88c:	dc15      	bgt.n	800f8ba <_strtod_l+0x3da>
 800f88e:	1be1      	subs	r1, r4, r7
 800f890:	2900      	cmp	r1, #0
 800f892:	f43f ae60 	beq.w	800f556 <_strtod_l+0x76>
 800f896:	eba4 0107 	sub.w	r1, r4, r7
 800f89a:	dd72      	ble.n	800f982 <_strtod_l+0x4a2>
 800f89c:	2916      	cmp	r1, #22
 800f89e:	dc59      	bgt.n	800f954 <_strtod_l+0x474>
 800f8a0:	4b6f      	ldr	r3, [pc, #444]	@ (800fa60 <_strtod_l+0x580>)
 800f8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8a8:	ed93 7b00 	vldr	d7, [r3]
 800f8ac:	ec4b ab16 	vmov	d6, sl, fp
 800f8b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f8b4:	ec5b ab17 	vmov	sl, fp, d7
 800f8b8:	e64d      	b.n	800f556 <_strtod_l+0x76>
 800f8ba:	4969      	ldr	r1, [pc, #420]	@ (800fa60 <_strtod_l+0x580>)
 800f8bc:	eddd 6a06 	vldr	s13, [sp, #24]
 800f8c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f8c4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800f8c8:	2b0f      	cmp	r3, #15
 800f8ca:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f8ce:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f8d2:	ec5b ab16 	vmov	sl, fp, d6
 800f8d6:	ddda      	ble.n	800f88e <_strtod_l+0x3ae>
 800f8d8:	1a9a      	subs	r2, r3, r2
 800f8da:	1be1      	subs	r1, r4, r7
 800f8dc:	440a      	add	r2, r1
 800f8de:	2a00      	cmp	r2, #0
 800f8e0:	f340 8094 	ble.w	800fa0c <_strtod_l+0x52c>
 800f8e4:	f012 000f 	ands.w	r0, r2, #15
 800f8e8:	d00a      	beq.n	800f900 <_strtod_l+0x420>
 800f8ea:	495d      	ldr	r1, [pc, #372]	@ (800fa60 <_strtod_l+0x580>)
 800f8ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f8f0:	ed91 7b00 	vldr	d7, [r1]
 800f8f4:	ec4b ab16 	vmov	d6, sl, fp
 800f8f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f8fc:	ec5b ab17 	vmov	sl, fp, d7
 800f900:	f032 020f 	bics.w	r2, r2, #15
 800f904:	d073      	beq.n	800f9ee <_strtod_l+0x50e>
 800f906:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800f90a:	dd47      	ble.n	800f99c <_strtod_l+0x4bc>
 800f90c:	2400      	movs	r4, #0
 800f90e:	4625      	mov	r5, r4
 800f910:	9407      	str	r4, [sp, #28]
 800f912:	4626      	mov	r6, r4
 800f914:	9a05      	ldr	r2, [sp, #20]
 800f916:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fa6c <_strtod_l+0x58c>
 800f91a:	2322      	movs	r3, #34	@ 0x22
 800f91c:	6013      	str	r3, [r2, #0]
 800f91e:	f04f 0a00 	mov.w	sl, #0
 800f922:	9b07      	ldr	r3, [sp, #28]
 800f924:	2b00      	cmp	r3, #0
 800f926:	f43f ae16 	beq.w	800f556 <_strtod_l+0x76>
 800f92a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f92c:	9805      	ldr	r0, [sp, #20]
 800f92e:	f002 fc11 	bl	8012154 <_Bfree>
 800f932:	9805      	ldr	r0, [sp, #20]
 800f934:	4631      	mov	r1, r6
 800f936:	f002 fc0d 	bl	8012154 <_Bfree>
 800f93a:	9805      	ldr	r0, [sp, #20]
 800f93c:	4629      	mov	r1, r5
 800f93e:	f002 fc09 	bl	8012154 <_Bfree>
 800f942:	9907      	ldr	r1, [sp, #28]
 800f944:	9805      	ldr	r0, [sp, #20]
 800f946:	f002 fc05 	bl	8012154 <_Bfree>
 800f94a:	9805      	ldr	r0, [sp, #20]
 800f94c:	4621      	mov	r1, r4
 800f94e:	f002 fc01 	bl	8012154 <_Bfree>
 800f952:	e600      	b.n	800f556 <_strtod_l+0x76>
 800f954:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800f958:	1be0      	subs	r0, r4, r7
 800f95a:	4281      	cmp	r1, r0
 800f95c:	dbbc      	blt.n	800f8d8 <_strtod_l+0x3f8>
 800f95e:	4a40      	ldr	r2, [pc, #256]	@ (800fa60 <_strtod_l+0x580>)
 800f960:	f1c3 030f 	rsb	r3, r3, #15
 800f964:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f968:	ed91 7b00 	vldr	d7, [r1]
 800f96c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f96e:	ec4b ab16 	vmov	d6, sl, fp
 800f972:	1acb      	subs	r3, r1, r3
 800f974:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f978:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f97c:	ed92 6b00 	vldr	d6, [r2]
 800f980:	e796      	b.n	800f8b0 <_strtod_l+0x3d0>
 800f982:	3116      	adds	r1, #22
 800f984:	dba8      	blt.n	800f8d8 <_strtod_l+0x3f8>
 800f986:	4b36      	ldr	r3, [pc, #216]	@ (800fa60 <_strtod_l+0x580>)
 800f988:	1b3c      	subs	r4, r7, r4
 800f98a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f98e:	ed94 7b00 	vldr	d7, [r4]
 800f992:	ec4b ab16 	vmov	d6, sl, fp
 800f996:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f99a:	e78b      	b.n	800f8b4 <_strtod_l+0x3d4>
 800f99c:	2000      	movs	r0, #0
 800f99e:	ec4b ab17 	vmov	d7, sl, fp
 800f9a2:	4e30      	ldr	r6, [pc, #192]	@ (800fa64 <_strtod_l+0x584>)
 800f9a4:	1112      	asrs	r2, r2, #4
 800f9a6:	4601      	mov	r1, r0
 800f9a8:	2a01      	cmp	r2, #1
 800f9aa:	dc23      	bgt.n	800f9f4 <_strtod_l+0x514>
 800f9ac:	b108      	cbz	r0, 800f9b2 <_strtod_l+0x4d2>
 800f9ae:	ec5b ab17 	vmov	sl, fp, d7
 800f9b2:	4a2c      	ldr	r2, [pc, #176]	@ (800fa64 <_strtod_l+0x584>)
 800f9b4:	482c      	ldr	r0, [pc, #176]	@ (800fa68 <_strtod_l+0x588>)
 800f9b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f9ba:	ed92 7b00 	vldr	d7, [r2]
 800f9be:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f9c2:	ec4b ab16 	vmov	d6, sl, fp
 800f9c6:	4a29      	ldr	r2, [pc, #164]	@ (800fa6c <_strtod_l+0x58c>)
 800f9c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f9cc:	ee17 1a90 	vmov	r1, s15
 800f9d0:	400a      	ands	r2, r1
 800f9d2:	4282      	cmp	r2, r0
 800f9d4:	ec5b ab17 	vmov	sl, fp, d7
 800f9d8:	d898      	bhi.n	800f90c <_strtod_l+0x42c>
 800f9da:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800f9de:	4282      	cmp	r2, r0
 800f9e0:	bf86      	itte	hi
 800f9e2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800fa70 <_strtod_l+0x590>
 800f9e6:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800f9ea:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	9206      	str	r2, [sp, #24]
 800f9f2:	e076      	b.n	800fae2 <_strtod_l+0x602>
 800f9f4:	f012 0f01 	tst.w	r2, #1
 800f9f8:	d004      	beq.n	800fa04 <_strtod_l+0x524>
 800f9fa:	ed96 6b00 	vldr	d6, [r6]
 800f9fe:	2001      	movs	r0, #1
 800fa00:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fa04:	3101      	adds	r1, #1
 800fa06:	1052      	asrs	r2, r2, #1
 800fa08:	3608      	adds	r6, #8
 800fa0a:	e7cd      	b.n	800f9a8 <_strtod_l+0x4c8>
 800fa0c:	d0ef      	beq.n	800f9ee <_strtod_l+0x50e>
 800fa0e:	4252      	negs	r2, r2
 800fa10:	f012 000f 	ands.w	r0, r2, #15
 800fa14:	d00a      	beq.n	800fa2c <_strtod_l+0x54c>
 800fa16:	4912      	ldr	r1, [pc, #72]	@ (800fa60 <_strtod_l+0x580>)
 800fa18:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800fa1c:	ed91 7b00 	vldr	d7, [r1]
 800fa20:	ec4b ab16 	vmov	d6, sl, fp
 800fa24:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fa28:	ec5b ab17 	vmov	sl, fp, d7
 800fa2c:	1112      	asrs	r2, r2, #4
 800fa2e:	d0de      	beq.n	800f9ee <_strtod_l+0x50e>
 800fa30:	2a1f      	cmp	r2, #31
 800fa32:	dd1f      	ble.n	800fa74 <_strtod_l+0x594>
 800fa34:	2400      	movs	r4, #0
 800fa36:	4625      	mov	r5, r4
 800fa38:	9407      	str	r4, [sp, #28]
 800fa3a:	4626      	mov	r6, r4
 800fa3c:	9a05      	ldr	r2, [sp, #20]
 800fa3e:	2322      	movs	r3, #34	@ 0x22
 800fa40:	f04f 0a00 	mov.w	sl, #0
 800fa44:	f04f 0b00 	mov.w	fp, #0
 800fa48:	6013      	str	r3, [r2, #0]
 800fa4a:	e76a      	b.n	800f922 <_strtod_l+0x442>
 800fa4c:	080138b7 	.word	0x080138b7
 800fa50:	08013a7c 	.word	0x08013a7c
 800fa54:	080138af 	.word	0x080138af
 800fa58:	080138e9 	.word	0x080138e9
 800fa5c:	08013a78 	.word	0x08013a78
 800fa60:	08013b08 	.word	0x08013b08
 800fa64:	08013ae0 	.word	0x08013ae0
 800fa68:	7ca00000 	.word	0x7ca00000
 800fa6c:	7ff00000 	.word	0x7ff00000
 800fa70:	7fefffff 	.word	0x7fefffff
 800fa74:	f012 0110 	ands.w	r1, r2, #16
 800fa78:	bf18      	it	ne
 800fa7a:	216a      	movne	r1, #106	@ 0x6a
 800fa7c:	9106      	str	r1, [sp, #24]
 800fa7e:	ec4b ab17 	vmov	d7, sl, fp
 800fa82:	49af      	ldr	r1, [pc, #700]	@ (800fd40 <_strtod_l+0x860>)
 800fa84:	2000      	movs	r0, #0
 800fa86:	07d6      	lsls	r6, r2, #31
 800fa88:	d504      	bpl.n	800fa94 <_strtod_l+0x5b4>
 800fa8a:	ed91 6b00 	vldr	d6, [r1]
 800fa8e:	2001      	movs	r0, #1
 800fa90:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fa94:	1052      	asrs	r2, r2, #1
 800fa96:	f101 0108 	add.w	r1, r1, #8
 800fa9a:	d1f4      	bne.n	800fa86 <_strtod_l+0x5a6>
 800fa9c:	b108      	cbz	r0, 800faa2 <_strtod_l+0x5c2>
 800fa9e:	ec5b ab17 	vmov	sl, fp, d7
 800faa2:	9a06      	ldr	r2, [sp, #24]
 800faa4:	b1b2      	cbz	r2, 800fad4 <_strtod_l+0x5f4>
 800faa6:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800faaa:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800faae:	2a00      	cmp	r2, #0
 800fab0:	4658      	mov	r0, fp
 800fab2:	dd0f      	ble.n	800fad4 <_strtod_l+0x5f4>
 800fab4:	2a1f      	cmp	r2, #31
 800fab6:	dd55      	ble.n	800fb64 <_strtod_l+0x684>
 800fab8:	2a34      	cmp	r2, #52	@ 0x34
 800faba:	bfde      	ittt	le
 800fabc:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 800fac0:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800fac4:	408a      	lslle	r2, r1
 800fac6:	f04f 0a00 	mov.w	sl, #0
 800faca:	bfcc      	ite	gt
 800facc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fad0:	ea02 0b00 	andle.w	fp, r2, r0
 800fad4:	ec4b ab17 	vmov	d7, sl, fp
 800fad8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae0:	d0a8      	beq.n	800fa34 <_strtod_l+0x554>
 800fae2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fae4:	9805      	ldr	r0, [sp, #20]
 800fae6:	f8cd 9000 	str.w	r9, [sp]
 800faea:	462a      	mov	r2, r5
 800faec:	f002 fb9a 	bl	8012224 <__s2b>
 800faf0:	9007      	str	r0, [sp, #28]
 800faf2:	2800      	cmp	r0, #0
 800faf4:	f43f af0a 	beq.w	800f90c <_strtod_l+0x42c>
 800faf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fafa:	1b3f      	subs	r7, r7, r4
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	bfb4      	ite	lt
 800fb00:	463b      	movlt	r3, r7
 800fb02:	2300      	movge	r3, #0
 800fb04:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb08:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800fd30 <_strtod_l+0x850>
 800fb0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fb10:	2400      	movs	r4, #0
 800fb12:	930d      	str	r3, [sp, #52]	@ 0x34
 800fb14:	4625      	mov	r5, r4
 800fb16:	9b07      	ldr	r3, [sp, #28]
 800fb18:	9805      	ldr	r0, [sp, #20]
 800fb1a:	6859      	ldr	r1, [r3, #4]
 800fb1c:	f002 fada 	bl	80120d4 <_Balloc>
 800fb20:	4606      	mov	r6, r0
 800fb22:	2800      	cmp	r0, #0
 800fb24:	f43f aef6 	beq.w	800f914 <_strtod_l+0x434>
 800fb28:	9b07      	ldr	r3, [sp, #28]
 800fb2a:	691a      	ldr	r2, [r3, #16]
 800fb2c:	ec4b ab19 	vmov	d9, sl, fp
 800fb30:	3202      	adds	r2, #2
 800fb32:	f103 010c 	add.w	r1, r3, #12
 800fb36:	0092      	lsls	r2, r2, #2
 800fb38:	300c      	adds	r0, #12
 800fb3a:	f001 f880 	bl	8010c3e <memcpy>
 800fb3e:	eeb0 0b49 	vmov.f64	d0, d9
 800fb42:	9805      	ldr	r0, [sp, #20]
 800fb44:	aa14      	add	r2, sp, #80	@ 0x50
 800fb46:	a913      	add	r1, sp, #76	@ 0x4c
 800fb48:	f002 fea0 	bl	801288c <__d2b>
 800fb4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	f43f aee0 	beq.w	800f914 <_strtod_l+0x434>
 800fb54:	9805      	ldr	r0, [sp, #20]
 800fb56:	2101      	movs	r1, #1
 800fb58:	f002 fbfa 	bl	8012350 <__i2b>
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	b940      	cbnz	r0, 800fb72 <_strtod_l+0x692>
 800fb60:	2500      	movs	r5, #0
 800fb62:	e6d7      	b.n	800f914 <_strtod_l+0x434>
 800fb64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800fb68:	fa01 f202 	lsl.w	r2, r1, r2
 800fb6c:	ea02 0a0a 	and.w	sl, r2, sl
 800fb70:	e7b0      	b.n	800fad4 <_strtod_l+0x5f4>
 800fb72:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800fb74:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fb76:	2f00      	cmp	r7, #0
 800fb78:	bfab      	itete	ge
 800fb7a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800fb7c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800fb7e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800fb82:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800fb86:	bfac      	ite	ge
 800fb88:	eb07 0903 	addge.w	r9, r7, r3
 800fb8c:	eba3 0807 	sublt.w	r8, r3, r7
 800fb90:	9b06      	ldr	r3, [sp, #24]
 800fb92:	1aff      	subs	r7, r7, r3
 800fb94:	4417      	add	r7, r2
 800fb96:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800fb9a:	4a6a      	ldr	r2, [pc, #424]	@ (800fd44 <_strtod_l+0x864>)
 800fb9c:	3f01      	subs	r7, #1
 800fb9e:	4297      	cmp	r7, r2
 800fba0:	da51      	bge.n	800fc46 <_strtod_l+0x766>
 800fba2:	1bd1      	subs	r1, r2, r7
 800fba4:	291f      	cmp	r1, #31
 800fba6:	eba3 0301 	sub.w	r3, r3, r1
 800fbaa:	f04f 0201 	mov.w	r2, #1
 800fbae:	dc3e      	bgt.n	800fc2e <_strtod_l+0x74e>
 800fbb0:	408a      	lsls	r2, r1
 800fbb2:	920c      	str	r2, [sp, #48]	@ 0x30
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fbb8:	eb09 0703 	add.w	r7, r9, r3
 800fbbc:	4498      	add	r8, r3
 800fbbe:	9b06      	ldr	r3, [sp, #24]
 800fbc0:	45b9      	cmp	r9, r7
 800fbc2:	4498      	add	r8, r3
 800fbc4:	464b      	mov	r3, r9
 800fbc6:	bfa8      	it	ge
 800fbc8:	463b      	movge	r3, r7
 800fbca:	4543      	cmp	r3, r8
 800fbcc:	bfa8      	it	ge
 800fbce:	4643      	movge	r3, r8
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	bfc2      	ittt	gt
 800fbd4:	1aff      	subgt	r7, r7, r3
 800fbd6:	eba8 0803 	subgt.w	r8, r8, r3
 800fbda:	eba9 0903 	subgt.w	r9, r9, r3
 800fbde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	dd16      	ble.n	800fc12 <_strtod_l+0x732>
 800fbe4:	4629      	mov	r1, r5
 800fbe6:	9805      	ldr	r0, [sp, #20]
 800fbe8:	461a      	mov	r2, r3
 800fbea:	f002 fc69 	bl	80124c0 <__pow5mult>
 800fbee:	4605      	mov	r5, r0
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	d0b5      	beq.n	800fb60 <_strtod_l+0x680>
 800fbf4:	4601      	mov	r1, r0
 800fbf6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fbf8:	9805      	ldr	r0, [sp, #20]
 800fbfa:	f002 fbbf 	bl	801237c <__multiply>
 800fbfe:	900f      	str	r0, [sp, #60]	@ 0x3c
 800fc00:	2800      	cmp	r0, #0
 800fc02:	f43f ae87 	beq.w	800f914 <_strtod_l+0x434>
 800fc06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fc08:	9805      	ldr	r0, [sp, #20]
 800fc0a:	f002 faa3 	bl	8012154 <_Bfree>
 800fc0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc10:	9312      	str	r3, [sp, #72]	@ 0x48
 800fc12:	2f00      	cmp	r7, #0
 800fc14:	dc1b      	bgt.n	800fc4e <_strtod_l+0x76e>
 800fc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	dd21      	ble.n	800fc60 <_strtod_l+0x780>
 800fc1c:	4631      	mov	r1, r6
 800fc1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc20:	9805      	ldr	r0, [sp, #20]
 800fc22:	f002 fc4d 	bl	80124c0 <__pow5mult>
 800fc26:	4606      	mov	r6, r0
 800fc28:	b9d0      	cbnz	r0, 800fc60 <_strtod_l+0x780>
 800fc2a:	2600      	movs	r6, #0
 800fc2c:	e672      	b.n	800f914 <_strtod_l+0x434>
 800fc2e:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800fc32:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800fc36:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800fc3a:	37e2      	adds	r7, #226	@ 0xe2
 800fc3c:	fa02 f107 	lsl.w	r1, r2, r7
 800fc40:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fc42:	920c      	str	r2, [sp, #48]	@ 0x30
 800fc44:	e7b8      	b.n	800fbb8 <_strtod_l+0x6d8>
 800fc46:	2200      	movs	r2, #0
 800fc48:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	e7f9      	b.n	800fc42 <_strtod_l+0x762>
 800fc4e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fc50:	9805      	ldr	r0, [sp, #20]
 800fc52:	463a      	mov	r2, r7
 800fc54:	f002 fc8e 	bl	8012574 <__lshift>
 800fc58:	9012      	str	r0, [sp, #72]	@ 0x48
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	d1db      	bne.n	800fc16 <_strtod_l+0x736>
 800fc5e:	e659      	b.n	800f914 <_strtod_l+0x434>
 800fc60:	f1b8 0f00 	cmp.w	r8, #0
 800fc64:	dd07      	ble.n	800fc76 <_strtod_l+0x796>
 800fc66:	4631      	mov	r1, r6
 800fc68:	9805      	ldr	r0, [sp, #20]
 800fc6a:	4642      	mov	r2, r8
 800fc6c:	f002 fc82 	bl	8012574 <__lshift>
 800fc70:	4606      	mov	r6, r0
 800fc72:	2800      	cmp	r0, #0
 800fc74:	d0d9      	beq.n	800fc2a <_strtod_l+0x74a>
 800fc76:	f1b9 0f00 	cmp.w	r9, #0
 800fc7a:	dd08      	ble.n	800fc8e <_strtod_l+0x7ae>
 800fc7c:	4629      	mov	r1, r5
 800fc7e:	9805      	ldr	r0, [sp, #20]
 800fc80:	464a      	mov	r2, r9
 800fc82:	f002 fc77 	bl	8012574 <__lshift>
 800fc86:	4605      	mov	r5, r0
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	f43f ae43 	beq.w	800f914 <_strtod_l+0x434>
 800fc8e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fc90:	9805      	ldr	r0, [sp, #20]
 800fc92:	4632      	mov	r2, r6
 800fc94:	f002 fcf6 	bl	8012684 <__mdiff>
 800fc98:	4604      	mov	r4, r0
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	f43f ae3a 	beq.w	800f914 <_strtod_l+0x434>
 800fca0:	2300      	movs	r3, #0
 800fca2:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800fca6:	60c3      	str	r3, [r0, #12]
 800fca8:	4629      	mov	r1, r5
 800fcaa:	f002 fccf 	bl	801264c <__mcmp>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	da4c      	bge.n	800fd4c <_strtod_l+0x86c>
 800fcb2:	ea58 080a 	orrs.w	r8, r8, sl
 800fcb6:	d172      	bne.n	800fd9e <_strtod_l+0x8be>
 800fcb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d16e      	bne.n	800fd9e <_strtod_l+0x8be>
 800fcc0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fcc4:	0d1b      	lsrs	r3, r3, #20
 800fcc6:	051b      	lsls	r3, r3, #20
 800fcc8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fccc:	d967      	bls.n	800fd9e <_strtod_l+0x8be>
 800fcce:	6963      	ldr	r3, [r4, #20]
 800fcd0:	b913      	cbnz	r3, 800fcd8 <_strtod_l+0x7f8>
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	dd62      	ble.n	800fd9e <_strtod_l+0x8be>
 800fcd8:	4621      	mov	r1, r4
 800fcda:	2201      	movs	r2, #1
 800fcdc:	9805      	ldr	r0, [sp, #20]
 800fcde:	f002 fc49 	bl	8012574 <__lshift>
 800fce2:	4629      	mov	r1, r5
 800fce4:	4604      	mov	r4, r0
 800fce6:	f002 fcb1 	bl	801264c <__mcmp>
 800fcea:	2800      	cmp	r0, #0
 800fcec:	dd57      	ble.n	800fd9e <_strtod_l+0x8be>
 800fcee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fcf2:	9a06      	ldr	r2, [sp, #24]
 800fcf4:	0d1b      	lsrs	r3, r3, #20
 800fcf6:	051b      	lsls	r3, r3, #20
 800fcf8:	2a00      	cmp	r2, #0
 800fcfa:	d06e      	beq.n	800fdda <_strtod_l+0x8fa>
 800fcfc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fd00:	d86b      	bhi.n	800fdda <_strtod_l+0x8fa>
 800fd02:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fd06:	f67f ae99 	bls.w	800fa3c <_strtod_l+0x55c>
 800fd0a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800fd38 <_strtod_l+0x858>
 800fd0e:	ec4b ab16 	vmov	d6, sl, fp
 800fd12:	4b0d      	ldr	r3, [pc, #52]	@ (800fd48 <_strtod_l+0x868>)
 800fd14:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fd18:	ee17 2a90 	vmov	r2, s15
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	ec5b ab17 	vmov	sl, fp, d7
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	f47f ae01 	bne.w	800f92a <_strtod_l+0x44a>
 800fd28:	9a05      	ldr	r2, [sp, #20]
 800fd2a:	2322      	movs	r3, #34	@ 0x22
 800fd2c:	6013      	str	r3, [r2, #0]
 800fd2e:	e5fc      	b.n	800f92a <_strtod_l+0x44a>
 800fd30:	ffc00000 	.word	0xffc00000
 800fd34:	41dfffff 	.word	0x41dfffff
 800fd38:	00000000 	.word	0x00000000
 800fd3c:	39500000 	.word	0x39500000
 800fd40:	08013aa8 	.word	0x08013aa8
 800fd44:	fffffc02 	.word	0xfffffc02
 800fd48:	7ff00000 	.word	0x7ff00000
 800fd4c:	46d9      	mov	r9, fp
 800fd4e:	d15d      	bne.n	800fe0c <_strtod_l+0x92c>
 800fd50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd54:	f1b8 0f00 	cmp.w	r8, #0
 800fd58:	d02a      	beq.n	800fdb0 <_strtod_l+0x8d0>
 800fd5a:	4aa9      	ldr	r2, [pc, #676]	@ (8010000 <_strtod_l+0xb20>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d12a      	bne.n	800fdb6 <_strtod_l+0x8d6>
 800fd60:	9b06      	ldr	r3, [sp, #24]
 800fd62:	4652      	mov	r2, sl
 800fd64:	b1fb      	cbz	r3, 800fda6 <_strtod_l+0x8c6>
 800fd66:	4ba7      	ldr	r3, [pc, #668]	@ (8010004 <_strtod_l+0xb24>)
 800fd68:	ea0b 0303 	and.w	r3, fp, r3
 800fd6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fd70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800fd74:	d81a      	bhi.n	800fdac <_strtod_l+0x8cc>
 800fd76:	0d1b      	lsrs	r3, r3, #20
 800fd78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fd7c:	fa01 f303 	lsl.w	r3, r1, r3
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d118      	bne.n	800fdb6 <_strtod_l+0x8d6>
 800fd84:	4ba0      	ldr	r3, [pc, #640]	@ (8010008 <_strtod_l+0xb28>)
 800fd86:	4599      	cmp	r9, r3
 800fd88:	d102      	bne.n	800fd90 <_strtod_l+0x8b0>
 800fd8a:	3201      	adds	r2, #1
 800fd8c:	f43f adc2 	beq.w	800f914 <_strtod_l+0x434>
 800fd90:	4b9c      	ldr	r3, [pc, #624]	@ (8010004 <_strtod_l+0xb24>)
 800fd92:	ea09 0303 	and.w	r3, r9, r3
 800fd96:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800fd9a:	f04f 0a00 	mov.w	sl, #0
 800fd9e:	9b06      	ldr	r3, [sp, #24]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1b2      	bne.n	800fd0a <_strtod_l+0x82a>
 800fda4:	e5c1      	b.n	800f92a <_strtod_l+0x44a>
 800fda6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fdaa:	e7e9      	b.n	800fd80 <_strtod_l+0x8a0>
 800fdac:	460b      	mov	r3, r1
 800fdae:	e7e7      	b.n	800fd80 <_strtod_l+0x8a0>
 800fdb0:	ea53 030a 	orrs.w	r3, r3, sl
 800fdb4:	d09b      	beq.n	800fcee <_strtod_l+0x80e>
 800fdb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdb8:	b1c3      	cbz	r3, 800fdec <_strtod_l+0x90c>
 800fdba:	ea13 0f09 	tst.w	r3, r9
 800fdbe:	d0ee      	beq.n	800fd9e <_strtod_l+0x8be>
 800fdc0:	9a06      	ldr	r2, [sp, #24]
 800fdc2:	4650      	mov	r0, sl
 800fdc4:	4659      	mov	r1, fp
 800fdc6:	f1b8 0f00 	cmp.w	r8, #0
 800fdca:	d013      	beq.n	800fdf4 <_strtod_l+0x914>
 800fdcc:	f7ff fb6b 	bl	800f4a6 <sulp>
 800fdd0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800fdd4:	ec5b ab17 	vmov	sl, fp, d7
 800fdd8:	e7e1      	b.n	800fd9e <_strtod_l+0x8be>
 800fdda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fdde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fde2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fde6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fdea:	e7d8      	b.n	800fd9e <_strtod_l+0x8be>
 800fdec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdee:	ea13 0f0a 	tst.w	r3, sl
 800fdf2:	e7e4      	b.n	800fdbe <_strtod_l+0x8de>
 800fdf4:	f7ff fb57 	bl	800f4a6 <sulp>
 800fdf8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800fdfc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fe00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe04:	ec5b ab10 	vmov	sl, fp, d0
 800fe08:	d1c9      	bne.n	800fd9e <_strtod_l+0x8be>
 800fe0a:	e617      	b.n	800fa3c <_strtod_l+0x55c>
 800fe0c:	4629      	mov	r1, r5
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f002 fd94 	bl	801293c <__ratio>
 800fe14:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800fe18:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800fe1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe20:	d85d      	bhi.n	800fede <_strtod_l+0x9fe>
 800fe22:	f1b8 0f00 	cmp.w	r8, #0
 800fe26:	d164      	bne.n	800fef2 <_strtod_l+0xa12>
 800fe28:	f1ba 0f00 	cmp.w	sl, #0
 800fe2c:	d14b      	bne.n	800fec6 <_strtod_l+0x9e6>
 800fe2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe32:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d160      	bne.n	800fefc <_strtod_l+0xa1c>
 800fe3a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800fe3e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800fe42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe46:	d401      	bmi.n	800fe4c <_strtod_l+0x96c>
 800fe48:	ee20 8b08 	vmul.f64	d8, d0, d8
 800fe4c:	eeb1 ab48 	vneg.f64	d10, d8
 800fe50:	486c      	ldr	r0, [pc, #432]	@ (8010004 <_strtod_l+0xb24>)
 800fe52:	496e      	ldr	r1, [pc, #440]	@ (801000c <_strtod_l+0xb2c>)
 800fe54:	ea09 0700 	and.w	r7, r9, r0
 800fe58:	428f      	cmp	r7, r1
 800fe5a:	ec53 2b1a 	vmov	r2, r3, d10
 800fe5e:	d17d      	bne.n	800ff5c <_strtod_l+0xa7c>
 800fe60:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800fe64:	ec4b ab1c 	vmov	d12, sl, fp
 800fe68:	eeb0 0b4c 	vmov.f64	d0, d12
 800fe6c:	f002 fc9e 	bl	80127ac <__ulp>
 800fe70:	4864      	ldr	r0, [pc, #400]	@ (8010004 <_strtod_l+0xb24>)
 800fe72:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800fe76:	ee1c 3a90 	vmov	r3, s25
 800fe7a:	4a65      	ldr	r2, [pc, #404]	@ (8010010 <_strtod_l+0xb30>)
 800fe7c:	ea03 0100 	and.w	r1, r3, r0
 800fe80:	4291      	cmp	r1, r2
 800fe82:	ec5b ab1c 	vmov	sl, fp, d12
 800fe86:	d93c      	bls.n	800ff02 <_strtod_l+0xa22>
 800fe88:	ee19 2a90 	vmov	r2, s19
 800fe8c:	4b5e      	ldr	r3, [pc, #376]	@ (8010008 <_strtod_l+0xb28>)
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d104      	bne.n	800fe9c <_strtod_l+0x9bc>
 800fe92:	ee19 3a10 	vmov	r3, s18
 800fe96:	3301      	adds	r3, #1
 800fe98:	f43f ad3c 	beq.w	800f914 <_strtod_l+0x434>
 800fe9c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8010008 <_strtod_l+0xb28>
 800fea0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fea4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fea6:	9805      	ldr	r0, [sp, #20]
 800fea8:	f002 f954 	bl	8012154 <_Bfree>
 800feac:	9805      	ldr	r0, [sp, #20]
 800feae:	4631      	mov	r1, r6
 800feb0:	f002 f950 	bl	8012154 <_Bfree>
 800feb4:	9805      	ldr	r0, [sp, #20]
 800feb6:	4629      	mov	r1, r5
 800feb8:	f002 f94c 	bl	8012154 <_Bfree>
 800febc:	9805      	ldr	r0, [sp, #20]
 800febe:	4621      	mov	r1, r4
 800fec0:	f002 f948 	bl	8012154 <_Bfree>
 800fec4:	e627      	b.n	800fb16 <_strtod_l+0x636>
 800fec6:	f1ba 0f01 	cmp.w	sl, #1
 800feca:	d103      	bne.n	800fed4 <_strtod_l+0x9f4>
 800fecc:	f1bb 0f00 	cmp.w	fp, #0
 800fed0:	f43f adb4 	beq.w	800fa3c <_strtod_l+0x55c>
 800fed4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800fed8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800fedc:	e7b8      	b.n	800fe50 <_strtod_l+0x970>
 800fede:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800fee2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800fee6:	f1b8 0f00 	cmp.w	r8, #0
 800feea:	d0af      	beq.n	800fe4c <_strtod_l+0x96c>
 800feec:	eeb0 ab48 	vmov.f64	d10, d8
 800fef0:	e7ae      	b.n	800fe50 <_strtod_l+0x970>
 800fef2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800fef6:	eeb0 8b4a 	vmov.f64	d8, d10
 800fefa:	e7a9      	b.n	800fe50 <_strtod_l+0x970>
 800fefc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ff00:	e7a6      	b.n	800fe50 <_strtod_l+0x970>
 800ff02:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ff06:	9b06      	ldr	r3, [sp, #24]
 800ff08:	46d9      	mov	r9, fp
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1ca      	bne.n	800fea4 <_strtod_l+0x9c4>
 800ff0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ff12:	0d1b      	lsrs	r3, r3, #20
 800ff14:	051b      	lsls	r3, r3, #20
 800ff16:	429f      	cmp	r7, r3
 800ff18:	d1c4      	bne.n	800fea4 <_strtod_l+0x9c4>
 800ff1a:	ec51 0b18 	vmov	r0, r1, d8
 800ff1e:	f7f0 fc1b 	bl	8000758 <__aeabi_d2lz>
 800ff22:	f7f0 fbd3 	bl	80006cc <__aeabi_l2d>
 800ff26:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ff2a:	ec41 0b17 	vmov	d7, r0, r1
 800ff2e:	ea49 090a 	orr.w	r9, r9, sl
 800ff32:	ea59 0908 	orrs.w	r9, r9, r8
 800ff36:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ff3a:	d03c      	beq.n	800ffb6 <_strtod_l+0xad6>
 800ff3c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ffe8 <_strtod_l+0xb08>
 800ff40:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ff44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff48:	f53f acef 	bmi.w	800f92a <_strtod_l+0x44a>
 800ff4c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800fff0 <_strtod_l+0xb10>
 800ff50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ff54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff58:	dda4      	ble.n	800fea4 <_strtod_l+0x9c4>
 800ff5a:	e4e6      	b.n	800f92a <_strtod_l+0x44a>
 800ff5c:	9906      	ldr	r1, [sp, #24]
 800ff5e:	b1e1      	cbz	r1, 800ff9a <_strtod_l+0xaba>
 800ff60:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ff64:	d819      	bhi.n	800ff9a <_strtod_l+0xaba>
 800ff66:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ff6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff6e:	d811      	bhi.n	800ff94 <_strtod_l+0xab4>
 800ff70:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ff74:	ee18 3a10 	vmov	r3, s16
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	bf38      	it	cc
 800ff7c:	2301      	movcc	r3, #1
 800ff7e:	ee08 3a10 	vmov	s16, r3
 800ff82:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ff86:	f1b8 0f00 	cmp.w	r8, #0
 800ff8a:	d111      	bne.n	800ffb0 <_strtod_l+0xad0>
 800ff8c:	eeb1 7b48 	vneg.f64	d7, d8
 800ff90:	ec53 2b17 	vmov	r2, r3, d7
 800ff94:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ff98:	1bcb      	subs	r3, r1, r7
 800ff9a:	eeb0 0b49 	vmov.f64	d0, d9
 800ff9e:	ec43 2b1a 	vmov	d10, r2, r3
 800ffa2:	f002 fc03 	bl	80127ac <__ulp>
 800ffa6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ffaa:	ec5b ab19 	vmov	sl, fp, d9
 800ffae:	e7aa      	b.n	800ff06 <_strtod_l+0xa26>
 800ffb0:	eeb0 7b48 	vmov.f64	d7, d8
 800ffb4:	e7ec      	b.n	800ff90 <_strtod_l+0xab0>
 800ffb6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800fff8 <_strtod_l+0xb18>
 800ffba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ffbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc2:	f57f af6f 	bpl.w	800fea4 <_strtod_l+0x9c4>
 800ffc6:	e4b0      	b.n	800f92a <_strtod_l+0x44a>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	9308      	str	r3, [sp, #32]
 800ffcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ffd0:	6013      	str	r3, [r2, #0]
 800ffd2:	f7ff bac4 	b.w	800f55e <_strtod_l+0x7e>
 800ffd6:	2a65      	cmp	r2, #101	@ 0x65
 800ffd8:	f43f abbf 	beq.w	800f75a <_strtod_l+0x27a>
 800ffdc:	2a45      	cmp	r2, #69	@ 0x45
 800ffde:	f43f abbc 	beq.w	800f75a <_strtod_l+0x27a>
 800ffe2:	2101      	movs	r1, #1
 800ffe4:	f7ff bbf4 	b.w	800f7d0 <_strtod_l+0x2f0>
 800ffe8:	94a03595 	.word	0x94a03595
 800ffec:	3fdfffff 	.word	0x3fdfffff
 800fff0:	35afe535 	.word	0x35afe535
 800fff4:	3fe00000 	.word	0x3fe00000
 800fff8:	94a03595 	.word	0x94a03595
 800fffc:	3fcfffff 	.word	0x3fcfffff
 8010000:	000fffff 	.word	0x000fffff
 8010004:	7ff00000 	.word	0x7ff00000
 8010008:	7fefffff 	.word	0x7fefffff
 801000c:	7fe00000 	.word	0x7fe00000
 8010010:	7c9fffff 	.word	0x7c9fffff

08010014 <strtod>:
 8010014:	460a      	mov	r2, r1
 8010016:	4601      	mov	r1, r0
 8010018:	4802      	ldr	r0, [pc, #8]	@ (8010024 <strtod+0x10>)
 801001a:	4b03      	ldr	r3, [pc, #12]	@ (8010028 <strtod+0x14>)
 801001c:	6800      	ldr	r0, [r0, #0]
 801001e:	f7ff ba5f 	b.w	800f4e0 <_strtod_l>
 8010022:	bf00      	nop
 8010024:	240001b0 	.word	0x240001b0
 8010028:	24000044 	.word	0x24000044

0801002c <__cvt>:
 801002c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801002e:	ed2d 8b02 	vpush	{d8}
 8010032:	eeb0 8b40 	vmov.f64	d8, d0
 8010036:	b085      	sub	sp, #20
 8010038:	4617      	mov	r7, r2
 801003a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801003c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801003e:	ee18 2a90 	vmov	r2, s17
 8010042:	f025 0520 	bic.w	r5, r5, #32
 8010046:	2a00      	cmp	r2, #0
 8010048:	bfb6      	itet	lt
 801004a:	222d      	movlt	r2, #45	@ 0x2d
 801004c:	2200      	movge	r2, #0
 801004e:	eeb1 8b40 	vneglt.f64	d8, d0
 8010052:	2d46      	cmp	r5, #70	@ 0x46
 8010054:	460c      	mov	r4, r1
 8010056:	701a      	strb	r2, [r3, #0]
 8010058:	d004      	beq.n	8010064 <__cvt+0x38>
 801005a:	2d45      	cmp	r5, #69	@ 0x45
 801005c:	d100      	bne.n	8010060 <__cvt+0x34>
 801005e:	3401      	adds	r4, #1
 8010060:	2102      	movs	r1, #2
 8010062:	e000      	b.n	8010066 <__cvt+0x3a>
 8010064:	2103      	movs	r1, #3
 8010066:	ab03      	add	r3, sp, #12
 8010068:	9301      	str	r3, [sp, #4]
 801006a:	ab02      	add	r3, sp, #8
 801006c:	9300      	str	r3, [sp, #0]
 801006e:	4622      	mov	r2, r4
 8010070:	4633      	mov	r3, r6
 8010072:	eeb0 0b48 	vmov.f64	d0, d8
 8010076:	f000 fe83 	bl	8010d80 <_dtoa_r>
 801007a:	2d47      	cmp	r5, #71	@ 0x47
 801007c:	d114      	bne.n	80100a8 <__cvt+0x7c>
 801007e:	07fb      	lsls	r3, r7, #31
 8010080:	d50a      	bpl.n	8010098 <__cvt+0x6c>
 8010082:	1902      	adds	r2, r0, r4
 8010084:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801008c:	bf08      	it	eq
 801008e:	9203      	streq	r2, [sp, #12]
 8010090:	2130      	movs	r1, #48	@ 0x30
 8010092:	9b03      	ldr	r3, [sp, #12]
 8010094:	4293      	cmp	r3, r2
 8010096:	d319      	bcc.n	80100cc <__cvt+0xa0>
 8010098:	9b03      	ldr	r3, [sp, #12]
 801009a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801009c:	1a1b      	subs	r3, r3, r0
 801009e:	6013      	str	r3, [r2, #0]
 80100a0:	b005      	add	sp, #20
 80100a2:	ecbd 8b02 	vpop	{d8}
 80100a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a8:	2d46      	cmp	r5, #70	@ 0x46
 80100aa:	eb00 0204 	add.w	r2, r0, r4
 80100ae:	d1e9      	bne.n	8010084 <__cvt+0x58>
 80100b0:	7803      	ldrb	r3, [r0, #0]
 80100b2:	2b30      	cmp	r3, #48	@ 0x30
 80100b4:	d107      	bne.n	80100c6 <__cvt+0x9a>
 80100b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80100ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100be:	bf1c      	itt	ne
 80100c0:	f1c4 0401 	rsbne	r4, r4, #1
 80100c4:	6034      	strne	r4, [r6, #0]
 80100c6:	6833      	ldr	r3, [r6, #0]
 80100c8:	441a      	add	r2, r3
 80100ca:	e7db      	b.n	8010084 <__cvt+0x58>
 80100cc:	1c5c      	adds	r4, r3, #1
 80100ce:	9403      	str	r4, [sp, #12]
 80100d0:	7019      	strb	r1, [r3, #0]
 80100d2:	e7de      	b.n	8010092 <__cvt+0x66>

080100d4 <__exponent>:
 80100d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100d6:	2900      	cmp	r1, #0
 80100d8:	bfba      	itte	lt
 80100da:	4249      	neglt	r1, r1
 80100dc:	232d      	movlt	r3, #45	@ 0x2d
 80100de:	232b      	movge	r3, #43	@ 0x2b
 80100e0:	2909      	cmp	r1, #9
 80100e2:	7002      	strb	r2, [r0, #0]
 80100e4:	7043      	strb	r3, [r0, #1]
 80100e6:	dd29      	ble.n	801013c <__exponent+0x68>
 80100e8:	f10d 0307 	add.w	r3, sp, #7
 80100ec:	461d      	mov	r5, r3
 80100ee:	270a      	movs	r7, #10
 80100f0:	461a      	mov	r2, r3
 80100f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80100f6:	fb07 1416 	mls	r4, r7, r6, r1
 80100fa:	3430      	adds	r4, #48	@ 0x30
 80100fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010100:	460c      	mov	r4, r1
 8010102:	2c63      	cmp	r4, #99	@ 0x63
 8010104:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010108:	4631      	mov	r1, r6
 801010a:	dcf1      	bgt.n	80100f0 <__exponent+0x1c>
 801010c:	3130      	adds	r1, #48	@ 0x30
 801010e:	1e94      	subs	r4, r2, #2
 8010110:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010114:	1c41      	adds	r1, r0, #1
 8010116:	4623      	mov	r3, r4
 8010118:	42ab      	cmp	r3, r5
 801011a:	d30a      	bcc.n	8010132 <__exponent+0x5e>
 801011c:	f10d 0309 	add.w	r3, sp, #9
 8010120:	1a9b      	subs	r3, r3, r2
 8010122:	42ac      	cmp	r4, r5
 8010124:	bf88      	it	hi
 8010126:	2300      	movhi	r3, #0
 8010128:	3302      	adds	r3, #2
 801012a:	4403      	add	r3, r0
 801012c:	1a18      	subs	r0, r3, r0
 801012e:	b003      	add	sp, #12
 8010130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010132:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010136:	f801 6f01 	strb.w	r6, [r1, #1]!
 801013a:	e7ed      	b.n	8010118 <__exponent+0x44>
 801013c:	2330      	movs	r3, #48	@ 0x30
 801013e:	3130      	adds	r1, #48	@ 0x30
 8010140:	7083      	strb	r3, [r0, #2]
 8010142:	70c1      	strb	r1, [r0, #3]
 8010144:	1d03      	adds	r3, r0, #4
 8010146:	e7f1      	b.n	801012c <__exponent+0x58>

08010148 <_printf_float>:
 8010148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014c:	b08d      	sub	sp, #52	@ 0x34
 801014e:	460c      	mov	r4, r1
 8010150:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010154:	4616      	mov	r6, r2
 8010156:	461f      	mov	r7, r3
 8010158:	4605      	mov	r5, r0
 801015a:	f000 fcf1 	bl	8010b40 <_localeconv_r>
 801015e:	f8d0 b000 	ldr.w	fp, [r0]
 8010162:	4658      	mov	r0, fp
 8010164:	f7f0 f91c 	bl	80003a0 <strlen>
 8010168:	2300      	movs	r3, #0
 801016a:	930a      	str	r3, [sp, #40]	@ 0x28
 801016c:	f8d8 3000 	ldr.w	r3, [r8]
 8010170:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010174:	6822      	ldr	r2, [r4, #0]
 8010176:	9005      	str	r0, [sp, #20]
 8010178:	3307      	adds	r3, #7
 801017a:	f023 0307 	bic.w	r3, r3, #7
 801017e:	f103 0108 	add.w	r1, r3, #8
 8010182:	f8c8 1000 	str.w	r1, [r8]
 8010186:	ed93 0b00 	vldr	d0, [r3]
 801018a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80103e8 <_printf_float+0x2a0>
 801018e:	eeb0 7bc0 	vabs.f64	d7, d0
 8010192:	eeb4 7b46 	vcmp.f64	d7, d6
 8010196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801019e:	dd24      	ble.n	80101ea <_printf_float+0xa2>
 80101a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80101a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a8:	d502      	bpl.n	80101b0 <_printf_float+0x68>
 80101aa:	232d      	movs	r3, #45	@ 0x2d
 80101ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101b0:	498f      	ldr	r1, [pc, #572]	@ (80103f0 <_printf_float+0x2a8>)
 80101b2:	4b90      	ldr	r3, [pc, #576]	@ (80103f4 <_printf_float+0x2ac>)
 80101b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80101b8:	bf8c      	ite	hi
 80101ba:	4688      	movhi	r8, r1
 80101bc:	4698      	movls	r8, r3
 80101be:	f022 0204 	bic.w	r2, r2, #4
 80101c2:	2303      	movs	r3, #3
 80101c4:	6123      	str	r3, [r4, #16]
 80101c6:	6022      	str	r2, [r4, #0]
 80101c8:	f04f 0a00 	mov.w	sl, #0
 80101cc:	9700      	str	r7, [sp, #0]
 80101ce:	4633      	mov	r3, r6
 80101d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80101d2:	4621      	mov	r1, r4
 80101d4:	4628      	mov	r0, r5
 80101d6:	f000 f9d1 	bl	801057c <_printf_common>
 80101da:	3001      	adds	r0, #1
 80101dc:	f040 8089 	bne.w	80102f2 <_printf_float+0x1aa>
 80101e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101e4:	b00d      	add	sp, #52	@ 0x34
 80101e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80101ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f2:	d709      	bvc.n	8010208 <_printf_float+0xc0>
 80101f4:	ee10 3a90 	vmov	r3, s1
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	bfbc      	itt	lt
 80101fc:	232d      	movlt	r3, #45	@ 0x2d
 80101fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010202:	497d      	ldr	r1, [pc, #500]	@ (80103f8 <_printf_float+0x2b0>)
 8010204:	4b7d      	ldr	r3, [pc, #500]	@ (80103fc <_printf_float+0x2b4>)
 8010206:	e7d5      	b.n	80101b4 <_printf_float+0x6c>
 8010208:	6863      	ldr	r3, [r4, #4]
 801020a:	1c59      	adds	r1, r3, #1
 801020c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010210:	d139      	bne.n	8010286 <_printf_float+0x13e>
 8010212:	2306      	movs	r3, #6
 8010214:	6063      	str	r3, [r4, #4]
 8010216:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801021a:	2300      	movs	r3, #0
 801021c:	6022      	str	r2, [r4, #0]
 801021e:	9303      	str	r3, [sp, #12]
 8010220:	ab0a      	add	r3, sp, #40	@ 0x28
 8010222:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010226:	ab09      	add	r3, sp, #36	@ 0x24
 8010228:	9300      	str	r3, [sp, #0]
 801022a:	6861      	ldr	r1, [r4, #4]
 801022c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010230:	4628      	mov	r0, r5
 8010232:	f7ff fefb 	bl	801002c <__cvt>
 8010236:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801023a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801023c:	4680      	mov	r8, r0
 801023e:	d129      	bne.n	8010294 <_printf_float+0x14c>
 8010240:	1cc8      	adds	r0, r1, #3
 8010242:	db02      	blt.n	801024a <_printf_float+0x102>
 8010244:	6863      	ldr	r3, [r4, #4]
 8010246:	4299      	cmp	r1, r3
 8010248:	dd41      	ble.n	80102ce <_printf_float+0x186>
 801024a:	f1a9 0902 	sub.w	r9, r9, #2
 801024e:	fa5f f989 	uxtb.w	r9, r9
 8010252:	3901      	subs	r1, #1
 8010254:	464a      	mov	r2, r9
 8010256:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801025a:	9109      	str	r1, [sp, #36]	@ 0x24
 801025c:	f7ff ff3a 	bl	80100d4 <__exponent>
 8010260:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010262:	1813      	adds	r3, r2, r0
 8010264:	2a01      	cmp	r2, #1
 8010266:	4682      	mov	sl, r0
 8010268:	6123      	str	r3, [r4, #16]
 801026a:	dc02      	bgt.n	8010272 <_printf_float+0x12a>
 801026c:	6822      	ldr	r2, [r4, #0]
 801026e:	07d2      	lsls	r2, r2, #31
 8010270:	d501      	bpl.n	8010276 <_printf_float+0x12e>
 8010272:	3301      	adds	r3, #1
 8010274:	6123      	str	r3, [r4, #16]
 8010276:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801027a:	2b00      	cmp	r3, #0
 801027c:	d0a6      	beq.n	80101cc <_printf_float+0x84>
 801027e:	232d      	movs	r3, #45	@ 0x2d
 8010280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010284:	e7a2      	b.n	80101cc <_printf_float+0x84>
 8010286:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801028a:	d1c4      	bne.n	8010216 <_printf_float+0xce>
 801028c:	2b00      	cmp	r3, #0
 801028e:	d1c2      	bne.n	8010216 <_printf_float+0xce>
 8010290:	2301      	movs	r3, #1
 8010292:	e7bf      	b.n	8010214 <_printf_float+0xcc>
 8010294:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010298:	d9db      	bls.n	8010252 <_printf_float+0x10a>
 801029a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801029e:	d118      	bne.n	80102d2 <_printf_float+0x18a>
 80102a0:	2900      	cmp	r1, #0
 80102a2:	6863      	ldr	r3, [r4, #4]
 80102a4:	dd0b      	ble.n	80102be <_printf_float+0x176>
 80102a6:	6121      	str	r1, [r4, #16]
 80102a8:	b913      	cbnz	r3, 80102b0 <_printf_float+0x168>
 80102aa:	6822      	ldr	r2, [r4, #0]
 80102ac:	07d0      	lsls	r0, r2, #31
 80102ae:	d502      	bpl.n	80102b6 <_printf_float+0x16e>
 80102b0:	3301      	adds	r3, #1
 80102b2:	440b      	add	r3, r1
 80102b4:	6123      	str	r3, [r4, #16]
 80102b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80102b8:	f04f 0a00 	mov.w	sl, #0
 80102bc:	e7db      	b.n	8010276 <_printf_float+0x12e>
 80102be:	b913      	cbnz	r3, 80102c6 <_printf_float+0x17e>
 80102c0:	6822      	ldr	r2, [r4, #0]
 80102c2:	07d2      	lsls	r2, r2, #31
 80102c4:	d501      	bpl.n	80102ca <_printf_float+0x182>
 80102c6:	3302      	adds	r3, #2
 80102c8:	e7f4      	b.n	80102b4 <_printf_float+0x16c>
 80102ca:	2301      	movs	r3, #1
 80102cc:	e7f2      	b.n	80102b4 <_printf_float+0x16c>
 80102ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80102d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102d4:	4299      	cmp	r1, r3
 80102d6:	db05      	blt.n	80102e4 <_printf_float+0x19c>
 80102d8:	6823      	ldr	r3, [r4, #0]
 80102da:	6121      	str	r1, [r4, #16]
 80102dc:	07d8      	lsls	r0, r3, #31
 80102de:	d5ea      	bpl.n	80102b6 <_printf_float+0x16e>
 80102e0:	1c4b      	adds	r3, r1, #1
 80102e2:	e7e7      	b.n	80102b4 <_printf_float+0x16c>
 80102e4:	2900      	cmp	r1, #0
 80102e6:	bfd4      	ite	le
 80102e8:	f1c1 0202 	rsble	r2, r1, #2
 80102ec:	2201      	movgt	r2, #1
 80102ee:	4413      	add	r3, r2
 80102f0:	e7e0      	b.n	80102b4 <_printf_float+0x16c>
 80102f2:	6823      	ldr	r3, [r4, #0]
 80102f4:	055a      	lsls	r2, r3, #21
 80102f6:	d407      	bmi.n	8010308 <_printf_float+0x1c0>
 80102f8:	6923      	ldr	r3, [r4, #16]
 80102fa:	4642      	mov	r2, r8
 80102fc:	4631      	mov	r1, r6
 80102fe:	4628      	mov	r0, r5
 8010300:	47b8      	blx	r7
 8010302:	3001      	adds	r0, #1
 8010304:	d12a      	bne.n	801035c <_printf_float+0x214>
 8010306:	e76b      	b.n	80101e0 <_printf_float+0x98>
 8010308:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801030c:	f240 80e0 	bls.w	80104d0 <_printf_float+0x388>
 8010310:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010314:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801031c:	d133      	bne.n	8010386 <_printf_float+0x23e>
 801031e:	4a38      	ldr	r2, [pc, #224]	@ (8010400 <_printf_float+0x2b8>)
 8010320:	2301      	movs	r3, #1
 8010322:	4631      	mov	r1, r6
 8010324:	4628      	mov	r0, r5
 8010326:	47b8      	blx	r7
 8010328:	3001      	adds	r0, #1
 801032a:	f43f af59 	beq.w	80101e0 <_printf_float+0x98>
 801032e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010332:	4543      	cmp	r3, r8
 8010334:	db02      	blt.n	801033c <_printf_float+0x1f4>
 8010336:	6823      	ldr	r3, [r4, #0]
 8010338:	07d8      	lsls	r0, r3, #31
 801033a:	d50f      	bpl.n	801035c <_printf_float+0x214>
 801033c:	9b05      	ldr	r3, [sp, #20]
 801033e:	465a      	mov	r2, fp
 8010340:	4631      	mov	r1, r6
 8010342:	4628      	mov	r0, r5
 8010344:	47b8      	blx	r7
 8010346:	3001      	adds	r0, #1
 8010348:	f43f af4a 	beq.w	80101e0 <_printf_float+0x98>
 801034c:	f04f 0900 	mov.w	r9, #0
 8010350:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010354:	f104 0a1a 	add.w	sl, r4, #26
 8010358:	45c8      	cmp	r8, r9
 801035a:	dc09      	bgt.n	8010370 <_printf_float+0x228>
 801035c:	6823      	ldr	r3, [r4, #0]
 801035e:	079b      	lsls	r3, r3, #30
 8010360:	f100 8107 	bmi.w	8010572 <_printf_float+0x42a>
 8010364:	68e0      	ldr	r0, [r4, #12]
 8010366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010368:	4298      	cmp	r0, r3
 801036a:	bfb8      	it	lt
 801036c:	4618      	movlt	r0, r3
 801036e:	e739      	b.n	80101e4 <_printf_float+0x9c>
 8010370:	2301      	movs	r3, #1
 8010372:	4652      	mov	r2, sl
 8010374:	4631      	mov	r1, r6
 8010376:	4628      	mov	r0, r5
 8010378:	47b8      	blx	r7
 801037a:	3001      	adds	r0, #1
 801037c:	f43f af30 	beq.w	80101e0 <_printf_float+0x98>
 8010380:	f109 0901 	add.w	r9, r9, #1
 8010384:	e7e8      	b.n	8010358 <_printf_float+0x210>
 8010386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010388:	2b00      	cmp	r3, #0
 801038a:	dc3b      	bgt.n	8010404 <_printf_float+0x2bc>
 801038c:	4a1c      	ldr	r2, [pc, #112]	@ (8010400 <_printf_float+0x2b8>)
 801038e:	2301      	movs	r3, #1
 8010390:	4631      	mov	r1, r6
 8010392:	4628      	mov	r0, r5
 8010394:	47b8      	blx	r7
 8010396:	3001      	adds	r0, #1
 8010398:	f43f af22 	beq.w	80101e0 <_printf_float+0x98>
 801039c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80103a0:	ea59 0303 	orrs.w	r3, r9, r3
 80103a4:	d102      	bne.n	80103ac <_printf_float+0x264>
 80103a6:	6823      	ldr	r3, [r4, #0]
 80103a8:	07d9      	lsls	r1, r3, #31
 80103aa:	d5d7      	bpl.n	801035c <_printf_float+0x214>
 80103ac:	9b05      	ldr	r3, [sp, #20]
 80103ae:	465a      	mov	r2, fp
 80103b0:	4631      	mov	r1, r6
 80103b2:	4628      	mov	r0, r5
 80103b4:	47b8      	blx	r7
 80103b6:	3001      	adds	r0, #1
 80103b8:	f43f af12 	beq.w	80101e0 <_printf_float+0x98>
 80103bc:	f04f 0a00 	mov.w	sl, #0
 80103c0:	f104 0b1a 	add.w	fp, r4, #26
 80103c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103c6:	425b      	negs	r3, r3
 80103c8:	4553      	cmp	r3, sl
 80103ca:	dc01      	bgt.n	80103d0 <_printf_float+0x288>
 80103cc:	464b      	mov	r3, r9
 80103ce:	e794      	b.n	80102fa <_printf_float+0x1b2>
 80103d0:	2301      	movs	r3, #1
 80103d2:	465a      	mov	r2, fp
 80103d4:	4631      	mov	r1, r6
 80103d6:	4628      	mov	r0, r5
 80103d8:	47b8      	blx	r7
 80103da:	3001      	adds	r0, #1
 80103dc:	f43f af00 	beq.w	80101e0 <_printf_float+0x98>
 80103e0:	f10a 0a01 	add.w	sl, sl, #1
 80103e4:	e7ee      	b.n	80103c4 <_printf_float+0x27c>
 80103e6:	bf00      	nop
 80103e8:	ffffffff 	.word	0xffffffff
 80103ec:	7fefffff 	.word	0x7fefffff
 80103f0:	080138ae 	.word	0x080138ae
 80103f4:	080138aa 	.word	0x080138aa
 80103f8:	080138b6 	.word	0x080138b6
 80103fc:	080138b2 	.word	0x080138b2
 8010400:	080138ba 	.word	0x080138ba
 8010404:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010406:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801040a:	4553      	cmp	r3, sl
 801040c:	bfa8      	it	ge
 801040e:	4653      	movge	r3, sl
 8010410:	2b00      	cmp	r3, #0
 8010412:	4699      	mov	r9, r3
 8010414:	dc37      	bgt.n	8010486 <_printf_float+0x33e>
 8010416:	2300      	movs	r3, #0
 8010418:	9307      	str	r3, [sp, #28]
 801041a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801041e:	f104 021a 	add.w	r2, r4, #26
 8010422:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010424:	9907      	ldr	r1, [sp, #28]
 8010426:	9306      	str	r3, [sp, #24]
 8010428:	eba3 0309 	sub.w	r3, r3, r9
 801042c:	428b      	cmp	r3, r1
 801042e:	dc31      	bgt.n	8010494 <_printf_float+0x34c>
 8010430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010432:	459a      	cmp	sl, r3
 8010434:	dc3b      	bgt.n	80104ae <_printf_float+0x366>
 8010436:	6823      	ldr	r3, [r4, #0]
 8010438:	07da      	lsls	r2, r3, #31
 801043a:	d438      	bmi.n	80104ae <_printf_float+0x366>
 801043c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801043e:	ebaa 0903 	sub.w	r9, sl, r3
 8010442:	9b06      	ldr	r3, [sp, #24]
 8010444:	ebaa 0303 	sub.w	r3, sl, r3
 8010448:	4599      	cmp	r9, r3
 801044a:	bfa8      	it	ge
 801044c:	4699      	movge	r9, r3
 801044e:	f1b9 0f00 	cmp.w	r9, #0
 8010452:	dc34      	bgt.n	80104be <_printf_float+0x376>
 8010454:	f04f 0800 	mov.w	r8, #0
 8010458:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801045c:	f104 0b1a 	add.w	fp, r4, #26
 8010460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010462:	ebaa 0303 	sub.w	r3, sl, r3
 8010466:	eba3 0309 	sub.w	r3, r3, r9
 801046a:	4543      	cmp	r3, r8
 801046c:	f77f af76 	ble.w	801035c <_printf_float+0x214>
 8010470:	2301      	movs	r3, #1
 8010472:	465a      	mov	r2, fp
 8010474:	4631      	mov	r1, r6
 8010476:	4628      	mov	r0, r5
 8010478:	47b8      	blx	r7
 801047a:	3001      	adds	r0, #1
 801047c:	f43f aeb0 	beq.w	80101e0 <_printf_float+0x98>
 8010480:	f108 0801 	add.w	r8, r8, #1
 8010484:	e7ec      	b.n	8010460 <_printf_float+0x318>
 8010486:	4642      	mov	r2, r8
 8010488:	4631      	mov	r1, r6
 801048a:	4628      	mov	r0, r5
 801048c:	47b8      	blx	r7
 801048e:	3001      	adds	r0, #1
 8010490:	d1c1      	bne.n	8010416 <_printf_float+0x2ce>
 8010492:	e6a5      	b.n	80101e0 <_printf_float+0x98>
 8010494:	2301      	movs	r3, #1
 8010496:	4631      	mov	r1, r6
 8010498:	4628      	mov	r0, r5
 801049a:	9206      	str	r2, [sp, #24]
 801049c:	47b8      	blx	r7
 801049e:	3001      	adds	r0, #1
 80104a0:	f43f ae9e 	beq.w	80101e0 <_printf_float+0x98>
 80104a4:	9b07      	ldr	r3, [sp, #28]
 80104a6:	9a06      	ldr	r2, [sp, #24]
 80104a8:	3301      	adds	r3, #1
 80104aa:	9307      	str	r3, [sp, #28]
 80104ac:	e7b9      	b.n	8010422 <_printf_float+0x2da>
 80104ae:	9b05      	ldr	r3, [sp, #20]
 80104b0:	465a      	mov	r2, fp
 80104b2:	4631      	mov	r1, r6
 80104b4:	4628      	mov	r0, r5
 80104b6:	47b8      	blx	r7
 80104b8:	3001      	adds	r0, #1
 80104ba:	d1bf      	bne.n	801043c <_printf_float+0x2f4>
 80104bc:	e690      	b.n	80101e0 <_printf_float+0x98>
 80104be:	9a06      	ldr	r2, [sp, #24]
 80104c0:	464b      	mov	r3, r9
 80104c2:	4442      	add	r2, r8
 80104c4:	4631      	mov	r1, r6
 80104c6:	4628      	mov	r0, r5
 80104c8:	47b8      	blx	r7
 80104ca:	3001      	adds	r0, #1
 80104cc:	d1c2      	bne.n	8010454 <_printf_float+0x30c>
 80104ce:	e687      	b.n	80101e0 <_printf_float+0x98>
 80104d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80104d4:	f1b9 0f01 	cmp.w	r9, #1
 80104d8:	dc01      	bgt.n	80104de <_printf_float+0x396>
 80104da:	07db      	lsls	r3, r3, #31
 80104dc:	d536      	bpl.n	801054c <_printf_float+0x404>
 80104de:	2301      	movs	r3, #1
 80104e0:	4642      	mov	r2, r8
 80104e2:	4631      	mov	r1, r6
 80104e4:	4628      	mov	r0, r5
 80104e6:	47b8      	blx	r7
 80104e8:	3001      	adds	r0, #1
 80104ea:	f43f ae79 	beq.w	80101e0 <_printf_float+0x98>
 80104ee:	9b05      	ldr	r3, [sp, #20]
 80104f0:	465a      	mov	r2, fp
 80104f2:	4631      	mov	r1, r6
 80104f4:	4628      	mov	r0, r5
 80104f6:	47b8      	blx	r7
 80104f8:	3001      	adds	r0, #1
 80104fa:	f43f ae71 	beq.w	80101e0 <_printf_float+0x98>
 80104fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010502:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801050a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801050e:	d018      	beq.n	8010542 <_printf_float+0x3fa>
 8010510:	464b      	mov	r3, r9
 8010512:	f108 0201 	add.w	r2, r8, #1
 8010516:	4631      	mov	r1, r6
 8010518:	4628      	mov	r0, r5
 801051a:	47b8      	blx	r7
 801051c:	3001      	adds	r0, #1
 801051e:	d10c      	bne.n	801053a <_printf_float+0x3f2>
 8010520:	e65e      	b.n	80101e0 <_printf_float+0x98>
 8010522:	2301      	movs	r3, #1
 8010524:	465a      	mov	r2, fp
 8010526:	4631      	mov	r1, r6
 8010528:	4628      	mov	r0, r5
 801052a:	47b8      	blx	r7
 801052c:	3001      	adds	r0, #1
 801052e:	f43f ae57 	beq.w	80101e0 <_printf_float+0x98>
 8010532:	f108 0801 	add.w	r8, r8, #1
 8010536:	45c8      	cmp	r8, r9
 8010538:	dbf3      	blt.n	8010522 <_printf_float+0x3da>
 801053a:	4653      	mov	r3, sl
 801053c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010540:	e6dc      	b.n	80102fc <_printf_float+0x1b4>
 8010542:	f04f 0800 	mov.w	r8, #0
 8010546:	f104 0b1a 	add.w	fp, r4, #26
 801054a:	e7f4      	b.n	8010536 <_printf_float+0x3ee>
 801054c:	2301      	movs	r3, #1
 801054e:	4642      	mov	r2, r8
 8010550:	e7e1      	b.n	8010516 <_printf_float+0x3ce>
 8010552:	2301      	movs	r3, #1
 8010554:	464a      	mov	r2, r9
 8010556:	4631      	mov	r1, r6
 8010558:	4628      	mov	r0, r5
 801055a:	47b8      	blx	r7
 801055c:	3001      	adds	r0, #1
 801055e:	f43f ae3f 	beq.w	80101e0 <_printf_float+0x98>
 8010562:	f108 0801 	add.w	r8, r8, #1
 8010566:	68e3      	ldr	r3, [r4, #12]
 8010568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801056a:	1a5b      	subs	r3, r3, r1
 801056c:	4543      	cmp	r3, r8
 801056e:	dcf0      	bgt.n	8010552 <_printf_float+0x40a>
 8010570:	e6f8      	b.n	8010364 <_printf_float+0x21c>
 8010572:	f04f 0800 	mov.w	r8, #0
 8010576:	f104 0919 	add.w	r9, r4, #25
 801057a:	e7f4      	b.n	8010566 <_printf_float+0x41e>

0801057c <_printf_common>:
 801057c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010580:	4616      	mov	r6, r2
 8010582:	4698      	mov	r8, r3
 8010584:	688a      	ldr	r2, [r1, #8]
 8010586:	690b      	ldr	r3, [r1, #16]
 8010588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801058c:	4293      	cmp	r3, r2
 801058e:	bfb8      	it	lt
 8010590:	4613      	movlt	r3, r2
 8010592:	6033      	str	r3, [r6, #0]
 8010594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010598:	4607      	mov	r7, r0
 801059a:	460c      	mov	r4, r1
 801059c:	b10a      	cbz	r2, 80105a2 <_printf_common+0x26>
 801059e:	3301      	adds	r3, #1
 80105a0:	6033      	str	r3, [r6, #0]
 80105a2:	6823      	ldr	r3, [r4, #0]
 80105a4:	0699      	lsls	r1, r3, #26
 80105a6:	bf42      	ittt	mi
 80105a8:	6833      	ldrmi	r3, [r6, #0]
 80105aa:	3302      	addmi	r3, #2
 80105ac:	6033      	strmi	r3, [r6, #0]
 80105ae:	6825      	ldr	r5, [r4, #0]
 80105b0:	f015 0506 	ands.w	r5, r5, #6
 80105b4:	d106      	bne.n	80105c4 <_printf_common+0x48>
 80105b6:	f104 0a19 	add.w	sl, r4, #25
 80105ba:	68e3      	ldr	r3, [r4, #12]
 80105bc:	6832      	ldr	r2, [r6, #0]
 80105be:	1a9b      	subs	r3, r3, r2
 80105c0:	42ab      	cmp	r3, r5
 80105c2:	dc26      	bgt.n	8010612 <_printf_common+0x96>
 80105c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80105c8:	6822      	ldr	r2, [r4, #0]
 80105ca:	3b00      	subs	r3, #0
 80105cc:	bf18      	it	ne
 80105ce:	2301      	movne	r3, #1
 80105d0:	0692      	lsls	r2, r2, #26
 80105d2:	d42b      	bmi.n	801062c <_printf_common+0xb0>
 80105d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80105d8:	4641      	mov	r1, r8
 80105da:	4638      	mov	r0, r7
 80105dc:	47c8      	blx	r9
 80105de:	3001      	adds	r0, #1
 80105e0:	d01e      	beq.n	8010620 <_printf_common+0xa4>
 80105e2:	6823      	ldr	r3, [r4, #0]
 80105e4:	6922      	ldr	r2, [r4, #16]
 80105e6:	f003 0306 	and.w	r3, r3, #6
 80105ea:	2b04      	cmp	r3, #4
 80105ec:	bf02      	ittt	eq
 80105ee:	68e5      	ldreq	r5, [r4, #12]
 80105f0:	6833      	ldreq	r3, [r6, #0]
 80105f2:	1aed      	subeq	r5, r5, r3
 80105f4:	68a3      	ldr	r3, [r4, #8]
 80105f6:	bf0c      	ite	eq
 80105f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105fc:	2500      	movne	r5, #0
 80105fe:	4293      	cmp	r3, r2
 8010600:	bfc4      	itt	gt
 8010602:	1a9b      	subgt	r3, r3, r2
 8010604:	18ed      	addgt	r5, r5, r3
 8010606:	2600      	movs	r6, #0
 8010608:	341a      	adds	r4, #26
 801060a:	42b5      	cmp	r5, r6
 801060c:	d11a      	bne.n	8010644 <_printf_common+0xc8>
 801060e:	2000      	movs	r0, #0
 8010610:	e008      	b.n	8010624 <_printf_common+0xa8>
 8010612:	2301      	movs	r3, #1
 8010614:	4652      	mov	r2, sl
 8010616:	4641      	mov	r1, r8
 8010618:	4638      	mov	r0, r7
 801061a:	47c8      	blx	r9
 801061c:	3001      	adds	r0, #1
 801061e:	d103      	bne.n	8010628 <_printf_common+0xac>
 8010620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010628:	3501      	adds	r5, #1
 801062a:	e7c6      	b.n	80105ba <_printf_common+0x3e>
 801062c:	18e1      	adds	r1, r4, r3
 801062e:	1c5a      	adds	r2, r3, #1
 8010630:	2030      	movs	r0, #48	@ 0x30
 8010632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010636:	4422      	add	r2, r4
 8010638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801063c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010640:	3302      	adds	r3, #2
 8010642:	e7c7      	b.n	80105d4 <_printf_common+0x58>
 8010644:	2301      	movs	r3, #1
 8010646:	4622      	mov	r2, r4
 8010648:	4641      	mov	r1, r8
 801064a:	4638      	mov	r0, r7
 801064c:	47c8      	blx	r9
 801064e:	3001      	adds	r0, #1
 8010650:	d0e6      	beq.n	8010620 <_printf_common+0xa4>
 8010652:	3601      	adds	r6, #1
 8010654:	e7d9      	b.n	801060a <_printf_common+0x8e>
	...

08010658 <_printf_i>:
 8010658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801065c:	7e0f      	ldrb	r7, [r1, #24]
 801065e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010660:	2f78      	cmp	r7, #120	@ 0x78
 8010662:	4691      	mov	r9, r2
 8010664:	4680      	mov	r8, r0
 8010666:	460c      	mov	r4, r1
 8010668:	469a      	mov	sl, r3
 801066a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801066e:	d807      	bhi.n	8010680 <_printf_i+0x28>
 8010670:	2f62      	cmp	r7, #98	@ 0x62
 8010672:	d80a      	bhi.n	801068a <_printf_i+0x32>
 8010674:	2f00      	cmp	r7, #0
 8010676:	f000 80d1 	beq.w	801081c <_printf_i+0x1c4>
 801067a:	2f58      	cmp	r7, #88	@ 0x58
 801067c:	f000 80b8 	beq.w	80107f0 <_printf_i+0x198>
 8010680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010688:	e03a      	b.n	8010700 <_printf_i+0xa8>
 801068a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801068e:	2b15      	cmp	r3, #21
 8010690:	d8f6      	bhi.n	8010680 <_printf_i+0x28>
 8010692:	a101      	add	r1, pc, #4	@ (adr r1, 8010698 <_printf_i+0x40>)
 8010694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010698:	080106f1 	.word	0x080106f1
 801069c:	08010705 	.word	0x08010705
 80106a0:	08010681 	.word	0x08010681
 80106a4:	08010681 	.word	0x08010681
 80106a8:	08010681 	.word	0x08010681
 80106ac:	08010681 	.word	0x08010681
 80106b0:	08010705 	.word	0x08010705
 80106b4:	08010681 	.word	0x08010681
 80106b8:	08010681 	.word	0x08010681
 80106bc:	08010681 	.word	0x08010681
 80106c0:	08010681 	.word	0x08010681
 80106c4:	08010803 	.word	0x08010803
 80106c8:	0801072f 	.word	0x0801072f
 80106cc:	080107bd 	.word	0x080107bd
 80106d0:	08010681 	.word	0x08010681
 80106d4:	08010681 	.word	0x08010681
 80106d8:	08010825 	.word	0x08010825
 80106dc:	08010681 	.word	0x08010681
 80106e0:	0801072f 	.word	0x0801072f
 80106e4:	08010681 	.word	0x08010681
 80106e8:	08010681 	.word	0x08010681
 80106ec:	080107c5 	.word	0x080107c5
 80106f0:	6833      	ldr	r3, [r6, #0]
 80106f2:	1d1a      	adds	r2, r3, #4
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	6032      	str	r2, [r6, #0]
 80106f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80106fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010700:	2301      	movs	r3, #1
 8010702:	e09c      	b.n	801083e <_printf_i+0x1e6>
 8010704:	6833      	ldr	r3, [r6, #0]
 8010706:	6820      	ldr	r0, [r4, #0]
 8010708:	1d19      	adds	r1, r3, #4
 801070a:	6031      	str	r1, [r6, #0]
 801070c:	0606      	lsls	r6, r0, #24
 801070e:	d501      	bpl.n	8010714 <_printf_i+0xbc>
 8010710:	681d      	ldr	r5, [r3, #0]
 8010712:	e003      	b.n	801071c <_printf_i+0xc4>
 8010714:	0645      	lsls	r5, r0, #25
 8010716:	d5fb      	bpl.n	8010710 <_printf_i+0xb8>
 8010718:	f9b3 5000 	ldrsh.w	r5, [r3]
 801071c:	2d00      	cmp	r5, #0
 801071e:	da03      	bge.n	8010728 <_printf_i+0xd0>
 8010720:	232d      	movs	r3, #45	@ 0x2d
 8010722:	426d      	negs	r5, r5
 8010724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010728:	4858      	ldr	r0, [pc, #352]	@ (801088c <_printf_i+0x234>)
 801072a:	230a      	movs	r3, #10
 801072c:	e011      	b.n	8010752 <_printf_i+0xfa>
 801072e:	6821      	ldr	r1, [r4, #0]
 8010730:	6833      	ldr	r3, [r6, #0]
 8010732:	0608      	lsls	r0, r1, #24
 8010734:	f853 5b04 	ldr.w	r5, [r3], #4
 8010738:	d402      	bmi.n	8010740 <_printf_i+0xe8>
 801073a:	0649      	lsls	r1, r1, #25
 801073c:	bf48      	it	mi
 801073e:	b2ad      	uxthmi	r5, r5
 8010740:	2f6f      	cmp	r7, #111	@ 0x6f
 8010742:	4852      	ldr	r0, [pc, #328]	@ (801088c <_printf_i+0x234>)
 8010744:	6033      	str	r3, [r6, #0]
 8010746:	bf14      	ite	ne
 8010748:	230a      	movne	r3, #10
 801074a:	2308      	moveq	r3, #8
 801074c:	2100      	movs	r1, #0
 801074e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010752:	6866      	ldr	r6, [r4, #4]
 8010754:	60a6      	str	r6, [r4, #8]
 8010756:	2e00      	cmp	r6, #0
 8010758:	db05      	blt.n	8010766 <_printf_i+0x10e>
 801075a:	6821      	ldr	r1, [r4, #0]
 801075c:	432e      	orrs	r6, r5
 801075e:	f021 0104 	bic.w	r1, r1, #4
 8010762:	6021      	str	r1, [r4, #0]
 8010764:	d04b      	beq.n	80107fe <_printf_i+0x1a6>
 8010766:	4616      	mov	r6, r2
 8010768:	fbb5 f1f3 	udiv	r1, r5, r3
 801076c:	fb03 5711 	mls	r7, r3, r1, r5
 8010770:	5dc7      	ldrb	r7, [r0, r7]
 8010772:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010776:	462f      	mov	r7, r5
 8010778:	42bb      	cmp	r3, r7
 801077a:	460d      	mov	r5, r1
 801077c:	d9f4      	bls.n	8010768 <_printf_i+0x110>
 801077e:	2b08      	cmp	r3, #8
 8010780:	d10b      	bne.n	801079a <_printf_i+0x142>
 8010782:	6823      	ldr	r3, [r4, #0]
 8010784:	07df      	lsls	r7, r3, #31
 8010786:	d508      	bpl.n	801079a <_printf_i+0x142>
 8010788:	6923      	ldr	r3, [r4, #16]
 801078a:	6861      	ldr	r1, [r4, #4]
 801078c:	4299      	cmp	r1, r3
 801078e:	bfde      	ittt	le
 8010790:	2330      	movle	r3, #48	@ 0x30
 8010792:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010796:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801079a:	1b92      	subs	r2, r2, r6
 801079c:	6122      	str	r2, [r4, #16]
 801079e:	f8cd a000 	str.w	sl, [sp]
 80107a2:	464b      	mov	r3, r9
 80107a4:	aa03      	add	r2, sp, #12
 80107a6:	4621      	mov	r1, r4
 80107a8:	4640      	mov	r0, r8
 80107aa:	f7ff fee7 	bl	801057c <_printf_common>
 80107ae:	3001      	adds	r0, #1
 80107b0:	d14a      	bne.n	8010848 <_printf_i+0x1f0>
 80107b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80107b6:	b004      	add	sp, #16
 80107b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107bc:	6823      	ldr	r3, [r4, #0]
 80107be:	f043 0320 	orr.w	r3, r3, #32
 80107c2:	6023      	str	r3, [r4, #0]
 80107c4:	4832      	ldr	r0, [pc, #200]	@ (8010890 <_printf_i+0x238>)
 80107c6:	2778      	movs	r7, #120	@ 0x78
 80107c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80107cc:	6823      	ldr	r3, [r4, #0]
 80107ce:	6831      	ldr	r1, [r6, #0]
 80107d0:	061f      	lsls	r7, r3, #24
 80107d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80107d6:	d402      	bmi.n	80107de <_printf_i+0x186>
 80107d8:	065f      	lsls	r7, r3, #25
 80107da:	bf48      	it	mi
 80107dc:	b2ad      	uxthmi	r5, r5
 80107de:	6031      	str	r1, [r6, #0]
 80107e0:	07d9      	lsls	r1, r3, #31
 80107e2:	bf44      	itt	mi
 80107e4:	f043 0320 	orrmi.w	r3, r3, #32
 80107e8:	6023      	strmi	r3, [r4, #0]
 80107ea:	b11d      	cbz	r5, 80107f4 <_printf_i+0x19c>
 80107ec:	2310      	movs	r3, #16
 80107ee:	e7ad      	b.n	801074c <_printf_i+0xf4>
 80107f0:	4826      	ldr	r0, [pc, #152]	@ (801088c <_printf_i+0x234>)
 80107f2:	e7e9      	b.n	80107c8 <_printf_i+0x170>
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	f023 0320 	bic.w	r3, r3, #32
 80107fa:	6023      	str	r3, [r4, #0]
 80107fc:	e7f6      	b.n	80107ec <_printf_i+0x194>
 80107fe:	4616      	mov	r6, r2
 8010800:	e7bd      	b.n	801077e <_printf_i+0x126>
 8010802:	6833      	ldr	r3, [r6, #0]
 8010804:	6825      	ldr	r5, [r4, #0]
 8010806:	6961      	ldr	r1, [r4, #20]
 8010808:	1d18      	adds	r0, r3, #4
 801080a:	6030      	str	r0, [r6, #0]
 801080c:	062e      	lsls	r6, r5, #24
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	d501      	bpl.n	8010816 <_printf_i+0x1be>
 8010812:	6019      	str	r1, [r3, #0]
 8010814:	e002      	b.n	801081c <_printf_i+0x1c4>
 8010816:	0668      	lsls	r0, r5, #25
 8010818:	d5fb      	bpl.n	8010812 <_printf_i+0x1ba>
 801081a:	8019      	strh	r1, [r3, #0]
 801081c:	2300      	movs	r3, #0
 801081e:	6123      	str	r3, [r4, #16]
 8010820:	4616      	mov	r6, r2
 8010822:	e7bc      	b.n	801079e <_printf_i+0x146>
 8010824:	6833      	ldr	r3, [r6, #0]
 8010826:	1d1a      	adds	r2, r3, #4
 8010828:	6032      	str	r2, [r6, #0]
 801082a:	681e      	ldr	r6, [r3, #0]
 801082c:	6862      	ldr	r2, [r4, #4]
 801082e:	2100      	movs	r1, #0
 8010830:	4630      	mov	r0, r6
 8010832:	f7ef fd65 	bl	8000300 <memchr>
 8010836:	b108      	cbz	r0, 801083c <_printf_i+0x1e4>
 8010838:	1b80      	subs	r0, r0, r6
 801083a:	6060      	str	r0, [r4, #4]
 801083c:	6863      	ldr	r3, [r4, #4]
 801083e:	6123      	str	r3, [r4, #16]
 8010840:	2300      	movs	r3, #0
 8010842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010846:	e7aa      	b.n	801079e <_printf_i+0x146>
 8010848:	6923      	ldr	r3, [r4, #16]
 801084a:	4632      	mov	r2, r6
 801084c:	4649      	mov	r1, r9
 801084e:	4640      	mov	r0, r8
 8010850:	47d0      	blx	sl
 8010852:	3001      	adds	r0, #1
 8010854:	d0ad      	beq.n	80107b2 <_printf_i+0x15a>
 8010856:	6823      	ldr	r3, [r4, #0]
 8010858:	079b      	lsls	r3, r3, #30
 801085a:	d413      	bmi.n	8010884 <_printf_i+0x22c>
 801085c:	68e0      	ldr	r0, [r4, #12]
 801085e:	9b03      	ldr	r3, [sp, #12]
 8010860:	4298      	cmp	r0, r3
 8010862:	bfb8      	it	lt
 8010864:	4618      	movlt	r0, r3
 8010866:	e7a6      	b.n	80107b6 <_printf_i+0x15e>
 8010868:	2301      	movs	r3, #1
 801086a:	4632      	mov	r2, r6
 801086c:	4649      	mov	r1, r9
 801086e:	4640      	mov	r0, r8
 8010870:	47d0      	blx	sl
 8010872:	3001      	adds	r0, #1
 8010874:	d09d      	beq.n	80107b2 <_printf_i+0x15a>
 8010876:	3501      	adds	r5, #1
 8010878:	68e3      	ldr	r3, [r4, #12]
 801087a:	9903      	ldr	r1, [sp, #12]
 801087c:	1a5b      	subs	r3, r3, r1
 801087e:	42ab      	cmp	r3, r5
 8010880:	dcf2      	bgt.n	8010868 <_printf_i+0x210>
 8010882:	e7eb      	b.n	801085c <_printf_i+0x204>
 8010884:	2500      	movs	r5, #0
 8010886:	f104 0619 	add.w	r6, r4, #25
 801088a:	e7f5      	b.n	8010878 <_printf_i+0x220>
 801088c:	080138bc 	.word	0x080138bc
 8010890:	080138cd 	.word	0x080138cd

08010894 <std>:
 8010894:	2300      	movs	r3, #0
 8010896:	b510      	push	{r4, lr}
 8010898:	4604      	mov	r4, r0
 801089a:	e9c0 3300 	strd	r3, r3, [r0]
 801089e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108a2:	6083      	str	r3, [r0, #8]
 80108a4:	8181      	strh	r1, [r0, #12]
 80108a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80108a8:	81c2      	strh	r2, [r0, #14]
 80108aa:	6183      	str	r3, [r0, #24]
 80108ac:	4619      	mov	r1, r3
 80108ae:	2208      	movs	r2, #8
 80108b0:	305c      	adds	r0, #92	@ 0x5c
 80108b2:	f000 f92a 	bl	8010b0a <memset>
 80108b6:	4b0d      	ldr	r3, [pc, #52]	@ (80108ec <std+0x58>)
 80108b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80108ba:	4b0d      	ldr	r3, [pc, #52]	@ (80108f0 <std+0x5c>)
 80108bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80108be:	4b0d      	ldr	r3, [pc, #52]	@ (80108f4 <std+0x60>)
 80108c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80108c2:	4b0d      	ldr	r3, [pc, #52]	@ (80108f8 <std+0x64>)
 80108c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80108c6:	4b0d      	ldr	r3, [pc, #52]	@ (80108fc <std+0x68>)
 80108c8:	6224      	str	r4, [r4, #32]
 80108ca:	429c      	cmp	r4, r3
 80108cc:	d006      	beq.n	80108dc <std+0x48>
 80108ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80108d2:	4294      	cmp	r4, r2
 80108d4:	d002      	beq.n	80108dc <std+0x48>
 80108d6:	33d0      	adds	r3, #208	@ 0xd0
 80108d8:	429c      	cmp	r4, r3
 80108da:	d105      	bne.n	80108e8 <std+0x54>
 80108dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80108e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108e4:	f000 b9a0 	b.w	8010c28 <__retarget_lock_init_recursive>
 80108e8:	bd10      	pop	{r4, pc}
 80108ea:	bf00      	nop
 80108ec:	08010a85 	.word	0x08010a85
 80108f0:	08010aa7 	.word	0x08010aa7
 80108f4:	08010adf 	.word	0x08010adf
 80108f8:	08010b03 	.word	0x08010b03
 80108fc:	24004dcc 	.word	0x24004dcc

08010900 <stdio_exit_handler>:
 8010900:	4a02      	ldr	r2, [pc, #8]	@ (801090c <stdio_exit_handler+0xc>)
 8010902:	4903      	ldr	r1, [pc, #12]	@ (8010910 <stdio_exit_handler+0x10>)
 8010904:	4803      	ldr	r0, [pc, #12]	@ (8010914 <stdio_exit_handler+0x14>)
 8010906:	f000 b869 	b.w	80109dc <_fwalk_sglue>
 801090a:	bf00      	nop
 801090c:	24000038 	.word	0x24000038
 8010910:	08012df5 	.word	0x08012df5
 8010914:	240001b4 	.word	0x240001b4

08010918 <cleanup_stdio>:
 8010918:	6841      	ldr	r1, [r0, #4]
 801091a:	4b0c      	ldr	r3, [pc, #48]	@ (801094c <cleanup_stdio+0x34>)
 801091c:	4299      	cmp	r1, r3
 801091e:	b510      	push	{r4, lr}
 8010920:	4604      	mov	r4, r0
 8010922:	d001      	beq.n	8010928 <cleanup_stdio+0x10>
 8010924:	f002 fa66 	bl	8012df4 <_fflush_r>
 8010928:	68a1      	ldr	r1, [r4, #8]
 801092a:	4b09      	ldr	r3, [pc, #36]	@ (8010950 <cleanup_stdio+0x38>)
 801092c:	4299      	cmp	r1, r3
 801092e:	d002      	beq.n	8010936 <cleanup_stdio+0x1e>
 8010930:	4620      	mov	r0, r4
 8010932:	f002 fa5f 	bl	8012df4 <_fflush_r>
 8010936:	68e1      	ldr	r1, [r4, #12]
 8010938:	4b06      	ldr	r3, [pc, #24]	@ (8010954 <cleanup_stdio+0x3c>)
 801093a:	4299      	cmp	r1, r3
 801093c:	d004      	beq.n	8010948 <cleanup_stdio+0x30>
 801093e:	4620      	mov	r0, r4
 8010940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010944:	f002 ba56 	b.w	8012df4 <_fflush_r>
 8010948:	bd10      	pop	{r4, pc}
 801094a:	bf00      	nop
 801094c:	24004dcc 	.word	0x24004dcc
 8010950:	24004e34 	.word	0x24004e34
 8010954:	24004e9c 	.word	0x24004e9c

08010958 <global_stdio_init.part.0>:
 8010958:	b510      	push	{r4, lr}
 801095a:	4b0b      	ldr	r3, [pc, #44]	@ (8010988 <global_stdio_init.part.0+0x30>)
 801095c:	4c0b      	ldr	r4, [pc, #44]	@ (801098c <global_stdio_init.part.0+0x34>)
 801095e:	4a0c      	ldr	r2, [pc, #48]	@ (8010990 <global_stdio_init.part.0+0x38>)
 8010960:	601a      	str	r2, [r3, #0]
 8010962:	4620      	mov	r0, r4
 8010964:	2200      	movs	r2, #0
 8010966:	2104      	movs	r1, #4
 8010968:	f7ff ff94 	bl	8010894 <std>
 801096c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010970:	2201      	movs	r2, #1
 8010972:	2109      	movs	r1, #9
 8010974:	f7ff ff8e 	bl	8010894 <std>
 8010978:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801097c:	2202      	movs	r2, #2
 801097e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010982:	2112      	movs	r1, #18
 8010984:	f7ff bf86 	b.w	8010894 <std>
 8010988:	24004f04 	.word	0x24004f04
 801098c:	24004dcc 	.word	0x24004dcc
 8010990:	08010901 	.word	0x08010901

08010994 <__sfp_lock_acquire>:
 8010994:	4801      	ldr	r0, [pc, #4]	@ (801099c <__sfp_lock_acquire+0x8>)
 8010996:	f000 b948 	b.w	8010c2a <__retarget_lock_acquire_recursive>
 801099a:	bf00      	nop
 801099c:	24004f0d 	.word	0x24004f0d

080109a0 <__sfp_lock_release>:
 80109a0:	4801      	ldr	r0, [pc, #4]	@ (80109a8 <__sfp_lock_release+0x8>)
 80109a2:	f000 b943 	b.w	8010c2c <__retarget_lock_release_recursive>
 80109a6:	bf00      	nop
 80109a8:	24004f0d 	.word	0x24004f0d

080109ac <__sinit>:
 80109ac:	b510      	push	{r4, lr}
 80109ae:	4604      	mov	r4, r0
 80109b0:	f7ff fff0 	bl	8010994 <__sfp_lock_acquire>
 80109b4:	6a23      	ldr	r3, [r4, #32]
 80109b6:	b11b      	cbz	r3, 80109c0 <__sinit+0x14>
 80109b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109bc:	f7ff bff0 	b.w	80109a0 <__sfp_lock_release>
 80109c0:	4b04      	ldr	r3, [pc, #16]	@ (80109d4 <__sinit+0x28>)
 80109c2:	6223      	str	r3, [r4, #32]
 80109c4:	4b04      	ldr	r3, [pc, #16]	@ (80109d8 <__sinit+0x2c>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d1f5      	bne.n	80109b8 <__sinit+0xc>
 80109cc:	f7ff ffc4 	bl	8010958 <global_stdio_init.part.0>
 80109d0:	e7f2      	b.n	80109b8 <__sinit+0xc>
 80109d2:	bf00      	nop
 80109d4:	08010919 	.word	0x08010919
 80109d8:	24004f04 	.word	0x24004f04

080109dc <_fwalk_sglue>:
 80109dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109e0:	4607      	mov	r7, r0
 80109e2:	4688      	mov	r8, r1
 80109e4:	4614      	mov	r4, r2
 80109e6:	2600      	movs	r6, #0
 80109e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80109ec:	f1b9 0901 	subs.w	r9, r9, #1
 80109f0:	d505      	bpl.n	80109fe <_fwalk_sglue+0x22>
 80109f2:	6824      	ldr	r4, [r4, #0]
 80109f4:	2c00      	cmp	r4, #0
 80109f6:	d1f7      	bne.n	80109e8 <_fwalk_sglue+0xc>
 80109f8:	4630      	mov	r0, r6
 80109fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109fe:	89ab      	ldrh	r3, [r5, #12]
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d907      	bls.n	8010a14 <_fwalk_sglue+0x38>
 8010a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	d003      	beq.n	8010a14 <_fwalk_sglue+0x38>
 8010a0c:	4629      	mov	r1, r5
 8010a0e:	4638      	mov	r0, r7
 8010a10:	47c0      	blx	r8
 8010a12:	4306      	orrs	r6, r0
 8010a14:	3568      	adds	r5, #104	@ 0x68
 8010a16:	e7e9      	b.n	80109ec <_fwalk_sglue+0x10>

08010a18 <sniprintf>:
 8010a18:	b40c      	push	{r2, r3}
 8010a1a:	b530      	push	{r4, r5, lr}
 8010a1c:	4b18      	ldr	r3, [pc, #96]	@ (8010a80 <sniprintf+0x68>)
 8010a1e:	1e0c      	subs	r4, r1, #0
 8010a20:	681d      	ldr	r5, [r3, #0]
 8010a22:	b09d      	sub	sp, #116	@ 0x74
 8010a24:	da08      	bge.n	8010a38 <sniprintf+0x20>
 8010a26:	238b      	movs	r3, #139	@ 0x8b
 8010a28:	602b      	str	r3, [r5, #0]
 8010a2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a2e:	b01d      	add	sp, #116	@ 0x74
 8010a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a34:	b002      	add	sp, #8
 8010a36:	4770      	bx	lr
 8010a38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010a3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010a40:	f04f 0300 	mov.w	r3, #0
 8010a44:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010a46:	bf14      	ite	ne
 8010a48:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010a4c:	4623      	moveq	r3, r4
 8010a4e:	9304      	str	r3, [sp, #16]
 8010a50:	9307      	str	r3, [sp, #28]
 8010a52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010a56:	9002      	str	r0, [sp, #8]
 8010a58:	9006      	str	r0, [sp, #24]
 8010a5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010a5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010a60:	ab21      	add	r3, sp, #132	@ 0x84
 8010a62:	a902      	add	r1, sp, #8
 8010a64:	4628      	mov	r0, r5
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	f002 f844 	bl	8012af4 <_svfiprintf_r>
 8010a6c:	1c43      	adds	r3, r0, #1
 8010a6e:	bfbc      	itt	lt
 8010a70:	238b      	movlt	r3, #139	@ 0x8b
 8010a72:	602b      	strlt	r3, [r5, #0]
 8010a74:	2c00      	cmp	r4, #0
 8010a76:	d0da      	beq.n	8010a2e <sniprintf+0x16>
 8010a78:	9b02      	ldr	r3, [sp, #8]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	701a      	strb	r2, [r3, #0]
 8010a7e:	e7d6      	b.n	8010a2e <sniprintf+0x16>
 8010a80:	240001b0 	.word	0x240001b0

08010a84 <__sread>:
 8010a84:	b510      	push	{r4, lr}
 8010a86:	460c      	mov	r4, r1
 8010a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a8c:	f000 f87e 	bl	8010b8c <_read_r>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	bfab      	itete	ge
 8010a94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010a96:	89a3      	ldrhlt	r3, [r4, #12]
 8010a98:	181b      	addge	r3, r3, r0
 8010a9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010a9e:	bfac      	ite	ge
 8010aa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010aa2:	81a3      	strhlt	r3, [r4, #12]
 8010aa4:	bd10      	pop	{r4, pc}

08010aa6 <__swrite>:
 8010aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aaa:	461f      	mov	r7, r3
 8010aac:	898b      	ldrh	r3, [r1, #12]
 8010aae:	05db      	lsls	r3, r3, #23
 8010ab0:	4605      	mov	r5, r0
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	4616      	mov	r6, r2
 8010ab6:	d505      	bpl.n	8010ac4 <__swrite+0x1e>
 8010ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010abc:	2302      	movs	r3, #2
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f000 f852 	bl	8010b68 <_lseek_r>
 8010ac4:	89a3      	ldrh	r3, [r4, #12]
 8010ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ace:	81a3      	strh	r3, [r4, #12]
 8010ad0:	4632      	mov	r2, r6
 8010ad2:	463b      	mov	r3, r7
 8010ad4:	4628      	mov	r0, r5
 8010ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ada:	f000 b869 	b.w	8010bb0 <_write_r>

08010ade <__sseek>:
 8010ade:	b510      	push	{r4, lr}
 8010ae0:	460c      	mov	r4, r1
 8010ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ae6:	f000 f83f 	bl	8010b68 <_lseek_r>
 8010aea:	1c43      	adds	r3, r0, #1
 8010aec:	89a3      	ldrh	r3, [r4, #12]
 8010aee:	bf15      	itete	ne
 8010af0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010af2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010af6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010afa:	81a3      	strheq	r3, [r4, #12]
 8010afc:	bf18      	it	ne
 8010afe:	81a3      	strhne	r3, [r4, #12]
 8010b00:	bd10      	pop	{r4, pc}

08010b02 <__sclose>:
 8010b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b06:	f000 b81f 	b.w	8010b48 <_close_r>

08010b0a <memset>:
 8010b0a:	4402      	add	r2, r0
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d100      	bne.n	8010b14 <memset+0xa>
 8010b12:	4770      	bx	lr
 8010b14:	f803 1b01 	strb.w	r1, [r3], #1
 8010b18:	e7f9      	b.n	8010b0e <memset+0x4>

08010b1a <strncmp>:
 8010b1a:	b510      	push	{r4, lr}
 8010b1c:	b16a      	cbz	r2, 8010b3a <strncmp+0x20>
 8010b1e:	3901      	subs	r1, #1
 8010b20:	1884      	adds	r4, r0, r2
 8010b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b26:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d103      	bne.n	8010b36 <strncmp+0x1c>
 8010b2e:	42a0      	cmp	r0, r4
 8010b30:	d001      	beq.n	8010b36 <strncmp+0x1c>
 8010b32:	2a00      	cmp	r2, #0
 8010b34:	d1f5      	bne.n	8010b22 <strncmp+0x8>
 8010b36:	1ad0      	subs	r0, r2, r3
 8010b38:	bd10      	pop	{r4, pc}
 8010b3a:	4610      	mov	r0, r2
 8010b3c:	e7fc      	b.n	8010b38 <strncmp+0x1e>
	...

08010b40 <_localeconv_r>:
 8010b40:	4800      	ldr	r0, [pc, #0]	@ (8010b44 <_localeconv_r+0x4>)
 8010b42:	4770      	bx	lr
 8010b44:	24000134 	.word	0x24000134

08010b48 <_close_r>:
 8010b48:	b538      	push	{r3, r4, r5, lr}
 8010b4a:	4d06      	ldr	r5, [pc, #24]	@ (8010b64 <_close_r+0x1c>)
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	4604      	mov	r4, r0
 8010b50:	4608      	mov	r0, r1
 8010b52:	602b      	str	r3, [r5, #0]
 8010b54:	f7f1 f994 	bl	8001e80 <_close>
 8010b58:	1c43      	adds	r3, r0, #1
 8010b5a:	d102      	bne.n	8010b62 <_close_r+0x1a>
 8010b5c:	682b      	ldr	r3, [r5, #0]
 8010b5e:	b103      	cbz	r3, 8010b62 <_close_r+0x1a>
 8010b60:	6023      	str	r3, [r4, #0]
 8010b62:	bd38      	pop	{r3, r4, r5, pc}
 8010b64:	24004f08 	.word	0x24004f08

08010b68 <_lseek_r>:
 8010b68:	b538      	push	{r3, r4, r5, lr}
 8010b6a:	4d07      	ldr	r5, [pc, #28]	@ (8010b88 <_lseek_r+0x20>)
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	4608      	mov	r0, r1
 8010b70:	4611      	mov	r1, r2
 8010b72:	2200      	movs	r2, #0
 8010b74:	602a      	str	r2, [r5, #0]
 8010b76:	461a      	mov	r2, r3
 8010b78:	f7f1 f9a9 	bl	8001ece <_lseek>
 8010b7c:	1c43      	adds	r3, r0, #1
 8010b7e:	d102      	bne.n	8010b86 <_lseek_r+0x1e>
 8010b80:	682b      	ldr	r3, [r5, #0]
 8010b82:	b103      	cbz	r3, 8010b86 <_lseek_r+0x1e>
 8010b84:	6023      	str	r3, [r4, #0]
 8010b86:	bd38      	pop	{r3, r4, r5, pc}
 8010b88:	24004f08 	.word	0x24004f08

08010b8c <_read_r>:
 8010b8c:	b538      	push	{r3, r4, r5, lr}
 8010b8e:	4d07      	ldr	r5, [pc, #28]	@ (8010bac <_read_r+0x20>)
 8010b90:	4604      	mov	r4, r0
 8010b92:	4608      	mov	r0, r1
 8010b94:	4611      	mov	r1, r2
 8010b96:	2200      	movs	r2, #0
 8010b98:	602a      	str	r2, [r5, #0]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	f7f1 f937 	bl	8001e0e <_read>
 8010ba0:	1c43      	adds	r3, r0, #1
 8010ba2:	d102      	bne.n	8010baa <_read_r+0x1e>
 8010ba4:	682b      	ldr	r3, [r5, #0]
 8010ba6:	b103      	cbz	r3, 8010baa <_read_r+0x1e>
 8010ba8:	6023      	str	r3, [r4, #0]
 8010baa:	bd38      	pop	{r3, r4, r5, pc}
 8010bac:	24004f08 	.word	0x24004f08

08010bb0 <_write_r>:
 8010bb0:	b538      	push	{r3, r4, r5, lr}
 8010bb2:	4d07      	ldr	r5, [pc, #28]	@ (8010bd0 <_write_r+0x20>)
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	4608      	mov	r0, r1
 8010bb8:	4611      	mov	r1, r2
 8010bba:	2200      	movs	r2, #0
 8010bbc:	602a      	str	r2, [r5, #0]
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	f7f1 f942 	bl	8001e48 <_write>
 8010bc4:	1c43      	adds	r3, r0, #1
 8010bc6:	d102      	bne.n	8010bce <_write_r+0x1e>
 8010bc8:	682b      	ldr	r3, [r5, #0]
 8010bca:	b103      	cbz	r3, 8010bce <_write_r+0x1e>
 8010bcc:	6023      	str	r3, [r4, #0]
 8010bce:	bd38      	pop	{r3, r4, r5, pc}
 8010bd0:	24004f08 	.word	0x24004f08

08010bd4 <__errno>:
 8010bd4:	4b01      	ldr	r3, [pc, #4]	@ (8010bdc <__errno+0x8>)
 8010bd6:	6818      	ldr	r0, [r3, #0]
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	240001b0 	.word	0x240001b0

08010be0 <__libc_init_array>:
 8010be0:	b570      	push	{r4, r5, r6, lr}
 8010be2:	4d0d      	ldr	r5, [pc, #52]	@ (8010c18 <__libc_init_array+0x38>)
 8010be4:	4c0d      	ldr	r4, [pc, #52]	@ (8010c1c <__libc_init_array+0x3c>)
 8010be6:	1b64      	subs	r4, r4, r5
 8010be8:	10a4      	asrs	r4, r4, #2
 8010bea:	2600      	movs	r6, #0
 8010bec:	42a6      	cmp	r6, r4
 8010bee:	d109      	bne.n	8010c04 <__libc_init_array+0x24>
 8010bf0:	4d0b      	ldr	r5, [pc, #44]	@ (8010c20 <__libc_init_array+0x40>)
 8010bf2:	4c0c      	ldr	r4, [pc, #48]	@ (8010c24 <__libc_init_array+0x44>)
 8010bf4:	f002 fc6e 	bl	80134d4 <_init>
 8010bf8:	1b64      	subs	r4, r4, r5
 8010bfa:	10a4      	asrs	r4, r4, #2
 8010bfc:	2600      	movs	r6, #0
 8010bfe:	42a6      	cmp	r6, r4
 8010c00:	d105      	bne.n	8010c0e <__libc_init_array+0x2e>
 8010c02:	bd70      	pop	{r4, r5, r6, pc}
 8010c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c08:	4798      	blx	r3
 8010c0a:	3601      	adds	r6, #1
 8010c0c:	e7ee      	b.n	8010bec <__libc_init_array+0xc>
 8010c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c12:	4798      	blx	r3
 8010c14:	3601      	adds	r6, #1
 8010c16:	e7f2      	b.n	8010bfe <__libc_init_array+0x1e>
 8010c18:	08013cdc 	.word	0x08013cdc
 8010c1c:	08013cdc 	.word	0x08013cdc
 8010c20:	08013cdc 	.word	0x08013cdc
 8010c24:	08013ce0 	.word	0x08013ce0

08010c28 <__retarget_lock_init_recursive>:
 8010c28:	4770      	bx	lr

08010c2a <__retarget_lock_acquire_recursive>:
 8010c2a:	4770      	bx	lr

08010c2c <__retarget_lock_release_recursive>:
 8010c2c:	4770      	bx	lr

08010c2e <strcpy>:
 8010c2e:	4603      	mov	r3, r0
 8010c30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c34:	f803 2b01 	strb.w	r2, [r3], #1
 8010c38:	2a00      	cmp	r2, #0
 8010c3a:	d1f9      	bne.n	8010c30 <strcpy+0x2>
 8010c3c:	4770      	bx	lr

08010c3e <memcpy>:
 8010c3e:	440a      	add	r2, r1
 8010c40:	4291      	cmp	r1, r2
 8010c42:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010c46:	d100      	bne.n	8010c4a <memcpy+0xc>
 8010c48:	4770      	bx	lr
 8010c4a:	b510      	push	{r4, lr}
 8010c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c54:	4291      	cmp	r1, r2
 8010c56:	d1f9      	bne.n	8010c4c <memcpy+0xe>
 8010c58:	bd10      	pop	{r4, pc}
 8010c5a:	0000      	movs	r0, r0
 8010c5c:	0000      	movs	r0, r0
	...

08010c60 <nan>:
 8010c60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010c68 <nan+0x8>
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	00000000 	.word	0x00000000
 8010c6c:	7ff80000 	.word	0x7ff80000

08010c70 <quorem>:
 8010c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	6903      	ldr	r3, [r0, #16]
 8010c76:	690c      	ldr	r4, [r1, #16]
 8010c78:	42a3      	cmp	r3, r4
 8010c7a:	4607      	mov	r7, r0
 8010c7c:	db7e      	blt.n	8010d7c <quorem+0x10c>
 8010c7e:	3c01      	subs	r4, #1
 8010c80:	f101 0814 	add.w	r8, r1, #20
 8010c84:	00a3      	lsls	r3, r4, #2
 8010c86:	f100 0514 	add.w	r5, r0, #20
 8010c8a:	9300      	str	r3, [sp, #0]
 8010c8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c90:	9301      	str	r3, [sp, #4]
 8010c92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010c96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ca2:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ca6:	d32e      	bcc.n	8010d06 <quorem+0x96>
 8010ca8:	f04f 0a00 	mov.w	sl, #0
 8010cac:	46c4      	mov	ip, r8
 8010cae:	46ae      	mov	lr, r5
 8010cb0:	46d3      	mov	fp, sl
 8010cb2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010cb6:	b298      	uxth	r0, r3
 8010cb8:	fb06 a000 	mla	r0, r6, r0, sl
 8010cbc:	0c02      	lsrs	r2, r0, #16
 8010cbe:	0c1b      	lsrs	r3, r3, #16
 8010cc0:	fb06 2303 	mla	r3, r6, r3, r2
 8010cc4:	f8de 2000 	ldr.w	r2, [lr]
 8010cc8:	b280      	uxth	r0, r0
 8010cca:	b292      	uxth	r2, r2
 8010ccc:	1a12      	subs	r2, r2, r0
 8010cce:	445a      	add	r2, fp
 8010cd0:	f8de 0000 	ldr.w	r0, [lr]
 8010cd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010cde:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010ce2:	b292      	uxth	r2, r2
 8010ce4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010ce8:	45e1      	cmp	r9, ip
 8010cea:	f84e 2b04 	str.w	r2, [lr], #4
 8010cee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010cf2:	d2de      	bcs.n	8010cb2 <quorem+0x42>
 8010cf4:	9b00      	ldr	r3, [sp, #0]
 8010cf6:	58eb      	ldr	r3, [r5, r3]
 8010cf8:	b92b      	cbnz	r3, 8010d06 <quorem+0x96>
 8010cfa:	9b01      	ldr	r3, [sp, #4]
 8010cfc:	3b04      	subs	r3, #4
 8010cfe:	429d      	cmp	r5, r3
 8010d00:	461a      	mov	r2, r3
 8010d02:	d32f      	bcc.n	8010d64 <quorem+0xf4>
 8010d04:	613c      	str	r4, [r7, #16]
 8010d06:	4638      	mov	r0, r7
 8010d08:	f001 fca0 	bl	801264c <__mcmp>
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	db25      	blt.n	8010d5c <quorem+0xec>
 8010d10:	4629      	mov	r1, r5
 8010d12:	2000      	movs	r0, #0
 8010d14:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d18:	f8d1 c000 	ldr.w	ip, [r1]
 8010d1c:	fa1f fe82 	uxth.w	lr, r2
 8010d20:	fa1f f38c 	uxth.w	r3, ip
 8010d24:	eba3 030e 	sub.w	r3, r3, lr
 8010d28:	4403      	add	r3, r0
 8010d2a:	0c12      	lsrs	r2, r2, #16
 8010d2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010d30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d3a:	45c1      	cmp	r9, r8
 8010d3c:	f841 3b04 	str.w	r3, [r1], #4
 8010d40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010d44:	d2e6      	bcs.n	8010d14 <quorem+0xa4>
 8010d46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010d4e:	b922      	cbnz	r2, 8010d5a <quorem+0xea>
 8010d50:	3b04      	subs	r3, #4
 8010d52:	429d      	cmp	r5, r3
 8010d54:	461a      	mov	r2, r3
 8010d56:	d30b      	bcc.n	8010d70 <quorem+0x100>
 8010d58:	613c      	str	r4, [r7, #16]
 8010d5a:	3601      	adds	r6, #1
 8010d5c:	4630      	mov	r0, r6
 8010d5e:	b003      	add	sp, #12
 8010d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d64:	6812      	ldr	r2, [r2, #0]
 8010d66:	3b04      	subs	r3, #4
 8010d68:	2a00      	cmp	r2, #0
 8010d6a:	d1cb      	bne.n	8010d04 <quorem+0x94>
 8010d6c:	3c01      	subs	r4, #1
 8010d6e:	e7c6      	b.n	8010cfe <quorem+0x8e>
 8010d70:	6812      	ldr	r2, [r2, #0]
 8010d72:	3b04      	subs	r3, #4
 8010d74:	2a00      	cmp	r2, #0
 8010d76:	d1ef      	bne.n	8010d58 <quorem+0xe8>
 8010d78:	3c01      	subs	r4, #1
 8010d7a:	e7ea      	b.n	8010d52 <quorem+0xe2>
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	e7ee      	b.n	8010d5e <quorem+0xee>

08010d80 <_dtoa_r>:
 8010d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d84:	ed2d 8b02 	vpush	{d8}
 8010d88:	69c7      	ldr	r7, [r0, #28]
 8010d8a:	b091      	sub	sp, #68	@ 0x44
 8010d8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010d90:	ec55 4b10 	vmov	r4, r5, d0
 8010d94:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010d96:	9107      	str	r1, [sp, #28]
 8010d98:	4681      	mov	r9, r0
 8010d9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d9c:	930d      	str	r3, [sp, #52]	@ 0x34
 8010d9e:	b97f      	cbnz	r7, 8010dc0 <_dtoa_r+0x40>
 8010da0:	2010      	movs	r0, #16
 8010da2:	f001 f8cf 	bl	8011f44 <malloc>
 8010da6:	4602      	mov	r2, r0
 8010da8:	f8c9 001c 	str.w	r0, [r9, #28]
 8010dac:	b920      	cbnz	r0, 8010db8 <_dtoa_r+0x38>
 8010dae:	4ba0      	ldr	r3, [pc, #640]	@ (8011030 <_dtoa_r+0x2b0>)
 8010db0:	21ef      	movs	r1, #239	@ 0xef
 8010db2:	48a0      	ldr	r0, [pc, #640]	@ (8011034 <_dtoa_r+0x2b4>)
 8010db4:	f002 f870 	bl	8012e98 <__assert_func>
 8010db8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010dbc:	6007      	str	r7, [r0, #0]
 8010dbe:	60c7      	str	r7, [r0, #12]
 8010dc0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010dc4:	6819      	ldr	r1, [r3, #0]
 8010dc6:	b159      	cbz	r1, 8010de0 <_dtoa_r+0x60>
 8010dc8:	685a      	ldr	r2, [r3, #4]
 8010dca:	604a      	str	r2, [r1, #4]
 8010dcc:	2301      	movs	r3, #1
 8010dce:	4093      	lsls	r3, r2
 8010dd0:	608b      	str	r3, [r1, #8]
 8010dd2:	4648      	mov	r0, r9
 8010dd4:	f001 f9be 	bl	8012154 <_Bfree>
 8010dd8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	601a      	str	r2, [r3, #0]
 8010de0:	1e2b      	subs	r3, r5, #0
 8010de2:	bfbb      	ittet	lt
 8010de4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010de8:	9303      	strlt	r3, [sp, #12]
 8010dea:	2300      	movge	r3, #0
 8010dec:	2201      	movlt	r2, #1
 8010dee:	bfac      	ite	ge
 8010df0:	6033      	strge	r3, [r6, #0]
 8010df2:	6032      	strlt	r2, [r6, #0]
 8010df4:	4b90      	ldr	r3, [pc, #576]	@ (8011038 <_dtoa_r+0x2b8>)
 8010df6:	9e03      	ldr	r6, [sp, #12]
 8010df8:	43b3      	bics	r3, r6
 8010dfa:	d110      	bne.n	8010e1e <_dtoa_r+0x9e>
 8010dfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010dfe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010e02:	6013      	str	r3, [r2, #0]
 8010e04:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010e08:	4323      	orrs	r3, r4
 8010e0a:	f000 84e6 	beq.w	80117da <_dtoa_r+0xa5a>
 8010e0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010e10:	4f8a      	ldr	r7, [pc, #552]	@ (801103c <_dtoa_r+0x2bc>)
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	f000 84e8 	beq.w	80117e8 <_dtoa_r+0xa68>
 8010e18:	1cfb      	adds	r3, r7, #3
 8010e1a:	f000 bce3 	b.w	80117e4 <_dtoa_r+0xa64>
 8010e1e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010e22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e2a:	d10a      	bne.n	8010e42 <_dtoa_r+0xc2>
 8010e2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e2e:	2301      	movs	r3, #1
 8010e30:	6013      	str	r3, [r2, #0]
 8010e32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010e34:	b113      	cbz	r3, 8010e3c <_dtoa_r+0xbc>
 8010e36:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010e38:	4b81      	ldr	r3, [pc, #516]	@ (8011040 <_dtoa_r+0x2c0>)
 8010e3a:	6013      	str	r3, [r2, #0]
 8010e3c:	4f81      	ldr	r7, [pc, #516]	@ (8011044 <_dtoa_r+0x2c4>)
 8010e3e:	f000 bcd3 	b.w	80117e8 <_dtoa_r+0xa68>
 8010e42:	aa0e      	add	r2, sp, #56	@ 0x38
 8010e44:	a90f      	add	r1, sp, #60	@ 0x3c
 8010e46:	4648      	mov	r0, r9
 8010e48:	eeb0 0b48 	vmov.f64	d0, d8
 8010e4c:	f001 fd1e 	bl	801288c <__d2b>
 8010e50:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e56:	9001      	str	r0, [sp, #4]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d045      	beq.n	8010ee8 <_dtoa_r+0x168>
 8010e5c:	eeb0 7b48 	vmov.f64	d7, d8
 8010e60:	ee18 1a90 	vmov	r1, s17
 8010e64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010e68:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010e6c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010e70:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010e74:	2500      	movs	r5, #0
 8010e76:	ee07 1a90 	vmov	s15, r1
 8010e7a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010e7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011018 <_dtoa_r+0x298>
 8010e82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e86:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011020 <_dtoa_r+0x2a0>
 8010e8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010e8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011028 <_dtoa_r+0x2a8>
 8010e92:	ee07 3a90 	vmov	s15, r3
 8010e96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010e9a:	eeb0 7b46 	vmov.f64	d7, d6
 8010e9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010ea2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010ea6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eae:	ee16 8a90 	vmov	r8, s13
 8010eb2:	d508      	bpl.n	8010ec6 <_dtoa_r+0x146>
 8010eb4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010eb8:	eeb4 6b47 	vcmp.f64	d6, d7
 8010ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec0:	bf18      	it	ne
 8010ec2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8010ec6:	f1b8 0f16 	cmp.w	r8, #22
 8010eca:	d82b      	bhi.n	8010f24 <_dtoa_r+0x1a4>
 8010ecc:	495e      	ldr	r1, [pc, #376]	@ (8011048 <_dtoa_r+0x2c8>)
 8010ece:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010ed2:	ed91 7b00 	vldr	d7, [r1]
 8010ed6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ede:	d501      	bpl.n	8010ee4 <_dtoa_r+0x164>
 8010ee0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	e01e      	b.n	8010f26 <_dtoa_r+0x1a6>
 8010ee8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010eea:	4413      	add	r3, r2
 8010eec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010ef0:	2920      	cmp	r1, #32
 8010ef2:	bfc1      	itttt	gt
 8010ef4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010ef8:	408e      	lslgt	r6, r1
 8010efa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010efe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010f02:	bfd6      	itet	le
 8010f04:	f1c1 0120 	rsble	r1, r1, #32
 8010f08:	4331      	orrgt	r1, r6
 8010f0a:	fa04 f101 	lslle.w	r1, r4, r1
 8010f0e:	ee07 1a90 	vmov	s15, r1
 8010f12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010f16:	3b01      	subs	r3, #1
 8010f18:	ee17 1a90 	vmov	r1, s15
 8010f1c:	2501      	movs	r5, #1
 8010f1e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010f22:	e7a8      	b.n	8010e76 <_dtoa_r+0xf6>
 8010f24:	2101      	movs	r1, #1
 8010f26:	1ad2      	subs	r2, r2, r3
 8010f28:	1e53      	subs	r3, r2, #1
 8010f2a:	9306      	str	r3, [sp, #24]
 8010f2c:	bf45      	ittet	mi
 8010f2e:	f1c2 0301 	rsbmi	r3, r2, #1
 8010f32:	9304      	strmi	r3, [sp, #16]
 8010f34:	2300      	movpl	r3, #0
 8010f36:	2300      	movmi	r3, #0
 8010f38:	bf4c      	ite	mi
 8010f3a:	9306      	strmi	r3, [sp, #24]
 8010f3c:	9304      	strpl	r3, [sp, #16]
 8010f3e:	f1b8 0f00 	cmp.w	r8, #0
 8010f42:	910c      	str	r1, [sp, #48]	@ 0x30
 8010f44:	db18      	blt.n	8010f78 <_dtoa_r+0x1f8>
 8010f46:	9b06      	ldr	r3, [sp, #24]
 8010f48:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010f4c:	4443      	add	r3, r8
 8010f4e:	9306      	str	r3, [sp, #24]
 8010f50:	2300      	movs	r3, #0
 8010f52:	9a07      	ldr	r2, [sp, #28]
 8010f54:	2a09      	cmp	r2, #9
 8010f56:	d845      	bhi.n	8010fe4 <_dtoa_r+0x264>
 8010f58:	2a05      	cmp	r2, #5
 8010f5a:	bfc4      	itt	gt
 8010f5c:	3a04      	subgt	r2, #4
 8010f5e:	9207      	strgt	r2, [sp, #28]
 8010f60:	9a07      	ldr	r2, [sp, #28]
 8010f62:	f1a2 0202 	sub.w	r2, r2, #2
 8010f66:	bfcc      	ite	gt
 8010f68:	2400      	movgt	r4, #0
 8010f6a:	2401      	movle	r4, #1
 8010f6c:	2a03      	cmp	r2, #3
 8010f6e:	d844      	bhi.n	8010ffa <_dtoa_r+0x27a>
 8010f70:	e8df f002 	tbb	[pc, r2]
 8010f74:	0b173634 	.word	0x0b173634
 8010f78:	9b04      	ldr	r3, [sp, #16]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	eba3 0308 	sub.w	r3, r3, r8
 8010f80:	9304      	str	r3, [sp, #16]
 8010f82:	920a      	str	r2, [sp, #40]	@ 0x28
 8010f84:	f1c8 0300 	rsb	r3, r8, #0
 8010f88:	e7e3      	b.n	8010f52 <_dtoa_r+0x1d2>
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	9208      	str	r2, [sp, #32]
 8010f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f90:	eb08 0b02 	add.w	fp, r8, r2
 8010f94:	f10b 0a01 	add.w	sl, fp, #1
 8010f98:	4652      	mov	r2, sl
 8010f9a:	2a01      	cmp	r2, #1
 8010f9c:	bfb8      	it	lt
 8010f9e:	2201      	movlt	r2, #1
 8010fa0:	e006      	b.n	8010fb0 <_dtoa_r+0x230>
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	9208      	str	r2, [sp, #32]
 8010fa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010fa8:	2a00      	cmp	r2, #0
 8010faa:	dd29      	ble.n	8011000 <_dtoa_r+0x280>
 8010fac:	4693      	mov	fp, r2
 8010fae:	4692      	mov	sl, r2
 8010fb0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	2004      	movs	r0, #4
 8010fb8:	f100 0614 	add.w	r6, r0, #20
 8010fbc:	4296      	cmp	r6, r2
 8010fbe:	d926      	bls.n	801100e <_dtoa_r+0x28e>
 8010fc0:	6079      	str	r1, [r7, #4]
 8010fc2:	4648      	mov	r0, r9
 8010fc4:	9305      	str	r3, [sp, #20]
 8010fc6:	f001 f885 	bl	80120d4 <_Balloc>
 8010fca:	9b05      	ldr	r3, [sp, #20]
 8010fcc:	4607      	mov	r7, r0
 8010fce:	2800      	cmp	r0, #0
 8010fd0:	d13e      	bne.n	8011050 <_dtoa_r+0x2d0>
 8010fd2:	4b1e      	ldr	r3, [pc, #120]	@ (801104c <_dtoa_r+0x2cc>)
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8010fda:	e6ea      	b.n	8010db2 <_dtoa_r+0x32>
 8010fdc:	2200      	movs	r2, #0
 8010fde:	e7e1      	b.n	8010fa4 <_dtoa_r+0x224>
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	e7d3      	b.n	8010f8c <_dtoa_r+0x20c>
 8010fe4:	2401      	movs	r4, #1
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010fec:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	46da      	mov	sl, fp
 8010ff4:	2212      	movs	r2, #18
 8010ff6:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ff8:	e7da      	b.n	8010fb0 <_dtoa_r+0x230>
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	9208      	str	r2, [sp, #32]
 8010ffe:	e7f5      	b.n	8010fec <_dtoa_r+0x26c>
 8011000:	f04f 0b01 	mov.w	fp, #1
 8011004:	46da      	mov	sl, fp
 8011006:	465a      	mov	r2, fp
 8011008:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801100c:	e7d0      	b.n	8010fb0 <_dtoa_r+0x230>
 801100e:	3101      	adds	r1, #1
 8011010:	0040      	lsls	r0, r0, #1
 8011012:	e7d1      	b.n	8010fb8 <_dtoa_r+0x238>
 8011014:	f3af 8000 	nop.w
 8011018:	636f4361 	.word	0x636f4361
 801101c:	3fd287a7 	.word	0x3fd287a7
 8011020:	8b60c8b3 	.word	0x8b60c8b3
 8011024:	3fc68a28 	.word	0x3fc68a28
 8011028:	509f79fb 	.word	0x509f79fb
 801102c:	3fd34413 	.word	0x3fd34413
 8011030:	080138f3 	.word	0x080138f3
 8011034:	0801390a 	.word	0x0801390a
 8011038:	7ff00000 	.word	0x7ff00000
 801103c:	080138ef 	.word	0x080138ef
 8011040:	080138bb 	.word	0x080138bb
 8011044:	080138ba 	.word	0x080138ba
 8011048:	08013b08 	.word	0x08013b08
 801104c:	08013962 	.word	0x08013962
 8011050:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8011054:	f1ba 0f0e 	cmp.w	sl, #14
 8011058:	6010      	str	r0, [r2, #0]
 801105a:	d86e      	bhi.n	801113a <_dtoa_r+0x3ba>
 801105c:	2c00      	cmp	r4, #0
 801105e:	d06c      	beq.n	801113a <_dtoa_r+0x3ba>
 8011060:	f1b8 0f00 	cmp.w	r8, #0
 8011064:	f340 80b4 	ble.w	80111d0 <_dtoa_r+0x450>
 8011068:	4ac8      	ldr	r2, [pc, #800]	@ (801138c <_dtoa_r+0x60c>)
 801106a:	f008 010f 	and.w	r1, r8, #15
 801106e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011072:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011076:	ed92 7b00 	vldr	d7, [r2]
 801107a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801107e:	f000 809b 	beq.w	80111b8 <_dtoa_r+0x438>
 8011082:	4ac3      	ldr	r2, [pc, #780]	@ (8011390 <_dtoa_r+0x610>)
 8011084:	ed92 6b08 	vldr	d6, [r2, #32]
 8011088:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801108c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011090:	f001 010f 	and.w	r1, r1, #15
 8011094:	2203      	movs	r2, #3
 8011096:	48be      	ldr	r0, [pc, #760]	@ (8011390 <_dtoa_r+0x610>)
 8011098:	2900      	cmp	r1, #0
 801109a:	f040 808f 	bne.w	80111bc <_dtoa_r+0x43c>
 801109e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80110a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80110a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80110aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80110ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110b0:	2900      	cmp	r1, #0
 80110b2:	f000 80b3 	beq.w	801121c <_dtoa_r+0x49c>
 80110b6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80110ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80110be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c2:	f140 80ab 	bpl.w	801121c <_dtoa_r+0x49c>
 80110c6:	f1ba 0f00 	cmp.w	sl, #0
 80110ca:	f000 80a7 	beq.w	801121c <_dtoa_r+0x49c>
 80110ce:	f1bb 0f00 	cmp.w	fp, #0
 80110d2:	dd30      	ble.n	8011136 <_dtoa_r+0x3b6>
 80110d4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80110d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80110dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80110e0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80110e4:	9105      	str	r1, [sp, #20]
 80110e6:	3201      	adds	r2, #1
 80110e8:	465c      	mov	r4, fp
 80110ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 80110ee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80110f2:	ee07 2a90 	vmov	s15, r2
 80110f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80110fa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80110fe:	ee15 2a90 	vmov	r2, s11
 8011102:	ec51 0b15 	vmov	r0, r1, d5
 8011106:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801110a:	2c00      	cmp	r4, #0
 801110c:	f040 808a 	bne.w	8011224 <_dtoa_r+0x4a4>
 8011110:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011114:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011118:	ec41 0b17 	vmov	d7, r0, r1
 801111c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011124:	f300 826a 	bgt.w	80115fc <_dtoa_r+0x87c>
 8011128:	eeb1 7b47 	vneg.f64	d7, d7
 801112c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011134:	d423      	bmi.n	801117e <_dtoa_r+0x3fe>
 8011136:	ed8d 8b02 	vstr	d8, [sp, #8]
 801113a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801113c:	2a00      	cmp	r2, #0
 801113e:	f2c0 8129 	blt.w	8011394 <_dtoa_r+0x614>
 8011142:	f1b8 0f0e 	cmp.w	r8, #14
 8011146:	f300 8125 	bgt.w	8011394 <_dtoa_r+0x614>
 801114a:	4b90      	ldr	r3, [pc, #576]	@ (801138c <_dtoa_r+0x60c>)
 801114c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011150:	ed93 6b00 	vldr	d6, [r3]
 8011154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011156:	2b00      	cmp	r3, #0
 8011158:	f280 80c8 	bge.w	80112ec <_dtoa_r+0x56c>
 801115c:	f1ba 0f00 	cmp.w	sl, #0
 8011160:	f300 80c4 	bgt.w	80112ec <_dtoa_r+0x56c>
 8011164:	d10b      	bne.n	801117e <_dtoa_r+0x3fe>
 8011166:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801116a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801116e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011172:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801117a:	f2c0 823c 	blt.w	80115f6 <_dtoa_r+0x876>
 801117e:	2400      	movs	r4, #0
 8011180:	4625      	mov	r5, r4
 8011182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011184:	43db      	mvns	r3, r3
 8011186:	9305      	str	r3, [sp, #20]
 8011188:	463e      	mov	r6, r7
 801118a:	f04f 0800 	mov.w	r8, #0
 801118e:	4621      	mov	r1, r4
 8011190:	4648      	mov	r0, r9
 8011192:	f000 ffdf 	bl	8012154 <_Bfree>
 8011196:	2d00      	cmp	r5, #0
 8011198:	f000 80a2 	beq.w	80112e0 <_dtoa_r+0x560>
 801119c:	f1b8 0f00 	cmp.w	r8, #0
 80111a0:	d005      	beq.n	80111ae <_dtoa_r+0x42e>
 80111a2:	45a8      	cmp	r8, r5
 80111a4:	d003      	beq.n	80111ae <_dtoa_r+0x42e>
 80111a6:	4641      	mov	r1, r8
 80111a8:	4648      	mov	r0, r9
 80111aa:	f000 ffd3 	bl	8012154 <_Bfree>
 80111ae:	4629      	mov	r1, r5
 80111b0:	4648      	mov	r0, r9
 80111b2:	f000 ffcf 	bl	8012154 <_Bfree>
 80111b6:	e093      	b.n	80112e0 <_dtoa_r+0x560>
 80111b8:	2202      	movs	r2, #2
 80111ba:	e76c      	b.n	8011096 <_dtoa_r+0x316>
 80111bc:	07cc      	lsls	r4, r1, #31
 80111be:	d504      	bpl.n	80111ca <_dtoa_r+0x44a>
 80111c0:	ed90 6b00 	vldr	d6, [r0]
 80111c4:	3201      	adds	r2, #1
 80111c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80111ca:	1049      	asrs	r1, r1, #1
 80111cc:	3008      	adds	r0, #8
 80111ce:	e763      	b.n	8011098 <_dtoa_r+0x318>
 80111d0:	d022      	beq.n	8011218 <_dtoa_r+0x498>
 80111d2:	f1c8 0100 	rsb	r1, r8, #0
 80111d6:	4a6d      	ldr	r2, [pc, #436]	@ (801138c <_dtoa_r+0x60c>)
 80111d8:	f001 000f 	and.w	r0, r1, #15
 80111dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80111e0:	ed92 7b00 	vldr	d7, [r2]
 80111e4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80111e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80111ec:	4868      	ldr	r0, [pc, #416]	@ (8011390 <_dtoa_r+0x610>)
 80111ee:	1109      	asrs	r1, r1, #4
 80111f0:	2400      	movs	r4, #0
 80111f2:	2202      	movs	r2, #2
 80111f4:	b929      	cbnz	r1, 8011202 <_dtoa_r+0x482>
 80111f6:	2c00      	cmp	r4, #0
 80111f8:	f43f af57 	beq.w	80110aa <_dtoa_r+0x32a>
 80111fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011200:	e753      	b.n	80110aa <_dtoa_r+0x32a>
 8011202:	07ce      	lsls	r6, r1, #31
 8011204:	d505      	bpl.n	8011212 <_dtoa_r+0x492>
 8011206:	ed90 6b00 	vldr	d6, [r0]
 801120a:	3201      	adds	r2, #1
 801120c:	2401      	movs	r4, #1
 801120e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011212:	1049      	asrs	r1, r1, #1
 8011214:	3008      	adds	r0, #8
 8011216:	e7ed      	b.n	80111f4 <_dtoa_r+0x474>
 8011218:	2202      	movs	r2, #2
 801121a:	e746      	b.n	80110aa <_dtoa_r+0x32a>
 801121c:	f8cd 8014 	str.w	r8, [sp, #20]
 8011220:	4654      	mov	r4, sl
 8011222:	e762      	b.n	80110ea <_dtoa_r+0x36a>
 8011224:	4a59      	ldr	r2, [pc, #356]	@ (801138c <_dtoa_r+0x60c>)
 8011226:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801122a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801122e:	9a08      	ldr	r2, [sp, #32]
 8011230:	ec41 0b17 	vmov	d7, r0, r1
 8011234:	443c      	add	r4, r7
 8011236:	b34a      	cbz	r2, 801128c <_dtoa_r+0x50c>
 8011238:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801123c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8011240:	463e      	mov	r6, r7
 8011242:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011246:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801124a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801124e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011252:	ee14 2a90 	vmov	r2, s9
 8011256:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801125a:	3230      	adds	r2, #48	@ 0x30
 801125c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011260:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011268:	f806 2b01 	strb.w	r2, [r6], #1
 801126c:	d438      	bmi.n	80112e0 <_dtoa_r+0x560>
 801126e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011272:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801127a:	d46e      	bmi.n	801135a <_dtoa_r+0x5da>
 801127c:	42a6      	cmp	r6, r4
 801127e:	f43f af5a 	beq.w	8011136 <_dtoa_r+0x3b6>
 8011282:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011286:	ee26 6b03 	vmul.f64	d6, d6, d3
 801128a:	e7e0      	b.n	801124e <_dtoa_r+0x4ce>
 801128c:	4621      	mov	r1, r4
 801128e:	463e      	mov	r6, r7
 8011290:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011294:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011298:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801129c:	ee14 2a90 	vmov	r2, s9
 80112a0:	3230      	adds	r2, #48	@ 0x30
 80112a2:	f806 2b01 	strb.w	r2, [r6], #1
 80112a6:	42a6      	cmp	r6, r4
 80112a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80112ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80112b0:	d119      	bne.n	80112e6 <_dtoa_r+0x566>
 80112b2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80112b6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80112ba:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80112be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c2:	dc4a      	bgt.n	801135a <_dtoa_r+0x5da>
 80112c4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80112c8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80112cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d0:	f57f af31 	bpl.w	8011136 <_dtoa_r+0x3b6>
 80112d4:	460e      	mov	r6, r1
 80112d6:	3901      	subs	r1, #1
 80112d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80112dc:	2b30      	cmp	r3, #48	@ 0x30
 80112de:	d0f9      	beq.n	80112d4 <_dtoa_r+0x554>
 80112e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80112e4:	e027      	b.n	8011336 <_dtoa_r+0x5b6>
 80112e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80112ea:	e7d5      	b.n	8011298 <_dtoa_r+0x518>
 80112ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112f0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80112f4:	463e      	mov	r6, r7
 80112f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80112fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80112fe:	ee15 3a10 	vmov	r3, s10
 8011302:	3330      	adds	r3, #48	@ 0x30
 8011304:	f806 3b01 	strb.w	r3, [r6], #1
 8011308:	1bf3      	subs	r3, r6, r7
 801130a:	459a      	cmp	sl, r3
 801130c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011310:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011314:	d132      	bne.n	801137c <_dtoa_r+0x5fc>
 8011316:	ee37 7b07 	vadd.f64	d7, d7, d7
 801131a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011322:	dc18      	bgt.n	8011356 <_dtoa_r+0x5d6>
 8011324:	eeb4 7b46 	vcmp.f64	d7, d6
 8011328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801132c:	d103      	bne.n	8011336 <_dtoa_r+0x5b6>
 801132e:	ee15 3a10 	vmov	r3, s10
 8011332:	07db      	lsls	r3, r3, #31
 8011334:	d40f      	bmi.n	8011356 <_dtoa_r+0x5d6>
 8011336:	9901      	ldr	r1, [sp, #4]
 8011338:	4648      	mov	r0, r9
 801133a:	f000 ff0b 	bl	8012154 <_Bfree>
 801133e:	2300      	movs	r3, #0
 8011340:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011342:	7033      	strb	r3, [r6, #0]
 8011344:	f108 0301 	add.w	r3, r8, #1
 8011348:	6013      	str	r3, [r2, #0]
 801134a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801134c:	2b00      	cmp	r3, #0
 801134e:	f000 824b 	beq.w	80117e8 <_dtoa_r+0xa68>
 8011352:	601e      	str	r6, [r3, #0]
 8011354:	e248      	b.n	80117e8 <_dtoa_r+0xa68>
 8011356:	f8cd 8014 	str.w	r8, [sp, #20]
 801135a:	4633      	mov	r3, r6
 801135c:	461e      	mov	r6, r3
 801135e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011362:	2a39      	cmp	r2, #57	@ 0x39
 8011364:	d106      	bne.n	8011374 <_dtoa_r+0x5f4>
 8011366:	429f      	cmp	r7, r3
 8011368:	d1f8      	bne.n	801135c <_dtoa_r+0x5dc>
 801136a:	9a05      	ldr	r2, [sp, #20]
 801136c:	3201      	adds	r2, #1
 801136e:	9205      	str	r2, [sp, #20]
 8011370:	2230      	movs	r2, #48	@ 0x30
 8011372:	703a      	strb	r2, [r7, #0]
 8011374:	781a      	ldrb	r2, [r3, #0]
 8011376:	3201      	adds	r2, #1
 8011378:	701a      	strb	r2, [r3, #0]
 801137a:	e7b1      	b.n	80112e0 <_dtoa_r+0x560>
 801137c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011380:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011388:	d1b5      	bne.n	80112f6 <_dtoa_r+0x576>
 801138a:	e7d4      	b.n	8011336 <_dtoa_r+0x5b6>
 801138c:	08013b08 	.word	0x08013b08
 8011390:	08013ae0 	.word	0x08013ae0
 8011394:	9908      	ldr	r1, [sp, #32]
 8011396:	2900      	cmp	r1, #0
 8011398:	f000 80e9 	beq.w	801156e <_dtoa_r+0x7ee>
 801139c:	9907      	ldr	r1, [sp, #28]
 801139e:	2901      	cmp	r1, #1
 80113a0:	f300 80cb 	bgt.w	801153a <_dtoa_r+0x7ba>
 80113a4:	2d00      	cmp	r5, #0
 80113a6:	f000 80c4 	beq.w	8011532 <_dtoa_r+0x7b2>
 80113aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80113ae:	9e04      	ldr	r6, [sp, #16]
 80113b0:	461c      	mov	r4, r3
 80113b2:	9305      	str	r3, [sp, #20]
 80113b4:	9b04      	ldr	r3, [sp, #16]
 80113b6:	4413      	add	r3, r2
 80113b8:	9304      	str	r3, [sp, #16]
 80113ba:	9b06      	ldr	r3, [sp, #24]
 80113bc:	2101      	movs	r1, #1
 80113be:	4413      	add	r3, r2
 80113c0:	4648      	mov	r0, r9
 80113c2:	9306      	str	r3, [sp, #24]
 80113c4:	f000 ffc4 	bl	8012350 <__i2b>
 80113c8:	9b05      	ldr	r3, [sp, #20]
 80113ca:	4605      	mov	r5, r0
 80113cc:	b166      	cbz	r6, 80113e8 <_dtoa_r+0x668>
 80113ce:	9a06      	ldr	r2, [sp, #24]
 80113d0:	2a00      	cmp	r2, #0
 80113d2:	dd09      	ble.n	80113e8 <_dtoa_r+0x668>
 80113d4:	42b2      	cmp	r2, r6
 80113d6:	9904      	ldr	r1, [sp, #16]
 80113d8:	bfa8      	it	ge
 80113da:	4632      	movge	r2, r6
 80113dc:	1a89      	subs	r1, r1, r2
 80113de:	9104      	str	r1, [sp, #16]
 80113e0:	9906      	ldr	r1, [sp, #24]
 80113e2:	1ab6      	subs	r6, r6, r2
 80113e4:	1a8a      	subs	r2, r1, r2
 80113e6:	9206      	str	r2, [sp, #24]
 80113e8:	b30b      	cbz	r3, 801142e <_dtoa_r+0x6ae>
 80113ea:	9a08      	ldr	r2, [sp, #32]
 80113ec:	2a00      	cmp	r2, #0
 80113ee:	f000 80c5 	beq.w	801157c <_dtoa_r+0x7fc>
 80113f2:	2c00      	cmp	r4, #0
 80113f4:	f000 80bf 	beq.w	8011576 <_dtoa_r+0x7f6>
 80113f8:	4629      	mov	r1, r5
 80113fa:	4622      	mov	r2, r4
 80113fc:	4648      	mov	r0, r9
 80113fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011400:	f001 f85e 	bl	80124c0 <__pow5mult>
 8011404:	9a01      	ldr	r2, [sp, #4]
 8011406:	4601      	mov	r1, r0
 8011408:	4605      	mov	r5, r0
 801140a:	4648      	mov	r0, r9
 801140c:	f000 ffb6 	bl	801237c <__multiply>
 8011410:	9901      	ldr	r1, [sp, #4]
 8011412:	9005      	str	r0, [sp, #20]
 8011414:	4648      	mov	r0, r9
 8011416:	f000 fe9d 	bl	8012154 <_Bfree>
 801141a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801141c:	1b1b      	subs	r3, r3, r4
 801141e:	f000 80b0 	beq.w	8011582 <_dtoa_r+0x802>
 8011422:	9905      	ldr	r1, [sp, #20]
 8011424:	461a      	mov	r2, r3
 8011426:	4648      	mov	r0, r9
 8011428:	f001 f84a 	bl	80124c0 <__pow5mult>
 801142c:	9001      	str	r0, [sp, #4]
 801142e:	2101      	movs	r1, #1
 8011430:	4648      	mov	r0, r9
 8011432:	f000 ff8d 	bl	8012350 <__i2b>
 8011436:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011438:	4604      	mov	r4, r0
 801143a:	2b00      	cmp	r3, #0
 801143c:	f000 81da 	beq.w	80117f4 <_dtoa_r+0xa74>
 8011440:	461a      	mov	r2, r3
 8011442:	4601      	mov	r1, r0
 8011444:	4648      	mov	r0, r9
 8011446:	f001 f83b 	bl	80124c0 <__pow5mult>
 801144a:	9b07      	ldr	r3, [sp, #28]
 801144c:	2b01      	cmp	r3, #1
 801144e:	4604      	mov	r4, r0
 8011450:	f300 80a0 	bgt.w	8011594 <_dtoa_r+0x814>
 8011454:	9b02      	ldr	r3, [sp, #8]
 8011456:	2b00      	cmp	r3, #0
 8011458:	f040 8096 	bne.w	8011588 <_dtoa_r+0x808>
 801145c:	9b03      	ldr	r3, [sp, #12]
 801145e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011462:	2a00      	cmp	r2, #0
 8011464:	f040 8092 	bne.w	801158c <_dtoa_r+0x80c>
 8011468:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801146c:	0d12      	lsrs	r2, r2, #20
 801146e:	0512      	lsls	r2, r2, #20
 8011470:	2a00      	cmp	r2, #0
 8011472:	f000 808d 	beq.w	8011590 <_dtoa_r+0x810>
 8011476:	9b04      	ldr	r3, [sp, #16]
 8011478:	3301      	adds	r3, #1
 801147a:	9304      	str	r3, [sp, #16]
 801147c:	9b06      	ldr	r3, [sp, #24]
 801147e:	3301      	adds	r3, #1
 8011480:	9306      	str	r3, [sp, #24]
 8011482:	2301      	movs	r3, #1
 8011484:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011488:	2b00      	cmp	r3, #0
 801148a:	f000 81b9 	beq.w	8011800 <_dtoa_r+0xa80>
 801148e:	6922      	ldr	r2, [r4, #16]
 8011490:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011494:	6910      	ldr	r0, [r2, #16]
 8011496:	f000 ff0f 	bl	80122b8 <__hi0bits>
 801149a:	f1c0 0020 	rsb	r0, r0, #32
 801149e:	9b06      	ldr	r3, [sp, #24]
 80114a0:	4418      	add	r0, r3
 80114a2:	f010 001f 	ands.w	r0, r0, #31
 80114a6:	f000 8081 	beq.w	80115ac <_dtoa_r+0x82c>
 80114aa:	f1c0 0220 	rsb	r2, r0, #32
 80114ae:	2a04      	cmp	r2, #4
 80114b0:	dd73      	ble.n	801159a <_dtoa_r+0x81a>
 80114b2:	9b04      	ldr	r3, [sp, #16]
 80114b4:	f1c0 001c 	rsb	r0, r0, #28
 80114b8:	4403      	add	r3, r0
 80114ba:	9304      	str	r3, [sp, #16]
 80114bc:	9b06      	ldr	r3, [sp, #24]
 80114be:	4406      	add	r6, r0
 80114c0:	4403      	add	r3, r0
 80114c2:	9306      	str	r3, [sp, #24]
 80114c4:	9b04      	ldr	r3, [sp, #16]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	dd05      	ble.n	80114d6 <_dtoa_r+0x756>
 80114ca:	9901      	ldr	r1, [sp, #4]
 80114cc:	461a      	mov	r2, r3
 80114ce:	4648      	mov	r0, r9
 80114d0:	f001 f850 	bl	8012574 <__lshift>
 80114d4:	9001      	str	r0, [sp, #4]
 80114d6:	9b06      	ldr	r3, [sp, #24]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	dd05      	ble.n	80114e8 <_dtoa_r+0x768>
 80114dc:	4621      	mov	r1, r4
 80114de:	461a      	mov	r2, r3
 80114e0:	4648      	mov	r0, r9
 80114e2:	f001 f847 	bl	8012574 <__lshift>
 80114e6:	4604      	mov	r4, r0
 80114e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d060      	beq.n	80115b0 <_dtoa_r+0x830>
 80114ee:	9801      	ldr	r0, [sp, #4]
 80114f0:	4621      	mov	r1, r4
 80114f2:	f001 f8ab 	bl	801264c <__mcmp>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	da5a      	bge.n	80115b0 <_dtoa_r+0x830>
 80114fa:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80114fe:	9305      	str	r3, [sp, #20]
 8011500:	9901      	ldr	r1, [sp, #4]
 8011502:	2300      	movs	r3, #0
 8011504:	220a      	movs	r2, #10
 8011506:	4648      	mov	r0, r9
 8011508:	f000 fe46 	bl	8012198 <__multadd>
 801150c:	9b08      	ldr	r3, [sp, #32]
 801150e:	9001      	str	r0, [sp, #4]
 8011510:	2b00      	cmp	r3, #0
 8011512:	f000 8177 	beq.w	8011804 <_dtoa_r+0xa84>
 8011516:	4629      	mov	r1, r5
 8011518:	2300      	movs	r3, #0
 801151a:	220a      	movs	r2, #10
 801151c:	4648      	mov	r0, r9
 801151e:	f000 fe3b 	bl	8012198 <__multadd>
 8011522:	f1bb 0f00 	cmp.w	fp, #0
 8011526:	4605      	mov	r5, r0
 8011528:	dc6e      	bgt.n	8011608 <_dtoa_r+0x888>
 801152a:	9b07      	ldr	r3, [sp, #28]
 801152c:	2b02      	cmp	r3, #2
 801152e:	dc48      	bgt.n	80115c2 <_dtoa_r+0x842>
 8011530:	e06a      	b.n	8011608 <_dtoa_r+0x888>
 8011532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011534:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011538:	e739      	b.n	80113ae <_dtoa_r+0x62e>
 801153a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 801153e:	42a3      	cmp	r3, r4
 8011540:	db07      	blt.n	8011552 <_dtoa_r+0x7d2>
 8011542:	f1ba 0f00 	cmp.w	sl, #0
 8011546:	eba3 0404 	sub.w	r4, r3, r4
 801154a:	db0b      	blt.n	8011564 <_dtoa_r+0x7e4>
 801154c:	9e04      	ldr	r6, [sp, #16]
 801154e:	4652      	mov	r2, sl
 8011550:	e72f      	b.n	80113b2 <_dtoa_r+0x632>
 8011552:	1ae2      	subs	r2, r4, r3
 8011554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011556:	9e04      	ldr	r6, [sp, #16]
 8011558:	4413      	add	r3, r2
 801155a:	930a      	str	r3, [sp, #40]	@ 0x28
 801155c:	4652      	mov	r2, sl
 801155e:	4623      	mov	r3, r4
 8011560:	2400      	movs	r4, #0
 8011562:	e726      	b.n	80113b2 <_dtoa_r+0x632>
 8011564:	9a04      	ldr	r2, [sp, #16]
 8011566:	eba2 060a 	sub.w	r6, r2, sl
 801156a:	2200      	movs	r2, #0
 801156c:	e721      	b.n	80113b2 <_dtoa_r+0x632>
 801156e:	9e04      	ldr	r6, [sp, #16]
 8011570:	9d08      	ldr	r5, [sp, #32]
 8011572:	461c      	mov	r4, r3
 8011574:	e72a      	b.n	80113cc <_dtoa_r+0x64c>
 8011576:	9a01      	ldr	r2, [sp, #4]
 8011578:	9205      	str	r2, [sp, #20]
 801157a:	e752      	b.n	8011422 <_dtoa_r+0x6a2>
 801157c:	9901      	ldr	r1, [sp, #4]
 801157e:	461a      	mov	r2, r3
 8011580:	e751      	b.n	8011426 <_dtoa_r+0x6a6>
 8011582:	9b05      	ldr	r3, [sp, #20]
 8011584:	9301      	str	r3, [sp, #4]
 8011586:	e752      	b.n	801142e <_dtoa_r+0x6ae>
 8011588:	2300      	movs	r3, #0
 801158a:	e77b      	b.n	8011484 <_dtoa_r+0x704>
 801158c:	9b02      	ldr	r3, [sp, #8]
 801158e:	e779      	b.n	8011484 <_dtoa_r+0x704>
 8011590:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011592:	e778      	b.n	8011486 <_dtoa_r+0x706>
 8011594:	2300      	movs	r3, #0
 8011596:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011598:	e779      	b.n	801148e <_dtoa_r+0x70e>
 801159a:	d093      	beq.n	80114c4 <_dtoa_r+0x744>
 801159c:	9b04      	ldr	r3, [sp, #16]
 801159e:	321c      	adds	r2, #28
 80115a0:	4413      	add	r3, r2
 80115a2:	9304      	str	r3, [sp, #16]
 80115a4:	9b06      	ldr	r3, [sp, #24]
 80115a6:	4416      	add	r6, r2
 80115a8:	4413      	add	r3, r2
 80115aa:	e78a      	b.n	80114c2 <_dtoa_r+0x742>
 80115ac:	4602      	mov	r2, r0
 80115ae:	e7f5      	b.n	801159c <_dtoa_r+0x81c>
 80115b0:	f1ba 0f00 	cmp.w	sl, #0
 80115b4:	f8cd 8014 	str.w	r8, [sp, #20]
 80115b8:	46d3      	mov	fp, sl
 80115ba:	dc21      	bgt.n	8011600 <_dtoa_r+0x880>
 80115bc:	9b07      	ldr	r3, [sp, #28]
 80115be:	2b02      	cmp	r3, #2
 80115c0:	dd1e      	ble.n	8011600 <_dtoa_r+0x880>
 80115c2:	f1bb 0f00 	cmp.w	fp, #0
 80115c6:	f47f addc 	bne.w	8011182 <_dtoa_r+0x402>
 80115ca:	4621      	mov	r1, r4
 80115cc:	465b      	mov	r3, fp
 80115ce:	2205      	movs	r2, #5
 80115d0:	4648      	mov	r0, r9
 80115d2:	f000 fde1 	bl	8012198 <__multadd>
 80115d6:	4601      	mov	r1, r0
 80115d8:	4604      	mov	r4, r0
 80115da:	9801      	ldr	r0, [sp, #4]
 80115dc:	f001 f836 	bl	801264c <__mcmp>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	f77f adce 	ble.w	8011182 <_dtoa_r+0x402>
 80115e6:	463e      	mov	r6, r7
 80115e8:	2331      	movs	r3, #49	@ 0x31
 80115ea:	f806 3b01 	strb.w	r3, [r6], #1
 80115ee:	9b05      	ldr	r3, [sp, #20]
 80115f0:	3301      	adds	r3, #1
 80115f2:	9305      	str	r3, [sp, #20]
 80115f4:	e5c9      	b.n	801118a <_dtoa_r+0x40a>
 80115f6:	f8cd 8014 	str.w	r8, [sp, #20]
 80115fa:	4654      	mov	r4, sl
 80115fc:	4625      	mov	r5, r4
 80115fe:	e7f2      	b.n	80115e6 <_dtoa_r+0x866>
 8011600:	9b08      	ldr	r3, [sp, #32]
 8011602:	2b00      	cmp	r3, #0
 8011604:	f000 8102 	beq.w	801180c <_dtoa_r+0xa8c>
 8011608:	2e00      	cmp	r6, #0
 801160a:	dd05      	ble.n	8011618 <_dtoa_r+0x898>
 801160c:	4629      	mov	r1, r5
 801160e:	4632      	mov	r2, r6
 8011610:	4648      	mov	r0, r9
 8011612:	f000 ffaf 	bl	8012574 <__lshift>
 8011616:	4605      	mov	r5, r0
 8011618:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801161a:	2b00      	cmp	r3, #0
 801161c:	d058      	beq.n	80116d0 <_dtoa_r+0x950>
 801161e:	6869      	ldr	r1, [r5, #4]
 8011620:	4648      	mov	r0, r9
 8011622:	f000 fd57 	bl	80120d4 <_Balloc>
 8011626:	4606      	mov	r6, r0
 8011628:	b928      	cbnz	r0, 8011636 <_dtoa_r+0x8b6>
 801162a:	4b82      	ldr	r3, [pc, #520]	@ (8011834 <_dtoa_r+0xab4>)
 801162c:	4602      	mov	r2, r0
 801162e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011632:	f7ff bbbe 	b.w	8010db2 <_dtoa_r+0x32>
 8011636:	692a      	ldr	r2, [r5, #16]
 8011638:	3202      	adds	r2, #2
 801163a:	0092      	lsls	r2, r2, #2
 801163c:	f105 010c 	add.w	r1, r5, #12
 8011640:	300c      	adds	r0, #12
 8011642:	f7ff fafc 	bl	8010c3e <memcpy>
 8011646:	2201      	movs	r2, #1
 8011648:	4631      	mov	r1, r6
 801164a:	4648      	mov	r0, r9
 801164c:	f000 ff92 	bl	8012574 <__lshift>
 8011650:	1c7b      	adds	r3, r7, #1
 8011652:	9304      	str	r3, [sp, #16]
 8011654:	eb07 030b 	add.w	r3, r7, fp
 8011658:	9309      	str	r3, [sp, #36]	@ 0x24
 801165a:	9b02      	ldr	r3, [sp, #8]
 801165c:	f003 0301 	and.w	r3, r3, #1
 8011660:	46a8      	mov	r8, r5
 8011662:	9308      	str	r3, [sp, #32]
 8011664:	4605      	mov	r5, r0
 8011666:	9b04      	ldr	r3, [sp, #16]
 8011668:	9801      	ldr	r0, [sp, #4]
 801166a:	4621      	mov	r1, r4
 801166c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8011670:	f7ff fafe 	bl	8010c70 <quorem>
 8011674:	4641      	mov	r1, r8
 8011676:	9002      	str	r0, [sp, #8]
 8011678:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801167c:	9801      	ldr	r0, [sp, #4]
 801167e:	f000 ffe5 	bl	801264c <__mcmp>
 8011682:	462a      	mov	r2, r5
 8011684:	9006      	str	r0, [sp, #24]
 8011686:	4621      	mov	r1, r4
 8011688:	4648      	mov	r0, r9
 801168a:	f000 fffb 	bl	8012684 <__mdiff>
 801168e:	68c2      	ldr	r2, [r0, #12]
 8011690:	4606      	mov	r6, r0
 8011692:	b9fa      	cbnz	r2, 80116d4 <_dtoa_r+0x954>
 8011694:	4601      	mov	r1, r0
 8011696:	9801      	ldr	r0, [sp, #4]
 8011698:	f000 ffd8 	bl	801264c <__mcmp>
 801169c:	4602      	mov	r2, r0
 801169e:	4631      	mov	r1, r6
 80116a0:	4648      	mov	r0, r9
 80116a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80116a4:	f000 fd56 	bl	8012154 <_Bfree>
 80116a8:	9b07      	ldr	r3, [sp, #28]
 80116aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80116ac:	9e04      	ldr	r6, [sp, #16]
 80116ae:	ea42 0103 	orr.w	r1, r2, r3
 80116b2:	9b08      	ldr	r3, [sp, #32]
 80116b4:	4319      	orrs	r1, r3
 80116b6:	d10f      	bne.n	80116d8 <_dtoa_r+0x958>
 80116b8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80116bc:	d028      	beq.n	8011710 <_dtoa_r+0x990>
 80116be:	9b06      	ldr	r3, [sp, #24]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	dd02      	ble.n	80116ca <_dtoa_r+0x94a>
 80116c4:	9b02      	ldr	r3, [sp, #8]
 80116c6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80116ca:	f88b a000 	strb.w	sl, [fp]
 80116ce:	e55e      	b.n	801118e <_dtoa_r+0x40e>
 80116d0:	4628      	mov	r0, r5
 80116d2:	e7bd      	b.n	8011650 <_dtoa_r+0x8d0>
 80116d4:	2201      	movs	r2, #1
 80116d6:	e7e2      	b.n	801169e <_dtoa_r+0x91e>
 80116d8:	9b06      	ldr	r3, [sp, #24]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	db04      	blt.n	80116e8 <_dtoa_r+0x968>
 80116de:	9907      	ldr	r1, [sp, #28]
 80116e0:	430b      	orrs	r3, r1
 80116e2:	9908      	ldr	r1, [sp, #32]
 80116e4:	430b      	orrs	r3, r1
 80116e6:	d120      	bne.n	801172a <_dtoa_r+0x9aa>
 80116e8:	2a00      	cmp	r2, #0
 80116ea:	ddee      	ble.n	80116ca <_dtoa_r+0x94a>
 80116ec:	9901      	ldr	r1, [sp, #4]
 80116ee:	2201      	movs	r2, #1
 80116f0:	4648      	mov	r0, r9
 80116f2:	f000 ff3f 	bl	8012574 <__lshift>
 80116f6:	4621      	mov	r1, r4
 80116f8:	9001      	str	r0, [sp, #4]
 80116fa:	f000 ffa7 	bl	801264c <__mcmp>
 80116fe:	2800      	cmp	r0, #0
 8011700:	dc03      	bgt.n	801170a <_dtoa_r+0x98a>
 8011702:	d1e2      	bne.n	80116ca <_dtoa_r+0x94a>
 8011704:	f01a 0f01 	tst.w	sl, #1
 8011708:	d0df      	beq.n	80116ca <_dtoa_r+0x94a>
 801170a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801170e:	d1d9      	bne.n	80116c4 <_dtoa_r+0x944>
 8011710:	2339      	movs	r3, #57	@ 0x39
 8011712:	f88b 3000 	strb.w	r3, [fp]
 8011716:	4633      	mov	r3, r6
 8011718:	461e      	mov	r6, r3
 801171a:	3b01      	subs	r3, #1
 801171c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011720:	2a39      	cmp	r2, #57	@ 0x39
 8011722:	d052      	beq.n	80117ca <_dtoa_r+0xa4a>
 8011724:	3201      	adds	r2, #1
 8011726:	701a      	strb	r2, [r3, #0]
 8011728:	e531      	b.n	801118e <_dtoa_r+0x40e>
 801172a:	2a00      	cmp	r2, #0
 801172c:	dd07      	ble.n	801173e <_dtoa_r+0x9be>
 801172e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011732:	d0ed      	beq.n	8011710 <_dtoa_r+0x990>
 8011734:	f10a 0301 	add.w	r3, sl, #1
 8011738:	f88b 3000 	strb.w	r3, [fp]
 801173c:	e527      	b.n	801118e <_dtoa_r+0x40e>
 801173e:	9b04      	ldr	r3, [sp, #16]
 8011740:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011742:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011746:	4293      	cmp	r3, r2
 8011748:	d029      	beq.n	801179e <_dtoa_r+0xa1e>
 801174a:	9901      	ldr	r1, [sp, #4]
 801174c:	2300      	movs	r3, #0
 801174e:	220a      	movs	r2, #10
 8011750:	4648      	mov	r0, r9
 8011752:	f000 fd21 	bl	8012198 <__multadd>
 8011756:	45a8      	cmp	r8, r5
 8011758:	9001      	str	r0, [sp, #4]
 801175a:	f04f 0300 	mov.w	r3, #0
 801175e:	f04f 020a 	mov.w	r2, #10
 8011762:	4641      	mov	r1, r8
 8011764:	4648      	mov	r0, r9
 8011766:	d107      	bne.n	8011778 <_dtoa_r+0x9f8>
 8011768:	f000 fd16 	bl	8012198 <__multadd>
 801176c:	4680      	mov	r8, r0
 801176e:	4605      	mov	r5, r0
 8011770:	9b04      	ldr	r3, [sp, #16]
 8011772:	3301      	adds	r3, #1
 8011774:	9304      	str	r3, [sp, #16]
 8011776:	e776      	b.n	8011666 <_dtoa_r+0x8e6>
 8011778:	f000 fd0e 	bl	8012198 <__multadd>
 801177c:	4629      	mov	r1, r5
 801177e:	4680      	mov	r8, r0
 8011780:	2300      	movs	r3, #0
 8011782:	220a      	movs	r2, #10
 8011784:	4648      	mov	r0, r9
 8011786:	f000 fd07 	bl	8012198 <__multadd>
 801178a:	4605      	mov	r5, r0
 801178c:	e7f0      	b.n	8011770 <_dtoa_r+0x9f0>
 801178e:	f1bb 0f00 	cmp.w	fp, #0
 8011792:	bfcc      	ite	gt
 8011794:	465e      	movgt	r6, fp
 8011796:	2601      	movle	r6, #1
 8011798:	443e      	add	r6, r7
 801179a:	f04f 0800 	mov.w	r8, #0
 801179e:	9901      	ldr	r1, [sp, #4]
 80117a0:	2201      	movs	r2, #1
 80117a2:	4648      	mov	r0, r9
 80117a4:	f000 fee6 	bl	8012574 <__lshift>
 80117a8:	4621      	mov	r1, r4
 80117aa:	9001      	str	r0, [sp, #4]
 80117ac:	f000 ff4e 	bl	801264c <__mcmp>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	dcb0      	bgt.n	8011716 <_dtoa_r+0x996>
 80117b4:	d102      	bne.n	80117bc <_dtoa_r+0xa3c>
 80117b6:	f01a 0f01 	tst.w	sl, #1
 80117ba:	d1ac      	bne.n	8011716 <_dtoa_r+0x996>
 80117bc:	4633      	mov	r3, r6
 80117be:	461e      	mov	r6, r3
 80117c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117c4:	2a30      	cmp	r2, #48	@ 0x30
 80117c6:	d0fa      	beq.n	80117be <_dtoa_r+0xa3e>
 80117c8:	e4e1      	b.n	801118e <_dtoa_r+0x40e>
 80117ca:	429f      	cmp	r7, r3
 80117cc:	d1a4      	bne.n	8011718 <_dtoa_r+0x998>
 80117ce:	9b05      	ldr	r3, [sp, #20]
 80117d0:	3301      	adds	r3, #1
 80117d2:	9305      	str	r3, [sp, #20]
 80117d4:	2331      	movs	r3, #49	@ 0x31
 80117d6:	703b      	strb	r3, [r7, #0]
 80117d8:	e4d9      	b.n	801118e <_dtoa_r+0x40e>
 80117da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80117dc:	4f16      	ldr	r7, [pc, #88]	@ (8011838 <_dtoa_r+0xab8>)
 80117de:	b11b      	cbz	r3, 80117e8 <_dtoa_r+0xa68>
 80117e0:	f107 0308 	add.w	r3, r7, #8
 80117e4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80117e6:	6013      	str	r3, [r2, #0]
 80117e8:	4638      	mov	r0, r7
 80117ea:	b011      	add	sp, #68	@ 0x44
 80117ec:	ecbd 8b02 	vpop	{d8}
 80117f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f4:	9b07      	ldr	r3, [sp, #28]
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	f77f ae2c 	ble.w	8011454 <_dtoa_r+0x6d4>
 80117fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011800:	2001      	movs	r0, #1
 8011802:	e64c      	b.n	801149e <_dtoa_r+0x71e>
 8011804:	f1bb 0f00 	cmp.w	fp, #0
 8011808:	f77f aed8 	ble.w	80115bc <_dtoa_r+0x83c>
 801180c:	463e      	mov	r6, r7
 801180e:	9801      	ldr	r0, [sp, #4]
 8011810:	4621      	mov	r1, r4
 8011812:	f7ff fa2d 	bl	8010c70 <quorem>
 8011816:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801181a:	f806 ab01 	strb.w	sl, [r6], #1
 801181e:	1bf2      	subs	r2, r6, r7
 8011820:	4593      	cmp	fp, r2
 8011822:	ddb4      	ble.n	801178e <_dtoa_r+0xa0e>
 8011824:	9901      	ldr	r1, [sp, #4]
 8011826:	2300      	movs	r3, #0
 8011828:	220a      	movs	r2, #10
 801182a:	4648      	mov	r0, r9
 801182c:	f000 fcb4 	bl	8012198 <__multadd>
 8011830:	9001      	str	r0, [sp, #4]
 8011832:	e7ec      	b.n	801180e <_dtoa_r+0xa8e>
 8011834:	08013962 	.word	0x08013962
 8011838:	080138e6 	.word	0x080138e6

0801183c <_free_r>:
 801183c:	b538      	push	{r3, r4, r5, lr}
 801183e:	4605      	mov	r5, r0
 8011840:	2900      	cmp	r1, #0
 8011842:	d041      	beq.n	80118c8 <_free_r+0x8c>
 8011844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011848:	1f0c      	subs	r4, r1, #4
 801184a:	2b00      	cmp	r3, #0
 801184c:	bfb8      	it	lt
 801184e:	18e4      	addlt	r4, r4, r3
 8011850:	f000 fc34 	bl	80120bc <__malloc_lock>
 8011854:	4a1d      	ldr	r2, [pc, #116]	@ (80118cc <_free_r+0x90>)
 8011856:	6813      	ldr	r3, [r2, #0]
 8011858:	b933      	cbnz	r3, 8011868 <_free_r+0x2c>
 801185a:	6063      	str	r3, [r4, #4]
 801185c:	6014      	str	r4, [r2, #0]
 801185e:	4628      	mov	r0, r5
 8011860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011864:	f000 bc30 	b.w	80120c8 <__malloc_unlock>
 8011868:	42a3      	cmp	r3, r4
 801186a:	d908      	bls.n	801187e <_free_r+0x42>
 801186c:	6820      	ldr	r0, [r4, #0]
 801186e:	1821      	adds	r1, r4, r0
 8011870:	428b      	cmp	r3, r1
 8011872:	bf01      	itttt	eq
 8011874:	6819      	ldreq	r1, [r3, #0]
 8011876:	685b      	ldreq	r3, [r3, #4]
 8011878:	1809      	addeq	r1, r1, r0
 801187a:	6021      	streq	r1, [r4, #0]
 801187c:	e7ed      	b.n	801185a <_free_r+0x1e>
 801187e:	461a      	mov	r2, r3
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	b10b      	cbz	r3, 8011888 <_free_r+0x4c>
 8011884:	42a3      	cmp	r3, r4
 8011886:	d9fa      	bls.n	801187e <_free_r+0x42>
 8011888:	6811      	ldr	r1, [r2, #0]
 801188a:	1850      	adds	r0, r2, r1
 801188c:	42a0      	cmp	r0, r4
 801188e:	d10b      	bne.n	80118a8 <_free_r+0x6c>
 8011890:	6820      	ldr	r0, [r4, #0]
 8011892:	4401      	add	r1, r0
 8011894:	1850      	adds	r0, r2, r1
 8011896:	4283      	cmp	r3, r0
 8011898:	6011      	str	r1, [r2, #0]
 801189a:	d1e0      	bne.n	801185e <_free_r+0x22>
 801189c:	6818      	ldr	r0, [r3, #0]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	6053      	str	r3, [r2, #4]
 80118a2:	4408      	add	r0, r1
 80118a4:	6010      	str	r0, [r2, #0]
 80118a6:	e7da      	b.n	801185e <_free_r+0x22>
 80118a8:	d902      	bls.n	80118b0 <_free_r+0x74>
 80118aa:	230c      	movs	r3, #12
 80118ac:	602b      	str	r3, [r5, #0]
 80118ae:	e7d6      	b.n	801185e <_free_r+0x22>
 80118b0:	6820      	ldr	r0, [r4, #0]
 80118b2:	1821      	adds	r1, r4, r0
 80118b4:	428b      	cmp	r3, r1
 80118b6:	bf04      	itt	eq
 80118b8:	6819      	ldreq	r1, [r3, #0]
 80118ba:	685b      	ldreq	r3, [r3, #4]
 80118bc:	6063      	str	r3, [r4, #4]
 80118be:	bf04      	itt	eq
 80118c0:	1809      	addeq	r1, r1, r0
 80118c2:	6021      	streq	r1, [r4, #0]
 80118c4:	6054      	str	r4, [r2, #4]
 80118c6:	e7ca      	b.n	801185e <_free_r+0x22>
 80118c8:	bd38      	pop	{r3, r4, r5, pc}
 80118ca:	bf00      	nop
 80118cc:	24004f14 	.word	0x24004f14

080118d0 <rshift>:
 80118d0:	6903      	ldr	r3, [r0, #16]
 80118d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80118d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80118de:	f100 0414 	add.w	r4, r0, #20
 80118e2:	dd45      	ble.n	8011970 <rshift+0xa0>
 80118e4:	f011 011f 	ands.w	r1, r1, #31
 80118e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80118ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80118f0:	d10c      	bne.n	801190c <rshift+0x3c>
 80118f2:	f100 0710 	add.w	r7, r0, #16
 80118f6:	4629      	mov	r1, r5
 80118f8:	42b1      	cmp	r1, r6
 80118fa:	d334      	bcc.n	8011966 <rshift+0x96>
 80118fc:	1a9b      	subs	r3, r3, r2
 80118fe:	009b      	lsls	r3, r3, #2
 8011900:	1eea      	subs	r2, r5, #3
 8011902:	4296      	cmp	r6, r2
 8011904:	bf38      	it	cc
 8011906:	2300      	movcc	r3, #0
 8011908:	4423      	add	r3, r4
 801190a:	e015      	b.n	8011938 <rshift+0x68>
 801190c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011910:	f1c1 0820 	rsb	r8, r1, #32
 8011914:	40cf      	lsrs	r7, r1
 8011916:	f105 0e04 	add.w	lr, r5, #4
 801191a:	46a1      	mov	r9, r4
 801191c:	4576      	cmp	r6, lr
 801191e:	46f4      	mov	ip, lr
 8011920:	d815      	bhi.n	801194e <rshift+0x7e>
 8011922:	1a9a      	subs	r2, r3, r2
 8011924:	0092      	lsls	r2, r2, #2
 8011926:	3a04      	subs	r2, #4
 8011928:	3501      	adds	r5, #1
 801192a:	42ae      	cmp	r6, r5
 801192c:	bf38      	it	cc
 801192e:	2200      	movcc	r2, #0
 8011930:	18a3      	adds	r3, r4, r2
 8011932:	50a7      	str	r7, [r4, r2]
 8011934:	b107      	cbz	r7, 8011938 <rshift+0x68>
 8011936:	3304      	adds	r3, #4
 8011938:	1b1a      	subs	r2, r3, r4
 801193a:	42a3      	cmp	r3, r4
 801193c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011940:	bf08      	it	eq
 8011942:	2300      	moveq	r3, #0
 8011944:	6102      	str	r2, [r0, #16]
 8011946:	bf08      	it	eq
 8011948:	6143      	streq	r3, [r0, #20]
 801194a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801194e:	f8dc c000 	ldr.w	ip, [ip]
 8011952:	fa0c fc08 	lsl.w	ip, ip, r8
 8011956:	ea4c 0707 	orr.w	r7, ip, r7
 801195a:	f849 7b04 	str.w	r7, [r9], #4
 801195e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011962:	40cf      	lsrs	r7, r1
 8011964:	e7da      	b.n	801191c <rshift+0x4c>
 8011966:	f851 cb04 	ldr.w	ip, [r1], #4
 801196a:	f847 cf04 	str.w	ip, [r7, #4]!
 801196e:	e7c3      	b.n	80118f8 <rshift+0x28>
 8011970:	4623      	mov	r3, r4
 8011972:	e7e1      	b.n	8011938 <rshift+0x68>

08011974 <__hexdig_fun>:
 8011974:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011978:	2b09      	cmp	r3, #9
 801197a:	d802      	bhi.n	8011982 <__hexdig_fun+0xe>
 801197c:	3820      	subs	r0, #32
 801197e:	b2c0      	uxtb	r0, r0
 8011980:	4770      	bx	lr
 8011982:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011986:	2b05      	cmp	r3, #5
 8011988:	d801      	bhi.n	801198e <__hexdig_fun+0x1a>
 801198a:	3847      	subs	r0, #71	@ 0x47
 801198c:	e7f7      	b.n	801197e <__hexdig_fun+0xa>
 801198e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011992:	2b05      	cmp	r3, #5
 8011994:	d801      	bhi.n	801199a <__hexdig_fun+0x26>
 8011996:	3827      	subs	r0, #39	@ 0x27
 8011998:	e7f1      	b.n	801197e <__hexdig_fun+0xa>
 801199a:	2000      	movs	r0, #0
 801199c:	4770      	bx	lr
	...

080119a0 <__gethex>:
 80119a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a4:	b085      	sub	sp, #20
 80119a6:	468a      	mov	sl, r1
 80119a8:	9302      	str	r3, [sp, #8]
 80119aa:	680b      	ldr	r3, [r1, #0]
 80119ac:	9001      	str	r0, [sp, #4]
 80119ae:	4690      	mov	r8, r2
 80119b0:	1c9c      	adds	r4, r3, #2
 80119b2:	46a1      	mov	r9, r4
 80119b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80119b8:	2830      	cmp	r0, #48	@ 0x30
 80119ba:	d0fa      	beq.n	80119b2 <__gethex+0x12>
 80119bc:	eba9 0303 	sub.w	r3, r9, r3
 80119c0:	f1a3 0b02 	sub.w	fp, r3, #2
 80119c4:	f7ff ffd6 	bl	8011974 <__hexdig_fun>
 80119c8:	4605      	mov	r5, r0
 80119ca:	2800      	cmp	r0, #0
 80119cc:	d168      	bne.n	8011aa0 <__gethex+0x100>
 80119ce:	49a0      	ldr	r1, [pc, #640]	@ (8011c50 <__gethex+0x2b0>)
 80119d0:	2201      	movs	r2, #1
 80119d2:	4648      	mov	r0, r9
 80119d4:	f7ff f8a1 	bl	8010b1a <strncmp>
 80119d8:	4607      	mov	r7, r0
 80119da:	2800      	cmp	r0, #0
 80119dc:	d167      	bne.n	8011aae <__gethex+0x10e>
 80119de:	f899 0001 	ldrb.w	r0, [r9, #1]
 80119e2:	4626      	mov	r6, r4
 80119e4:	f7ff ffc6 	bl	8011974 <__hexdig_fun>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d062      	beq.n	8011ab2 <__gethex+0x112>
 80119ec:	4623      	mov	r3, r4
 80119ee:	7818      	ldrb	r0, [r3, #0]
 80119f0:	2830      	cmp	r0, #48	@ 0x30
 80119f2:	4699      	mov	r9, r3
 80119f4:	f103 0301 	add.w	r3, r3, #1
 80119f8:	d0f9      	beq.n	80119ee <__gethex+0x4e>
 80119fa:	f7ff ffbb 	bl	8011974 <__hexdig_fun>
 80119fe:	fab0 f580 	clz	r5, r0
 8011a02:	096d      	lsrs	r5, r5, #5
 8011a04:	f04f 0b01 	mov.w	fp, #1
 8011a08:	464a      	mov	r2, r9
 8011a0a:	4616      	mov	r6, r2
 8011a0c:	3201      	adds	r2, #1
 8011a0e:	7830      	ldrb	r0, [r6, #0]
 8011a10:	f7ff ffb0 	bl	8011974 <__hexdig_fun>
 8011a14:	2800      	cmp	r0, #0
 8011a16:	d1f8      	bne.n	8011a0a <__gethex+0x6a>
 8011a18:	498d      	ldr	r1, [pc, #564]	@ (8011c50 <__gethex+0x2b0>)
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	f7ff f87c 	bl	8010b1a <strncmp>
 8011a22:	2800      	cmp	r0, #0
 8011a24:	d13f      	bne.n	8011aa6 <__gethex+0x106>
 8011a26:	b944      	cbnz	r4, 8011a3a <__gethex+0x9a>
 8011a28:	1c74      	adds	r4, r6, #1
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	4616      	mov	r6, r2
 8011a2e:	3201      	adds	r2, #1
 8011a30:	7830      	ldrb	r0, [r6, #0]
 8011a32:	f7ff ff9f 	bl	8011974 <__hexdig_fun>
 8011a36:	2800      	cmp	r0, #0
 8011a38:	d1f8      	bne.n	8011a2c <__gethex+0x8c>
 8011a3a:	1ba4      	subs	r4, r4, r6
 8011a3c:	00a7      	lsls	r7, r4, #2
 8011a3e:	7833      	ldrb	r3, [r6, #0]
 8011a40:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011a44:	2b50      	cmp	r3, #80	@ 0x50
 8011a46:	d13e      	bne.n	8011ac6 <__gethex+0x126>
 8011a48:	7873      	ldrb	r3, [r6, #1]
 8011a4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8011a4c:	d033      	beq.n	8011ab6 <__gethex+0x116>
 8011a4e:	2b2d      	cmp	r3, #45	@ 0x2d
 8011a50:	d034      	beq.n	8011abc <__gethex+0x11c>
 8011a52:	1c71      	adds	r1, r6, #1
 8011a54:	2400      	movs	r4, #0
 8011a56:	7808      	ldrb	r0, [r1, #0]
 8011a58:	f7ff ff8c 	bl	8011974 <__hexdig_fun>
 8011a5c:	1e43      	subs	r3, r0, #1
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	2b18      	cmp	r3, #24
 8011a62:	d830      	bhi.n	8011ac6 <__gethex+0x126>
 8011a64:	f1a0 0210 	sub.w	r2, r0, #16
 8011a68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011a6c:	f7ff ff82 	bl	8011974 <__hexdig_fun>
 8011a70:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8011a74:	fa5f fc8c 	uxtb.w	ip, ip
 8011a78:	f1bc 0f18 	cmp.w	ip, #24
 8011a7c:	f04f 030a 	mov.w	r3, #10
 8011a80:	d91e      	bls.n	8011ac0 <__gethex+0x120>
 8011a82:	b104      	cbz	r4, 8011a86 <__gethex+0xe6>
 8011a84:	4252      	negs	r2, r2
 8011a86:	4417      	add	r7, r2
 8011a88:	f8ca 1000 	str.w	r1, [sl]
 8011a8c:	b1ed      	cbz	r5, 8011aca <__gethex+0x12a>
 8011a8e:	f1bb 0f00 	cmp.w	fp, #0
 8011a92:	bf0c      	ite	eq
 8011a94:	2506      	moveq	r5, #6
 8011a96:	2500      	movne	r5, #0
 8011a98:	4628      	mov	r0, r5
 8011a9a:	b005      	add	sp, #20
 8011a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa0:	2500      	movs	r5, #0
 8011aa2:	462c      	mov	r4, r5
 8011aa4:	e7b0      	b.n	8011a08 <__gethex+0x68>
 8011aa6:	2c00      	cmp	r4, #0
 8011aa8:	d1c7      	bne.n	8011a3a <__gethex+0x9a>
 8011aaa:	4627      	mov	r7, r4
 8011aac:	e7c7      	b.n	8011a3e <__gethex+0x9e>
 8011aae:	464e      	mov	r6, r9
 8011ab0:	462f      	mov	r7, r5
 8011ab2:	2501      	movs	r5, #1
 8011ab4:	e7c3      	b.n	8011a3e <__gethex+0x9e>
 8011ab6:	2400      	movs	r4, #0
 8011ab8:	1cb1      	adds	r1, r6, #2
 8011aba:	e7cc      	b.n	8011a56 <__gethex+0xb6>
 8011abc:	2401      	movs	r4, #1
 8011abe:	e7fb      	b.n	8011ab8 <__gethex+0x118>
 8011ac0:	fb03 0002 	mla	r0, r3, r2, r0
 8011ac4:	e7ce      	b.n	8011a64 <__gethex+0xc4>
 8011ac6:	4631      	mov	r1, r6
 8011ac8:	e7de      	b.n	8011a88 <__gethex+0xe8>
 8011aca:	eba6 0309 	sub.w	r3, r6, r9
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	4629      	mov	r1, r5
 8011ad2:	2b07      	cmp	r3, #7
 8011ad4:	dc0a      	bgt.n	8011aec <__gethex+0x14c>
 8011ad6:	9801      	ldr	r0, [sp, #4]
 8011ad8:	f000 fafc 	bl	80120d4 <_Balloc>
 8011adc:	4604      	mov	r4, r0
 8011ade:	b940      	cbnz	r0, 8011af2 <__gethex+0x152>
 8011ae0:	4b5c      	ldr	r3, [pc, #368]	@ (8011c54 <__gethex+0x2b4>)
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	21e4      	movs	r1, #228	@ 0xe4
 8011ae6:	485c      	ldr	r0, [pc, #368]	@ (8011c58 <__gethex+0x2b8>)
 8011ae8:	f001 f9d6 	bl	8012e98 <__assert_func>
 8011aec:	3101      	adds	r1, #1
 8011aee:	105b      	asrs	r3, r3, #1
 8011af0:	e7ef      	b.n	8011ad2 <__gethex+0x132>
 8011af2:	f100 0a14 	add.w	sl, r0, #20
 8011af6:	2300      	movs	r3, #0
 8011af8:	4655      	mov	r5, sl
 8011afa:	469b      	mov	fp, r3
 8011afc:	45b1      	cmp	r9, r6
 8011afe:	d337      	bcc.n	8011b70 <__gethex+0x1d0>
 8011b00:	f845 bb04 	str.w	fp, [r5], #4
 8011b04:	eba5 050a 	sub.w	r5, r5, sl
 8011b08:	10ad      	asrs	r5, r5, #2
 8011b0a:	6125      	str	r5, [r4, #16]
 8011b0c:	4658      	mov	r0, fp
 8011b0e:	f000 fbd3 	bl	80122b8 <__hi0bits>
 8011b12:	016d      	lsls	r5, r5, #5
 8011b14:	f8d8 6000 	ldr.w	r6, [r8]
 8011b18:	1a2d      	subs	r5, r5, r0
 8011b1a:	42b5      	cmp	r5, r6
 8011b1c:	dd54      	ble.n	8011bc8 <__gethex+0x228>
 8011b1e:	1bad      	subs	r5, r5, r6
 8011b20:	4629      	mov	r1, r5
 8011b22:	4620      	mov	r0, r4
 8011b24:	f000 ff5c 	bl	80129e0 <__any_on>
 8011b28:	4681      	mov	r9, r0
 8011b2a:	b178      	cbz	r0, 8011b4c <__gethex+0x1ac>
 8011b2c:	1e6b      	subs	r3, r5, #1
 8011b2e:	1159      	asrs	r1, r3, #5
 8011b30:	f003 021f 	and.w	r2, r3, #31
 8011b34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011b38:	f04f 0901 	mov.w	r9, #1
 8011b3c:	fa09 f202 	lsl.w	r2, r9, r2
 8011b40:	420a      	tst	r2, r1
 8011b42:	d003      	beq.n	8011b4c <__gethex+0x1ac>
 8011b44:	454b      	cmp	r3, r9
 8011b46:	dc36      	bgt.n	8011bb6 <__gethex+0x216>
 8011b48:	f04f 0902 	mov.w	r9, #2
 8011b4c:	4629      	mov	r1, r5
 8011b4e:	4620      	mov	r0, r4
 8011b50:	f7ff febe 	bl	80118d0 <rshift>
 8011b54:	442f      	add	r7, r5
 8011b56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b5a:	42bb      	cmp	r3, r7
 8011b5c:	da42      	bge.n	8011be4 <__gethex+0x244>
 8011b5e:	9801      	ldr	r0, [sp, #4]
 8011b60:	4621      	mov	r1, r4
 8011b62:	f000 faf7 	bl	8012154 <_Bfree>
 8011b66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b68:	2300      	movs	r3, #0
 8011b6a:	6013      	str	r3, [r2, #0]
 8011b6c:	25a3      	movs	r5, #163	@ 0xa3
 8011b6e:	e793      	b.n	8011a98 <__gethex+0xf8>
 8011b70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011b74:	2a2e      	cmp	r2, #46	@ 0x2e
 8011b76:	d012      	beq.n	8011b9e <__gethex+0x1fe>
 8011b78:	2b20      	cmp	r3, #32
 8011b7a:	d104      	bne.n	8011b86 <__gethex+0x1e6>
 8011b7c:	f845 bb04 	str.w	fp, [r5], #4
 8011b80:	f04f 0b00 	mov.w	fp, #0
 8011b84:	465b      	mov	r3, fp
 8011b86:	7830      	ldrb	r0, [r6, #0]
 8011b88:	9303      	str	r3, [sp, #12]
 8011b8a:	f7ff fef3 	bl	8011974 <__hexdig_fun>
 8011b8e:	9b03      	ldr	r3, [sp, #12]
 8011b90:	f000 000f 	and.w	r0, r0, #15
 8011b94:	4098      	lsls	r0, r3
 8011b96:	ea4b 0b00 	orr.w	fp, fp, r0
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	e7ae      	b.n	8011afc <__gethex+0x15c>
 8011b9e:	45b1      	cmp	r9, r6
 8011ba0:	d8ea      	bhi.n	8011b78 <__gethex+0x1d8>
 8011ba2:	492b      	ldr	r1, [pc, #172]	@ (8011c50 <__gethex+0x2b0>)
 8011ba4:	9303      	str	r3, [sp, #12]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	4630      	mov	r0, r6
 8011baa:	f7fe ffb6 	bl	8010b1a <strncmp>
 8011bae:	9b03      	ldr	r3, [sp, #12]
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d1e1      	bne.n	8011b78 <__gethex+0x1d8>
 8011bb4:	e7a2      	b.n	8011afc <__gethex+0x15c>
 8011bb6:	1ea9      	subs	r1, r5, #2
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f000 ff11 	bl	80129e0 <__any_on>
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	d0c2      	beq.n	8011b48 <__gethex+0x1a8>
 8011bc2:	f04f 0903 	mov.w	r9, #3
 8011bc6:	e7c1      	b.n	8011b4c <__gethex+0x1ac>
 8011bc8:	da09      	bge.n	8011bde <__gethex+0x23e>
 8011bca:	1b75      	subs	r5, r6, r5
 8011bcc:	4621      	mov	r1, r4
 8011bce:	9801      	ldr	r0, [sp, #4]
 8011bd0:	462a      	mov	r2, r5
 8011bd2:	f000 fccf 	bl	8012574 <__lshift>
 8011bd6:	1b7f      	subs	r7, r7, r5
 8011bd8:	4604      	mov	r4, r0
 8011bda:	f100 0a14 	add.w	sl, r0, #20
 8011bde:	f04f 0900 	mov.w	r9, #0
 8011be2:	e7b8      	b.n	8011b56 <__gethex+0x1b6>
 8011be4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011be8:	42bd      	cmp	r5, r7
 8011bea:	dd6f      	ble.n	8011ccc <__gethex+0x32c>
 8011bec:	1bed      	subs	r5, r5, r7
 8011bee:	42ae      	cmp	r6, r5
 8011bf0:	dc34      	bgt.n	8011c5c <__gethex+0x2bc>
 8011bf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011bf6:	2b02      	cmp	r3, #2
 8011bf8:	d022      	beq.n	8011c40 <__gethex+0x2a0>
 8011bfa:	2b03      	cmp	r3, #3
 8011bfc:	d024      	beq.n	8011c48 <__gethex+0x2a8>
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d115      	bne.n	8011c2e <__gethex+0x28e>
 8011c02:	42ae      	cmp	r6, r5
 8011c04:	d113      	bne.n	8011c2e <__gethex+0x28e>
 8011c06:	2e01      	cmp	r6, #1
 8011c08:	d10b      	bne.n	8011c22 <__gethex+0x282>
 8011c0a:	9a02      	ldr	r2, [sp, #8]
 8011c0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c10:	6013      	str	r3, [r2, #0]
 8011c12:	2301      	movs	r3, #1
 8011c14:	6123      	str	r3, [r4, #16]
 8011c16:	f8ca 3000 	str.w	r3, [sl]
 8011c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c1c:	2562      	movs	r5, #98	@ 0x62
 8011c1e:	601c      	str	r4, [r3, #0]
 8011c20:	e73a      	b.n	8011a98 <__gethex+0xf8>
 8011c22:	1e71      	subs	r1, r6, #1
 8011c24:	4620      	mov	r0, r4
 8011c26:	f000 fedb 	bl	80129e0 <__any_on>
 8011c2a:	2800      	cmp	r0, #0
 8011c2c:	d1ed      	bne.n	8011c0a <__gethex+0x26a>
 8011c2e:	9801      	ldr	r0, [sp, #4]
 8011c30:	4621      	mov	r1, r4
 8011c32:	f000 fa8f 	bl	8012154 <_Bfree>
 8011c36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c38:	2300      	movs	r3, #0
 8011c3a:	6013      	str	r3, [r2, #0]
 8011c3c:	2550      	movs	r5, #80	@ 0x50
 8011c3e:	e72b      	b.n	8011a98 <__gethex+0xf8>
 8011c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1f3      	bne.n	8011c2e <__gethex+0x28e>
 8011c46:	e7e0      	b.n	8011c0a <__gethex+0x26a>
 8011c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d1dd      	bne.n	8011c0a <__gethex+0x26a>
 8011c4e:	e7ee      	b.n	8011c2e <__gethex+0x28e>
 8011c50:	080138a8 	.word	0x080138a8
 8011c54:	08013962 	.word	0x08013962
 8011c58:	08013973 	.word	0x08013973
 8011c5c:	1e6f      	subs	r7, r5, #1
 8011c5e:	f1b9 0f00 	cmp.w	r9, #0
 8011c62:	d130      	bne.n	8011cc6 <__gethex+0x326>
 8011c64:	b127      	cbz	r7, 8011c70 <__gethex+0x2d0>
 8011c66:	4639      	mov	r1, r7
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f000 feb9 	bl	80129e0 <__any_on>
 8011c6e:	4681      	mov	r9, r0
 8011c70:	117a      	asrs	r2, r7, #5
 8011c72:	2301      	movs	r3, #1
 8011c74:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011c78:	f007 071f 	and.w	r7, r7, #31
 8011c7c:	40bb      	lsls	r3, r7
 8011c7e:	4213      	tst	r3, r2
 8011c80:	4629      	mov	r1, r5
 8011c82:	4620      	mov	r0, r4
 8011c84:	bf18      	it	ne
 8011c86:	f049 0902 	orrne.w	r9, r9, #2
 8011c8a:	f7ff fe21 	bl	80118d0 <rshift>
 8011c8e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011c92:	1b76      	subs	r6, r6, r5
 8011c94:	2502      	movs	r5, #2
 8011c96:	f1b9 0f00 	cmp.w	r9, #0
 8011c9a:	d047      	beq.n	8011d2c <__gethex+0x38c>
 8011c9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ca0:	2b02      	cmp	r3, #2
 8011ca2:	d015      	beq.n	8011cd0 <__gethex+0x330>
 8011ca4:	2b03      	cmp	r3, #3
 8011ca6:	d017      	beq.n	8011cd8 <__gethex+0x338>
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d109      	bne.n	8011cc0 <__gethex+0x320>
 8011cac:	f019 0f02 	tst.w	r9, #2
 8011cb0:	d006      	beq.n	8011cc0 <__gethex+0x320>
 8011cb2:	f8da 3000 	ldr.w	r3, [sl]
 8011cb6:	ea49 0903 	orr.w	r9, r9, r3
 8011cba:	f019 0f01 	tst.w	r9, #1
 8011cbe:	d10e      	bne.n	8011cde <__gethex+0x33e>
 8011cc0:	f045 0510 	orr.w	r5, r5, #16
 8011cc4:	e032      	b.n	8011d2c <__gethex+0x38c>
 8011cc6:	f04f 0901 	mov.w	r9, #1
 8011cca:	e7d1      	b.n	8011c70 <__gethex+0x2d0>
 8011ccc:	2501      	movs	r5, #1
 8011cce:	e7e2      	b.n	8011c96 <__gethex+0x2f6>
 8011cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cd2:	f1c3 0301 	rsb	r3, r3, #1
 8011cd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d0f0      	beq.n	8011cc0 <__gethex+0x320>
 8011cde:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011ce2:	f104 0314 	add.w	r3, r4, #20
 8011ce6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011cea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011cee:	f04f 0c00 	mov.w	ip, #0
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cf8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8011cfc:	d01b      	beq.n	8011d36 <__gethex+0x396>
 8011cfe:	3201      	adds	r2, #1
 8011d00:	6002      	str	r2, [r0, #0]
 8011d02:	2d02      	cmp	r5, #2
 8011d04:	f104 0314 	add.w	r3, r4, #20
 8011d08:	d13c      	bne.n	8011d84 <__gethex+0x3e4>
 8011d0a:	f8d8 2000 	ldr.w	r2, [r8]
 8011d0e:	3a01      	subs	r2, #1
 8011d10:	42b2      	cmp	r2, r6
 8011d12:	d109      	bne.n	8011d28 <__gethex+0x388>
 8011d14:	1171      	asrs	r1, r6, #5
 8011d16:	2201      	movs	r2, #1
 8011d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d1c:	f006 061f 	and.w	r6, r6, #31
 8011d20:	fa02 f606 	lsl.w	r6, r2, r6
 8011d24:	421e      	tst	r6, r3
 8011d26:	d13a      	bne.n	8011d9e <__gethex+0x3fe>
 8011d28:	f045 0520 	orr.w	r5, r5, #32
 8011d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d2e:	601c      	str	r4, [r3, #0]
 8011d30:	9b02      	ldr	r3, [sp, #8]
 8011d32:	601f      	str	r7, [r3, #0]
 8011d34:	e6b0      	b.n	8011a98 <__gethex+0xf8>
 8011d36:	4299      	cmp	r1, r3
 8011d38:	f843 cc04 	str.w	ip, [r3, #-4]
 8011d3c:	d8d9      	bhi.n	8011cf2 <__gethex+0x352>
 8011d3e:	68a3      	ldr	r3, [r4, #8]
 8011d40:	459b      	cmp	fp, r3
 8011d42:	db17      	blt.n	8011d74 <__gethex+0x3d4>
 8011d44:	6861      	ldr	r1, [r4, #4]
 8011d46:	9801      	ldr	r0, [sp, #4]
 8011d48:	3101      	adds	r1, #1
 8011d4a:	f000 f9c3 	bl	80120d4 <_Balloc>
 8011d4e:	4681      	mov	r9, r0
 8011d50:	b918      	cbnz	r0, 8011d5a <__gethex+0x3ba>
 8011d52:	4b1a      	ldr	r3, [pc, #104]	@ (8011dbc <__gethex+0x41c>)
 8011d54:	4602      	mov	r2, r0
 8011d56:	2184      	movs	r1, #132	@ 0x84
 8011d58:	e6c5      	b.n	8011ae6 <__gethex+0x146>
 8011d5a:	6922      	ldr	r2, [r4, #16]
 8011d5c:	3202      	adds	r2, #2
 8011d5e:	f104 010c 	add.w	r1, r4, #12
 8011d62:	0092      	lsls	r2, r2, #2
 8011d64:	300c      	adds	r0, #12
 8011d66:	f7fe ff6a 	bl	8010c3e <memcpy>
 8011d6a:	4621      	mov	r1, r4
 8011d6c:	9801      	ldr	r0, [sp, #4]
 8011d6e:	f000 f9f1 	bl	8012154 <_Bfree>
 8011d72:	464c      	mov	r4, r9
 8011d74:	6923      	ldr	r3, [r4, #16]
 8011d76:	1c5a      	adds	r2, r3, #1
 8011d78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011d7c:	6122      	str	r2, [r4, #16]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	615a      	str	r2, [r3, #20]
 8011d82:	e7be      	b.n	8011d02 <__gethex+0x362>
 8011d84:	6922      	ldr	r2, [r4, #16]
 8011d86:	455a      	cmp	r2, fp
 8011d88:	dd0b      	ble.n	8011da2 <__gethex+0x402>
 8011d8a:	2101      	movs	r1, #1
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	f7ff fd9f 	bl	80118d0 <rshift>
 8011d92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d96:	3701      	adds	r7, #1
 8011d98:	42bb      	cmp	r3, r7
 8011d9a:	f6ff aee0 	blt.w	8011b5e <__gethex+0x1be>
 8011d9e:	2501      	movs	r5, #1
 8011da0:	e7c2      	b.n	8011d28 <__gethex+0x388>
 8011da2:	f016 061f 	ands.w	r6, r6, #31
 8011da6:	d0fa      	beq.n	8011d9e <__gethex+0x3fe>
 8011da8:	4453      	add	r3, sl
 8011daa:	f1c6 0620 	rsb	r6, r6, #32
 8011dae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011db2:	f000 fa81 	bl	80122b8 <__hi0bits>
 8011db6:	42b0      	cmp	r0, r6
 8011db8:	dbe7      	blt.n	8011d8a <__gethex+0x3ea>
 8011dba:	e7f0      	b.n	8011d9e <__gethex+0x3fe>
 8011dbc:	08013962 	.word	0x08013962

08011dc0 <L_shift>:
 8011dc0:	f1c2 0208 	rsb	r2, r2, #8
 8011dc4:	0092      	lsls	r2, r2, #2
 8011dc6:	b570      	push	{r4, r5, r6, lr}
 8011dc8:	f1c2 0620 	rsb	r6, r2, #32
 8011dcc:	6843      	ldr	r3, [r0, #4]
 8011dce:	6804      	ldr	r4, [r0, #0]
 8011dd0:	fa03 f506 	lsl.w	r5, r3, r6
 8011dd4:	432c      	orrs	r4, r5
 8011dd6:	40d3      	lsrs	r3, r2
 8011dd8:	6004      	str	r4, [r0, #0]
 8011dda:	f840 3f04 	str.w	r3, [r0, #4]!
 8011dde:	4288      	cmp	r0, r1
 8011de0:	d3f4      	bcc.n	8011dcc <L_shift+0xc>
 8011de2:	bd70      	pop	{r4, r5, r6, pc}

08011de4 <__match>:
 8011de4:	b530      	push	{r4, r5, lr}
 8011de6:	6803      	ldr	r3, [r0, #0]
 8011de8:	3301      	adds	r3, #1
 8011dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dee:	b914      	cbnz	r4, 8011df6 <__match+0x12>
 8011df0:	6003      	str	r3, [r0, #0]
 8011df2:	2001      	movs	r0, #1
 8011df4:	bd30      	pop	{r4, r5, pc}
 8011df6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dfa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011dfe:	2d19      	cmp	r5, #25
 8011e00:	bf98      	it	ls
 8011e02:	3220      	addls	r2, #32
 8011e04:	42a2      	cmp	r2, r4
 8011e06:	d0f0      	beq.n	8011dea <__match+0x6>
 8011e08:	2000      	movs	r0, #0
 8011e0a:	e7f3      	b.n	8011df4 <__match+0x10>

08011e0c <__hexnan>:
 8011e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e10:	680b      	ldr	r3, [r1, #0]
 8011e12:	6801      	ldr	r1, [r0, #0]
 8011e14:	115e      	asrs	r6, r3, #5
 8011e16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e1a:	f013 031f 	ands.w	r3, r3, #31
 8011e1e:	b087      	sub	sp, #28
 8011e20:	bf18      	it	ne
 8011e22:	3604      	addne	r6, #4
 8011e24:	2500      	movs	r5, #0
 8011e26:	1f37      	subs	r7, r6, #4
 8011e28:	4682      	mov	sl, r0
 8011e2a:	4690      	mov	r8, r2
 8011e2c:	9301      	str	r3, [sp, #4]
 8011e2e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e32:	46b9      	mov	r9, r7
 8011e34:	463c      	mov	r4, r7
 8011e36:	9502      	str	r5, [sp, #8]
 8011e38:	46ab      	mov	fp, r5
 8011e3a:	784a      	ldrb	r2, [r1, #1]
 8011e3c:	1c4b      	adds	r3, r1, #1
 8011e3e:	9303      	str	r3, [sp, #12]
 8011e40:	b342      	cbz	r2, 8011e94 <__hexnan+0x88>
 8011e42:	4610      	mov	r0, r2
 8011e44:	9105      	str	r1, [sp, #20]
 8011e46:	9204      	str	r2, [sp, #16]
 8011e48:	f7ff fd94 	bl	8011974 <__hexdig_fun>
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	d151      	bne.n	8011ef4 <__hexnan+0xe8>
 8011e50:	9a04      	ldr	r2, [sp, #16]
 8011e52:	9905      	ldr	r1, [sp, #20]
 8011e54:	2a20      	cmp	r2, #32
 8011e56:	d818      	bhi.n	8011e8a <__hexnan+0x7e>
 8011e58:	9b02      	ldr	r3, [sp, #8]
 8011e5a:	459b      	cmp	fp, r3
 8011e5c:	dd13      	ble.n	8011e86 <__hexnan+0x7a>
 8011e5e:	454c      	cmp	r4, r9
 8011e60:	d206      	bcs.n	8011e70 <__hexnan+0x64>
 8011e62:	2d07      	cmp	r5, #7
 8011e64:	dc04      	bgt.n	8011e70 <__hexnan+0x64>
 8011e66:	462a      	mov	r2, r5
 8011e68:	4649      	mov	r1, r9
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	f7ff ffa8 	bl	8011dc0 <L_shift>
 8011e70:	4544      	cmp	r4, r8
 8011e72:	d952      	bls.n	8011f1a <__hexnan+0x10e>
 8011e74:	2300      	movs	r3, #0
 8011e76:	f1a4 0904 	sub.w	r9, r4, #4
 8011e7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e7e:	f8cd b008 	str.w	fp, [sp, #8]
 8011e82:	464c      	mov	r4, r9
 8011e84:	461d      	mov	r5, r3
 8011e86:	9903      	ldr	r1, [sp, #12]
 8011e88:	e7d7      	b.n	8011e3a <__hexnan+0x2e>
 8011e8a:	2a29      	cmp	r2, #41	@ 0x29
 8011e8c:	d157      	bne.n	8011f3e <__hexnan+0x132>
 8011e8e:	3102      	adds	r1, #2
 8011e90:	f8ca 1000 	str.w	r1, [sl]
 8011e94:	f1bb 0f00 	cmp.w	fp, #0
 8011e98:	d051      	beq.n	8011f3e <__hexnan+0x132>
 8011e9a:	454c      	cmp	r4, r9
 8011e9c:	d206      	bcs.n	8011eac <__hexnan+0xa0>
 8011e9e:	2d07      	cmp	r5, #7
 8011ea0:	dc04      	bgt.n	8011eac <__hexnan+0xa0>
 8011ea2:	462a      	mov	r2, r5
 8011ea4:	4649      	mov	r1, r9
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	f7ff ff8a 	bl	8011dc0 <L_shift>
 8011eac:	4544      	cmp	r4, r8
 8011eae:	d936      	bls.n	8011f1e <__hexnan+0x112>
 8011eb0:	f1a8 0204 	sub.w	r2, r8, #4
 8011eb4:	4623      	mov	r3, r4
 8011eb6:	f853 1b04 	ldr.w	r1, [r3], #4
 8011eba:	f842 1f04 	str.w	r1, [r2, #4]!
 8011ebe:	429f      	cmp	r7, r3
 8011ec0:	d2f9      	bcs.n	8011eb6 <__hexnan+0xaa>
 8011ec2:	1b3b      	subs	r3, r7, r4
 8011ec4:	f023 0303 	bic.w	r3, r3, #3
 8011ec8:	3304      	adds	r3, #4
 8011eca:	3401      	adds	r4, #1
 8011ecc:	3e03      	subs	r6, #3
 8011ece:	42b4      	cmp	r4, r6
 8011ed0:	bf88      	it	hi
 8011ed2:	2304      	movhi	r3, #4
 8011ed4:	4443      	add	r3, r8
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	f843 2b04 	str.w	r2, [r3], #4
 8011edc:	429f      	cmp	r7, r3
 8011ede:	d2fb      	bcs.n	8011ed8 <__hexnan+0xcc>
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	b91b      	cbnz	r3, 8011eec <__hexnan+0xe0>
 8011ee4:	4547      	cmp	r7, r8
 8011ee6:	d128      	bne.n	8011f3a <__hexnan+0x12e>
 8011ee8:	2301      	movs	r3, #1
 8011eea:	603b      	str	r3, [r7, #0]
 8011eec:	2005      	movs	r0, #5
 8011eee:	b007      	add	sp, #28
 8011ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef4:	3501      	adds	r5, #1
 8011ef6:	2d08      	cmp	r5, #8
 8011ef8:	f10b 0b01 	add.w	fp, fp, #1
 8011efc:	dd06      	ble.n	8011f0c <__hexnan+0x100>
 8011efe:	4544      	cmp	r4, r8
 8011f00:	d9c1      	bls.n	8011e86 <__hexnan+0x7a>
 8011f02:	2300      	movs	r3, #0
 8011f04:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f08:	2501      	movs	r5, #1
 8011f0a:	3c04      	subs	r4, #4
 8011f0c:	6822      	ldr	r2, [r4, #0]
 8011f0e:	f000 000f 	and.w	r0, r0, #15
 8011f12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011f16:	6020      	str	r0, [r4, #0]
 8011f18:	e7b5      	b.n	8011e86 <__hexnan+0x7a>
 8011f1a:	2508      	movs	r5, #8
 8011f1c:	e7b3      	b.n	8011e86 <__hexnan+0x7a>
 8011f1e:	9b01      	ldr	r3, [sp, #4]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d0dd      	beq.n	8011ee0 <__hexnan+0xd4>
 8011f24:	f1c3 0320 	rsb	r3, r3, #32
 8011f28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011f2c:	40da      	lsrs	r2, r3
 8011f2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011f32:	4013      	ands	r3, r2
 8011f34:	f846 3c04 	str.w	r3, [r6, #-4]
 8011f38:	e7d2      	b.n	8011ee0 <__hexnan+0xd4>
 8011f3a:	3f04      	subs	r7, #4
 8011f3c:	e7d0      	b.n	8011ee0 <__hexnan+0xd4>
 8011f3e:	2004      	movs	r0, #4
 8011f40:	e7d5      	b.n	8011eee <__hexnan+0xe2>
	...

08011f44 <malloc>:
 8011f44:	4b02      	ldr	r3, [pc, #8]	@ (8011f50 <malloc+0xc>)
 8011f46:	4601      	mov	r1, r0
 8011f48:	6818      	ldr	r0, [r3, #0]
 8011f4a:	f000 b825 	b.w	8011f98 <_malloc_r>
 8011f4e:	bf00      	nop
 8011f50:	240001b0 	.word	0x240001b0

08011f54 <sbrk_aligned>:
 8011f54:	b570      	push	{r4, r5, r6, lr}
 8011f56:	4e0f      	ldr	r6, [pc, #60]	@ (8011f94 <sbrk_aligned+0x40>)
 8011f58:	460c      	mov	r4, r1
 8011f5a:	6831      	ldr	r1, [r6, #0]
 8011f5c:	4605      	mov	r5, r0
 8011f5e:	b911      	cbnz	r1, 8011f66 <sbrk_aligned+0x12>
 8011f60:	f000 ff8a 	bl	8012e78 <_sbrk_r>
 8011f64:	6030      	str	r0, [r6, #0]
 8011f66:	4621      	mov	r1, r4
 8011f68:	4628      	mov	r0, r5
 8011f6a:	f000 ff85 	bl	8012e78 <_sbrk_r>
 8011f6e:	1c43      	adds	r3, r0, #1
 8011f70:	d103      	bne.n	8011f7a <sbrk_aligned+0x26>
 8011f72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011f76:	4620      	mov	r0, r4
 8011f78:	bd70      	pop	{r4, r5, r6, pc}
 8011f7a:	1cc4      	adds	r4, r0, #3
 8011f7c:	f024 0403 	bic.w	r4, r4, #3
 8011f80:	42a0      	cmp	r0, r4
 8011f82:	d0f8      	beq.n	8011f76 <sbrk_aligned+0x22>
 8011f84:	1a21      	subs	r1, r4, r0
 8011f86:	4628      	mov	r0, r5
 8011f88:	f000 ff76 	bl	8012e78 <_sbrk_r>
 8011f8c:	3001      	adds	r0, #1
 8011f8e:	d1f2      	bne.n	8011f76 <sbrk_aligned+0x22>
 8011f90:	e7ef      	b.n	8011f72 <sbrk_aligned+0x1e>
 8011f92:	bf00      	nop
 8011f94:	24004f10 	.word	0x24004f10

08011f98 <_malloc_r>:
 8011f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f9c:	1ccd      	adds	r5, r1, #3
 8011f9e:	f025 0503 	bic.w	r5, r5, #3
 8011fa2:	3508      	adds	r5, #8
 8011fa4:	2d0c      	cmp	r5, #12
 8011fa6:	bf38      	it	cc
 8011fa8:	250c      	movcc	r5, #12
 8011faa:	2d00      	cmp	r5, #0
 8011fac:	4606      	mov	r6, r0
 8011fae:	db01      	blt.n	8011fb4 <_malloc_r+0x1c>
 8011fb0:	42a9      	cmp	r1, r5
 8011fb2:	d904      	bls.n	8011fbe <_malloc_r+0x26>
 8011fb4:	230c      	movs	r3, #12
 8011fb6:	6033      	str	r3, [r6, #0]
 8011fb8:	2000      	movs	r0, #0
 8011fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012094 <_malloc_r+0xfc>
 8011fc2:	f000 f87b 	bl	80120bc <__malloc_lock>
 8011fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8011fca:	461c      	mov	r4, r3
 8011fcc:	bb44      	cbnz	r4, 8012020 <_malloc_r+0x88>
 8011fce:	4629      	mov	r1, r5
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	f7ff ffbf 	bl	8011f54 <sbrk_aligned>
 8011fd6:	1c43      	adds	r3, r0, #1
 8011fd8:	4604      	mov	r4, r0
 8011fda:	d158      	bne.n	801208e <_malloc_r+0xf6>
 8011fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8011fe0:	4627      	mov	r7, r4
 8011fe2:	2f00      	cmp	r7, #0
 8011fe4:	d143      	bne.n	801206e <_malloc_r+0xd6>
 8011fe6:	2c00      	cmp	r4, #0
 8011fe8:	d04b      	beq.n	8012082 <_malloc_r+0xea>
 8011fea:	6823      	ldr	r3, [r4, #0]
 8011fec:	4639      	mov	r1, r7
 8011fee:	4630      	mov	r0, r6
 8011ff0:	eb04 0903 	add.w	r9, r4, r3
 8011ff4:	f000 ff40 	bl	8012e78 <_sbrk_r>
 8011ff8:	4581      	cmp	r9, r0
 8011ffa:	d142      	bne.n	8012082 <_malloc_r+0xea>
 8011ffc:	6821      	ldr	r1, [r4, #0]
 8011ffe:	1a6d      	subs	r5, r5, r1
 8012000:	4629      	mov	r1, r5
 8012002:	4630      	mov	r0, r6
 8012004:	f7ff ffa6 	bl	8011f54 <sbrk_aligned>
 8012008:	3001      	adds	r0, #1
 801200a:	d03a      	beq.n	8012082 <_malloc_r+0xea>
 801200c:	6823      	ldr	r3, [r4, #0]
 801200e:	442b      	add	r3, r5
 8012010:	6023      	str	r3, [r4, #0]
 8012012:	f8d8 3000 	ldr.w	r3, [r8]
 8012016:	685a      	ldr	r2, [r3, #4]
 8012018:	bb62      	cbnz	r2, 8012074 <_malloc_r+0xdc>
 801201a:	f8c8 7000 	str.w	r7, [r8]
 801201e:	e00f      	b.n	8012040 <_malloc_r+0xa8>
 8012020:	6822      	ldr	r2, [r4, #0]
 8012022:	1b52      	subs	r2, r2, r5
 8012024:	d420      	bmi.n	8012068 <_malloc_r+0xd0>
 8012026:	2a0b      	cmp	r2, #11
 8012028:	d917      	bls.n	801205a <_malloc_r+0xc2>
 801202a:	1961      	adds	r1, r4, r5
 801202c:	42a3      	cmp	r3, r4
 801202e:	6025      	str	r5, [r4, #0]
 8012030:	bf18      	it	ne
 8012032:	6059      	strne	r1, [r3, #4]
 8012034:	6863      	ldr	r3, [r4, #4]
 8012036:	bf08      	it	eq
 8012038:	f8c8 1000 	streq.w	r1, [r8]
 801203c:	5162      	str	r2, [r4, r5]
 801203e:	604b      	str	r3, [r1, #4]
 8012040:	4630      	mov	r0, r6
 8012042:	f000 f841 	bl	80120c8 <__malloc_unlock>
 8012046:	f104 000b 	add.w	r0, r4, #11
 801204a:	1d23      	adds	r3, r4, #4
 801204c:	f020 0007 	bic.w	r0, r0, #7
 8012050:	1ac2      	subs	r2, r0, r3
 8012052:	bf1c      	itt	ne
 8012054:	1a1b      	subne	r3, r3, r0
 8012056:	50a3      	strne	r3, [r4, r2]
 8012058:	e7af      	b.n	8011fba <_malloc_r+0x22>
 801205a:	6862      	ldr	r2, [r4, #4]
 801205c:	42a3      	cmp	r3, r4
 801205e:	bf0c      	ite	eq
 8012060:	f8c8 2000 	streq.w	r2, [r8]
 8012064:	605a      	strne	r2, [r3, #4]
 8012066:	e7eb      	b.n	8012040 <_malloc_r+0xa8>
 8012068:	4623      	mov	r3, r4
 801206a:	6864      	ldr	r4, [r4, #4]
 801206c:	e7ae      	b.n	8011fcc <_malloc_r+0x34>
 801206e:	463c      	mov	r4, r7
 8012070:	687f      	ldr	r7, [r7, #4]
 8012072:	e7b6      	b.n	8011fe2 <_malloc_r+0x4a>
 8012074:	461a      	mov	r2, r3
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	42a3      	cmp	r3, r4
 801207a:	d1fb      	bne.n	8012074 <_malloc_r+0xdc>
 801207c:	2300      	movs	r3, #0
 801207e:	6053      	str	r3, [r2, #4]
 8012080:	e7de      	b.n	8012040 <_malloc_r+0xa8>
 8012082:	230c      	movs	r3, #12
 8012084:	6033      	str	r3, [r6, #0]
 8012086:	4630      	mov	r0, r6
 8012088:	f000 f81e 	bl	80120c8 <__malloc_unlock>
 801208c:	e794      	b.n	8011fb8 <_malloc_r+0x20>
 801208e:	6005      	str	r5, [r0, #0]
 8012090:	e7d6      	b.n	8012040 <_malloc_r+0xa8>
 8012092:	bf00      	nop
 8012094:	24004f14 	.word	0x24004f14

08012098 <__ascii_mbtowc>:
 8012098:	b082      	sub	sp, #8
 801209a:	b901      	cbnz	r1, 801209e <__ascii_mbtowc+0x6>
 801209c:	a901      	add	r1, sp, #4
 801209e:	b142      	cbz	r2, 80120b2 <__ascii_mbtowc+0x1a>
 80120a0:	b14b      	cbz	r3, 80120b6 <__ascii_mbtowc+0x1e>
 80120a2:	7813      	ldrb	r3, [r2, #0]
 80120a4:	600b      	str	r3, [r1, #0]
 80120a6:	7812      	ldrb	r2, [r2, #0]
 80120a8:	1e10      	subs	r0, r2, #0
 80120aa:	bf18      	it	ne
 80120ac:	2001      	movne	r0, #1
 80120ae:	b002      	add	sp, #8
 80120b0:	4770      	bx	lr
 80120b2:	4610      	mov	r0, r2
 80120b4:	e7fb      	b.n	80120ae <__ascii_mbtowc+0x16>
 80120b6:	f06f 0001 	mvn.w	r0, #1
 80120ba:	e7f8      	b.n	80120ae <__ascii_mbtowc+0x16>

080120bc <__malloc_lock>:
 80120bc:	4801      	ldr	r0, [pc, #4]	@ (80120c4 <__malloc_lock+0x8>)
 80120be:	f7fe bdb4 	b.w	8010c2a <__retarget_lock_acquire_recursive>
 80120c2:	bf00      	nop
 80120c4:	24004f0c 	.word	0x24004f0c

080120c8 <__malloc_unlock>:
 80120c8:	4801      	ldr	r0, [pc, #4]	@ (80120d0 <__malloc_unlock+0x8>)
 80120ca:	f7fe bdaf 	b.w	8010c2c <__retarget_lock_release_recursive>
 80120ce:	bf00      	nop
 80120d0:	24004f0c 	.word	0x24004f0c

080120d4 <_Balloc>:
 80120d4:	b570      	push	{r4, r5, r6, lr}
 80120d6:	69c6      	ldr	r6, [r0, #28]
 80120d8:	4604      	mov	r4, r0
 80120da:	460d      	mov	r5, r1
 80120dc:	b976      	cbnz	r6, 80120fc <_Balloc+0x28>
 80120de:	2010      	movs	r0, #16
 80120e0:	f7ff ff30 	bl	8011f44 <malloc>
 80120e4:	4602      	mov	r2, r0
 80120e6:	61e0      	str	r0, [r4, #28]
 80120e8:	b920      	cbnz	r0, 80120f4 <_Balloc+0x20>
 80120ea:	4b18      	ldr	r3, [pc, #96]	@ (801214c <_Balloc+0x78>)
 80120ec:	4818      	ldr	r0, [pc, #96]	@ (8012150 <_Balloc+0x7c>)
 80120ee:	216b      	movs	r1, #107	@ 0x6b
 80120f0:	f000 fed2 	bl	8012e98 <__assert_func>
 80120f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120f8:	6006      	str	r6, [r0, #0]
 80120fa:	60c6      	str	r6, [r0, #12]
 80120fc:	69e6      	ldr	r6, [r4, #28]
 80120fe:	68f3      	ldr	r3, [r6, #12]
 8012100:	b183      	cbz	r3, 8012124 <_Balloc+0x50>
 8012102:	69e3      	ldr	r3, [r4, #28]
 8012104:	68db      	ldr	r3, [r3, #12]
 8012106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801210a:	b9b8      	cbnz	r0, 801213c <_Balloc+0x68>
 801210c:	2101      	movs	r1, #1
 801210e:	fa01 f605 	lsl.w	r6, r1, r5
 8012112:	1d72      	adds	r2, r6, #5
 8012114:	0092      	lsls	r2, r2, #2
 8012116:	4620      	mov	r0, r4
 8012118:	f000 fedc 	bl	8012ed4 <_calloc_r>
 801211c:	b160      	cbz	r0, 8012138 <_Balloc+0x64>
 801211e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012122:	e00e      	b.n	8012142 <_Balloc+0x6e>
 8012124:	2221      	movs	r2, #33	@ 0x21
 8012126:	2104      	movs	r1, #4
 8012128:	4620      	mov	r0, r4
 801212a:	f000 fed3 	bl	8012ed4 <_calloc_r>
 801212e:	69e3      	ldr	r3, [r4, #28]
 8012130:	60f0      	str	r0, [r6, #12]
 8012132:	68db      	ldr	r3, [r3, #12]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d1e4      	bne.n	8012102 <_Balloc+0x2e>
 8012138:	2000      	movs	r0, #0
 801213a:	bd70      	pop	{r4, r5, r6, pc}
 801213c:	6802      	ldr	r2, [r0, #0]
 801213e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012142:	2300      	movs	r3, #0
 8012144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012148:	e7f7      	b.n	801213a <_Balloc+0x66>
 801214a:	bf00      	nop
 801214c:	080138f3 	.word	0x080138f3
 8012150:	080139d3 	.word	0x080139d3

08012154 <_Bfree>:
 8012154:	b570      	push	{r4, r5, r6, lr}
 8012156:	69c6      	ldr	r6, [r0, #28]
 8012158:	4605      	mov	r5, r0
 801215a:	460c      	mov	r4, r1
 801215c:	b976      	cbnz	r6, 801217c <_Bfree+0x28>
 801215e:	2010      	movs	r0, #16
 8012160:	f7ff fef0 	bl	8011f44 <malloc>
 8012164:	4602      	mov	r2, r0
 8012166:	61e8      	str	r0, [r5, #28]
 8012168:	b920      	cbnz	r0, 8012174 <_Bfree+0x20>
 801216a:	4b09      	ldr	r3, [pc, #36]	@ (8012190 <_Bfree+0x3c>)
 801216c:	4809      	ldr	r0, [pc, #36]	@ (8012194 <_Bfree+0x40>)
 801216e:	218f      	movs	r1, #143	@ 0x8f
 8012170:	f000 fe92 	bl	8012e98 <__assert_func>
 8012174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012178:	6006      	str	r6, [r0, #0]
 801217a:	60c6      	str	r6, [r0, #12]
 801217c:	b13c      	cbz	r4, 801218e <_Bfree+0x3a>
 801217e:	69eb      	ldr	r3, [r5, #28]
 8012180:	6862      	ldr	r2, [r4, #4]
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012188:	6021      	str	r1, [r4, #0]
 801218a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801218e:	bd70      	pop	{r4, r5, r6, pc}
 8012190:	080138f3 	.word	0x080138f3
 8012194:	080139d3 	.word	0x080139d3

08012198 <__multadd>:
 8012198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801219c:	690d      	ldr	r5, [r1, #16]
 801219e:	4607      	mov	r7, r0
 80121a0:	460c      	mov	r4, r1
 80121a2:	461e      	mov	r6, r3
 80121a4:	f101 0c14 	add.w	ip, r1, #20
 80121a8:	2000      	movs	r0, #0
 80121aa:	f8dc 3000 	ldr.w	r3, [ip]
 80121ae:	b299      	uxth	r1, r3
 80121b0:	fb02 6101 	mla	r1, r2, r1, r6
 80121b4:	0c1e      	lsrs	r6, r3, #16
 80121b6:	0c0b      	lsrs	r3, r1, #16
 80121b8:	fb02 3306 	mla	r3, r2, r6, r3
 80121bc:	b289      	uxth	r1, r1
 80121be:	3001      	adds	r0, #1
 80121c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121c4:	4285      	cmp	r5, r0
 80121c6:	f84c 1b04 	str.w	r1, [ip], #4
 80121ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121ce:	dcec      	bgt.n	80121aa <__multadd+0x12>
 80121d0:	b30e      	cbz	r6, 8012216 <__multadd+0x7e>
 80121d2:	68a3      	ldr	r3, [r4, #8]
 80121d4:	42ab      	cmp	r3, r5
 80121d6:	dc19      	bgt.n	801220c <__multadd+0x74>
 80121d8:	6861      	ldr	r1, [r4, #4]
 80121da:	4638      	mov	r0, r7
 80121dc:	3101      	adds	r1, #1
 80121de:	f7ff ff79 	bl	80120d4 <_Balloc>
 80121e2:	4680      	mov	r8, r0
 80121e4:	b928      	cbnz	r0, 80121f2 <__multadd+0x5a>
 80121e6:	4602      	mov	r2, r0
 80121e8:	4b0c      	ldr	r3, [pc, #48]	@ (801221c <__multadd+0x84>)
 80121ea:	480d      	ldr	r0, [pc, #52]	@ (8012220 <__multadd+0x88>)
 80121ec:	21ba      	movs	r1, #186	@ 0xba
 80121ee:	f000 fe53 	bl	8012e98 <__assert_func>
 80121f2:	6922      	ldr	r2, [r4, #16]
 80121f4:	3202      	adds	r2, #2
 80121f6:	f104 010c 	add.w	r1, r4, #12
 80121fa:	0092      	lsls	r2, r2, #2
 80121fc:	300c      	adds	r0, #12
 80121fe:	f7fe fd1e 	bl	8010c3e <memcpy>
 8012202:	4621      	mov	r1, r4
 8012204:	4638      	mov	r0, r7
 8012206:	f7ff ffa5 	bl	8012154 <_Bfree>
 801220a:	4644      	mov	r4, r8
 801220c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012210:	3501      	adds	r5, #1
 8012212:	615e      	str	r6, [r3, #20]
 8012214:	6125      	str	r5, [r4, #16]
 8012216:	4620      	mov	r0, r4
 8012218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221c:	08013962 	.word	0x08013962
 8012220:	080139d3 	.word	0x080139d3

08012224 <__s2b>:
 8012224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012228:	460c      	mov	r4, r1
 801222a:	4615      	mov	r5, r2
 801222c:	461f      	mov	r7, r3
 801222e:	2209      	movs	r2, #9
 8012230:	3308      	adds	r3, #8
 8012232:	4606      	mov	r6, r0
 8012234:	fb93 f3f2 	sdiv	r3, r3, r2
 8012238:	2100      	movs	r1, #0
 801223a:	2201      	movs	r2, #1
 801223c:	429a      	cmp	r2, r3
 801223e:	db09      	blt.n	8012254 <__s2b+0x30>
 8012240:	4630      	mov	r0, r6
 8012242:	f7ff ff47 	bl	80120d4 <_Balloc>
 8012246:	b940      	cbnz	r0, 801225a <__s2b+0x36>
 8012248:	4602      	mov	r2, r0
 801224a:	4b19      	ldr	r3, [pc, #100]	@ (80122b0 <__s2b+0x8c>)
 801224c:	4819      	ldr	r0, [pc, #100]	@ (80122b4 <__s2b+0x90>)
 801224e:	21d3      	movs	r1, #211	@ 0xd3
 8012250:	f000 fe22 	bl	8012e98 <__assert_func>
 8012254:	0052      	lsls	r2, r2, #1
 8012256:	3101      	adds	r1, #1
 8012258:	e7f0      	b.n	801223c <__s2b+0x18>
 801225a:	9b08      	ldr	r3, [sp, #32]
 801225c:	6143      	str	r3, [r0, #20]
 801225e:	2d09      	cmp	r5, #9
 8012260:	f04f 0301 	mov.w	r3, #1
 8012264:	6103      	str	r3, [r0, #16]
 8012266:	dd16      	ble.n	8012296 <__s2b+0x72>
 8012268:	f104 0909 	add.w	r9, r4, #9
 801226c:	46c8      	mov	r8, r9
 801226e:	442c      	add	r4, r5
 8012270:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012274:	4601      	mov	r1, r0
 8012276:	3b30      	subs	r3, #48	@ 0x30
 8012278:	220a      	movs	r2, #10
 801227a:	4630      	mov	r0, r6
 801227c:	f7ff ff8c 	bl	8012198 <__multadd>
 8012280:	45a0      	cmp	r8, r4
 8012282:	d1f5      	bne.n	8012270 <__s2b+0x4c>
 8012284:	f1a5 0408 	sub.w	r4, r5, #8
 8012288:	444c      	add	r4, r9
 801228a:	1b2d      	subs	r5, r5, r4
 801228c:	1963      	adds	r3, r4, r5
 801228e:	42bb      	cmp	r3, r7
 8012290:	db04      	blt.n	801229c <__s2b+0x78>
 8012292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012296:	340a      	adds	r4, #10
 8012298:	2509      	movs	r5, #9
 801229a:	e7f6      	b.n	801228a <__s2b+0x66>
 801229c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80122a0:	4601      	mov	r1, r0
 80122a2:	3b30      	subs	r3, #48	@ 0x30
 80122a4:	220a      	movs	r2, #10
 80122a6:	4630      	mov	r0, r6
 80122a8:	f7ff ff76 	bl	8012198 <__multadd>
 80122ac:	e7ee      	b.n	801228c <__s2b+0x68>
 80122ae:	bf00      	nop
 80122b0:	08013962 	.word	0x08013962
 80122b4:	080139d3 	.word	0x080139d3

080122b8 <__hi0bits>:
 80122b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80122bc:	4603      	mov	r3, r0
 80122be:	bf36      	itet	cc
 80122c0:	0403      	lslcc	r3, r0, #16
 80122c2:	2000      	movcs	r0, #0
 80122c4:	2010      	movcc	r0, #16
 80122c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80122ca:	bf3c      	itt	cc
 80122cc:	021b      	lslcc	r3, r3, #8
 80122ce:	3008      	addcc	r0, #8
 80122d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122d4:	bf3c      	itt	cc
 80122d6:	011b      	lslcc	r3, r3, #4
 80122d8:	3004      	addcc	r0, #4
 80122da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80122de:	bf3c      	itt	cc
 80122e0:	009b      	lslcc	r3, r3, #2
 80122e2:	3002      	addcc	r0, #2
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	db05      	blt.n	80122f4 <__hi0bits+0x3c>
 80122e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80122ec:	f100 0001 	add.w	r0, r0, #1
 80122f0:	bf08      	it	eq
 80122f2:	2020      	moveq	r0, #32
 80122f4:	4770      	bx	lr

080122f6 <__lo0bits>:
 80122f6:	6803      	ldr	r3, [r0, #0]
 80122f8:	4602      	mov	r2, r0
 80122fa:	f013 0007 	ands.w	r0, r3, #7
 80122fe:	d00b      	beq.n	8012318 <__lo0bits+0x22>
 8012300:	07d9      	lsls	r1, r3, #31
 8012302:	d421      	bmi.n	8012348 <__lo0bits+0x52>
 8012304:	0798      	lsls	r0, r3, #30
 8012306:	bf49      	itett	mi
 8012308:	085b      	lsrmi	r3, r3, #1
 801230a:	089b      	lsrpl	r3, r3, #2
 801230c:	2001      	movmi	r0, #1
 801230e:	6013      	strmi	r3, [r2, #0]
 8012310:	bf5c      	itt	pl
 8012312:	6013      	strpl	r3, [r2, #0]
 8012314:	2002      	movpl	r0, #2
 8012316:	4770      	bx	lr
 8012318:	b299      	uxth	r1, r3
 801231a:	b909      	cbnz	r1, 8012320 <__lo0bits+0x2a>
 801231c:	0c1b      	lsrs	r3, r3, #16
 801231e:	2010      	movs	r0, #16
 8012320:	b2d9      	uxtb	r1, r3
 8012322:	b909      	cbnz	r1, 8012328 <__lo0bits+0x32>
 8012324:	3008      	adds	r0, #8
 8012326:	0a1b      	lsrs	r3, r3, #8
 8012328:	0719      	lsls	r1, r3, #28
 801232a:	bf04      	itt	eq
 801232c:	091b      	lsreq	r3, r3, #4
 801232e:	3004      	addeq	r0, #4
 8012330:	0799      	lsls	r1, r3, #30
 8012332:	bf04      	itt	eq
 8012334:	089b      	lsreq	r3, r3, #2
 8012336:	3002      	addeq	r0, #2
 8012338:	07d9      	lsls	r1, r3, #31
 801233a:	d403      	bmi.n	8012344 <__lo0bits+0x4e>
 801233c:	085b      	lsrs	r3, r3, #1
 801233e:	f100 0001 	add.w	r0, r0, #1
 8012342:	d003      	beq.n	801234c <__lo0bits+0x56>
 8012344:	6013      	str	r3, [r2, #0]
 8012346:	4770      	bx	lr
 8012348:	2000      	movs	r0, #0
 801234a:	4770      	bx	lr
 801234c:	2020      	movs	r0, #32
 801234e:	4770      	bx	lr

08012350 <__i2b>:
 8012350:	b510      	push	{r4, lr}
 8012352:	460c      	mov	r4, r1
 8012354:	2101      	movs	r1, #1
 8012356:	f7ff febd 	bl	80120d4 <_Balloc>
 801235a:	4602      	mov	r2, r0
 801235c:	b928      	cbnz	r0, 801236a <__i2b+0x1a>
 801235e:	4b05      	ldr	r3, [pc, #20]	@ (8012374 <__i2b+0x24>)
 8012360:	4805      	ldr	r0, [pc, #20]	@ (8012378 <__i2b+0x28>)
 8012362:	f240 1145 	movw	r1, #325	@ 0x145
 8012366:	f000 fd97 	bl	8012e98 <__assert_func>
 801236a:	2301      	movs	r3, #1
 801236c:	6144      	str	r4, [r0, #20]
 801236e:	6103      	str	r3, [r0, #16]
 8012370:	bd10      	pop	{r4, pc}
 8012372:	bf00      	nop
 8012374:	08013962 	.word	0x08013962
 8012378:	080139d3 	.word	0x080139d3

0801237c <__multiply>:
 801237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012380:	4617      	mov	r7, r2
 8012382:	690a      	ldr	r2, [r1, #16]
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	429a      	cmp	r2, r3
 8012388:	bfa8      	it	ge
 801238a:	463b      	movge	r3, r7
 801238c:	4689      	mov	r9, r1
 801238e:	bfa4      	itt	ge
 8012390:	460f      	movge	r7, r1
 8012392:	4699      	movge	r9, r3
 8012394:	693d      	ldr	r5, [r7, #16]
 8012396:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	6879      	ldr	r1, [r7, #4]
 801239e:	eb05 060a 	add.w	r6, r5, sl
 80123a2:	42b3      	cmp	r3, r6
 80123a4:	b085      	sub	sp, #20
 80123a6:	bfb8      	it	lt
 80123a8:	3101      	addlt	r1, #1
 80123aa:	f7ff fe93 	bl	80120d4 <_Balloc>
 80123ae:	b930      	cbnz	r0, 80123be <__multiply+0x42>
 80123b0:	4602      	mov	r2, r0
 80123b2:	4b41      	ldr	r3, [pc, #260]	@ (80124b8 <__multiply+0x13c>)
 80123b4:	4841      	ldr	r0, [pc, #260]	@ (80124bc <__multiply+0x140>)
 80123b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80123ba:	f000 fd6d 	bl	8012e98 <__assert_func>
 80123be:	f100 0414 	add.w	r4, r0, #20
 80123c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80123c6:	4623      	mov	r3, r4
 80123c8:	2200      	movs	r2, #0
 80123ca:	4573      	cmp	r3, lr
 80123cc:	d320      	bcc.n	8012410 <__multiply+0x94>
 80123ce:	f107 0814 	add.w	r8, r7, #20
 80123d2:	f109 0114 	add.w	r1, r9, #20
 80123d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80123da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80123de:	9302      	str	r3, [sp, #8]
 80123e0:	1beb      	subs	r3, r5, r7
 80123e2:	3b15      	subs	r3, #21
 80123e4:	f023 0303 	bic.w	r3, r3, #3
 80123e8:	3304      	adds	r3, #4
 80123ea:	3715      	adds	r7, #21
 80123ec:	42bd      	cmp	r5, r7
 80123ee:	bf38      	it	cc
 80123f0:	2304      	movcc	r3, #4
 80123f2:	9301      	str	r3, [sp, #4]
 80123f4:	9b02      	ldr	r3, [sp, #8]
 80123f6:	9103      	str	r1, [sp, #12]
 80123f8:	428b      	cmp	r3, r1
 80123fa:	d80c      	bhi.n	8012416 <__multiply+0x9a>
 80123fc:	2e00      	cmp	r6, #0
 80123fe:	dd03      	ble.n	8012408 <__multiply+0x8c>
 8012400:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012404:	2b00      	cmp	r3, #0
 8012406:	d055      	beq.n	80124b4 <__multiply+0x138>
 8012408:	6106      	str	r6, [r0, #16]
 801240a:	b005      	add	sp, #20
 801240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012410:	f843 2b04 	str.w	r2, [r3], #4
 8012414:	e7d9      	b.n	80123ca <__multiply+0x4e>
 8012416:	f8b1 a000 	ldrh.w	sl, [r1]
 801241a:	f1ba 0f00 	cmp.w	sl, #0
 801241e:	d01f      	beq.n	8012460 <__multiply+0xe4>
 8012420:	46c4      	mov	ip, r8
 8012422:	46a1      	mov	r9, r4
 8012424:	2700      	movs	r7, #0
 8012426:	f85c 2b04 	ldr.w	r2, [ip], #4
 801242a:	f8d9 3000 	ldr.w	r3, [r9]
 801242e:	fa1f fb82 	uxth.w	fp, r2
 8012432:	b29b      	uxth	r3, r3
 8012434:	fb0a 330b 	mla	r3, sl, fp, r3
 8012438:	443b      	add	r3, r7
 801243a:	f8d9 7000 	ldr.w	r7, [r9]
 801243e:	0c12      	lsrs	r2, r2, #16
 8012440:	0c3f      	lsrs	r7, r7, #16
 8012442:	fb0a 7202 	mla	r2, sl, r2, r7
 8012446:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801244a:	b29b      	uxth	r3, r3
 801244c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012450:	4565      	cmp	r5, ip
 8012452:	f849 3b04 	str.w	r3, [r9], #4
 8012456:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801245a:	d8e4      	bhi.n	8012426 <__multiply+0xaa>
 801245c:	9b01      	ldr	r3, [sp, #4]
 801245e:	50e7      	str	r7, [r4, r3]
 8012460:	9b03      	ldr	r3, [sp, #12]
 8012462:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012466:	3104      	adds	r1, #4
 8012468:	f1b9 0f00 	cmp.w	r9, #0
 801246c:	d020      	beq.n	80124b0 <__multiply+0x134>
 801246e:	6823      	ldr	r3, [r4, #0]
 8012470:	4647      	mov	r7, r8
 8012472:	46a4      	mov	ip, r4
 8012474:	f04f 0a00 	mov.w	sl, #0
 8012478:	f8b7 b000 	ldrh.w	fp, [r7]
 801247c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012480:	fb09 220b 	mla	r2, r9, fp, r2
 8012484:	4452      	add	r2, sl
 8012486:	b29b      	uxth	r3, r3
 8012488:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801248c:	f84c 3b04 	str.w	r3, [ip], #4
 8012490:	f857 3b04 	ldr.w	r3, [r7], #4
 8012494:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012498:	f8bc 3000 	ldrh.w	r3, [ip]
 801249c:	fb09 330a 	mla	r3, r9, sl, r3
 80124a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80124a4:	42bd      	cmp	r5, r7
 80124a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80124aa:	d8e5      	bhi.n	8012478 <__multiply+0xfc>
 80124ac:	9a01      	ldr	r2, [sp, #4]
 80124ae:	50a3      	str	r3, [r4, r2]
 80124b0:	3404      	adds	r4, #4
 80124b2:	e79f      	b.n	80123f4 <__multiply+0x78>
 80124b4:	3e01      	subs	r6, #1
 80124b6:	e7a1      	b.n	80123fc <__multiply+0x80>
 80124b8:	08013962 	.word	0x08013962
 80124bc:	080139d3 	.word	0x080139d3

080124c0 <__pow5mult>:
 80124c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124c4:	4615      	mov	r5, r2
 80124c6:	f012 0203 	ands.w	r2, r2, #3
 80124ca:	4607      	mov	r7, r0
 80124cc:	460e      	mov	r6, r1
 80124ce:	d007      	beq.n	80124e0 <__pow5mult+0x20>
 80124d0:	4c25      	ldr	r4, [pc, #148]	@ (8012568 <__pow5mult+0xa8>)
 80124d2:	3a01      	subs	r2, #1
 80124d4:	2300      	movs	r3, #0
 80124d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124da:	f7ff fe5d 	bl	8012198 <__multadd>
 80124de:	4606      	mov	r6, r0
 80124e0:	10ad      	asrs	r5, r5, #2
 80124e2:	d03d      	beq.n	8012560 <__pow5mult+0xa0>
 80124e4:	69fc      	ldr	r4, [r7, #28]
 80124e6:	b97c      	cbnz	r4, 8012508 <__pow5mult+0x48>
 80124e8:	2010      	movs	r0, #16
 80124ea:	f7ff fd2b 	bl	8011f44 <malloc>
 80124ee:	4602      	mov	r2, r0
 80124f0:	61f8      	str	r0, [r7, #28]
 80124f2:	b928      	cbnz	r0, 8012500 <__pow5mult+0x40>
 80124f4:	4b1d      	ldr	r3, [pc, #116]	@ (801256c <__pow5mult+0xac>)
 80124f6:	481e      	ldr	r0, [pc, #120]	@ (8012570 <__pow5mult+0xb0>)
 80124f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80124fc:	f000 fccc 	bl	8012e98 <__assert_func>
 8012500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012504:	6004      	str	r4, [r0, #0]
 8012506:	60c4      	str	r4, [r0, #12]
 8012508:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801250c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012510:	b94c      	cbnz	r4, 8012526 <__pow5mult+0x66>
 8012512:	f240 2171 	movw	r1, #625	@ 0x271
 8012516:	4638      	mov	r0, r7
 8012518:	f7ff ff1a 	bl	8012350 <__i2b>
 801251c:	2300      	movs	r3, #0
 801251e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012522:	4604      	mov	r4, r0
 8012524:	6003      	str	r3, [r0, #0]
 8012526:	f04f 0900 	mov.w	r9, #0
 801252a:	07eb      	lsls	r3, r5, #31
 801252c:	d50a      	bpl.n	8012544 <__pow5mult+0x84>
 801252e:	4631      	mov	r1, r6
 8012530:	4622      	mov	r2, r4
 8012532:	4638      	mov	r0, r7
 8012534:	f7ff ff22 	bl	801237c <__multiply>
 8012538:	4631      	mov	r1, r6
 801253a:	4680      	mov	r8, r0
 801253c:	4638      	mov	r0, r7
 801253e:	f7ff fe09 	bl	8012154 <_Bfree>
 8012542:	4646      	mov	r6, r8
 8012544:	106d      	asrs	r5, r5, #1
 8012546:	d00b      	beq.n	8012560 <__pow5mult+0xa0>
 8012548:	6820      	ldr	r0, [r4, #0]
 801254a:	b938      	cbnz	r0, 801255c <__pow5mult+0x9c>
 801254c:	4622      	mov	r2, r4
 801254e:	4621      	mov	r1, r4
 8012550:	4638      	mov	r0, r7
 8012552:	f7ff ff13 	bl	801237c <__multiply>
 8012556:	6020      	str	r0, [r4, #0]
 8012558:	f8c0 9000 	str.w	r9, [r0]
 801255c:	4604      	mov	r4, r0
 801255e:	e7e4      	b.n	801252a <__pow5mult+0x6a>
 8012560:	4630      	mov	r0, r6
 8012562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012566:	bf00      	nop
 8012568:	08013ad0 	.word	0x08013ad0
 801256c:	080138f3 	.word	0x080138f3
 8012570:	080139d3 	.word	0x080139d3

08012574 <__lshift>:
 8012574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012578:	460c      	mov	r4, r1
 801257a:	6849      	ldr	r1, [r1, #4]
 801257c:	6923      	ldr	r3, [r4, #16]
 801257e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012582:	68a3      	ldr	r3, [r4, #8]
 8012584:	4607      	mov	r7, r0
 8012586:	4691      	mov	r9, r2
 8012588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801258c:	f108 0601 	add.w	r6, r8, #1
 8012590:	42b3      	cmp	r3, r6
 8012592:	db0b      	blt.n	80125ac <__lshift+0x38>
 8012594:	4638      	mov	r0, r7
 8012596:	f7ff fd9d 	bl	80120d4 <_Balloc>
 801259a:	4605      	mov	r5, r0
 801259c:	b948      	cbnz	r0, 80125b2 <__lshift+0x3e>
 801259e:	4602      	mov	r2, r0
 80125a0:	4b28      	ldr	r3, [pc, #160]	@ (8012644 <__lshift+0xd0>)
 80125a2:	4829      	ldr	r0, [pc, #164]	@ (8012648 <__lshift+0xd4>)
 80125a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80125a8:	f000 fc76 	bl	8012e98 <__assert_func>
 80125ac:	3101      	adds	r1, #1
 80125ae:	005b      	lsls	r3, r3, #1
 80125b0:	e7ee      	b.n	8012590 <__lshift+0x1c>
 80125b2:	2300      	movs	r3, #0
 80125b4:	f100 0114 	add.w	r1, r0, #20
 80125b8:	f100 0210 	add.w	r2, r0, #16
 80125bc:	4618      	mov	r0, r3
 80125be:	4553      	cmp	r3, sl
 80125c0:	db33      	blt.n	801262a <__lshift+0xb6>
 80125c2:	6920      	ldr	r0, [r4, #16]
 80125c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125c8:	f104 0314 	add.w	r3, r4, #20
 80125cc:	f019 091f 	ands.w	r9, r9, #31
 80125d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125d8:	d02b      	beq.n	8012632 <__lshift+0xbe>
 80125da:	f1c9 0e20 	rsb	lr, r9, #32
 80125de:	468a      	mov	sl, r1
 80125e0:	2200      	movs	r2, #0
 80125e2:	6818      	ldr	r0, [r3, #0]
 80125e4:	fa00 f009 	lsl.w	r0, r0, r9
 80125e8:	4310      	orrs	r0, r2
 80125ea:	f84a 0b04 	str.w	r0, [sl], #4
 80125ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80125f2:	459c      	cmp	ip, r3
 80125f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80125f8:	d8f3      	bhi.n	80125e2 <__lshift+0x6e>
 80125fa:	ebac 0304 	sub.w	r3, ip, r4
 80125fe:	3b15      	subs	r3, #21
 8012600:	f023 0303 	bic.w	r3, r3, #3
 8012604:	3304      	adds	r3, #4
 8012606:	f104 0015 	add.w	r0, r4, #21
 801260a:	4560      	cmp	r0, ip
 801260c:	bf88      	it	hi
 801260e:	2304      	movhi	r3, #4
 8012610:	50ca      	str	r2, [r1, r3]
 8012612:	b10a      	cbz	r2, 8012618 <__lshift+0xa4>
 8012614:	f108 0602 	add.w	r6, r8, #2
 8012618:	3e01      	subs	r6, #1
 801261a:	4638      	mov	r0, r7
 801261c:	612e      	str	r6, [r5, #16]
 801261e:	4621      	mov	r1, r4
 8012620:	f7ff fd98 	bl	8012154 <_Bfree>
 8012624:	4628      	mov	r0, r5
 8012626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801262a:	f842 0f04 	str.w	r0, [r2, #4]!
 801262e:	3301      	adds	r3, #1
 8012630:	e7c5      	b.n	80125be <__lshift+0x4a>
 8012632:	3904      	subs	r1, #4
 8012634:	f853 2b04 	ldr.w	r2, [r3], #4
 8012638:	f841 2f04 	str.w	r2, [r1, #4]!
 801263c:	459c      	cmp	ip, r3
 801263e:	d8f9      	bhi.n	8012634 <__lshift+0xc0>
 8012640:	e7ea      	b.n	8012618 <__lshift+0xa4>
 8012642:	bf00      	nop
 8012644:	08013962 	.word	0x08013962
 8012648:	080139d3 	.word	0x080139d3

0801264c <__mcmp>:
 801264c:	690a      	ldr	r2, [r1, #16]
 801264e:	4603      	mov	r3, r0
 8012650:	6900      	ldr	r0, [r0, #16]
 8012652:	1a80      	subs	r0, r0, r2
 8012654:	b530      	push	{r4, r5, lr}
 8012656:	d10e      	bne.n	8012676 <__mcmp+0x2a>
 8012658:	3314      	adds	r3, #20
 801265a:	3114      	adds	r1, #20
 801265c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012660:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012664:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012668:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801266c:	4295      	cmp	r5, r2
 801266e:	d003      	beq.n	8012678 <__mcmp+0x2c>
 8012670:	d205      	bcs.n	801267e <__mcmp+0x32>
 8012672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012676:	bd30      	pop	{r4, r5, pc}
 8012678:	42a3      	cmp	r3, r4
 801267a:	d3f3      	bcc.n	8012664 <__mcmp+0x18>
 801267c:	e7fb      	b.n	8012676 <__mcmp+0x2a>
 801267e:	2001      	movs	r0, #1
 8012680:	e7f9      	b.n	8012676 <__mcmp+0x2a>
	...

08012684 <__mdiff>:
 8012684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012688:	4689      	mov	r9, r1
 801268a:	4606      	mov	r6, r0
 801268c:	4611      	mov	r1, r2
 801268e:	4648      	mov	r0, r9
 8012690:	4614      	mov	r4, r2
 8012692:	f7ff ffdb 	bl	801264c <__mcmp>
 8012696:	1e05      	subs	r5, r0, #0
 8012698:	d112      	bne.n	80126c0 <__mdiff+0x3c>
 801269a:	4629      	mov	r1, r5
 801269c:	4630      	mov	r0, r6
 801269e:	f7ff fd19 	bl	80120d4 <_Balloc>
 80126a2:	4602      	mov	r2, r0
 80126a4:	b928      	cbnz	r0, 80126b2 <__mdiff+0x2e>
 80126a6:	4b3f      	ldr	r3, [pc, #252]	@ (80127a4 <__mdiff+0x120>)
 80126a8:	f240 2137 	movw	r1, #567	@ 0x237
 80126ac:	483e      	ldr	r0, [pc, #248]	@ (80127a8 <__mdiff+0x124>)
 80126ae:	f000 fbf3 	bl	8012e98 <__assert_func>
 80126b2:	2301      	movs	r3, #1
 80126b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126b8:	4610      	mov	r0, r2
 80126ba:	b003      	add	sp, #12
 80126bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126c0:	bfbc      	itt	lt
 80126c2:	464b      	movlt	r3, r9
 80126c4:	46a1      	movlt	r9, r4
 80126c6:	4630      	mov	r0, r6
 80126c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80126cc:	bfba      	itte	lt
 80126ce:	461c      	movlt	r4, r3
 80126d0:	2501      	movlt	r5, #1
 80126d2:	2500      	movge	r5, #0
 80126d4:	f7ff fcfe 	bl	80120d4 <_Balloc>
 80126d8:	4602      	mov	r2, r0
 80126da:	b918      	cbnz	r0, 80126e4 <__mdiff+0x60>
 80126dc:	4b31      	ldr	r3, [pc, #196]	@ (80127a4 <__mdiff+0x120>)
 80126de:	f240 2145 	movw	r1, #581	@ 0x245
 80126e2:	e7e3      	b.n	80126ac <__mdiff+0x28>
 80126e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80126e8:	6926      	ldr	r6, [r4, #16]
 80126ea:	60c5      	str	r5, [r0, #12]
 80126ec:	f109 0310 	add.w	r3, r9, #16
 80126f0:	f109 0514 	add.w	r5, r9, #20
 80126f4:	f104 0e14 	add.w	lr, r4, #20
 80126f8:	f100 0b14 	add.w	fp, r0, #20
 80126fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012700:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012704:	9301      	str	r3, [sp, #4]
 8012706:	46d9      	mov	r9, fp
 8012708:	f04f 0c00 	mov.w	ip, #0
 801270c:	9b01      	ldr	r3, [sp, #4]
 801270e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012712:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012716:	9301      	str	r3, [sp, #4]
 8012718:	fa1f f38a 	uxth.w	r3, sl
 801271c:	4619      	mov	r1, r3
 801271e:	b283      	uxth	r3, r0
 8012720:	1acb      	subs	r3, r1, r3
 8012722:	0c00      	lsrs	r0, r0, #16
 8012724:	4463      	add	r3, ip
 8012726:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801272a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801272e:	b29b      	uxth	r3, r3
 8012730:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012734:	4576      	cmp	r6, lr
 8012736:	f849 3b04 	str.w	r3, [r9], #4
 801273a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801273e:	d8e5      	bhi.n	801270c <__mdiff+0x88>
 8012740:	1b33      	subs	r3, r6, r4
 8012742:	3b15      	subs	r3, #21
 8012744:	f023 0303 	bic.w	r3, r3, #3
 8012748:	3415      	adds	r4, #21
 801274a:	3304      	adds	r3, #4
 801274c:	42a6      	cmp	r6, r4
 801274e:	bf38      	it	cc
 8012750:	2304      	movcc	r3, #4
 8012752:	441d      	add	r5, r3
 8012754:	445b      	add	r3, fp
 8012756:	461e      	mov	r6, r3
 8012758:	462c      	mov	r4, r5
 801275a:	4544      	cmp	r4, r8
 801275c:	d30e      	bcc.n	801277c <__mdiff+0xf8>
 801275e:	f108 0103 	add.w	r1, r8, #3
 8012762:	1b49      	subs	r1, r1, r5
 8012764:	f021 0103 	bic.w	r1, r1, #3
 8012768:	3d03      	subs	r5, #3
 801276a:	45a8      	cmp	r8, r5
 801276c:	bf38      	it	cc
 801276e:	2100      	movcc	r1, #0
 8012770:	440b      	add	r3, r1
 8012772:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012776:	b191      	cbz	r1, 801279e <__mdiff+0x11a>
 8012778:	6117      	str	r7, [r2, #16]
 801277a:	e79d      	b.n	80126b8 <__mdiff+0x34>
 801277c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012780:	46e6      	mov	lr, ip
 8012782:	0c08      	lsrs	r0, r1, #16
 8012784:	fa1c fc81 	uxtah	ip, ip, r1
 8012788:	4471      	add	r1, lr
 801278a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801278e:	b289      	uxth	r1, r1
 8012790:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012794:	f846 1b04 	str.w	r1, [r6], #4
 8012798:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801279c:	e7dd      	b.n	801275a <__mdiff+0xd6>
 801279e:	3f01      	subs	r7, #1
 80127a0:	e7e7      	b.n	8012772 <__mdiff+0xee>
 80127a2:	bf00      	nop
 80127a4:	08013962 	.word	0x08013962
 80127a8:	080139d3 	.word	0x080139d3

080127ac <__ulp>:
 80127ac:	b082      	sub	sp, #8
 80127ae:	ed8d 0b00 	vstr	d0, [sp]
 80127b2:	9a01      	ldr	r2, [sp, #4]
 80127b4:	4b0f      	ldr	r3, [pc, #60]	@ (80127f4 <__ulp+0x48>)
 80127b6:	4013      	ands	r3, r2
 80127b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80127bc:	2b00      	cmp	r3, #0
 80127be:	dc08      	bgt.n	80127d2 <__ulp+0x26>
 80127c0:	425b      	negs	r3, r3
 80127c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80127c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80127ca:	da04      	bge.n	80127d6 <__ulp+0x2a>
 80127cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80127d0:	4113      	asrs	r3, r2
 80127d2:	2200      	movs	r2, #0
 80127d4:	e008      	b.n	80127e8 <__ulp+0x3c>
 80127d6:	f1a2 0314 	sub.w	r3, r2, #20
 80127da:	2b1e      	cmp	r3, #30
 80127dc:	bfda      	itte	le
 80127de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80127e2:	40da      	lsrle	r2, r3
 80127e4:	2201      	movgt	r2, #1
 80127e6:	2300      	movs	r3, #0
 80127e8:	4619      	mov	r1, r3
 80127ea:	4610      	mov	r0, r2
 80127ec:	ec41 0b10 	vmov	d0, r0, r1
 80127f0:	b002      	add	sp, #8
 80127f2:	4770      	bx	lr
 80127f4:	7ff00000 	.word	0x7ff00000

080127f8 <__b2d>:
 80127f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127fc:	6906      	ldr	r6, [r0, #16]
 80127fe:	f100 0814 	add.w	r8, r0, #20
 8012802:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012806:	1f37      	subs	r7, r6, #4
 8012808:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801280c:	4610      	mov	r0, r2
 801280e:	f7ff fd53 	bl	80122b8 <__hi0bits>
 8012812:	f1c0 0320 	rsb	r3, r0, #32
 8012816:	280a      	cmp	r0, #10
 8012818:	600b      	str	r3, [r1, #0]
 801281a:	491b      	ldr	r1, [pc, #108]	@ (8012888 <__b2d+0x90>)
 801281c:	dc15      	bgt.n	801284a <__b2d+0x52>
 801281e:	f1c0 0c0b 	rsb	ip, r0, #11
 8012822:	fa22 f30c 	lsr.w	r3, r2, ip
 8012826:	45b8      	cmp	r8, r7
 8012828:	ea43 0501 	orr.w	r5, r3, r1
 801282c:	bf34      	ite	cc
 801282e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012832:	2300      	movcs	r3, #0
 8012834:	3015      	adds	r0, #21
 8012836:	fa02 f000 	lsl.w	r0, r2, r0
 801283a:	fa23 f30c 	lsr.w	r3, r3, ip
 801283e:	4303      	orrs	r3, r0
 8012840:	461c      	mov	r4, r3
 8012842:	ec45 4b10 	vmov	d0, r4, r5
 8012846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801284a:	45b8      	cmp	r8, r7
 801284c:	bf3a      	itte	cc
 801284e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012852:	f1a6 0708 	subcc.w	r7, r6, #8
 8012856:	2300      	movcs	r3, #0
 8012858:	380b      	subs	r0, #11
 801285a:	d012      	beq.n	8012882 <__b2d+0x8a>
 801285c:	f1c0 0120 	rsb	r1, r0, #32
 8012860:	fa23 f401 	lsr.w	r4, r3, r1
 8012864:	4082      	lsls	r2, r0
 8012866:	4322      	orrs	r2, r4
 8012868:	4547      	cmp	r7, r8
 801286a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801286e:	bf8c      	ite	hi
 8012870:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012874:	2200      	movls	r2, #0
 8012876:	4083      	lsls	r3, r0
 8012878:	40ca      	lsrs	r2, r1
 801287a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801287e:	4313      	orrs	r3, r2
 8012880:	e7de      	b.n	8012840 <__b2d+0x48>
 8012882:	ea42 0501 	orr.w	r5, r2, r1
 8012886:	e7db      	b.n	8012840 <__b2d+0x48>
 8012888:	3ff00000 	.word	0x3ff00000

0801288c <__d2b>:
 801288c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012890:	460f      	mov	r7, r1
 8012892:	2101      	movs	r1, #1
 8012894:	ec59 8b10 	vmov	r8, r9, d0
 8012898:	4616      	mov	r6, r2
 801289a:	f7ff fc1b 	bl	80120d4 <_Balloc>
 801289e:	4604      	mov	r4, r0
 80128a0:	b930      	cbnz	r0, 80128b0 <__d2b+0x24>
 80128a2:	4602      	mov	r2, r0
 80128a4:	4b23      	ldr	r3, [pc, #140]	@ (8012934 <__d2b+0xa8>)
 80128a6:	4824      	ldr	r0, [pc, #144]	@ (8012938 <__d2b+0xac>)
 80128a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80128ac:	f000 faf4 	bl	8012e98 <__assert_func>
 80128b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80128b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80128b8:	b10d      	cbz	r5, 80128be <__d2b+0x32>
 80128ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80128be:	9301      	str	r3, [sp, #4]
 80128c0:	f1b8 0300 	subs.w	r3, r8, #0
 80128c4:	d023      	beq.n	801290e <__d2b+0x82>
 80128c6:	4668      	mov	r0, sp
 80128c8:	9300      	str	r3, [sp, #0]
 80128ca:	f7ff fd14 	bl	80122f6 <__lo0bits>
 80128ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80128d2:	b1d0      	cbz	r0, 801290a <__d2b+0x7e>
 80128d4:	f1c0 0320 	rsb	r3, r0, #32
 80128d8:	fa02 f303 	lsl.w	r3, r2, r3
 80128dc:	430b      	orrs	r3, r1
 80128de:	40c2      	lsrs	r2, r0
 80128e0:	6163      	str	r3, [r4, #20]
 80128e2:	9201      	str	r2, [sp, #4]
 80128e4:	9b01      	ldr	r3, [sp, #4]
 80128e6:	61a3      	str	r3, [r4, #24]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	bf0c      	ite	eq
 80128ec:	2201      	moveq	r2, #1
 80128ee:	2202      	movne	r2, #2
 80128f0:	6122      	str	r2, [r4, #16]
 80128f2:	b1a5      	cbz	r5, 801291e <__d2b+0x92>
 80128f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80128f8:	4405      	add	r5, r0
 80128fa:	603d      	str	r5, [r7, #0]
 80128fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012900:	6030      	str	r0, [r6, #0]
 8012902:	4620      	mov	r0, r4
 8012904:	b003      	add	sp, #12
 8012906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801290a:	6161      	str	r1, [r4, #20]
 801290c:	e7ea      	b.n	80128e4 <__d2b+0x58>
 801290e:	a801      	add	r0, sp, #4
 8012910:	f7ff fcf1 	bl	80122f6 <__lo0bits>
 8012914:	9b01      	ldr	r3, [sp, #4]
 8012916:	6163      	str	r3, [r4, #20]
 8012918:	3020      	adds	r0, #32
 801291a:	2201      	movs	r2, #1
 801291c:	e7e8      	b.n	80128f0 <__d2b+0x64>
 801291e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012922:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012926:	6038      	str	r0, [r7, #0]
 8012928:	6918      	ldr	r0, [r3, #16]
 801292a:	f7ff fcc5 	bl	80122b8 <__hi0bits>
 801292e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012932:	e7e5      	b.n	8012900 <__d2b+0x74>
 8012934:	08013962 	.word	0x08013962
 8012938:	080139d3 	.word	0x080139d3

0801293c <__ratio>:
 801293c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012940:	4688      	mov	r8, r1
 8012942:	4669      	mov	r1, sp
 8012944:	4681      	mov	r9, r0
 8012946:	f7ff ff57 	bl	80127f8 <__b2d>
 801294a:	a901      	add	r1, sp, #4
 801294c:	4640      	mov	r0, r8
 801294e:	ec55 4b10 	vmov	r4, r5, d0
 8012952:	f7ff ff51 	bl	80127f8 <__b2d>
 8012956:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801295a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801295e:	1ad2      	subs	r2, r2, r3
 8012960:	e9dd 3100 	ldrd	r3, r1, [sp]
 8012964:	1a5b      	subs	r3, r3, r1
 8012966:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801296a:	ec57 6b10 	vmov	r6, r7, d0
 801296e:	2b00      	cmp	r3, #0
 8012970:	bfd6      	itet	le
 8012972:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012976:	462a      	movgt	r2, r5
 8012978:	463a      	movle	r2, r7
 801297a:	46ab      	mov	fp, r5
 801297c:	46a2      	mov	sl, r4
 801297e:	bfce      	itee	gt
 8012980:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8012984:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8012988:	ee00 3a90 	vmovle	s1, r3
 801298c:	ec4b ab17 	vmov	d7, sl, fp
 8012990:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8012994:	b003      	add	sp, #12
 8012996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801299a <__copybits>:
 801299a:	3901      	subs	r1, #1
 801299c:	b570      	push	{r4, r5, r6, lr}
 801299e:	1149      	asrs	r1, r1, #5
 80129a0:	6914      	ldr	r4, [r2, #16]
 80129a2:	3101      	adds	r1, #1
 80129a4:	f102 0314 	add.w	r3, r2, #20
 80129a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80129ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80129b0:	1f05      	subs	r5, r0, #4
 80129b2:	42a3      	cmp	r3, r4
 80129b4:	d30c      	bcc.n	80129d0 <__copybits+0x36>
 80129b6:	1aa3      	subs	r3, r4, r2
 80129b8:	3b11      	subs	r3, #17
 80129ba:	f023 0303 	bic.w	r3, r3, #3
 80129be:	3211      	adds	r2, #17
 80129c0:	42a2      	cmp	r2, r4
 80129c2:	bf88      	it	hi
 80129c4:	2300      	movhi	r3, #0
 80129c6:	4418      	add	r0, r3
 80129c8:	2300      	movs	r3, #0
 80129ca:	4288      	cmp	r0, r1
 80129cc:	d305      	bcc.n	80129da <__copybits+0x40>
 80129ce:	bd70      	pop	{r4, r5, r6, pc}
 80129d0:	f853 6b04 	ldr.w	r6, [r3], #4
 80129d4:	f845 6f04 	str.w	r6, [r5, #4]!
 80129d8:	e7eb      	b.n	80129b2 <__copybits+0x18>
 80129da:	f840 3b04 	str.w	r3, [r0], #4
 80129de:	e7f4      	b.n	80129ca <__copybits+0x30>

080129e0 <__any_on>:
 80129e0:	f100 0214 	add.w	r2, r0, #20
 80129e4:	6900      	ldr	r0, [r0, #16]
 80129e6:	114b      	asrs	r3, r1, #5
 80129e8:	4298      	cmp	r0, r3
 80129ea:	b510      	push	{r4, lr}
 80129ec:	db11      	blt.n	8012a12 <__any_on+0x32>
 80129ee:	dd0a      	ble.n	8012a06 <__any_on+0x26>
 80129f0:	f011 011f 	ands.w	r1, r1, #31
 80129f4:	d007      	beq.n	8012a06 <__any_on+0x26>
 80129f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80129fa:	fa24 f001 	lsr.w	r0, r4, r1
 80129fe:	fa00 f101 	lsl.w	r1, r0, r1
 8012a02:	428c      	cmp	r4, r1
 8012a04:	d10b      	bne.n	8012a1e <__any_on+0x3e>
 8012a06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a0a:	4293      	cmp	r3, r2
 8012a0c:	d803      	bhi.n	8012a16 <__any_on+0x36>
 8012a0e:	2000      	movs	r0, #0
 8012a10:	bd10      	pop	{r4, pc}
 8012a12:	4603      	mov	r3, r0
 8012a14:	e7f7      	b.n	8012a06 <__any_on+0x26>
 8012a16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a1a:	2900      	cmp	r1, #0
 8012a1c:	d0f5      	beq.n	8012a0a <__any_on+0x2a>
 8012a1e:	2001      	movs	r0, #1
 8012a20:	e7f6      	b.n	8012a10 <__any_on+0x30>

08012a22 <__ascii_wctomb>:
 8012a22:	4603      	mov	r3, r0
 8012a24:	4608      	mov	r0, r1
 8012a26:	b141      	cbz	r1, 8012a3a <__ascii_wctomb+0x18>
 8012a28:	2aff      	cmp	r2, #255	@ 0xff
 8012a2a:	d904      	bls.n	8012a36 <__ascii_wctomb+0x14>
 8012a2c:	228a      	movs	r2, #138	@ 0x8a
 8012a2e:	601a      	str	r2, [r3, #0]
 8012a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a34:	4770      	bx	lr
 8012a36:	700a      	strb	r2, [r1, #0]
 8012a38:	2001      	movs	r0, #1
 8012a3a:	4770      	bx	lr

08012a3c <__ssputs_r>:
 8012a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a40:	688e      	ldr	r6, [r1, #8]
 8012a42:	461f      	mov	r7, r3
 8012a44:	42be      	cmp	r6, r7
 8012a46:	680b      	ldr	r3, [r1, #0]
 8012a48:	4682      	mov	sl, r0
 8012a4a:	460c      	mov	r4, r1
 8012a4c:	4690      	mov	r8, r2
 8012a4e:	d82d      	bhi.n	8012aac <__ssputs_r+0x70>
 8012a50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012a58:	d026      	beq.n	8012aa8 <__ssputs_r+0x6c>
 8012a5a:	6965      	ldr	r5, [r4, #20]
 8012a5c:	6909      	ldr	r1, [r1, #16]
 8012a5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a62:	eba3 0901 	sub.w	r9, r3, r1
 8012a66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a6a:	1c7b      	adds	r3, r7, #1
 8012a6c:	444b      	add	r3, r9
 8012a6e:	106d      	asrs	r5, r5, #1
 8012a70:	429d      	cmp	r5, r3
 8012a72:	bf38      	it	cc
 8012a74:	461d      	movcc	r5, r3
 8012a76:	0553      	lsls	r3, r2, #21
 8012a78:	d527      	bpl.n	8012aca <__ssputs_r+0x8e>
 8012a7a:	4629      	mov	r1, r5
 8012a7c:	f7ff fa8c 	bl	8011f98 <_malloc_r>
 8012a80:	4606      	mov	r6, r0
 8012a82:	b360      	cbz	r0, 8012ade <__ssputs_r+0xa2>
 8012a84:	6921      	ldr	r1, [r4, #16]
 8012a86:	464a      	mov	r2, r9
 8012a88:	f7fe f8d9 	bl	8010c3e <memcpy>
 8012a8c:	89a3      	ldrh	r3, [r4, #12]
 8012a8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a96:	81a3      	strh	r3, [r4, #12]
 8012a98:	6126      	str	r6, [r4, #16]
 8012a9a:	6165      	str	r5, [r4, #20]
 8012a9c:	444e      	add	r6, r9
 8012a9e:	eba5 0509 	sub.w	r5, r5, r9
 8012aa2:	6026      	str	r6, [r4, #0]
 8012aa4:	60a5      	str	r5, [r4, #8]
 8012aa6:	463e      	mov	r6, r7
 8012aa8:	42be      	cmp	r6, r7
 8012aaa:	d900      	bls.n	8012aae <__ssputs_r+0x72>
 8012aac:	463e      	mov	r6, r7
 8012aae:	6820      	ldr	r0, [r4, #0]
 8012ab0:	4632      	mov	r2, r6
 8012ab2:	4641      	mov	r1, r8
 8012ab4:	f000 f9c6 	bl	8012e44 <memmove>
 8012ab8:	68a3      	ldr	r3, [r4, #8]
 8012aba:	1b9b      	subs	r3, r3, r6
 8012abc:	60a3      	str	r3, [r4, #8]
 8012abe:	6823      	ldr	r3, [r4, #0]
 8012ac0:	4433      	add	r3, r6
 8012ac2:	6023      	str	r3, [r4, #0]
 8012ac4:	2000      	movs	r0, #0
 8012ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aca:	462a      	mov	r2, r5
 8012acc:	f000 fa16 	bl	8012efc <_realloc_r>
 8012ad0:	4606      	mov	r6, r0
 8012ad2:	2800      	cmp	r0, #0
 8012ad4:	d1e0      	bne.n	8012a98 <__ssputs_r+0x5c>
 8012ad6:	6921      	ldr	r1, [r4, #16]
 8012ad8:	4650      	mov	r0, sl
 8012ada:	f7fe feaf 	bl	801183c <_free_r>
 8012ade:	230c      	movs	r3, #12
 8012ae0:	f8ca 3000 	str.w	r3, [sl]
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012aea:	81a3      	strh	r3, [r4, #12]
 8012aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012af0:	e7e9      	b.n	8012ac6 <__ssputs_r+0x8a>
	...

08012af4 <_svfiprintf_r>:
 8012af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af8:	4698      	mov	r8, r3
 8012afa:	898b      	ldrh	r3, [r1, #12]
 8012afc:	061b      	lsls	r3, r3, #24
 8012afe:	b09d      	sub	sp, #116	@ 0x74
 8012b00:	4607      	mov	r7, r0
 8012b02:	460d      	mov	r5, r1
 8012b04:	4614      	mov	r4, r2
 8012b06:	d510      	bpl.n	8012b2a <_svfiprintf_r+0x36>
 8012b08:	690b      	ldr	r3, [r1, #16]
 8012b0a:	b973      	cbnz	r3, 8012b2a <_svfiprintf_r+0x36>
 8012b0c:	2140      	movs	r1, #64	@ 0x40
 8012b0e:	f7ff fa43 	bl	8011f98 <_malloc_r>
 8012b12:	6028      	str	r0, [r5, #0]
 8012b14:	6128      	str	r0, [r5, #16]
 8012b16:	b930      	cbnz	r0, 8012b26 <_svfiprintf_r+0x32>
 8012b18:	230c      	movs	r3, #12
 8012b1a:	603b      	str	r3, [r7, #0]
 8012b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012b20:	b01d      	add	sp, #116	@ 0x74
 8012b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b26:	2340      	movs	r3, #64	@ 0x40
 8012b28:	616b      	str	r3, [r5, #20]
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b2e:	2320      	movs	r3, #32
 8012b30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012b34:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b38:	2330      	movs	r3, #48	@ 0x30
 8012b3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012cd8 <_svfiprintf_r+0x1e4>
 8012b3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b42:	f04f 0901 	mov.w	r9, #1
 8012b46:	4623      	mov	r3, r4
 8012b48:	469a      	mov	sl, r3
 8012b4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b4e:	b10a      	cbz	r2, 8012b54 <_svfiprintf_r+0x60>
 8012b50:	2a25      	cmp	r2, #37	@ 0x25
 8012b52:	d1f9      	bne.n	8012b48 <_svfiprintf_r+0x54>
 8012b54:	ebba 0b04 	subs.w	fp, sl, r4
 8012b58:	d00b      	beq.n	8012b72 <_svfiprintf_r+0x7e>
 8012b5a:	465b      	mov	r3, fp
 8012b5c:	4622      	mov	r2, r4
 8012b5e:	4629      	mov	r1, r5
 8012b60:	4638      	mov	r0, r7
 8012b62:	f7ff ff6b 	bl	8012a3c <__ssputs_r>
 8012b66:	3001      	adds	r0, #1
 8012b68:	f000 80a7 	beq.w	8012cba <_svfiprintf_r+0x1c6>
 8012b6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b6e:	445a      	add	r2, fp
 8012b70:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b72:	f89a 3000 	ldrb.w	r3, [sl]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	f000 809f 	beq.w	8012cba <_svfiprintf_r+0x1c6>
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012b82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b86:	f10a 0a01 	add.w	sl, sl, #1
 8012b8a:	9304      	str	r3, [sp, #16]
 8012b8c:	9307      	str	r3, [sp, #28]
 8012b8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012b92:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b94:	4654      	mov	r4, sl
 8012b96:	2205      	movs	r2, #5
 8012b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b9c:	484e      	ldr	r0, [pc, #312]	@ (8012cd8 <_svfiprintf_r+0x1e4>)
 8012b9e:	f7ed fbaf 	bl	8000300 <memchr>
 8012ba2:	9a04      	ldr	r2, [sp, #16]
 8012ba4:	b9d8      	cbnz	r0, 8012bde <_svfiprintf_r+0xea>
 8012ba6:	06d0      	lsls	r0, r2, #27
 8012ba8:	bf44      	itt	mi
 8012baa:	2320      	movmi	r3, #32
 8012bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bb0:	0711      	lsls	r1, r2, #28
 8012bb2:	bf44      	itt	mi
 8012bb4:	232b      	movmi	r3, #43	@ 0x2b
 8012bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012bba:	f89a 3000 	ldrb.w	r3, [sl]
 8012bbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bc0:	d015      	beq.n	8012bee <_svfiprintf_r+0xfa>
 8012bc2:	9a07      	ldr	r2, [sp, #28]
 8012bc4:	4654      	mov	r4, sl
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	f04f 0c0a 	mov.w	ip, #10
 8012bcc:	4621      	mov	r1, r4
 8012bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bd2:	3b30      	subs	r3, #48	@ 0x30
 8012bd4:	2b09      	cmp	r3, #9
 8012bd6:	d94b      	bls.n	8012c70 <_svfiprintf_r+0x17c>
 8012bd8:	b1b0      	cbz	r0, 8012c08 <_svfiprintf_r+0x114>
 8012bda:	9207      	str	r2, [sp, #28]
 8012bdc:	e014      	b.n	8012c08 <_svfiprintf_r+0x114>
 8012bde:	eba0 0308 	sub.w	r3, r0, r8
 8012be2:	fa09 f303 	lsl.w	r3, r9, r3
 8012be6:	4313      	orrs	r3, r2
 8012be8:	9304      	str	r3, [sp, #16]
 8012bea:	46a2      	mov	sl, r4
 8012bec:	e7d2      	b.n	8012b94 <_svfiprintf_r+0xa0>
 8012bee:	9b03      	ldr	r3, [sp, #12]
 8012bf0:	1d19      	adds	r1, r3, #4
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	9103      	str	r1, [sp, #12]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	bfbb      	ittet	lt
 8012bfa:	425b      	neglt	r3, r3
 8012bfc:	f042 0202 	orrlt.w	r2, r2, #2
 8012c00:	9307      	strge	r3, [sp, #28]
 8012c02:	9307      	strlt	r3, [sp, #28]
 8012c04:	bfb8      	it	lt
 8012c06:	9204      	strlt	r2, [sp, #16]
 8012c08:	7823      	ldrb	r3, [r4, #0]
 8012c0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c0c:	d10a      	bne.n	8012c24 <_svfiprintf_r+0x130>
 8012c0e:	7863      	ldrb	r3, [r4, #1]
 8012c10:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c12:	d132      	bne.n	8012c7a <_svfiprintf_r+0x186>
 8012c14:	9b03      	ldr	r3, [sp, #12]
 8012c16:	1d1a      	adds	r2, r3, #4
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	9203      	str	r2, [sp, #12]
 8012c1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c20:	3402      	adds	r4, #2
 8012c22:	9305      	str	r3, [sp, #20]
 8012c24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ce8 <_svfiprintf_r+0x1f4>
 8012c28:	7821      	ldrb	r1, [r4, #0]
 8012c2a:	2203      	movs	r2, #3
 8012c2c:	4650      	mov	r0, sl
 8012c2e:	f7ed fb67 	bl	8000300 <memchr>
 8012c32:	b138      	cbz	r0, 8012c44 <_svfiprintf_r+0x150>
 8012c34:	9b04      	ldr	r3, [sp, #16]
 8012c36:	eba0 000a 	sub.w	r0, r0, sl
 8012c3a:	2240      	movs	r2, #64	@ 0x40
 8012c3c:	4082      	lsls	r2, r0
 8012c3e:	4313      	orrs	r3, r2
 8012c40:	3401      	adds	r4, #1
 8012c42:	9304      	str	r3, [sp, #16]
 8012c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c48:	4824      	ldr	r0, [pc, #144]	@ (8012cdc <_svfiprintf_r+0x1e8>)
 8012c4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c4e:	2206      	movs	r2, #6
 8012c50:	f7ed fb56 	bl	8000300 <memchr>
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d036      	beq.n	8012cc6 <_svfiprintf_r+0x1d2>
 8012c58:	4b21      	ldr	r3, [pc, #132]	@ (8012ce0 <_svfiprintf_r+0x1ec>)
 8012c5a:	bb1b      	cbnz	r3, 8012ca4 <_svfiprintf_r+0x1b0>
 8012c5c:	9b03      	ldr	r3, [sp, #12]
 8012c5e:	3307      	adds	r3, #7
 8012c60:	f023 0307 	bic.w	r3, r3, #7
 8012c64:	3308      	adds	r3, #8
 8012c66:	9303      	str	r3, [sp, #12]
 8012c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c6a:	4433      	add	r3, r6
 8012c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c6e:	e76a      	b.n	8012b46 <_svfiprintf_r+0x52>
 8012c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c74:	460c      	mov	r4, r1
 8012c76:	2001      	movs	r0, #1
 8012c78:	e7a8      	b.n	8012bcc <_svfiprintf_r+0xd8>
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	3401      	adds	r4, #1
 8012c7e:	9305      	str	r3, [sp, #20]
 8012c80:	4619      	mov	r1, r3
 8012c82:	f04f 0c0a 	mov.w	ip, #10
 8012c86:	4620      	mov	r0, r4
 8012c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c8c:	3a30      	subs	r2, #48	@ 0x30
 8012c8e:	2a09      	cmp	r2, #9
 8012c90:	d903      	bls.n	8012c9a <_svfiprintf_r+0x1a6>
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d0c6      	beq.n	8012c24 <_svfiprintf_r+0x130>
 8012c96:	9105      	str	r1, [sp, #20]
 8012c98:	e7c4      	b.n	8012c24 <_svfiprintf_r+0x130>
 8012c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e7f0      	b.n	8012c86 <_svfiprintf_r+0x192>
 8012ca4:	ab03      	add	r3, sp, #12
 8012ca6:	9300      	str	r3, [sp, #0]
 8012ca8:	462a      	mov	r2, r5
 8012caa:	4b0e      	ldr	r3, [pc, #56]	@ (8012ce4 <_svfiprintf_r+0x1f0>)
 8012cac:	a904      	add	r1, sp, #16
 8012cae:	4638      	mov	r0, r7
 8012cb0:	f7fd fa4a 	bl	8010148 <_printf_float>
 8012cb4:	1c42      	adds	r2, r0, #1
 8012cb6:	4606      	mov	r6, r0
 8012cb8:	d1d6      	bne.n	8012c68 <_svfiprintf_r+0x174>
 8012cba:	89ab      	ldrh	r3, [r5, #12]
 8012cbc:	065b      	lsls	r3, r3, #25
 8012cbe:	f53f af2d 	bmi.w	8012b1c <_svfiprintf_r+0x28>
 8012cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012cc4:	e72c      	b.n	8012b20 <_svfiprintf_r+0x2c>
 8012cc6:	ab03      	add	r3, sp, #12
 8012cc8:	9300      	str	r3, [sp, #0]
 8012cca:	462a      	mov	r2, r5
 8012ccc:	4b05      	ldr	r3, [pc, #20]	@ (8012ce4 <_svfiprintf_r+0x1f0>)
 8012cce:	a904      	add	r1, sp, #16
 8012cd0:	4638      	mov	r0, r7
 8012cd2:	f7fd fcc1 	bl	8010658 <_printf_i>
 8012cd6:	e7ed      	b.n	8012cb4 <_svfiprintf_r+0x1c0>
 8012cd8:	08013a2c 	.word	0x08013a2c
 8012cdc:	08013a36 	.word	0x08013a36
 8012ce0:	08010149 	.word	0x08010149
 8012ce4:	08012a3d 	.word	0x08012a3d
 8012ce8:	08013a32 	.word	0x08013a32

08012cec <__sflush_r>:
 8012cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cf4:	0716      	lsls	r6, r2, #28
 8012cf6:	4605      	mov	r5, r0
 8012cf8:	460c      	mov	r4, r1
 8012cfa:	d454      	bmi.n	8012da6 <__sflush_r+0xba>
 8012cfc:	684b      	ldr	r3, [r1, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	dc02      	bgt.n	8012d08 <__sflush_r+0x1c>
 8012d02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	dd48      	ble.n	8012d9a <__sflush_r+0xae>
 8012d08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012d0a:	2e00      	cmp	r6, #0
 8012d0c:	d045      	beq.n	8012d9a <__sflush_r+0xae>
 8012d0e:	2300      	movs	r3, #0
 8012d10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012d14:	682f      	ldr	r7, [r5, #0]
 8012d16:	6a21      	ldr	r1, [r4, #32]
 8012d18:	602b      	str	r3, [r5, #0]
 8012d1a:	d030      	beq.n	8012d7e <__sflush_r+0x92>
 8012d1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012d1e:	89a3      	ldrh	r3, [r4, #12]
 8012d20:	0759      	lsls	r1, r3, #29
 8012d22:	d505      	bpl.n	8012d30 <__sflush_r+0x44>
 8012d24:	6863      	ldr	r3, [r4, #4]
 8012d26:	1ad2      	subs	r2, r2, r3
 8012d28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012d2a:	b10b      	cbz	r3, 8012d30 <__sflush_r+0x44>
 8012d2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012d2e:	1ad2      	subs	r2, r2, r3
 8012d30:	2300      	movs	r3, #0
 8012d32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012d34:	6a21      	ldr	r1, [r4, #32]
 8012d36:	4628      	mov	r0, r5
 8012d38:	47b0      	blx	r6
 8012d3a:	1c43      	adds	r3, r0, #1
 8012d3c:	89a3      	ldrh	r3, [r4, #12]
 8012d3e:	d106      	bne.n	8012d4e <__sflush_r+0x62>
 8012d40:	6829      	ldr	r1, [r5, #0]
 8012d42:	291d      	cmp	r1, #29
 8012d44:	d82b      	bhi.n	8012d9e <__sflush_r+0xb2>
 8012d46:	4a2a      	ldr	r2, [pc, #168]	@ (8012df0 <__sflush_r+0x104>)
 8012d48:	40ca      	lsrs	r2, r1
 8012d4a:	07d6      	lsls	r6, r2, #31
 8012d4c:	d527      	bpl.n	8012d9e <__sflush_r+0xb2>
 8012d4e:	2200      	movs	r2, #0
 8012d50:	6062      	str	r2, [r4, #4]
 8012d52:	04d9      	lsls	r1, r3, #19
 8012d54:	6922      	ldr	r2, [r4, #16]
 8012d56:	6022      	str	r2, [r4, #0]
 8012d58:	d504      	bpl.n	8012d64 <__sflush_r+0x78>
 8012d5a:	1c42      	adds	r2, r0, #1
 8012d5c:	d101      	bne.n	8012d62 <__sflush_r+0x76>
 8012d5e:	682b      	ldr	r3, [r5, #0]
 8012d60:	b903      	cbnz	r3, 8012d64 <__sflush_r+0x78>
 8012d62:	6560      	str	r0, [r4, #84]	@ 0x54
 8012d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012d66:	602f      	str	r7, [r5, #0]
 8012d68:	b1b9      	cbz	r1, 8012d9a <__sflush_r+0xae>
 8012d6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012d6e:	4299      	cmp	r1, r3
 8012d70:	d002      	beq.n	8012d78 <__sflush_r+0x8c>
 8012d72:	4628      	mov	r0, r5
 8012d74:	f7fe fd62 	bl	801183c <_free_r>
 8012d78:	2300      	movs	r3, #0
 8012d7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d7c:	e00d      	b.n	8012d9a <__sflush_r+0xae>
 8012d7e:	2301      	movs	r3, #1
 8012d80:	4628      	mov	r0, r5
 8012d82:	47b0      	blx	r6
 8012d84:	4602      	mov	r2, r0
 8012d86:	1c50      	adds	r0, r2, #1
 8012d88:	d1c9      	bne.n	8012d1e <__sflush_r+0x32>
 8012d8a:	682b      	ldr	r3, [r5, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d0c6      	beq.n	8012d1e <__sflush_r+0x32>
 8012d90:	2b1d      	cmp	r3, #29
 8012d92:	d001      	beq.n	8012d98 <__sflush_r+0xac>
 8012d94:	2b16      	cmp	r3, #22
 8012d96:	d11e      	bne.n	8012dd6 <__sflush_r+0xea>
 8012d98:	602f      	str	r7, [r5, #0]
 8012d9a:	2000      	movs	r0, #0
 8012d9c:	e022      	b.n	8012de4 <__sflush_r+0xf8>
 8012d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012da2:	b21b      	sxth	r3, r3
 8012da4:	e01b      	b.n	8012dde <__sflush_r+0xf2>
 8012da6:	690f      	ldr	r7, [r1, #16]
 8012da8:	2f00      	cmp	r7, #0
 8012daa:	d0f6      	beq.n	8012d9a <__sflush_r+0xae>
 8012dac:	0793      	lsls	r3, r2, #30
 8012dae:	680e      	ldr	r6, [r1, #0]
 8012db0:	bf08      	it	eq
 8012db2:	694b      	ldreq	r3, [r1, #20]
 8012db4:	600f      	str	r7, [r1, #0]
 8012db6:	bf18      	it	ne
 8012db8:	2300      	movne	r3, #0
 8012dba:	eba6 0807 	sub.w	r8, r6, r7
 8012dbe:	608b      	str	r3, [r1, #8]
 8012dc0:	f1b8 0f00 	cmp.w	r8, #0
 8012dc4:	dde9      	ble.n	8012d9a <__sflush_r+0xae>
 8012dc6:	6a21      	ldr	r1, [r4, #32]
 8012dc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012dca:	4643      	mov	r3, r8
 8012dcc:	463a      	mov	r2, r7
 8012dce:	4628      	mov	r0, r5
 8012dd0:	47b0      	blx	r6
 8012dd2:	2800      	cmp	r0, #0
 8012dd4:	dc08      	bgt.n	8012de8 <__sflush_r+0xfc>
 8012dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dde:	81a3      	strh	r3, [r4, #12]
 8012de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de8:	4407      	add	r7, r0
 8012dea:	eba8 0800 	sub.w	r8, r8, r0
 8012dee:	e7e7      	b.n	8012dc0 <__sflush_r+0xd4>
 8012df0:	20400001 	.word	0x20400001

08012df4 <_fflush_r>:
 8012df4:	b538      	push	{r3, r4, r5, lr}
 8012df6:	690b      	ldr	r3, [r1, #16]
 8012df8:	4605      	mov	r5, r0
 8012dfa:	460c      	mov	r4, r1
 8012dfc:	b913      	cbnz	r3, 8012e04 <_fflush_r+0x10>
 8012dfe:	2500      	movs	r5, #0
 8012e00:	4628      	mov	r0, r5
 8012e02:	bd38      	pop	{r3, r4, r5, pc}
 8012e04:	b118      	cbz	r0, 8012e0e <_fflush_r+0x1a>
 8012e06:	6a03      	ldr	r3, [r0, #32]
 8012e08:	b90b      	cbnz	r3, 8012e0e <_fflush_r+0x1a>
 8012e0a:	f7fd fdcf 	bl	80109ac <__sinit>
 8012e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d0f3      	beq.n	8012dfe <_fflush_r+0xa>
 8012e16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012e18:	07d0      	lsls	r0, r2, #31
 8012e1a:	d404      	bmi.n	8012e26 <_fflush_r+0x32>
 8012e1c:	0599      	lsls	r1, r3, #22
 8012e1e:	d402      	bmi.n	8012e26 <_fflush_r+0x32>
 8012e20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e22:	f7fd ff02 	bl	8010c2a <__retarget_lock_acquire_recursive>
 8012e26:	4628      	mov	r0, r5
 8012e28:	4621      	mov	r1, r4
 8012e2a:	f7ff ff5f 	bl	8012cec <__sflush_r>
 8012e2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012e30:	07da      	lsls	r2, r3, #31
 8012e32:	4605      	mov	r5, r0
 8012e34:	d4e4      	bmi.n	8012e00 <_fflush_r+0xc>
 8012e36:	89a3      	ldrh	r3, [r4, #12]
 8012e38:	059b      	lsls	r3, r3, #22
 8012e3a:	d4e1      	bmi.n	8012e00 <_fflush_r+0xc>
 8012e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e3e:	f7fd fef5 	bl	8010c2c <__retarget_lock_release_recursive>
 8012e42:	e7dd      	b.n	8012e00 <_fflush_r+0xc>

08012e44 <memmove>:
 8012e44:	4288      	cmp	r0, r1
 8012e46:	b510      	push	{r4, lr}
 8012e48:	eb01 0402 	add.w	r4, r1, r2
 8012e4c:	d902      	bls.n	8012e54 <memmove+0x10>
 8012e4e:	4284      	cmp	r4, r0
 8012e50:	4623      	mov	r3, r4
 8012e52:	d807      	bhi.n	8012e64 <memmove+0x20>
 8012e54:	1e43      	subs	r3, r0, #1
 8012e56:	42a1      	cmp	r1, r4
 8012e58:	d008      	beq.n	8012e6c <memmove+0x28>
 8012e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012e62:	e7f8      	b.n	8012e56 <memmove+0x12>
 8012e64:	4402      	add	r2, r0
 8012e66:	4601      	mov	r1, r0
 8012e68:	428a      	cmp	r2, r1
 8012e6a:	d100      	bne.n	8012e6e <memmove+0x2a>
 8012e6c:	bd10      	pop	{r4, pc}
 8012e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012e76:	e7f7      	b.n	8012e68 <memmove+0x24>

08012e78 <_sbrk_r>:
 8012e78:	b538      	push	{r3, r4, r5, lr}
 8012e7a:	4d06      	ldr	r5, [pc, #24]	@ (8012e94 <_sbrk_r+0x1c>)
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	4604      	mov	r4, r0
 8012e80:	4608      	mov	r0, r1
 8012e82:	602b      	str	r3, [r5, #0]
 8012e84:	f7ef f830 	bl	8001ee8 <_sbrk>
 8012e88:	1c43      	adds	r3, r0, #1
 8012e8a:	d102      	bne.n	8012e92 <_sbrk_r+0x1a>
 8012e8c:	682b      	ldr	r3, [r5, #0]
 8012e8e:	b103      	cbz	r3, 8012e92 <_sbrk_r+0x1a>
 8012e90:	6023      	str	r3, [r4, #0]
 8012e92:	bd38      	pop	{r3, r4, r5, pc}
 8012e94:	24004f08 	.word	0x24004f08

08012e98 <__assert_func>:
 8012e98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e9a:	4614      	mov	r4, r2
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	4b09      	ldr	r3, [pc, #36]	@ (8012ec4 <__assert_func+0x2c>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4605      	mov	r5, r0
 8012ea4:	68d8      	ldr	r0, [r3, #12]
 8012ea6:	b14c      	cbz	r4, 8012ebc <__assert_func+0x24>
 8012ea8:	4b07      	ldr	r3, [pc, #28]	@ (8012ec8 <__assert_func+0x30>)
 8012eaa:	9100      	str	r1, [sp, #0]
 8012eac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012eb0:	4906      	ldr	r1, [pc, #24]	@ (8012ecc <__assert_func+0x34>)
 8012eb2:	462b      	mov	r3, r5
 8012eb4:	f000 f850 	bl	8012f58 <fiprintf>
 8012eb8:	f000 f860 	bl	8012f7c <abort>
 8012ebc:	4b04      	ldr	r3, [pc, #16]	@ (8012ed0 <__assert_func+0x38>)
 8012ebe:	461c      	mov	r4, r3
 8012ec0:	e7f3      	b.n	8012eaa <__assert_func+0x12>
 8012ec2:	bf00      	nop
 8012ec4:	240001b0 	.word	0x240001b0
 8012ec8:	08013a3d 	.word	0x08013a3d
 8012ecc:	08013a4a 	.word	0x08013a4a
 8012ed0:	08013a78 	.word	0x08013a78

08012ed4 <_calloc_r>:
 8012ed4:	b570      	push	{r4, r5, r6, lr}
 8012ed6:	fba1 5402 	umull	r5, r4, r1, r2
 8012eda:	b934      	cbnz	r4, 8012eea <_calloc_r+0x16>
 8012edc:	4629      	mov	r1, r5
 8012ede:	f7ff f85b 	bl	8011f98 <_malloc_r>
 8012ee2:	4606      	mov	r6, r0
 8012ee4:	b928      	cbnz	r0, 8012ef2 <_calloc_r+0x1e>
 8012ee6:	4630      	mov	r0, r6
 8012ee8:	bd70      	pop	{r4, r5, r6, pc}
 8012eea:	220c      	movs	r2, #12
 8012eec:	6002      	str	r2, [r0, #0]
 8012eee:	2600      	movs	r6, #0
 8012ef0:	e7f9      	b.n	8012ee6 <_calloc_r+0x12>
 8012ef2:	462a      	mov	r2, r5
 8012ef4:	4621      	mov	r1, r4
 8012ef6:	f7fd fe08 	bl	8010b0a <memset>
 8012efa:	e7f4      	b.n	8012ee6 <_calloc_r+0x12>

08012efc <_realloc_r>:
 8012efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f00:	4607      	mov	r7, r0
 8012f02:	4614      	mov	r4, r2
 8012f04:	460d      	mov	r5, r1
 8012f06:	b921      	cbnz	r1, 8012f12 <_realloc_r+0x16>
 8012f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f0c:	4611      	mov	r1, r2
 8012f0e:	f7ff b843 	b.w	8011f98 <_malloc_r>
 8012f12:	b92a      	cbnz	r2, 8012f20 <_realloc_r+0x24>
 8012f14:	f7fe fc92 	bl	801183c <_free_r>
 8012f18:	4625      	mov	r5, r4
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f20:	f000 f833 	bl	8012f8a <_malloc_usable_size_r>
 8012f24:	4284      	cmp	r4, r0
 8012f26:	4606      	mov	r6, r0
 8012f28:	d802      	bhi.n	8012f30 <_realloc_r+0x34>
 8012f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f2e:	d8f4      	bhi.n	8012f1a <_realloc_r+0x1e>
 8012f30:	4621      	mov	r1, r4
 8012f32:	4638      	mov	r0, r7
 8012f34:	f7ff f830 	bl	8011f98 <_malloc_r>
 8012f38:	4680      	mov	r8, r0
 8012f3a:	b908      	cbnz	r0, 8012f40 <_realloc_r+0x44>
 8012f3c:	4645      	mov	r5, r8
 8012f3e:	e7ec      	b.n	8012f1a <_realloc_r+0x1e>
 8012f40:	42b4      	cmp	r4, r6
 8012f42:	4622      	mov	r2, r4
 8012f44:	4629      	mov	r1, r5
 8012f46:	bf28      	it	cs
 8012f48:	4632      	movcs	r2, r6
 8012f4a:	f7fd fe78 	bl	8010c3e <memcpy>
 8012f4e:	4629      	mov	r1, r5
 8012f50:	4638      	mov	r0, r7
 8012f52:	f7fe fc73 	bl	801183c <_free_r>
 8012f56:	e7f1      	b.n	8012f3c <_realloc_r+0x40>

08012f58 <fiprintf>:
 8012f58:	b40e      	push	{r1, r2, r3}
 8012f5a:	b503      	push	{r0, r1, lr}
 8012f5c:	4601      	mov	r1, r0
 8012f5e:	ab03      	add	r3, sp, #12
 8012f60:	4805      	ldr	r0, [pc, #20]	@ (8012f78 <fiprintf+0x20>)
 8012f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f66:	6800      	ldr	r0, [r0, #0]
 8012f68:	9301      	str	r3, [sp, #4]
 8012f6a:	f000 f83f 	bl	8012fec <_vfiprintf_r>
 8012f6e:	b002      	add	sp, #8
 8012f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f74:	b003      	add	sp, #12
 8012f76:	4770      	bx	lr
 8012f78:	240001b0 	.word	0x240001b0

08012f7c <abort>:
 8012f7c:	b508      	push	{r3, lr}
 8012f7e:	2006      	movs	r0, #6
 8012f80:	f000 fa08 	bl	8013394 <raise>
 8012f84:	2001      	movs	r0, #1
 8012f86:	f7ee ff37 	bl	8001df8 <_exit>

08012f8a <_malloc_usable_size_r>:
 8012f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f8e:	1f18      	subs	r0, r3, #4
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	bfbc      	itt	lt
 8012f94:	580b      	ldrlt	r3, [r1, r0]
 8012f96:	18c0      	addlt	r0, r0, r3
 8012f98:	4770      	bx	lr

08012f9a <__sfputc_r>:
 8012f9a:	6893      	ldr	r3, [r2, #8]
 8012f9c:	3b01      	subs	r3, #1
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	b410      	push	{r4}
 8012fa2:	6093      	str	r3, [r2, #8]
 8012fa4:	da08      	bge.n	8012fb8 <__sfputc_r+0x1e>
 8012fa6:	6994      	ldr	r4, [r2, #24]
 8012fa8:	42a3      	cmp	r3, r4
 8012faa:	db01      	blt.n	8012fb0 <__sfputc_r+0x16>
 8012fac:	290a      	cmp	r1, #10
 8012fae:	d103      	bne.n	8012fb8 <__sfputc_r+0x1e>
 8012fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fb4:	f000 b932 	b.w	801321c <__swbuf_r>
 8012fb8:	6813      	ldr	r3, [r2, #0]
 8012fba:	1c58      	adds	r0, r3, #1
 8012fbc:	6010      	str	r0, [r2, #0]
 8012fbe:	7019      	strb	r1, [r3, #0]
 8012fc0:	4608      	mov	r0, r1
 8012fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fc6:	4770      	bx	lr

08012fc8 <__sfputs_r>:
 8012fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fca:	4606      	mov	r6, r0
 8012fcc:	460f      	mov	r7, r1
 8012fce:	4614      	mov	r4, r2
 8012fd0:	18d5      	adds	r5, r2, r3
 8012fd2:	42ac      	cmp	r4, r5
 8012fd4:	d101      	bne.n	8012fda <__sfputs_r+0x12>
 8012fd6:	2000      	movs	r0, #0
 8012fd8:	e007      	b.n	8012fea <__sfputs_r+0x22>
 8012fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fde:	463a      	mov	r2, r7
 8012fe0:	4630      	mov	r0, r6
 8012fe2:	f7ff ffda 	bl	8012f9a <__sfputc_r>
 8012fe6:	1c43      	adds	r3, r0, #1
 8012fe8:	d1f3      	bne.n	8012fd2 <__sfputs_r+0xa>
 8012fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012fec <_vfiprintf_r>:
 8012fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff0:	460d      	mov	r5, r1
 8012ff2:	b09d      	sub	sp, #116	@ 0x74
 8012ff4:	4614      	mov	r4, r2
 8012ff6:	4698      	mov	r8, r3
 8012ff8:	4606      	mov	r6, r0
 8012ffa:	b118      	cbz	r0, 8013004 <_vfiprintf_r+0x18>
 8012ffc:	6a03      	ldr	r3, [r0, #32]
 8012ffe:	b90b      	cbnz	r3, 8013004 <_vfiprintf_r+0x18>
 8013000:	f7fd fcd4 	bl	80109ac <__sinit>
 8013004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013006:	07d9      	lsls	r1, r3, #31
 8013008:	d405      	bmi.n	8013016 <_vfiprintf_r+0x2a>
 801300a:	89ab      	ldrh	r3, [r5, #12]
 801300c:	059a      	lsls	r2, r3, #22
 801300e:	d402      	bmi.n	8013016 <_vfiprintf_r+0x2a>
 8013010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013012:	f7fd fe0a 	bl	8010c2a <__retarget_lock_acquire_recursive>
 8013016:	89ab      	ldrh	r3, [r5, #12]
 8013018:	071b      	lsls	r3, r3, #28
 801301a:	d501      	bpl.n	8013020 <_vfiprintf_r+0x34>
 801301c:	692b      	ldr	r3, [r5, #16]
 801301e:	b99b      	cbnz	r3, 8013048 <_vfiprintf_r+0x5c>
 8013020:	4629      	mov	r1, r5
 8013022:	4630      	mov	r0, r6
 8013024:	f000 f938 	bl	8013298 <__swsetup_r>
 8013028:	b170      	cbz	r0, 8013048 <_vfiprintf_r+0x5c>
 801302a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801302c:	07dc      	lsls	r4, r3, #31
 801302e:	d504      	bpl.n	801303a <_vfiprintf_r+0x4e>
 8013030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013034:	b01d      	add	sp, #116	@ 0x74
 8013036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801303a:	89ab      	ldrh	r3, [r5, #12]
 801303c:	0598      	lsls	r0, r3, #22
 801303e:	d4f7      	bmi.n	8013030 <_vfiprintf_r+0x44>
 8013040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013042:	f7fd fdf3 	bl	8010c2c <__retarget_lock_release_recursive>
 8013046:	e7f3      	b.n	8013030 <_vfiprintf_r+0x44>
 8013048:	2300      	movs	r3, #0
 801304a:	9309      	str	r3, [sp, #36]	@ 0x24
 801304c:	2320      	movs	r3, #32
 801304e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013052:	f8cd 800c 	str.w	r8, [sp, #12]
 8013056:	2330      	movs	r3, #48	@ 0x30
 8013058:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013208 <_vfiprintf_r+0x21c>
 801305c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013060:	f04f 0901 	mov.w	r9, #1
 8013064:	4623      	mov	r3, r4
 8013066:	469a      	mov	sl, r3
 8013068:	f813 2b01 	ldrb.w	r2, [r3], #1
 801306c:	b10a      	cbz	r2, 8013072 <_vfiprintf_r+0x86>
 801306e:	2a25      	cmp	r2, #37	@ 0x25
 8013070:	d1f9      	bne.n	8013066 <_vfiprintf_r+0x7a>
 8013072:	ebba 0b04 	subs.w	fp, sl, r4
 8013076:	d00b      	beq.n	8013090 <_vfiprintf_r+0xa4>
 8013078:	465b      	mov	r3, fp
 801307a:	4622      	mov	r2, r4
 801307c:	4629      	mov	r1, r5
 801307e:	4630      	mov	r0, r6
 8013080:	f7ff ffa2 	bl	8012fc8 <__sfputs_r>
 8013084:	3001      	adds	r0, #1
 8013086:	f000 80a7 	beq.w	80131d8 <_vfiprintf_r+0x1ec>
 801308a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801308c:	445a      	add	r2, fp
 801308e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013090:	f89a 3000 	ldrb.w	r3, [sl]
 8013094:	2b00      	cmp	r3, #0
 8013096:	f000 809f 	beq.w	80131d8 <_vfiprintf_r+0x1ec>
 801309a:	2300      	movs	r3, #0
 801309c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80130a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130a4:	f10a 0a01 	add.w	sl, sl, #1
 80130a8:	9304      	str	r3, [sp, #16]
 80130aa:	9307      	str	r3, [sp, #28]
 80130ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80130b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80130b2:	4654      	mov	r4, sl
 80130b4:	2205      	movs	r2, #5
 80130b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130ba:	4853      	ldr	r0, [pc, #332]	@ (8013208 <_vfiprintf_r+0x21c>)
 80130bc:	f7ed f920 	bl	8000300 <memchr>
 80130c0:	9a04      	ldr	r2, [sp, #16]
 80130c2:	b9d8      	cbnz	r0, 80130fc <_vfiprintf_r+0x110>
 80130c4:	06d1      	lsls	r1, r2, #27
 80130c6:	bf44      	itt	mi
 80130c8:	2320      	movmi	r3, #32
 80130ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80130ce:	0713      	lsls	r3, r2, #28
 80130d0:	bf44      	itt	mi
 80130d2:	232b      	movmi	r3, #43	@ 0x2b
 80130d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80130d8:	f89a 3000 	ldrb.w	r3, [sl]
 80130dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80130de:	d015      	beq.n	801310c <_vfiprintf_r+0x120>
 80130e0:	9a07      	ldr	r2, [sp, #28]
 80130e2:	4654      	mov	r4, sl
 80130e4:	2000      	movs	r0, #0
 80130e6:	f04f 0c0a 	mov.w	ip, #10
 80130ea:	4621      	mov	r1, r4
 80130ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130f0:	3b30      	subs	r3, #48	@ 0x30
 80130f2:	2b09      	cmp	r3, #9
 80130f4:	d94b      	bls.n	801318e <_vfiprintf_r+0x1a2>
 80130f6:	b1b0      	cbz	r0, 8013126 <_vfiprintf_r+0x13a>
 80130f8:	9207      	str	r2, [sp, #28]
 80130fa:	e014      	b.n	8013126 <_vfiprintf_r+0x13a>
 80130fc:	eba0 0308 	sub.w	r3, r0, r8
 8013100:	fa09 f303 	lsl.w	r3, r9, r3
 8013104:	4313      	orrs	r3, r2
 8013106:	9304      	str	r3, [sp, #16]
 8013108:	46a2      	mov	sl, r4
 801310a:	e7d2      	b.n	80130b2 <_vfiprintf_r+0xc6>
 801310c:	9b03      	ldr	r3, [sp, #12]
 801310e:	1d19      	adds	r1, r3, #4
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	9103      	str	r1, [sp, #12]
 8013114:	2b00      	cmp	r3, #0
 8013116:	bfbb      	ittet	lt
 8013118:	425b      	neglt	r3, r3
 801311a:	f042 0202 	orrlt.w	r2, r2, #2
 801311e:	9307      	strge	r3, [sp, #28]
 8013120:	9307      	strlt	r3, [sp, #28]
 8013122:	bfb8      	it	lt
 8013124:	9204      	strlt	r2, [sp, #16]
 8013126:	7823      	ldrb	r3, [r4, #0]
 8013128:	2b2e      	cmp	r3, #46	@ 0x2e
 801312a:	d10a      	bne.n	8013142 <_vfiprintf_r+0x156>
 801312c:	7863      	ldrb	r3, [r4, #1]
 801312e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013130:	d132      	bne.n	8013198 <_vfiprintf_r+0x1ac>
 8013132:	9b03      	ldr	r3, [sp, #12]
 8013134:	1d1a      	adds	r2, r3, #4
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	9203      	str	r2, [sp, #12]
 801313a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801313e:	3402      	adds	r4, #2
 8013140:	9305      	str	r3, [sp, #20]
 8013142:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013218 <_vfiprintf_r+0x22c>
 8013146:	7821      	ldrb	r1, [r4, #0]
 8013148:	2203      	movs	r2, #3
 801314a:	4650      	mov	r0, sl
 801314c:	f7ed f8d8 	bl	8000300 <memchr>
 8013150:	b138      	cbz	r0, 8013162 <_vfiprintf_r+0x176>
 8013152:	9b04      	ldr	r3, [sp, #16]
 8013154:	eba0 000a 	sub.w	r0, r0, sl
 8013158:	2240      	movs	r2, #64	@ 0x40
 801315a:	4082      	lsls	r2, r0
 801315c:	4313      	orrs	r3, r2
 801315e:	3401      	adds	r4, #1
 8013160:	9304      	str	r3, [sp, #16]
 8013162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013166:	4829      	ldr	r0, [pc, #164]	@ (801320c <_vfiprintf_r+0x220>)
 8013168:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801316c:	2206      	movs	r2, #6
 801316e:	f7ed f8c7 	bl	8000300 <memchr>
 8013172:	2800      	cmp	r0, #0
 8013174:	d03f      	beq.n	80131f6 <_vfiprintf_r+0x20a>
 8013176:	4b26      	ldr	r3, [pc, #152]	@ (8013210 <_vfiprintf_r+0x224>)
 8013178:	bb1b      	cbnz	r3, 80131c2 <_vfiprintf_r+0x1d6>
 801317a:	9b03      	ldr	r3, [sp, #12]
 801317c:	3307      	adds	r3, #7
 801317e:	f023 0307 	bic.w	r3, r3, #7
 8013182:	3308      	adds	r3, #8
 8013184:	9303      	str	r3, [sp, #12]
 8013186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013188:	443b      	add	r3, r7
 801318a:	9309      	str	r3, [sp, #36]	@ 0x24
 801318c:	e76a      	b.n	8013064 <_vfiprintf_r+0x78>
 801318e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013192:	460c      	mov	r4, r1
 8013194:	2001      	movs	r0, #1
 8013196:	e7a8      	b.n	80130ea <_vfiprintf_r+0xfe>
 8013198:	2300      	movs	r3, #0
 801319a:	3401      	adds	r4, #1
 801319c:	9305      	str	r3, [sp, #20]
 801319e:	4619      	mov	r1, r3
 80131a0:	f04f 0c0a 	mov.w	ip, #10
 80131a4:	4620      	mov	r0, r4
 80131a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131aa:	3a30      	subs	r2, #48	@ 0x30
 80131ac:	2a09      	cmp	r2, #9
 80131ae:	d903      	bls.n	80131b8 <_vfiprintf_r+0x1cc>
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d0c6      	beq.n	8013142 <_vfiprintf_r+0x156>
 80131b4:	9105      	str	r1, [sp, #20]
 80131b6:	e7c4      	b.n	8013142 <_vfiprintf_r+0x156>
 80131b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80131bc:	4604      	mov	r4, r0
 80131be:	2301      	movs	r3, #1
 80131c0:	e7f0      	b.n	80131a4 <_vfiprintf_r+0x1b8>
 80131c2:	ab03      	add	r3, sp, #12
 80131c4:	9300      	str	r3, [sp, #0]
 80131c6:	462a      	mov	r2, r5
 80131c8:	4b12      	ldr	r3, [pc, #72]	@ (8013214 <_vfiprintf_r+0x228>)
 80131ca:	a904      	add	r1, sp, #16
 80131cc:	4630      	mov	r0, r6
 80131ce:	f7fc ffbb 	bl	8010148 <_printf_float>
 80131d2:	4607      	mov	r7, r0
 80131d4:	1c78      	adds	r0, r7, #1
 80131d6:	d1d6      	bne.n	8013186 <_vfiprintf_r+0x19a>
 80131d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131da:	07d9      	lsls	r1, r3, #31
 80131dc:	d405      	bmi.n	80131ea <_vfiprintf_r+0x1fe>
 80131de:	89ab      	ldrh	r3, [r5, #12]
 80131e0:	059a      	lsls	r2, r3, #22
 80131e2:	d402      	bmi.n	80131ea <_vfiprintf_r+0x1fe>
 80131e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80131e6:	f7fd fd21 	bl	8010c2c <__retarget_lock_release_recursive>
 80131ea:	89ab      	ldrh	r3, [r5, #12]
 80131ec:	065b      	lsls	r3, r3, #25
 80131ee:	f53f af1f 	bmi.w	8013030 <_vfiprintf_r+0x44>
 80131f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80131f4:	e71e      	b.n	8013034 <_vfiprintf_r+0x48>
 80131f6:	ab03      	add	r3, sp, #12
 80131f8:	9300      	str	r3, [sp, #0]
 80131fa:	462a      	mov	r2, r5
 80131fc:	4b05      	ldr	r3, [pc, #20]	@ (8013214 <_vfiprintf_r+0x228>)
 80131fe:	a904      	add	r1, sp, #16
 8013200:	4630      	mov	r0, r6
 8013202:	f7fd fa29 	bl	8010658 <_printf_i>
 8013206:	e7e4      	b.n	80131d2 <_vfiprintf_r+0x1e6>
 8013208:	08013a2c 	.word	0x08013a2c
 801320c:	08013a36 	.word	0x08013a36
 8013210:	08010149 	.word	0x08010149
 8013214:	08012fc9 	.word	0x08012fc9
 8013218:	08013a32 	.word	0x08013a32

0801321c <__swbuf_r>:
 801321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801321e:	460e      	mov	r6, r1
 8013220:	4614      	mov	r4, r2
 8013222:	4605      	mov	r5, r0
 8013224:	b118      	cbz	r0, 801322e <__swbuf_r+0x12>
 8013226:	6a03      	ldr	r3, [r0, #32]
 8013228:	b90b      	cbnz	r3, 801322e <__swbuf_r+0x12>
 801322a:	f7fd fbbf 	bl	80109ac <__sinit>
 801322e:	69a3      	ldr	r3, [r4, #24]
 8013230:	60a3      	str	r3, [r4, #8]
 8013232:	89a3      	ldrh	r3, [r4, #12]
 8013234:	071a      	lsls	r2, r3, #28
 8013236:	d501      	bpl.n	801323c <__swbuf_r+0x20>
 8013238:	6923      	ldr	r3, [r4, #16]
 801323a:	b943      	cbnz	r3, 801324e <__swbuf_r+0x32>
 801323c:	4621      	mov	r1, r4
 801323e:	4628      	mov	r0, r5
 8013240:	f000 f82a 	bl	8013298 <__swsetup_r>
 8013244:	b118      	cbz	r0, 801324e <__swbuf_r+0x32>
 8013246:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801324a:	4638      	mov	r0, r7
 801324c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801324e:	6823      	ldr	r3, [r4, #0]
 8013250:	6922      	ldr	r2, [r4, #16]
 8013252:	1a98      	subs	r0, r3, r2
 8013254:	6963      	ldr	r3, [r4, #20]
 8013256:	b2f6      	uxtb	r6, r6
 8013258:	4283      	cmp	r3, r0
 801325a:	4637      	mov	r7, r6
 801325c:	dc05      	bgt.n	801326a <__swbuf_r+0x4e>
 801325e:	4621      	mov	r1, r4
 8013260:	4628      	mov	r0, r5
 8013262:	f7ff fdc7 	bl	8012df4 <_fflush_r>
 8013266:	2800      	cmp	r0, #0
 8013268:	d1ed      	bne.n	8013246 <__swbuf_r+0x2a>
 801326a:	68a3      	ldr	r3, [r4, #8]
 801326c:	3b01      	subs	r3, #1
 801326e:	60a3      	str	r3, [r4, #8]
 8013270:	6823      	ldr	r3, [r4, #0]
 8013272:	1c5a      	adds	r2, r3, #1
 8013274:	6022      	str	r2, [r4, #0]
 8013276:	701e      	strb	r6, [r3, #0]
 8013278:	6962      	ldr	r2, [r4, #20]
 801327a:	1c43      	adds	r3, r0, #1
 801327c:	429a      	cmp	r2, r3
 801327e:	d004      	beq.n	801328a <__swbuf_r+0x6e>
 8013280:	89a3      	ldrh	r3, [r4, #12]
 8013282:	07db      	lsls	r3, r3, #31
 8013284:	d5e1      	bpl.n	801324a <__swbuf_r+0x2e>
 8013286:	2e0a      	cmp	r6, #10
 8013288:	d1df      	bne.n	801324a <__swbuf_r+0x2e>
 801328a:	4621      	mov	r1, r4
 801328c:	4628      	mov	r0, r5
 801328e:	f7ff fdb1 	bl	8012df4 <_fflush_r>
 8013292:	2800      	cmp	r0, #0
 8013294:	d0d9      	beq.n	801324a <__swbuf_r+0x2e>
 8013296:	e7d6      	b.n	8013246 <__swbuf_r+0x2a>

08013298 <__swsetup_r>:
 8013298:	b538      	push	{r3, r4, r5, lr}
 801329a:	4b29      	ldr	r3, [pc, #164]	@ (8013340 <__swsetup_r+0xa8>)
 801329c:	4605      	mov	r5, r0
 801329e:	6818      	ldr	r0, [r3, #0]
 80132a0:	460c      	mov	r4, r1
 80132a2:	b118      	cbz	r0, 80132ac <__swsetup_r+0x14>
 80132a4:	6a03      	ldr	r3, [r0, #32]
 80132a6:	b90b      	cbnz	r3, 80132ac <__swsetup_r+0x14>
 80132a8:	f7fd fb80 	bl	80109ac <__sinit>
 80132ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b0:	0719      	lsls	r1, r3, #28
 80132b2:	d422      	bmi.n	80132fa <__swsetup_r+0x62>
 80132b4:	06da      	lsls	r2, r3, #27
 80132b6:	d407      	bmi.n	80132c8 <__swsetup_r+0x30>
 80132b8:	2209      	movs	r2, #9
 80132ba:	602a      	str	r2, [r5, #0]
 80132bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132c0:	81a3      	strh	r3, [r4, #12]
 80132c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132c6:	e033      	b.n	8013330 <__swsetup_r+0x98>
 80132c8:	0758      	lsls	r0, r3, #29
 80132ca:	d512      	bpl.n	80132f2 <__swsetup_r+0x5a>
 80132cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80132ce:	b141      	cbz	r1, 80132e2 <__swsetup_r+0x4a>
 80132d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80132d4:	4299      	cmp	r1, r3
 80132d6:	d002      	beq.n	80132de <__swsetup_r+0x46>
 80132d8:	4628      	mov	r0, r5
 80132da:	f7fe faaf 	bl	801183c <_free_r>
 80132de:	2300      	movs	r3, #0
 80132e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80132e2:	89a3      	ldrh	r3, [r4, #12]
 80132e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80132e8:	81a3      	strh	r3, [r4, #12]
 80132ea:	2300      	movs	r3, #0
 80132ec:	6063      	str	r3, [r4, #4]
 80132ee:	6923      	ldr	r3, [r4, #16]
 80132f0:	6023      	str	r3, [r4, #0]
 80132f2:	89a3      	ldrh	r3, [r4, #12]
 80132f4:	f043 0308 	orr.w	r3, r3, #8
 80132f8:	81a3      	strh	r3, [r4, #12]
 80132fa:	6923      	ldr	r3, [r4, #16]
 80132fc:	b94b      	cbnz	r3, 8013312 <__swsetup_r+0x7a>
 80132fe:	89a3      	ldrh	r3, [r4, #12]
 8013300:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013308:	d003      	beq.n	8013312 <__swsetup_r+0x7a>
 801330a:	4621      	mov	r1, r4
 801330c:	4628      	mov	r0, r5
 801330e:	f000 f883 	bl	8013418 <__smakebuf_r>
 8013312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013316:	f013 0201 	ands.w	r2, r3, #1
 801331a:	d00a      	beq.n	8013332 <__swsetup_r+0x9a>
 801331c:	2200      	movs	r2, #0
 801331e:	60a2      	str	r2, [r4, #8]
 8013320:	6962      	ldr	r2, [r4, #20]
 8013322:	4252      	negs	r2, r2
 8013324:	61a2      	str	r2, [r4, #24]
 8013326:	6922      	ldr	r2, [r4, #16]
 8013328:	b942      	cbnz	r2, 801333c <__swsetup_r+0xa4>
 801332a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801332e:	d1c5      	bne.n	80132bc <__swsetup_r+0x24>
 8013330:	bd38      	pop	{r3, r4, r5, pc}
 8013332:	0799      	lsls	r1, r3, #30
 8013334:	bf58      	it	pl
 8013336:	6962      	ldrpl	r2, [r4, #20]
 8013338:	60a2      	str	r2, [r4, #8]
 801333a:	e7f4      	b.n	8013326 <__swsetup_r+0x8e>
 801333c:	2000      	movs	r0, #0
 801333e:	e7f7      	b.n	8013330 <__swsetup_r+0x98>
 8013340:	240001b0 	.word	0x240001b0

08013344 <_raise_r>:
 8013344:	291f      	cmp	r1, #31
 8013346:	b538      	push	{r3, r4, r5, lr}
 8013348:	4605      	mov	r5, r0
 801334a:	460c      	mov	r4, r1
 801334c:	d904      	bls.n	8013358 <_raise_r+0x14>
 801334e:	2316      	movs	r3, #22
 8013350:	6003      	str	r3, [r0, #0]
 8013352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013356:	bd38      	pop	{r3, r4, r5, pc}
 8013358:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801335a:	b112      	cbz	r2, 8013362 <_raise_r+0x1e>
 801335c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013360:	b94b      	cbnz	r3, 8013376 <_raise_r+0x32>
 8013362:	4628      	mov	r0, r5
 8013364:	f000 f830 	bl	80133c8 <_getpid_r>
 8013368:	4622      	mov	r2, r4
 801336a:	4601      	mov	r1, r0
 801336c:	4628      	mov	r0, r5
 801336e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013372:	f000 b817 	b.w	80133a4 <_kill_r>
 8013376:	2b01      	cmp	r3, #1
 8013378:	d00a      	beq.n	8013390 <_raise_r+0x4c>
 801337a:	1c59      	adds	r1, r3, #1
 801337c:	d103      	bne.n	8013386 <_raise_r+0x42>
 801337e:	2316      	movs	r3, #22
 8013380:	6003      	str	r3, [r0, #0]
 8013382:	2001      	movs	r0, #1
 8013384:	e7e7      	b.n	8013356 <_raise_r+0x12>
 8013386:	2100      	movs	r1, #0
 8013388:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801338c:	4620      	mov	r0, r4
 801338e:	4798      	blx	r3
 8013390:	2000      	movs	r0, #0
 8013392:	e7e0      	b.n	8013356 <_raise_r+0x12>

08013394 <raise>:
 8013394:	4b02      	ldr	r3, [pc, #8]	@ (80133a0 <raise+0xc>)
 8013396:	4601      	mov	r1, r0
 8013398:	6818      	ldr	r0, [r3, #0]
 801339a:	f7ff bfd3 	b.w	8013344 <_raise_r>
 801339e:	bf00      	nop
 80133a0:	240001b0 	.word	0x240001b0

080133a4 <_kill_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4d07      	ldr	r5, [pc, #28]	@ (80133c4 <_kill_r+0x20>)
 80133a8:	2300      	movs	r3, #0
 80133aa:	4604      	mov	r4, r0
 80133ac:	4608      	mov	r0, r1
 80133ae:	4611      	mov	r1, r2
 80133b0:	602b      	str	r3, [r5, #0]
 80133b2:	f7ee fd11 	bl	8001dd8 <_kill>
 80133b6:	1c43      	adds	r3, r0, #1
 80133b8:	d102      	bne.n	80133c0 <_kill_r+0x1c>
 80133ba:	682b      	ldr	r3, [r5, #0]
 80133bc:	b103      	cbz	r3, 80133c0 <_kill_r+0x1c>
 80133be:	6023      	str	r3, [r4, #0]
 80133c0:	bd38      	pop	{r3, r4, r5, pc}
 80133c2:	bf00      	nop
 80133c4:	24004f08 	.word	0x24004f08

080133c8 <_getpid_r>:
 80133c8:	f7ee bcfe 	b.w	8001dc8 <_getpid>

080133cc <__swhatbuf_r>:
 80133cc:	b570      	push	{r4, r5, r6, lr}
 80133ce:	460c      	mov	r4, r1
 80133d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133d4:	2900      	cmp	r1, #0
 80133d6:	b096      	sub	sp, #88	@ 0x58
 80133d8:	4615      	mov	r5, r2
 80133da:	461e      	mov	r6, r3
 80133dc:	da0d      	bge.n	80133fa <__swhatbuf_r+0x2e>
 80133de:	89a3      	ldrh	r3, [r4, #12]
 80133e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80133e4:	f04f 0100 	mov.w	r1, #0
 80133e8:	bf14      	ite	ne
 80133ea:	2340      	movne	r3, #64	@ 0x40
 80133ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80133f0:	2000      	movs	r0, #0
 80133f2:	6031      	str	r1, [r6, #0]
 80133f4:	602b      	str	r3, [r5, #0]
 80133f6:	b016      	add	sp, #88	@ 0x58
 80133f8:	bd70      	pop	{r4, r5, r6, pc}
 80133fa:	466a      	mov	r2, sp
 80133fc:	f000 f848 	bl	8013490 <_fstat_r>
 8013400:	2800      	cmp	r0, #0
 8013402:	dbec      	blt.n	80133de <__swhatbuf_r+0x12>
 8013404:	9901      	ldr	r1, [sp, #4]
 8013406:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801340a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801340e:	4259      	negs	r1, r3
 8013410:	4159      	adcs	r1, r3
 8013412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013416:	e7eb      	b.n	80133f0 <__swhatbuf_r+0x24>

08013418 <__smakebuf_r>:
 8013418:	898b      	ldrh	r3, [r1, #12]
 801341a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801341c:	079d      	lsls	r5, r3, #30
 801341e:	4606      	mov	r6, r0
 8013420:	460c      	mov	r4, r1
 8013422:	d507      	bpl.n	8013434 <__smakebuf_r+0x1c>
 8013424:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013428:	6023      	str	r3, [r4, #0]
 801342a:	6123      	str	r3, [r4, #16]
 801342c:	2301      	movs	r3, #1
 801342e:	6163      	str	r3, [r4, #20]
 8013430:	b003      	add	sp, #12
 8013432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013434:	ab01      	add	r3, sp, #4
 8013436:	466a      	mov	r2, sp
 8013438:	f7ff ffc8 	bl	80133cc <__swhatbuf_r>
 801343c:	9f00      	ldr	r7, [sp, #0]
 801343e:	4605      	mov	r5, r0
 8013440:	4639      	mov	r1, r7
 8013442:	4630      	mov	r0, r6
 8013444:	f7fe fda8 	bl	8011f98 <_malloc_r>
 8013448:	b948      	cbnz	r0, 801345e <__smakebuf_r+0x46>
 801344a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801344e:	059a      	lsls	r2, r3, #22
 8013450:	d4ee      	bmi.n	8013430 <__smakebuf_r+0x18>
 8013452:	f023 0303 	bic.w	r3, r3, #3
 8013456:	f043 0302 	orr.w	r3, r3, #2
 801345a:	81a3      	strh	r3, [r4, #12]
 801345c:	e7e2      	b.n	8013424 <__smakebuf_r+0xc>
 801345e:	89a3      	ldrh	r3, [r4, #12]
 8013460:	6020      	str	r0, [r4, #0]
 8013462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013466:	81a3      	strh	r3, [r4, #12]
 8013468:	9b01      	ldr	r3, [sp, #4]
 801346a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801346e:	b15b      	cbz	r3, 8013488 <__smakebuf_r+0x70>
 8013470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013474:	4630      	mov	r0, r6
 8013476:	f000 f81d 	bl	80134b4 <_isatty_r>
 801347a:	b128      	cbz	r0, 8013488 <__smakebuf_r+0x70>
 801347c:	89a3      	ldrh	r3, [r4, #12]
 801347e:	f023 0303 	bic.w	r3, r3, #3
 8013482:	f043 0301 	orr.w	r3, r3, #1
 8013486:	81a3      	strh	r3, [r4, #12]
 8013488:	89a3      	ldrh	r3, [r4, #12]
 801348a:	431d      	orrs	r5, r3
 801348c:	81a5      	strh	r5, [r4, #12]
 801348e:	e7cf      	b.n	8013430 <__smakebuf_r+0x18>

08013490 <_fstat_r>:
 8013490:	b538      	push	{r3, r4, r5, lr}
 8013492:	4d07      	ldr	r5, [pc, #28]	@ (80134b0 <_fstat_r+0x20>)
 8013494:	2300      	movs	r3, #0
 8013496:	4604      	mov	r4, r0
 8013498:	4608      	mov	r0, r1
 801349a:	4611      	mov	r1, r2
 801349c:	602b      	str	r3, [r5, #0]
 801349e:	f7ee fcfb 	bl	8001e98 <_fstat>
 80134a2:	1c43      	adds	r3, r0, #1
 80134a4:	d102      	bne.n	80134ac <_fstat_r+0x1c>
 80134a6:	682b      	ldr	r3, [r5, #0]
 80134a8:	b103      	cbz	r3, 80134ac <_fstat_r+0x1c>
 80134aa:	6023      	str	r3, [r4, #0]
 80134ac:	bd38      	pop	{r3, r4, r5, pc}
 80134ae:	bf00      	nop
 80134b0:	24004f08 	.word	0x24004f08

080134b4 <_isatty_r>:
 80134b4:	b538      	push	{r3, r4, r5, lr}
 80134b6:	4d06      	ldr	r5, [pc, #24]	@ (80134d0 <_isatty_r+0x1c>)
 80134b8:	2300      	movs	r3, #0
 80134ba:	4604      	mov	r4, r0
 80134bc:	4608      	mov	r0, r1
 80134be:	602b      	str	r3, [r5, #0]
 80134c0:	f7ee fcfa 	bl	8001eb8 <_isatty>
 80134c4:	1c43      	adds	r3, r0, #1
 80134c6:	d102      	bne.n	80134ce <_isatty_r+0x1a>
 80134c8:	682b      	ldr	r3, [r5, #0]
 80134ca:	b103      	cbz	r3, 80134ce <_isatty_r+0x1a>
 80134cc:	6023      	str	r3, [r4, #0]
 80134ce:	bd38      	pop	{r3, r4, r5, pc}
 80134d0:	24004f08 	.word	0x24004f08

080134d4 <_init>:
 80134d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134d6:	bf00      	nop
 80134d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134da:	bc08      	pop	{r3}
 80134dc:	469e      	mov	lr, r3
 80134de:	4770      	bx	lr

080134e0 <_fini>:
 80134e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134e2:	bf00      	nop
 80134e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134e6:	bc08      	pop	{r3}
 80134e8:	469e      	mov	lr, r3
 80134ea:	4770      	bx	lr
