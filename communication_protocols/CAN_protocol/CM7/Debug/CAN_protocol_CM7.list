
CAN_protocol_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000578  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000810  08000810  00001810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800081c  0800081c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800081c  0800081c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800081c  0800081c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800081c  0800081c  0000181c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000820  08000820  00001820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  24000000  08000824  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000004  08000828  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000024  08000828  00002024  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002987  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000619  00000000  00000000  000049b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  00004fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000229  00000000  00000000  000052d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036feb  00000000  00000000  000054f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027c1  00000000  00000000  0003c4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017518b  00000000  00000000  0003eca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b3e30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ab4  00000000  00000000  001b3e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001b4928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000004 	.word	0x24000004
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080007f8 	.word	0x080007f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000008 	.word	0x24000008
 80002d4:	080007f8 	.word	0x080007f8

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <ExitRun0Mode+0x2c>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000444:	bf00      	nop
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <ExitRun0Mode+0x2c>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	58024800 	.word	0x58024800

08000464 <CAN_SendBit>:
}                                       // <- Fin del retardo de N ciclos (aproximado).

/**
 * @brief  Envía un bit individual al bus CAN
 */
void CAN_SendBit(uint8_t state) {
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
   if (state == RECESSIVE) {            // <- Si el bit deseado es recesivo (1 lógico)...
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d104      	bne.n	800047e <CAN_SendBit+0x1a>
       GPIOA_BSRR = PA8_SET;            // <- Escribe en BSRR parte baja: pone PA8 en 1 (alto).
 8000474:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <CAN_SendBit+0x40>)
 8000476:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	e003      	b.n	8000486 <CAN_SendBit+0x22>
   } else {                             // <- Si el bit deseado es dominante (0 lógico)...
       GPIOA_BSRR = PA8_RESET;          // <- Escribe en BSRR parte alta: pone PA8 en 0 (bajo).
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <CAN_SendBit+0x40>)
 8000480:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800048a:	60fb      	str	r3, [r7, #12]
   __asm volatile (                     // <- Bloque ensamblador en línea.
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	3b01      	subs	r3, #1
 8000490:	d1fd      	bne.n	800048e <CAN_SendBit+0x2a>
 8000492:	60fb      	str	r3, [r7, #12]
}                                       // <- Fin del retardo de N ciclos (aproximado).
 8000494:	bf00      	nop
   }
   delay_cycles(BIT_TIME_CYCLES);       // <- Mantén ese nivel por el “tiempo de 1 bit”.
}
 8000496:	bf00      	nop
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	58020018 	.word	0x58020018

080004a8 <CAN_CalculateCRC>:

/**
 * @brief  Cálculo de CRC simplificado (para la visualización)
 */
uint16_t CAN_CalculateCRC(CAN_Frame_t *frame) {
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
   uint16_t crc = 0;                    // <- Acumulador del “CRC” (aquí no es el real de CAN).
 80004b0:	2300      	movs	r3, #0
 80004b2:	81fb      	strh	r3, [r7, #14]
   // Suma simple de los datos para generar un valor determinístico
   for(int i = 0; i < frame->DLC; i++) {// <- Recorre sólo los bytes válidos (DLC).
 80004b4:	2300      	movs	r3, #0
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	e00b      	b.n	80004d2 <CAN_CalculateCRC+0x2a>
       crc += frame->Data[i];           // <- Suma cada byte al acumulador.
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	4413      	add	r3, r2
 80004c0:	3303      	adds	r3, #3
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	89fb      	ldrh	r3, [r7, #14]
 80004c8:	4413      	add	r3, r2
 80004ca:	81fb      	strh	r3, [r7, #14]
   for(int i = 0; i < frame->DLC; i++) {// <- Recorre sólo los bytes válidos (DLC).
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	3301      	adds	r3, #1
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	461a      	mov	r2, r3
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	4293      	cmp	r3, r2
 80004dc:	dbed      	blt.n	80004ba <CAN_CalculateCRC+0x12>
   }
   // Tomar 15 bits
   return crc & 0x7FFF;                 // <- Devuelve sólo 15 bits (formato parecido al CRC de CAN).
 80004de:	89fb      	ldrh	r3, [r7, #14]
 80004e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004e4:	b29b      	uxth	r3, r3
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <CAN_SendFrame>:

/**
 * @brief  Envía una trama CAN completa (simplificada sin Bit Stuffing)
 */
void CAN_SendFrame(CAN_Frame_t *frame) {
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b086      	sub	sp, #24
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
   int i, j;                            // <- Índices de bucle.
   uint16_t crc;                        // <- Variable para el “CRC” simplificado.

   // 1. INTERFRAME SPACE (3 bits recesivos)
   for(i = 0; i < 3; i++) CAN_SendBit(RECESSIVE); // <- 3 bits de silencio antes de la trama.
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	e005      	b.n	800050c <CAN_SendFrame+0x1a>
 8000500:	2001      	movs	r0, #1
 8000502:	f7ff ffaf 	bl	8000464 <CAN_SendBit>
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	3301      	adds	r3, #1
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	2b02      	cmp	r3, #2
 8000510:	ddf6      	ble.n	8000500 <CAN_SendFrame+0xe>

   // 2. START OF FRAME (SOF)
   CAN_SendBit(DOMINANT);               // <- SOF: un 0 (dominante) marca inicio de trama.
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff ffa6 	bl	8000464 <CAN_SendBit>

   // 3. ARBITRATION FIELD (ID - 11 bits) - MSB primero
   for(i = 10; i >= 0; i--)             // <- Recorre los 11 bits del ID, de MSB a LSB...
 8000518:	230a      	movs	r3, #10
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	e00f      	b.n	800053e <CAN_SendFrame+0x4c>
       CAN_SendBit((frame->ID >> i) & 0x01); // <- Extrae ese bit y lo envía.
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	fa42 f303 	asr.w	r3, r2, r3
 800052a:	b2db      	uxtb	r3, r3
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff96 	bl	8000464 <CAN_SendBit>
   for(i = 10; i >= 0; i--)             // <- Recorre los 11 bits del ID, de MSB a LSB...
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	3b01      	subs	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	2b00      	cmp	r3, #0
 8000542:	daec      	bge.n	800051e <CAN_SendFrame+0x2c>

   // 4. CONTROL FIELD: RTR (1) | IDE (0) | r0 (0) | DLC (4 bits)
   CAN_SendBit(RECESSIVE);              // <- RTR=1 (recesivo) → Data Frame (no remoto) en estándar.
 8000544:	2001      	movs	r0, #1
 8000546:	f7ff ff8d 	bl	8000464 <CAN_SendBit>
   CAN_SendBit(DOMINANT);               // <- IDE=0 (dominante) → formato estándar (11 bits).
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff ff8a 	bl	8000464 <CAN_SendBit>
   CAN_SendBit(DOMINANT);               // <- r0=0 (reservado).
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff ff87 	bl	8000464 <CAN_SendBit>
   for(i = 3; i >= 0; i--)              // <- 4 bits del DLC, de MSB a LSB...
 8000556:	2303      	movs	r3, #3
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	e00f      	b.n	800057c <CAN_SendFrame+0x8a>
       CAN_SendBit((frame->DLC >> i) & 0x01); // <- Envía cada bit del DLC.
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	461a      	mov	r2, r3
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	fa42 f303 	asr.w	r3, r2, r3
 8000568:	b2db      	uxtb	r3, r3
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ff77 	bl	8000464 <CAN_SendBit>
   for(i = 3; i >= 0; i--)              // <- 4 bits del DLC, de MSB a LSB...
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3b01      	subs	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	2b00      	cmp	r3, #0
 8000580:	daec      	bge.n	800055c <CAN_SendFrame+0x6a>

   // 5. DATA FIELD
   for(i = 0; i < frame->DLC; i++) {    // <- Por cada byte de datos válido...
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	e01b      	b.n	80005c0 <CAN_SendFrame+0xce>
       for(j = 7; j >= 0; j--)          // <- Recorre sus 8 bits, MSB a LSB...
 8000588:	2307      	movs	r3, #7
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	e012      	b.n	80005b4 <CAN_SendFrame+0xc2>
           CAN_SendBit((frame->Data[i] >> j) & 0x01); // <- Envía el bit del dato.
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	4413      	add	r3, r2
 8000594:	3303      	adds	r3, #3
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	fa42 f303 	asr.w	r3, r2, r3
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff5b 	bl	8000464 <CAN_SendBit>
       for(j = 7; j >= 0; j--)          // <- Recorre sus 8 bits, MSB a LSB...
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	dae9      	bge.n	800058e <CAN_SendFrame+0x9c>
   for(i = 0; i < frame->DLC; i++) {    // <- Por cada byte de datos válido...
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	3301      	adds	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	789b      	ldrb	r3, [r3, #2]
 80005c4:	461a      	mov	r2, r3
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	4293      	cmp	r3, r2
 80005ca:	dbdd      	blt.n	8000588 <CAN_SendFrame+0x96>
   }

   // 6. CRC FIELD (15 bits)
   crc = CAN_CalculateCRC(frame);       // <- Calcula “CRC” (simplificado).
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ff6b 	bl	80004a8 <CAN_CalculateCRC>
 80005d2:	4603      	mov	r3, r0
 80005d4:	81fb      	strh	r3, [r7, #14]
   for(i = 14; i >= 0; i--)             // <- 15 bits del “CRC”, MSB a LSB...
 80005d6:	230e      	movs	r3, #14
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	e00d      	b.n	80005f8 <CAN_SendFrame+0x106>
       CAN_SendBit((crc >> i) & 0x01);  // <- Envía cada bit.
 80005dc:	89fa      	ldrh	r2, [r7, #14]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	fa42 f303 	asr.w	r3, r2, r3
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff39 	bl	8000464 <CAN_SendBit>
   for(i = 14; i >= 0; i--)             // <- 15 bits del “CRC”, MSB a LSB...
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	daee      	bge.n	80005dc <CAN_SendFrame+0xea>
   CAN_SendBit(RECESSIVE);              // <- CRC Delimiter = 1 (recesivo).
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff ff30 	bl	8000464 <CAN_SendBit>

   // 7. ACK FIELD
   CAN_SendBit(RECESSIVE);              // <- ACK Slot: aquí queda 1 porque no hay receptor que tire a 0.
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff ff2d 	bl	8000464 <CAN_SendBit>
   CAN_SendBit(RECESSIVE);              // <- ACK Delimiter = 1 (recesivo).
 800060a:	2001      	movs	r0, #1
 800060c:	f7ff ff2a 	bl	8000464 <CAN_SendBit>

   // 8. END OF FRAME (EOF) - 7 bits recesivos
   for(i = 0; i < 7; i++)               // <- 7 bits de fin de trama...
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	e005      	b.n	8000622 <CAN_SendFrame+0x130>
       CAN_SendBit(RECESSIVE);          // <- Todos en 1 (recesivo).
 8000616:	2001      	movs	r0, #1
 8000618:	f7ff ff24 	bl	8000464 <CAN_SendBit>
   for(i = 0; i < 7; i++)               // <- 7 bits de fin de trama...
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	2b06      	cmp	r3, #6
 8000626:	ddf6      	ble.n	8000616 <CAN_SendFrame+0x124>
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <init_bare_metal>:

/**
 * @brief  Inicialización de Clock y GPIO para PA8 (H7 Bare-Metal).
 */
static void init_bare_metal(void) {
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
    // 1. Habilitar el Clock para GPIOA
    RCC_AHB4ENR |= GPIOAEN;             // <- Enciende el reloj del puerto A (sin esto, GPIOA no responde).
 8000638:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <init_bare_metal+0x54>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <init_bare_metal+0x54>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	6013      	str	r3, [r2, #0]

    // 2. Configurar PA8 como Salida Push-Pull de alta velocidad
    // Limpiar MODER (bits 16 y 17) para PA8
    GPIOA_MODER &= ~(0x3 << (CAN_TX_PIN_N * 2)); // <- Borra los 2 bits de modo del pin 8.
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <init_bare_metal+0x58>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a10      	ldr	r2, [pc, #64]	@ (800068c <init_bare_metal+0x58>)
 800064a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800064e:	6013      	str	r3, [r2, #0]
    // Escribir 0b01 (Output Mode)
    GPIOA_MODER |= (0x1 << (CAN_TX_PIN_N * 2));  // <- Pone modo “salida” en PA8.
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <init_bare_metal+0x58>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <init_bare_metal+0x58>)
 8000656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800065a:	6013      	str	r3, [r2, #0]

    // Configurar OSPEEDR (bits 16 y 17) a "Very High Speed" (0b11)
    GPIOA_OSPEEDR &= ~(0x3 << (CAN_TX_PIN_N * 2)); // <- Limpia velocidad previa de PA8.
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <init_bare_metal+0x5c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0b      	ldr	r2, [pc, #44]	@ (8000690 <init_bare_metal+0x5c>)
 8000662:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000666:	6013      	str	r3, [r2, #0]
    GPIOA_OSPEEDR |= (0x3 << (CAN_TX_PIN_N * 2));  // <- Fija “muy alta velocidad” para bordes limpios.
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <init_bare_metal+0x5c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <init_bare_metal+0x5c>)
 800066e:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000672:	6013      	str	r3, [r2, #0]

    // 3. Poner el pin inicial en RECESSIVE (HIGH)
    GPIOA_BSRR = PA8_SET;               // <- Arranca con la línea en 1 (bus en reposo = recesivo).
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <init_bare_metal+0x60>)
 8000676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800067a:	601a      	str	r2, [r3, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	580244e0 	.word	0x580244e0
 800068c:	58020000 	.word	0x58020000
 8000690:	58020008 	.word	0x58020008
 8000694:	58020018 	.word	0x58020018

08000698 <main>:

// ----------------------------------------------------------------------------
// 3. BUCLE PRINCIPAL
// ----------------------------------------------------------------------------

int main(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
    init_bare_metal();                  // <- Configura reloj de GPIOA y PA8 como salida rápida en alto.
 800069e:	f7ff ffc9 	bl	8000634 <init_bare_metal>

    // Configurar trama CAN de ejemplo
    CAN_Frame_t tx_frame = {            // <- Crea una trama de ejemplo:
 80006a2:	4a09      	ldr	r2, [pc, #36]	@ (80006c8 <main+0x30>)
 80006a4:	463b      	mov	r3, r7
 80006a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        .Data = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88} // <- El payload.
    };

    while (1) {                         // <- Bucle infinito.
        // Enviar la trama
        CAN_SendFrame(&tx_frame);       // <- Envía la trama completa bit a bit por PA8.
 80006ac:	463b      	mov	r3, r7
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff1f 	bl	80004f2 <CAN_SendFrame>
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <main+0x34>)
 80006b6:	60fb      	str	r3, [r7, #12]
   __asm volatile (                     // <- Bloque ensamblador en línea.
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	d1fd      	bne.n	80006ba <main+0x22>
 80006be:	60fb      	str	r3, [r7, #12]
}                                       // <- Fin del retardo de N ciclos (aproximado).
 80006c0:	bf00      	nop
        CAN_SendFrame(&tx_frame);       // <- Envía la trama completa bit a bit por PA8.
 80006c2:	bf00      	nop
 80006c4:	e7f2      	b.n	80006ac <main+0x14>
 80006c6:	bf00      	nop
 80006c8:	08000810 	.word	0x08000810
 80006cc:	00989680 	.word	0x00989680

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <NMI_Handler+0x4>

080006d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <HardFault_Handler+0x4>

080006e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <MemManage_Handler+0x4>

080006e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000726:	f000 f82f 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000730:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800076c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000734:	f7ff fe7e 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000738:	f7ff fdce 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	@ (8000770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	@ (8000774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	@ (800077c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	@ (8000780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000762:	f000 f825 	bl	80007b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000766:	f7ff ff97 	bl	8000698 <main>
  bx  lr
 800076a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800076c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000770:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000774:	24000004 	.word	0x24000004
  ldr r2, =_sidata
 8000778:	08000824 	.word	0x08000824
  ldr r2, =_sbss
 800077c:	24000004 	.word	0x24000004
  ldr r4, =_ebss
 8000780:	24000024 	.word	0x24000024

08000784 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC3_IRQHandler>
	...

08000788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <HAL_IncTick+0x20>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_IncTick+0x24>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <HAL_IncTick+0x24>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	24000000 	.word	0x24000000
 80007ac:	24000020 	.word	0x24000020

080007b0 <__libc_init_array>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	4d0d      	ldr	r5, [pc, #52]	@ (80007e8 <__libc_init_array+0x38>)
 80007b4:	4c0d      	ldr	r4, [pc, #52]	@ (80007ec <__libc_init_array+0x3c>)
 80007b6:	1b64      	subs	r4, r4, r5
 80007b8:	10a4      	asrs	r4, r4, #2
 80007ba:	2600      	movs	r6, #0
 80007bc:	42a6      	cmp	r6, r4
 80007be:	d109      	bne.n	80007d4 <__libc_init_array+0x24>
 80007c0:	4d0b      	ldr	r5, [pc, #44]	@ (80007f0 <__libc_init_array+0x40>)
 80007c2:	4c0c      	ldr	r4, [pc, #48]	@ (80007f4 <__libc_init_array+0x44>)
 80007c4:	f000 f818 	bl	80007f8 <_init>
 80007c8:	1b64      	subs	r4, r4, r5
 80007ca:	10a4      	asrs	r4, r4, #2
 80007cc:	2600      	movs	r6, #0
 80007ce:	42a6      	cmp	r6, r4
 80007d0:	d105      	bne.n	80007de <__libc_init_array+0x2e>
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d8:	4798      	blx	r3
 80007da:	3601      	adds	r6, #1
 80007dc:	e7ee      	b.n	80007bc <__libc_init_array+0xc>
 80007de:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e2:	4798      	blx	r3
 80007e4:	3601      	adds	r6, #1
 80007e6:	e7f2      	b.n	80007ce <__libc_init_array+0x1e>
 80007e8:	0800081c 	.word	0x0800081c
 80007ec:	0800081c 	.word	0x0800081c
 80007f0:	0800081c 	.word	0x0800081c
 80007f4:	08000820 	.word	0x08000820

080007f8 <_init>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	bf00      	nop
 80007fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fe:	bc08      	pop	{r3}
 8000800:	469e      	mov	lr, r3
 8000802:	4770      	bx	lr

08000804 <_fini>:
 8000804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000806:	bf00      	nop
 8000808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800080a:	bc08      	pop	{r3}
 800080c:	469e      	mov	lr, r3
 800080e:	4770      	bx	lr
