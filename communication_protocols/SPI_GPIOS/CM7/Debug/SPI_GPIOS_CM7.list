
SPI_GPIOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008ac  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000b44  08000b44  00001b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b60  08000b60  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000b60  08000b60  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000b60  08000b60  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b60  08000b60  00001b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b64  08000b64  00001b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  08000b68  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2400000c  08000b74  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400002c  08000b74  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002fc6  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000653  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00005658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000024e  00000000  00000000  00005980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000371ec  00000000  00000000  00005bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c7f  00000000  00000000  0003cdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001750c5  00000000  00000000  0003fa39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b4afe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b6c  00000000  00000000  001b4b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001b56b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400000c 	.word	0x2400000c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000b2c 	.word	0x08000b2c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000010 	.word	0x24000010
 80002d4:	08000b2c 	.word	0x08000b2c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000434:	b480      	push	{r7}
 8000436:	b08b      	sub	sp, #44	@ 0x2c
 8000438:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;
  float_t fracn1, pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800043a:	4bb1      	ldr	r3, [pc, #708]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 800043c:	691b      	ldr	r3, [r3, #16]
 800043e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000442:	2b18      	cmp	r3, #24
 8000444:	f200 812e 	bhi.w	80006a4 <SystemCoreClockUpdate+0x270>
 8000448:	a201      	add	r2, pc, #4	@ (adr r2, 8000450 <SystemCoreClockUpdate+0x1c>)
 800044a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044e:	bf00      	nop
 8000450:	080004b5 	.word	0x080004b5
 8000454:	080006a5 	.word	0x080006a5
 8000458:	080006a5 	.word	0x080006a5
 800045c:	080006a5 	.word	0x080006a5
 8000460:	080006a5 	.word	0x080006a5
 8000464:	080006a5 	.word	0x080006a5
 8000468:	080006a5 	.word	0x080006a5
 800046c:	080006a5 	.word	0x080006a5
 8000470:	080004c9 	.word	0x080004c9
 8000474:	080006a5 	.word	0x080006a5
 8000478:	080006a5 	.word	0x080006a5
 800047c:	080006a5 	.word	0x080006a5
 8000480:	080006a5 	.word	0x080006a5
 8000484:	080006a5 	.word	0x080006a5
 8000488:	080006a5 	.word	0x080006a5
 800048c:	080006a5 	.word	0x080006a5
 8000490:	080004cf 	.word	0x080004cf
 8000494:	080006a5 	.word	0x080006a5
 8000498:	080006a5 	.word	0x080006a5
 800049c:	080006a5 	.word	0x080006a5
 80004a0:	080006a5 	.word	0x080006a5
 80004a4:	080006a5 	.word	0x080006a5
 80004a8:	080006a5 	.word	0x080006a5
 80004ac:	080006a5 	.word	0x080006a5
 80004b0:	080004d5 	.word	0x080004d5
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 80004b4:	4b92      	ldr	r3, [pc, #584]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	08db      	lsrs	r3, r3, #3
 80004ba:	f003 0303 	and.w	r3, r3, #3
 80004be:	4a91      	ldr	r2, [pc, #580]	@ (8000704 <SystemCoreClockUpdate+0x2d0>)
 80004c0:	fa22 f303 	lsr.w	r3, r2, r3
 80004c4:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80004c6:	e0f7      	b.n	80006b8 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
 80004c8:	4b8f      	ldr	r3, [pc, #572]	@ (8000708 <SystemCoreClockUpdate+0x2d4>)
 80004ca:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80004cc:	e0f4      	b.n	80006b8 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
 80004ce:	4b8f      	ldr	r3, [pc, #572]	@ (800070c <SystemCoreClockUpdate+0x2d8>)
 80004d0:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80004d2:	e0f1      	b.n	80006b8 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80004d4:	4b8a      	ldr	r3, [pc, #552]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80004d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004d8:	f003 0303 	and.w	r3, r3, #3
 80004dc:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80004de:	4b88      	ldr	r3, [pc, #544]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80004e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004e2:	091b      	lsrs	r3, r3, #4
 80004e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004e8:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80004ea:	4b85      	ldr	r3, [pc, #532]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80004f4:	4b82      	ldr	r3, [pc, #520]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80004f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004f8:	08db      	lsrs	r3, r3, #3
 80004fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	fb02 f303 	mul.w	r3, r2, r3
 8000504:	ee07 3a90 	vmov	s15, r3
 8000508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800050c:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
 8000510:	69bb      	ldr	r3, [r7, #24]
 8000512:	2b00      	cmp	r3, #0
 8000514:	f000 80c3 	beq.w	800069e <SystemCoreClockUpdate+0x26a>
    {
      switch (pllsource)
 8000518:	69fb      	ldr	r3, [r7, #28]
 800051a:	2b02      	cmp	r3, #2
 800051c:	d059      	beq.n	80005d2 <SystemCoreClockUpdate+0x19e>
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	2b02      	cmp	r3, #2
 8000522:	d878      	bhi.n	8000616 <SystemCoreClockUpdate+0x1e2>
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d003      	beq.n	8000532 <SystemCoreClockUpdate+0xfe>
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d02e      	beq.n	800058e <SystemCoreClockUpdate+0x15a>
 8000530:	e071      	b.n	8000616 <SystemCoreClockUpdate+0x1e2>
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000532:	4b73      	ldr	r3, [pc, #460]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	08db      	lsrs	r3, r3, #3
 8000538:	f003 0303 	and.w	r3, r3, #3
 800053c:	4a71      	ldr	r2, [pc, #452]	@ (8000704 <SystemCoreClockUpdate+0x2d0>)
 800053e:	fa22 f303 	lsr.w	r3, r2, r3
 8000542:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	ee07 3a90 	vmov	s15, r3
 800054a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	ee07 3a90 	vmov	s15, r3
 8000554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800055c:	4b68      	ldr	r3, [pc, #416]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000564:	ee07 3a90 	vmov	s15, r3
 8000568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800056c:	ed97 6a04 	vldr	s12, [r7, #16]
 8000570:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8000710 <SystemCoreClockUpdate+0x2dc>
 8000574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800057c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000588:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
 800058c:	e071      	b.n	8000672 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	ee07 3a90 	vmov	s15, r3
 8000594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000598:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8000714 <SystemCoreClockUpdate+0x2e0>
 800059c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80005a0:	4b57      	ldr	r3, [pc, #348]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005a8:	ee07 3a90 	vmov	s15, r3
 80005ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80005b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80005b4:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8000710 <SystemCoreClockUpdate+0x2dc>
 80005b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80005bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80005c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80005c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80005c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005cc:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 80005d0:	e04f      	b.n	8000672 <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	ee07 3a90 	vmov	s15, r3
 80005d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005dc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8000718 <SystemCoreClockUpdate+0x2e4>
 80005e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80005e4:	4b46      	ldr	r3, [pc, #280]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005ec:	ee07 3a90 	vmov	s15, r3
 80005f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80005f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80005f8:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8000710 <SystemCoreClockUpdate+0x2dc>
 80005fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8000600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800060c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000610:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000614:	e02d      	b.n	8000672 <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
 8000616:	4b3a      	ldr	r3, [pc, #232]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	f003 0303 	and.w	r3, r3, #3
 8000620:	4a38      	ldr	r2, [pc, #224]	@ (8000704 <SystemCoreClockUpdate+0x2d0>)
 8000622:	fa22 f303 	lsr.w	r3, r2, r3
 8000626:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	ee07 3a90 	vmov	s15, r3
 8000638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800063c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000640:	4b2f      	ldr	r3, [pc, #188]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000648:	ee07 3a90 	vmov	s15, r3
 800064c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000650:	ed97 6a04 	vldr	s12, [r7, #16]
 8000654:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8000710 <SystemCoreClockUpdate+0x2dc>
 8000658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800065c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000660:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800066c:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
 8000670:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000672:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	0a5b      	lsrs	r3, r3, #9
 8000678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800067c:	3301      	adds	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	ee07 3a90 	vmov	s15, r3
 8000686:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800068a:	edd7 6a08 	vldr	s13, [r7, #32]
 800068e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000696:	ee17 3a90 	vmov	r3, s15
 800069a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
 800069c:	e00c      	b.n	80006b8 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80006a2:	e009      	b.n	80006b8 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
 80006a4:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	f003 0303 	and.w	r3, r3, #3
 80006ae:	4a15      	ldr	r2, [pc, #84]	@ (8000704 <SystemCoreClockUpdate+0x2d0>)
 80006b0:	fa22 f303 	lsr.w	r3, r2, r3
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80006b6:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	4a16      	ldr	r2, [pc, #88]	@ (800071c <SystemCoreClockUpdate+0x2e8>)
 80006c4:	5cd3      	ldrb	r3, [r2, r3]
 80006c6:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
 80006c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	fa22 f303 	lsr.w	r3, r2, r3
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <SystemCoreClockUpdate+0x2cc>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	4a10      	ldr	r2, [pc, #64]	@ (800071c <SystemCoreClockUpdate+0x2e8>)
 80006dc:	5cd3      	ldrb	r3, [r2, r3]
 80006de:	f003 031f 	and.w	r3, r3, #31
 80006e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006e4:	fa22 f303 	lsr.w	r3, r2, r3
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <SystemCoreClockUpdate+0x2ec>)
 80006ea:	6013      	str	r3, [r2, #0]

#if defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <SystemCoreClockUpdate+0x2f0>)
 80006ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f0:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */
}
 80006f2:	bf00      	nop
 80006f4:	372c      	adds	r7, #44	@ 0x2c
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	58024400 	.word	0x58024400
 8000704:	03d09000 	.word	0x03d09000
 8000708:	003d0900 	.word	0x003d0900
 800070c:	017d7840 	.word	0x017d7840
 8000710:	46000000 	.word	0x46000000
 8000714:	4a742400 	.word	0x4a742400
 8000718:	4bbebc20 	.word	0x4bbebc20
 800071c:	08000b50 	.word	0x08000b50
 8000720:	24000004 	.word	0x24000004
 8000724:	24000000 	.word	0x24000000

08000728 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <ExitRun0Mode+0x2c>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <ExitRun0Mode+0x2c>)
 8000732:	f023 0302 	bic.w	r3, r3, #2
 8000736:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000738:	bf00      	nop
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <ExitRun0Mode+0x2c>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f9      	beq.n	800073a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	58024800 	.word	0x58024800

08000758 <sck_high>:
#define SPI_MOSI       8u                     // Pin para MOSI (Master Out Slave In) PA8
#define SPI_MISO       6u                     // Pin para MISO (Master In Slave Out) PA6
#define SPI_CS         4u                     // Pin para CS (Chip Select) PA4

/* ===== Helpers GPIO: escritura rápida usando BSRR ===== */
static inline void sck_high(void) { SPI_PORT->BSRR = (1u << SPI_SCK); }         // Pone SCK en alto
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
 800075c:	4b03      	ldr	r3, [pc, #12]	@ (800076c <sck_high+0x14>)
 800075e:	2220      	movs	r2, #32
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	58020000 	.word	0x58020000

08000770 <sck_low>:
static inline void sck_low(void)   { SPI_PORT->BSRR = (1u << (SPI_SCK + 16u)); } // Pone SCK en bajo
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <sck_low+0x18>)
 8000776:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800077a:	619a      	str	r2, [r3, #24]
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	58020000 	.word	0x58020000

0800078c <mosi_high>:
static inline void mosi_high(void) { SPI_PORT->BSRR = (1u << SPI_MOSI); }        // Pone MOSI en alto
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <mosi_high+0x18>)
 8000792:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000796:	619a      	str	r2, [r3, #24]
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	58020000 	.word	0x58020000

080007a8 <mosi_low>:
static inline void mosi_low(void)  { SPI_PORT->BSRR = (1u << (SPI_MOSI + 16u)); }// Pone MOSI en bajo
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <mosi_low+0x18>)
 80007ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80007b2:	619a      	str	r2, [r3, #24]
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	58020000 	.word	0x58020000

080007c4 <cs_high>:
static inline void cs_high(void)   { SPI_PORT->BSRR = (1u << SPI_CS); }          // Desactiva CS
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <cs_high+0x14>)
 80007ca:	2210      	movs	r2, #16
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	58020000 	.word	0x58020000

080007dc <cs_low>:
static inline void cs_low(void)    { SPI_PORT->BSRR = (1u << (SPI_CS + 16u)); }  // Activa CS
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <cs_low+0x18>)
 80007e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80007e6:	619a      	str	r2, [r3, #24]
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	58020000 	.word	0x58020000

080007f8 <DWT_Init>:

/* ===== Inicialización DWT para delays precisos ===== */
static void DWT_Init(void) {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Habilita el contador DWT
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <DWT_Init+0x34>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <DWT_Init+0x34>)
 8000802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000806:	60d3      	str	r3, [r2, #12]
    DWT->LAR = 0xC5ACCE55;  // Desbloquea los registros internos del DWT, incluyendo el contador de ciclos (CYCCNT) y los contadores de watchpoints,
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <DWT_Init+0x38>)
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <DWT_Init+0x3c>)
 800080c:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
                             // permitiendo configurarlos y generar delays precisos. Requerido en STM32H7 para habilitar medición de tiempo.
    DWT->CYCCNT = 0;                                // Reinicia contador
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <DWT_Init+0x38>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Activa contador
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <DWT_Init+0x38>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <DWT_Init+0x38>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6013      	str	r3, [r2, #0]
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000edf0 	.word	0xe000edf0
 8000830:	e0001000 	.word	0xe0001000
 8000834:	c5acce55 	.word	0xc5acce55

08000838 <delay_cycles>:

/* ===== Delay en ciclos de CPU ===== */
static inline void delay_cycles(uint32_t cycles) {
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <delay_cycles+0x30>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	60fb      	str	r3, [r7, #12]
    while ((uint32_t)(DWT->CYCCNT - start) < cycles) { __NOP(); }
 8000846:	e000      	b.n	800084a <delay_cycles+0x12>
 8000848:	bf00      	nop
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <delay_cycles+0x30>)
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	429a      	cmp	r2, r3
 8000856:	d8f7      	bhi.n	8000848 <delay_cycles+0x10>
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e0001000 	.word	0xe0001000

0800086c <GPIO_Init_SPI>:

/* ===== Inicialización de GPIO para SPI ===== */
static void GPIO_Init_SPI(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
    // Habilita el reloj del puerto
    RCC->AHB4ENR |= SPI_PORT_ENR;
 8000872:	4b37      	ldr	r3, [pc, #220]	@ (8000950 <GPIO_Init_SPI+0xe4>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000878:	4a35      	ldr	r2, [pc, #212]	@ (8000950 <GPIO_Init_SPI+0xe4>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

    // Configura SCK, MOSI y CS como salida push-pull, velocidad muy alta, sin pull-up/down
    uint32_t pins[] = {SPI_SCK, SPI_MOSI, SPI_CS};
 8000882:	4a34      	ldr	r2, [pc, #208]	@ (8000954 <GPIO_Init_SPI+0xe8>)
 8000884:	463b      	mov	r3, r7
 8000886:	ca07      	ldmia	r2, {r0, r1, r2}
 8000888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    for(int i=0; i<3; i++){
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e04f      	b.n	8000932 <GPIO_Init_SPI+0xc6>
        SPI_PORT->MODER   &= ~(3u << (pins[i]*2)); // Limpia modo
 8000892:	4b31      	ldr	r3, [pc, #196]	@ (8000958 <GPIO_Init_SPI+0xec>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	3310      	adds	r3, #16
 800089c:	443b      	add	r3, r7
 800089e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	2103      	movs	r1, #3
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	492a      	ldr	r1, [pc, #168]	@ (8000958 <GPIO_Init_SPI+0xec>)
 80008ae:	4013      	ands	r3, r2
 80008b0:	600b      	str	r3, [r1, #0]
        SPI_PORT->MODER   |=  (1u << (pins[i]*2)); // 01 = output
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <GPIO_Init_SPI+0xec>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	3310      	adds	r3, #16
 80008bc:	443b      	add	r3, r7
 80008be:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2101      	movs	r1, #1
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	4923      	ldr	r1, [pc, #140]	@ (8000958 <GPIO_Init_SPI+0xec>)
 80008cc:	4313      	orrs	r3, r2
 80008ce:	600b      	str	r3, [r1, #0]
        SPI_PORT->OTYPER  &= ~(1u << pins[i]);     // Push-pull
 80008d0:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <GPIO_Init_SPI+0xec>)
 80008d2:	685a      	ldr	r2, [r3, #4]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	3310      	adds	r3, #16
 80008da:	443b      	add	r3, r7
 80008dc:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80008e0:	2101      	movs	r1, #1
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	491b      	ldr	r1, [pc, #108]	@ (8000958 <GPIO_Init_SPI+0xec>)
 80008ea:	4013      	ands	r3, r2
 80008ec:	604b      	str	r3, [r1, #4]
        SPI_PORT->OSPEEDR |=  (3u << (pins[i]*2)); // Very high speed
 80008ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <GPIO_Init_SPI+0xec>)
 80008f0:	689a      	ldr	r2, [r3, #8]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	3310      	adds	r3, #16
 80008f8:	443b      	add	r3, r7
 80008fa:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	2103      	movs	r1, #3
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	4914      	ldr	r1, [pc, #80]	@ (8000958 <GPIO_Init_SPI+0xec>)
 8000908:	4313      	orrs	r3, r2
 800090a:	608b      	str	r3, [r1, #8]
        SPI_PORT->PUPDR   &= ~(3u << (pins[i]*2)); // No pull
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <GPIO_Init_SPI+0xec>)
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	3310      	adds	r3, #16
 8000916:	443b      	add	r3, r7
 8000918:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	2103      	movs	r1, #3
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	490c      	ldr	r1, [pc, #48]	@ (8000958 <GPIO_Init_SPI+0xec>)
 8000928:	4013      	ands	r3, r2
 800092a:	60cb      	str	r3, [r1, #12]
    for(int i=0; i<3; i++){
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3301      	adds	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2b02      	cmp	r3, #2
 8000936:	ddac      	ble.n	8000892 <GPIO_Init_SPI+0x26>
    }

    // Estado inicial: SCK=0, MOSI=0, CS=1
    sck_low();
 8000938:	f7ff ff1a 	bl	8000770 <sck_low>
    mosi_high();
 800093c:	f7ff ff26 	bl	800078c <mosi_high>
    mosi_low();
 8000940:	f7ff ff32 	bl	80007a8 <mosi_low>
    cs_high();
 8000944:	f7ff ff3e 	bl	80007c4 <cs_high>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	58024400 	.word	0x58024400
 8000954:	08000b44 	.word	0x08000b44
 8000958:	58020000 	.word	0x58020000

0800095c <SPI_Transfer>:

/* ===== SPI bit-bang: master, 8 bits ===== */
static uint8_t SPI_Transfer(uint8_t data) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
    uint8_t received = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	73fb      	strb	r3, [r7, #15]
    cs_low(); // selecciona esclavo
 800096a:	f7ff ff37 	bl	80007dc <cs_low>

    // Recorre 8 bits, MSB primero
    for(int i=7; i>=0; i--){
 800096e:	2307      	movs	r3, #7
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	e026      	b.n	80009c2 <SPI_Transfer+0x66>
        // Configura MOSI según bit
        if(data & (1u << i)) mosi_high(); else mosi_low();
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	fa22 f303 	lsr.w	r3, r2, r3
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <SPI_Transfer+0x2e>
 8000984:	f7ff ff02 	bl	800078c <mosi_high>
 8000988:	e001      	b.n	800098e <SPI_Transfer+0x32>
 800098a:	f7ff ff0d 	bl	80007a8 <mosi_low>

        // Pulso de reloj
        sck_high();
 800098e:	f7ff fee3 	bl	8000758 <sck_high>
        delay_cycles(50); // Espera, ajusta según velocidad deseada
 8000992:	2032      	movs	r0, #50	@ 0x32
 8000994:	f7ff ff50 	bl	8000838 <delay_cycles>

        // Lee MISO (opcional)
        received <<= 1;
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
        if(SPI_PORT->IDR & (1u << SPI_MISO)) received |= 1;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <SPI_Transfer+0x7c>)
 80009a0:	691b      	ldr	r3, [r3, #16]
 80009a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <SPI_Transfer+0x56>
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]

        sck_low();
 80009b2:	f7ff fedd 	bl	8000770 <sck_low>
        delay_cycles(50);
 80009b6:	2032      	movs	r0, #50	@ 0x32
 80009b8:	f7ff ff3e 	bl	8000838 <delay_cycles>
    for(int i=7; i>=0; i--){
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3b01      	subs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dad5      	bge.n	8000974 <SPI_Transfer+0x18>
    }

    cs_high(); // Deselecciona slave
 80009c8:	f7ff fefc 	bl	80007c4 <cs_high>
    return received;
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	58020000 	.word	0x58020000

080009dc <main>:

/* ===== Main loop ===== */
int main(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
    SystemCoreClockUpdate(); // Actualiza SystemCoreClock (variable del sistema)
 80009e0:	f7ff fd28 	bl	8000434 <SystemCoreClockUpdate>
    // SystemCoreClock ahora contiene la frecuencia real del CPU (ej: 400000000 Hz)
    DWT_Init();              // Inicializa contador DWT
 80009e4:	f7ff ff08 	bl	80007f8 <DWT_Init>
    GPIO_Init_SPI();         // Inicializa pines SPI
 80009e8:	f7ff ff40 	bl	800086c <GPIO_Init_SPI>

    while(1) {
        SPI_Transfer(0x48);             // Envía letra 'H' (01001000 en binario)
 80009ec:	2048      	movs	r0, #72	@ 0x48
 80009ee:	f7ff ffb5 	bl	800095c <SPI_Transfer>
        delay_cycles(SystemCoreClock);  // Espera ~1.0 s
 80009f2:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <main+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff1e 	bl	8000838 <delay_cycles>
        SPI_Transfer(0x48);             // Envía letra 'H' (01001000 en binario)
 80009fc:	bf00      	nop
 80009fe:	e7f5      	b.n	80009ec <main+0x10>
 8000a00:	24000000 	.word	0x24000000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x4>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 f82f 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000aa0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000a68:	f7ff fe5e 	bl	8000728 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a6c:	f7ff fc34 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	@ (8000aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f000 f825 	bl	8000ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff ff9f 	bl	80009dc <main>
  bx  lr
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000aa4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000aa8:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
 8000aac:	08000b68 	.word	0x08000b68
  ldr r2, =_sbss
 8000ab0:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
 8000ab4:	2400002c 	.word	0x2400002c

08000ab8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC3_IRQHandler>
	...

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	24000008 	.word	0x24000008
 8000ae0:	24000028 	.word	0x24000028

08000ae4 <__libc_init_array>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	4d0d      	ldr	r5, [pc, #52]	@ (8000b1c <__libc_init_array+0x38>)
 8000ae8:	4c0d      	ldr	r4, [pc, #52]	@ (8000b20 <__libc_init_array+0x3c>)
 8000aea:	1b64      	subs	r4, r4, r5
 8000aec:	10a4      	asrs	r4, r4, #2
 8000aee:	2600      	movs	r6, #0
 8000af0:	42a6      	cmp	r6, r4
 8000af2:	d109      	bne.n	8000b08 <__libc_init_array+0x24>
 8000af4:	4d0b      	ldr	r5, [pc, #44]	@ (8000b24 <__libc_init_array+0x40>)
 8000af6:	4c0c      	ldr	r4, [pc, #48]	@ (8000b28 <__libc_init_array+0x44>)
 8000af8:	f000 f818 	bl	8000b2c <_init>
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	10a4      	asrs	r4, r4, #2
 8000b00:	2600      	movs	r6, #0
 8000b02:	42a6      	cmp	r6, r4
 8000b04:	d105      	bne.n	8000b12 <__libc_init_array+0x2e>
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b0c:	4798      	blx	r3
 8000b0e:	3601      	adds	r6, #1
 8000b10:	e7ee      	b.n	8000af0 <__libc_init_array+0xc>
 8000b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b16:	4798      	blx	r3
 8000b18:	3601      	adds	r6, #1
 8000b1a:	e7f2      	b.n	8000b02 <__libc_init_array+0x1e>
 8000b1c:	08000b60 	.word	0x08000b60
 8000b20:	08000b60 	.word	0x08000b60
 8000b24:	08000b60 	.word	0x08000b60
 8000b28:	08000b64 	.word	0x08000b64

08000b2c <_init>:
 8000b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2e:	bf00      	nop
 8000b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b32:	bc08      	pop	{r3}
 8000b34:	469e      	mov	lr, r3
 8000b36:	4770      	bx	lr

08000b38 <_fini>:
 8000b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3a:	bf00      	nop
 8000b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3e:	bc08      	pop	{r3}
 8000b40:	469e      	mov	lr, r3
 8000b42:	4770      	bx	lr
