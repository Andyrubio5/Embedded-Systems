
SPI_GPIOS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bcc  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08102e64  08102e64  00003e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08102e98  08102e98  00003e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08102ea0  08102ea0  00003ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08102ea4  08102ea4  00003ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  10000000  08102ea8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000cc  1000002c  08102ed4  0000402c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100000f8  08102ed4  000040f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f12f  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f75  00000000  00000000  0001318b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b58  00000000  00000000  00015100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008ab  00000000  00000000  00015c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038e0c  00000000  00000000  00016503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000edcc  00000000  00000000  0004f30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177e22  00000000  00000000  0005e0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d5efd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002df8  00000000  00000000  001d5f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007a  00000000  00000000  001d8d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000002c 	.word	0x1000002c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08102e4c 	.word	0x08102e4c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000030 	.word	0x10000030
 81002d4:	08102e4c 	.word	0x08102e4c

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 81002ec:	f000 b988 	b.w	8100600 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	468e      	mov	lr, r1
 8100310:	4604      	mov	r4, r0
 8100312:	4688      	mov	r8, r1
 8100314:	2b00      	cmp	r3, #0
 8100316:	d14a      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d962      	bls.n	81003e4 <__udivmoddi4+0xdc>
 810031e:	fab2 f682 	clz	r6, r2
 8100322:	b14e      	cbz	r6, 8100338 <__udivmoddi4+0x30>
 8100324:	f1c6 0320 	rsb	r3, r6, #32
 8100328:	fa01 f806 	lsl.w	r8, r1, r6
 810032c:	fa20 f303 	lsr.w	r3, r0, r3
 8100330:	40b7      	lsls	r7, r6
 8100332:	ea43 0808 	orr.w	r8, r3, r8
 8100336:	40b4      	lsls	r4, r6
 8100338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810033c:	fa1f fc87 	uxth.w	ip, r7
 8100340:	fbb8 f1fe 	udiv	r1, r8, lr
 8100344:	0c23      	lsrs	r3, r4, #16
 8100346:	fb0e 8811 	mls	r8, lr, r1, r8
 810034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034e:	fb01 f20c 	mul.w	r2, r1, ip
 8100352:	429a      	cmp	r2, r3
 8100354:	d909      	bls.n	810036a <__udivmoddi4+0x62>
 8100356:	18fb      	adds	r3, r7, r3
 8100358:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 810035c:	f080 80ea 	bcs.w	8100534 <__udivmoddi4+0x22c>
 8100360:	429a      	cmp	r2, r3
 8100362:	f240 80e7 	bls.w	8100534 <__udivmoddi4+0x22c>
 8100366:	3902      	subs	r1, #2
 8100368:	443b      	add	r3, r7
 810036a:	1a9a      	subs	r2, r3, r2
 810036c:	b2a3      	uxth	r3, r4
 810036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100372:	fb0e 2210 	mls	r2, lr, r0, r2
 8100376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810037a:	fb00 fc0c 	mul.w	ip, r0, ip
 810037e:	459c      	cmp	ip, r3
 8100380:	d909      	bls.n	8100396 <__udivmoddi4+0x8e>
 8100382:	18fb      	adds	r3, r7, r3
 8100384:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8100388:	f080 80d6 	bcs.w	8100538 <__udivmoddi4+0x230>
 810038c:	459c      	cmp	ip, r3
 810038e:	f240 80d3 	bls.w	8100538 <__udivmoddi4+0x230>
 8100392:	443b      	add	r3, r7
 8100394:	3802      	subs	r0, #2
 8100396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810039a:	eba3 030c 	sub.w	r3, r3, ip
 810039e:	2100      	movs	r1, #0
 81003a0:	b11d      	cbz	r5, 81003aa <__udivmoddi4+0xa2>
 81003a2:	40f3      	lsrs	r3, r6
 81003a4:	2200      	movs	r2, #0
 81003a6:	e9c5 3200 	strd	r3, r2, [r5]
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d905      	bls.n	81003be <__udivmoddi4+0xb6>
 81003b2:	b10d      	cbz	r5, 81003b8 <__udivmoddi4+0xb0>
 81003b4:	e9c5 0100 	strd	r0, r1, [r5]
 81003b8:	2100      	movs	r1, #0
 81003ba:	4608      	mov	r0, r1
 81003bc:	e7f5      	b.n	81003aa <__udivmoddi4+0xa2>
 81003be:	fab3 f183 	clz	r1, r3
 81003c2:	2900      	cmp	r1, #0
 81003c4:	d146      	bne.n	8100454 <__udivmoddi4+0x14c>
 81003c6:	4573      	cmp	r3, lr
 81003c8:	d302      	bcc.n	81003d0 <__udivmoddi4+0xc8>
 81003ca:	4282      	cmp	r2, r0
 81003cc:	f200 8105 	bhi.w	81005da <__udivmoddi4+0x2d2>
 81003d0:	1a84      	subs	r4, r0, r2
 81003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 81003d6:	2001      	movs	r0, #1
 81003d8:	4690      	mov	r8, r2
 81003da:	2d00      	cmp	r5, #0
 81003dc:	d0e5      	beq.n	81003aa <__udivmoddi4+0xa2>
 81003de:	e9c5 4800 	strd	r4, r8, [r5]
 81003e2:	e7e2      	b.n	81003aa <__udivmoddi4+0xa2>
 81003e4:	2a00      	cmp	r2, #0
 81003e6:	f000 8090 	beq.w	810050a <__udivmoddi4+0x202>
 81003ea:	fab2 f682 	clz	r6, r2
 81003ee:	2e00      	cmp	r6, #0
 81003f0:	f040 80a4 	bne.w	810053c <__udivmoddi4+0x234>
 81003f4:	1a8a      	subs	r2, r1, r2
 81003f6:	0c03      	lsrs	r3, r0, #16
 81003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003fc:	b280      	uxth	r0, r0
 81003fe:	b2bc      	uxth	r4, r7
 8100400:	2101      	movs	r1, #1
 8100402:	fbb2 fcfe 	udiv	ip, r2, lr
 8100406:	fb0e 221c 	mls	r2, lr, ip, r2
 810040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810040e:	fb04 f20c 	mul.w	r2, r4, ip
 8100412:	429a      	cmp	r2, r3
 8100414:	d907      	bls.n	8100426 <__udivmoddi4+0x11e>
 8100416:	18fb      	adds	r3, r7, r3
 8100418:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 810041c:	d202      	bcs.n	8100424 <__udivmoddi4+0x11c>
 810041e:	429a      	cmp	r2, r3
 8100420:	f200 80e0 	bhi.w	81005e4 <__udivmoddi4+0x2dc>
 8100424:	46c4      	mov	ip, r8
 8100426:	1a9b      	subs	r3, r3, r2
 8100428:	fbb3 f2fe 	udiv	r2, r3, lr
 810042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8100430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100434:	fb02 f404 	mul.w	r4, r2, r4
 8100438:	429c      	cmp	r4, r3
 810043a:	d907      	bls.n	810044c <__udivmoddi4+0x144>
 810043c:	18fb      	adds	r3, r7, r3
 810043e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8100442:	d202      	bcs.n	810044a <__udivmoddi4+0x142>
 8100444:	429c      	cmp	r4, r3
 8100446:	f200 80ca 	bhi.w	81005de <__udivmoddi4+0x2d6>
 810044a:	4602      	mov	r2, r0
 810044c:	1b1b      	subs	r3, r3, r4
 810044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100452:	e7a5      	b.n	81003a0 <__udivmoddi4+0x98>
 8100454:	f1c1 0620 	rsb	r6, r1, #32
 8100458:	408b      	lsls	r3, r1
 810045a:	fa22 f706 	lsr.w	r7, r2, r6
 810045e:	431f      	orrs	r7, r3
 8100460:	fa0e f401 	lsl.w	r4, lr, r1
 8100464:	fa20 f306 	lsr.w	r3, r0, r6
 8100468:	fa2e fe06 	lsr.w	lr, lr, r6
 810046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100470:	4323      	orrs	r3, r4
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	fa1f fc87 	uxth.w	ip, r7
 810047a:	fbbe f0f9 	udiv	r0, lr, r9
 810047e:	0c1c      	lsrs	r4, r3, #16
 8100480:	fb09 ee10 	mls	lr, r9, r0, lr
 8100484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100488:	fb00 fe0c 	mul.w	lr, r0, ip
 810048c:	45a6      	cmp	lr, r4
 810048e:	fa02 f201 	lsl.w	r2, r2, r1
 8100492:	d909      	bls.n	81004a8 <__udivmoddi4+0x1a0>
 8100494:	193c      	adds	r4, r7, r4
 8100496:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 810049a:	f080 809c 	bcs.w	81005d6 <__udivmoddi4+0x2ce>
 810049e:	45a6      	cmp	lr, r4
 81004a0:	f240 8099 	bls.w	81005d6 <__udivmoddi4+0x2ce>
 81004a4:	3802      	subs	r0, #2
 81004a6:	443c      	add	r4, r7
 81004a8:	eba4 040e 	sub.w	r4, r4, lr
 81004ac:	fa1f fe83 	uxth.w	lr, r3
 81004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 81004b4:	fb09 4413 	mls	r4, r9, r3, r4
 81004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c0:	45a4      	cmp	ip, r4
 81004c2:	d908      	bls.n	81004d6 <__udivmoddi4+0x1ce>
 81004c4:	193c      	adds	r4, r7, r4
 81004c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 81004ca:	f080 8082 	bcs.w	81005d2 <__udivmoddi4+0x2ca>
 81004ce:	45a4      	cmp	ip, r4
 81004d0:	d97f      	bls.n	81005d2 <__udivmoddi4+0x2ca>
 81004d2:	3b02      	subs	r3, #2
 81004d4:	443c      	add	r4, r7
 81004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004da:	eba4 040c 	sub.w	r4, r4, ip
 81004de:	fba0 ec02 	umull	lr, ip, r0, r2
 81004e2:	4564      	cmp	r4, ip
 81004e4:	4673      	mov	r3, lr
 81004e6:	46e1      	mov	r9, ip
 81004e8:	d362      	bcc.n	81005b0 <__udivmoddi4+0x2a8>
 81004ea:	d05f      	beq.n	81005ac <__udivmoddi4+0x2a4>
 81004ec:	b15d      	cbz	r5, 8100506 <__udivmoddi4+0x1fe>
 81004ee:	ebb8 0203 	subs.w	r2, r8, r3
 81004f2:	eb64 0409 	sbc.w	r4, r4, r9
 81004f6:	fa04 f606 	lsl.w	r6, r4, r6
 81004fa:	fa22 f301 	lsr.w	r3, r2, r1
 81004fe:	431e      	orrs	r6, r3
 8100500:	40cc      	lsrs	r4, r1
 8100502:	e9c5 6400 	strd	r6, r4, [r5]
 8100506:	2100      	movs	r1, #0
 8100508:	e74f      	b.n	81003aa <__udivmoddi4+0xa2>
 810050a:	fbb1 fcf2 	udiv	ip, r1, r2
 810050e:	0c01      	lsrs	r1, r0, #16
 8100510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100514:	b280      	uxth	r0, r0
 8100516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 810051a:	463b      	mov	r3, r7
 810051c:	4638      	mov	r0, r7
 810051e:	463c      	mov	r4, r7
 8100520:	46b8      	mov	r8, r7
 8100522:	46be      	mov	lr, r7
 8100524:	2620      	movs	r6, #32
 8100526:	fbb1 f1f7 	udiv	r1, r1, r7
 810052a:	eba2 0208 	sub.w	r2, r2, r8
 810052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8100532:	e766      	b.n	8100402 <__udivmoddi4+0xfa>
 8100534:	4601      	mov	r1, r0
 8100536:	e718      	b.n	810036a <__udivmoddi4+0x62>
 8100538:	4610      	mov	r0, r2
 810053a:	e72c      	b.n	8100396 <__udivmoddi4+0x8e>
 810053c:	f1c6 0220 	rsb	r2, r6, #32
 8100540:	fa2e f302 	lsr.w	r3, lr, r2
 8100544:	40b7      	lsls	r7, r6
 8100546:	40b1      	lsls	r1, r6
 8100548:	fa20 f202 	lsr.w	r2, r0, r2
 810054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100550:	430a      	orrs	r2, r1
 8100552:	fbb3 f8fe 	udiv	r8, r3, lr
 8100556:	b2bc      	uxth	r4, r7
 8100558:	fb0e 3318 	mls	r3, lr, r8, r3
 810055c:	0c11      	lsrs	r1, r2, #16
 810055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100562:	fb08 f904 	mul.w	r9, r8, r4
 8100566:	40b0      	lsls	r0, r6
 8100568:	4589      	cmp	r9, r1
 810056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810056e:	b280      	uxth	r0, r0
 8100570:	d93e      	bls.n	81005f0 <__udivmoddi4+0x2e8>
 8100572:	1879      	adds	r1, r7, r1
 8100574:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8100578:	d201      	bcs.n	810057e <__udivmoddi4+0x276>
 810057a:	4589      	cmp	r9, r1
 810057c:	d81f      	bhi.n	81005be <__udivmoddi4+0x2b6>
 810057e:	eba1 0109 	sub.w	r1, r1, r9
 8100582:	fbb1 f9fe 	udiv	r9, r1, lr
 8100586:	fb09 f804 	mul.w	r8, r9, r4
 810058a:	fb0e 1119 	mls	r1, lr, r9, r1
 810058e:	b292      	uxth	r2, r2
 8100590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100594:	4542      	cmp	r2, r8
 8100596:	d229      	bcs.n	81005ec <__udivmoddi4+0x2e4>
 8100598:	18ba      	adds	r2, r7, r2
 810059a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 810059e:	d2c4      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a0:	4542      	cmp	r2, r8
 81005a2:	d2c2      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a4:	f1a9 0102 	sub.w	r1, r9, #2
 81005a8:	443a      	add	r2, r7
 81005aa:	e7be      	b.n	810052a <__udivmoddi4+0x222>
 81005ac:	45f0      	cmp	r8, lr
 81005ae:	d29d      	bcs.n	81004ec <__udivmoddi4+0x1e4>
 81005b0:	ebbe 0302 	subs.w	r3, lr, r2
 81005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005b8:	3801      	subs	r0, #1
 81005ba:	46e1      	mov	r9, ip
 81005bc:	e796      	b.n	81004ec <__udivmoddi4+0x1e4>
 81005be:	eba7 0909 	sub.w	r9, r7, r9
 81005c2:	4449      	add	r1, r9
 81005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 81005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 81005cc:	fb09 f804 	mul.w	r8, r9, r4
 81005d0:	e7db      	b.n	810058a <__udivmoddi4+0x282>
 81005d2:	4673      	mov	r3, lr
 81005d4:	e77f      	b.n	81004d6 <__udivmoddi4+0x1ce>
 81005d6:	4650      	mov	r0, sl
 81005d8:	e766      	b.n	81004a8 <__udivmoddi4+0x1a0>
 81005da:	4608      	mov	r0, r1
 81005dc:	e6fd      	b.n	81003da <__udivmoddi4+0xd2>
 81005de:	443b      	add	r3, r7
 81005e0:	3a02      	subs	r2, #2
 81005e2:	e733      	b.n	810044c <__udivmoddi4+0x144>
 81005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005e8:	443b      	add	r3, r7
 81005ea:	e71c      	b.n	8100426 <__udivmoddi4+0x11e>
 81005ec:	4649      	mov	r1, r9
 81005ee:	e79c      	b.n	810052a <__udivmoddi4+0x222>
 81005f0:	eba1 0109 	sub.w	r1, r1, r9
 81005f4:	46c4      	mov	ip, r8
 81005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81005fa:	fb09 f804 	mul.w	r8, r9, r4
 81005fe:	e7c4      	b.n	810058a <__udivmoddi4+0x282>

08100600 <__aeabi_idiv0>:
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop

08100604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100604:	b480      	push	{r7}
 8100606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100608:	4b09      	ldr	r3, [pc, #36]	@ (8100630 <SystemInit+0x2c>)
 810060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810060e:	4a08      	ldr	r2, [pc, #32]	@ (8100630 <SystemInit+0x2c>)
 8100610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100618:	4b05      	ldr	r3, [pc, #20]	@ (8100630 <SystemInit+0x2c>)
 810061a:	691b      	ldr	r3, [r3, #16]
 810061c:	4a04      	ldr	r2, [pc, #16]	@ (8100630 <SystemInit+0x2c>)
 810061e:	f043 0310 	orr.w	r3, r3, #16
 8100622:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100624:	bf00      	nop
 8100626:	46bd      	mov	sp, r7
 8100628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810062c:	4770      	bx	lr
 810062e:	bf00      	nop
 8100630:	e000ed00 	.word	0xe000ed00

08100634 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100634:	b480      	push	{r7}
 8100636:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100638:	4b09      	ldr	r3, [pc, #36]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063a:	68db      	ldr	r3, [r3, #12]
 810063c:	4a08      	ldr	r2, [pc, #32]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063e:	f023 0302 	bic.w	r3, r3, #2
 8100642:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100644:	bf00      	nop
 8100646:	4b06      	ldr	r3, [pc, #24]	@ (8100660 <ExitRun0Mode+0x2c>)
 8100648:	685b      	ldr	r3, [r3, #4]
 810064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810064e:	2b00      	cmp	r3, #0
 8100650:	d0f9      	beq.n	8100646 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100652:	bf00      	nop
 8100654:	bf00      	nop
 8100656:	46bd      	mov	sp, r7
 8100658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810065c:	4770      	bx	lr
 810065e:	bf00      	nop
 8100660:	58024800 	.word	0x58024800

08100664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100664:	b580      	push	{r7, lr}
 8100666:	b082      	sub	sp, #8
 8100668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810066a:	4b2d      	ldr	r3, [pc, #180]	@ (8100720 <main+0xbc>)
 810066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100670:	4a2b      	ldr	r2, [pc, #172]	@ (8100720 <main+0xbc>)
 8100672:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810067a:	4b29      	ldr	r3, [pc, #164]	@ (8100720 <main+0xbc>)
 810067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100684:	607b      	str	r3, [r7, #4]
 8100686:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100688:	2001      	movs	r0, #1
 810068a:	f000 fea9 	bl	81013e0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810068e:	f000 ff33 	bl	81014f8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100692:	2201      	movs	r2, #1
 8100694:	2102      	movs	r1, #2
 8100696:	2000      	movs	r0, #0
 8100698:	f000 feb4 	bl	8101404 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810069c:	4b21      	ldr	r3, [pc, #132]	@ (8100724 <main+0xc0>)
 810069e:	681b      	ldr	r3, [r3, #0]
 81006a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006a4:	2b70      	cmp	r3, #112	@ 0x70
 81006a6:	d108      	bne.n	81006ba <main+0x56>
 81006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8100728 <main+0xc4>)
 81006aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006ae:	4a1e      	ldr	r2, [pc, #120]	@ (8100728 <main+0xc4>)
 81006b0:	f043 0301 	orr.w	r3, r3, #1
 81006b4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006b8:	e007      	b.n	81006ca <main+0x66>
 81006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8100728 <main+0xc4>)
 81006bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006c0:	4a19      	ldr	r2, [pc, #100]	@ (8100728 <main+0xc4>)
 81006c2:	f043 0301 	orr.w	r3, r3, #1
 81006c6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006ca:	f000 fa7b 	bl	8100bc4 <HAL_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 81006ce:	2000      	movs	r0, #0
 81006d0:	f000 f8b0 	bl	8100834 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 81006d4:	2001      	movs	r0, #1
 81006d6:	f000 f8ad 	bl	8100834 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 81006da:	2002      	movs	r0, #2
 81006dc:	f000 f8aa 	bl	8100834 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 81006e0:	2101      	movs	r1, #1
 81006e2:	2000      	movs	r0, #0
 81006e4:	f000 f91c 	bl	8100920 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 81006e8:	4b10      	ldr	r3, [pc, #64]	@ (810072c <main+0xc8>)
 81006ea:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81006ee:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 81006f0:	4b0e      	ldr	r3, [pc, #56]	@ (810072c <main+0xc8>)
 81006f2:	2200      	movs	r2, #0
 81006f4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 81006f6:	4b0d      	ldr	r3, [pc, #52]	@ (810072c <main+0xc8>)
 81006f8:	2200      	movs	r2, #0
 81006fa:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 81006fc:	4b0b      	ldr	r3, [pc, #44]	@ (810072c <main+0xc8>)
 81006fe:	2200      	movs	r2, #0
 8100700:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8100702:	4b0a      	ldr	r3, [pc, #40]	@ (810072c <main+0xc8>)
 8100704:	2200      	movs	r2, #0
 8100706:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8100708:	4908      	ldr	r1, [pc, #32]	@ (810072c <main+0xc8>)
 810070a:	2000      	movs	r0, #0
 810070c:	f000 f998 	bl	8100a40 <BSP_COM_Init>
 8100710:	4603      	mov	r3, r0
 8100712:	2b00      	cmp	r3, #0
 8100714:	d002      	beq.n	810071c <main+0xb8>
  {
    Error_Handler();
 8100716:	f000 f80b 	bl	8100730 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810071a:	bf00      	nop
 810071c:	bf00      	nop
 810071e:	e7fd      	b.n	810071c <main+0xb8>
 8100720:	58024400 	.word	0x58024400
 8100724:	e000ed00 	.word	0xe000ed00
 8100728:	58026400 	.word	0x58026400
 810072c:	10000048 	.word	0x10000048

08100730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100730:	b480      	push	{r7}
 8100732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100734:	b672      	cpsid	i
}
 8100736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100738:	bf00      	nop
 810073a:	e7fd      	b.n	8100738 <Error_Handler+0x8>

0810073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810073c:	b480      	push	{r7}
 810073e:	b083      	sub	sp, #12
 8100740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100742:	4b0a      	ldr	r3, [pc, #40]	@ (810076c <HAL_MspInit+0x30>)
 8100744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100748:	4a08      	ldr	r2, [pc, #32]	@ (810076c <HAL_MspInit+0x30>)
 810074a:	f043 0302 	orr.w	r3, r3, #2
 810074e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100752:	4b06      	ldr	r3, [pc, #24]	@ (810076c <HAL_MspInit+0x30>)
 8100754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100758:	f003 0302 	and.w	r3, r3, #2
 810075c:	607b      	str	r3, [r7, #4]
 810075e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100760:	bf00      	nop
 8100762:	370c      	adds	r7, #12
 8100764:	46bd      	mov	sp, r7
 8100766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810076a:	4770      	bx	lr
 810076c:	58024400 	.word	0x58024400

08100770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100770:	b480      	push	{r7}
 8100772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100774:	bf00      	nop
 8100776:	e7fd      	b.n	8100774 <NMI_Handler+0x4>

08100778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100778:	b480      	push	{r7}
 810077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810077c:	bf00      	nop
 810077e:	e7fd      	b.n	810077c <HardFault_Handler+0x4>

08100780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100780:	b480      	push	{r7}
 8100782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100784:	bf00      	nop
 8100786:	e7fd      	b.n	8100784 <MemManage_Handler+0x4>

08100788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100788:	b480      	push	{r7}
 810078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810078c:	bf00      	nop
 810078e:	e7fd      	b.n	810078c <BusFault_Handler+0x4>

08100790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100790:	b480      	push	{r7}
 8100792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100794:	bf00      	nop
 8100796:	e7fd      	b.n	8100794 <UsageFault_Handler+0x4>

08100798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100798:	b480      	push	{r7}
 810079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810079c:	bf00      	nop
 810079e:	46bd      	mov	sp, r7
 81007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007a4:	4770      	bx	lr

081007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81007a6:	b480      	push	{r7}
 81007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81007aa:	bf00      	nop
 81007ac:	46bd      	mov	sp, r7
 81007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007b2:	4770      	bx	lr

081007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81007b4:	b480      	push	{r7}
 81007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81007b8:	bf00      	nop
 81007ba:	46bd      	mov	sp, r7
 81007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c0:	4770      	bx	lr

081007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81007c2:	b580      	push	{r7, lr}
 81007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81007c6:	f000 fa91 	bl	8100cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81007ca:	bf00      	nop
 81007cc:	bd80      	pop	{r7, pc}

081007ce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81007ce:	b580      	push	{r7, lr}
 81007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 81007d2:	2000      	movs	r0, #0
 81007d4:	f000 f916 	bl	8100a04 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 81007d8:	bf00      	nop
 81007da:	bd80      	pop	{r7, pc}

081007dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81007dc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8100818 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 81007e0:	f7ff ff28 	bl	8100634 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 81007e4:	f7ff ff0e 	bl	8100604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81007e8:	480c      	ldr	r0, [pc, #48]	@ (810081c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81007ea:	490d      	ldr	r1, [pc, #52]	@ (8100820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8100824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81007f0:	e002      	b.n	81007f8 <LoopCopyDataInit>

081007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81007f6:	3304      	adds	r3, #4

081007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81007fc:	d3f9      	bcc.n	81007f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8100828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100800:	4c0a      	ldr	r4, [pc, #40]	@ (810082c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100804:	e001      	b.n	810080a <LoopFillZerobss>

08100806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100808:	3204      	adds	r2, #4

0810080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810080c:	d3fb      	bcc.n	8100806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810080e:	f002 faf9 	bl	8102e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100812:	f7ff ff27 	bl	8100664 <main>
  bx  lr
 8100816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100818:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810081c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100820:	1000002c 	.word	0x1000002c
  ldr r2, =_sidata
 8100824:	08102ea8 	.word	0x08102ea8
  ldr r2, =_sbss
 8100828:	1000002c 	.word	0x1000002c
  ldr r4, =_ebss
 810082c:	100000f8 	.word	0x100000f8

08100830 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100830:	e7fe      	b.n	8100830 <ADC3_IRQHandler>
	...

08100834 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8100834:	b580      	push	{r7, lr}
 8100836:	b08c      	sub	sp, #48	@ 0x30
 8100838:	af00      	add	r7, sp, #0
 810083a:	4603      	mov	r3, r0
 810083c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 810083e:	2300      	movs	r3, #0
 8100840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8100842:	79fb      	ldrb	r3, [r7, #7]
 8100844:	2b00      	cmp	r3, #0
 8100846:	d009      	beq.n	810085c <BSP_LED_Init+0x28>
 8100848:	79fb      	ldrb	r3, [r7, #7]
 810084a:	2b01      	cmp	r3, #1
 810084c:	d006      	beq.n	810085c <BSP_LED_Init+0x28>
 810084e:	79fb      	ldrb	r3, [r7, #7]
 8100850:	2b02      	cmp	r3, #2
 8100852:	d003      	beq.n	810085c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8100854:	f06f 0301 	mvn.w	r3, #1
 8100858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810085a:	e055      	b.n	8100908 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 810085c:	79fb      	ldrb	r3, [r7, #7]
 810085e:	2b00      	cmp	r3, #0
 8100860:	d10f      	bne.n	8100882 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8100862:	4b2c      	ldr	r3, [pc, #176]	@ (8100914 <BSP_LED_Init+0xe0>)
 8100864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100868:	4a2a      	ldr	r2, [pc, #168]	@ (8100914 <BSP_LED_Init+0xe0>)
 810086a:	f043 0302 	orr.w	r3, r3, #2
 810086e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100872:	4b28      	ldr	r3, [pc, #160]	@ (8100914 <BSP_LED_Init+0xe0>)
 8100874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100878:	f003 0302 	and.w	r3, r3, #2
 810087c:	617b      	str	r3, [r7, #20]
 810087e:	697b      	ldr	r3, [r7, #20]
 8100880:	e021      	b.n	81008c6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8100882:	79fb      	ldrb	r3, [r7, #7]
 8100884:	2b01      	cmp	r3, #1
 8100886:	d10f      	bne.n	81008a8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8100888:	4b22      	ldr	r3, [pc, #136]	@ (8100914 <BSP_LED_Init+0xe0>)
 810088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810088e:	4a21      	ldr	r2, [pc, #132]	@ (8100914 <BSP_LED_Init+0xe0>)
 8100890:	f043 0310 	orr.w	r3, r3, #16
 8100894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100898:	4b1e      	ldr	r3, [pc, #120]	@ (8100914 <BSP_LED_Init+0xe0>)
 810089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810089e:	f003 0310 	and.w	r3, r3, #16
 81008a2:	613b      	str	r3, [r7, #16]
 81008a4:	693b      	ldr	r3, [r7, #16]
 81008a6:	e00e      	b.n	81008c6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 81008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8100914 <BSP_LED_Init+0xe0>)
 81008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008ae:	4a19      	ldr	r2, [pc, #100]	@ (8100914 <BSP_LED_Init+0xe0>)
 81008b0:	f043 0302 	orr.w	r3, r3, #2
 81008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008b8:	4b16      	ldr	r3, [pc, #88]	@ (8100914 <BSP_LED_Init+0xe0>)
 81008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008be:	f003 0302 	and.w	r3, r3, #2
 81008c2:	60fb      	str	r3, [r7, #12]
 81008c4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 81008c6:	79fb      	ldrb	r3, [r7, #7]
 81008c8:	4a13      	ldr	r2, [pc, #76]	@ (8100918 <BSP_LED_Init+0xe4>)
 81008ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81008ce:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 81008d0:	2301      	movs	r3, #1
 81008d2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 81008d4:	2300      	movs	r3, #0
 81008d6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81008d8:	2303      	movs	r3, #3
 81008da:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 81008dc:	79fb      	ldrb	r3, [r7, #7]
 81008de:	4a0f      	ldr	r2, [pc, #60]	@ (810091c <BSP_LED_Init+0xe8>)
 81008e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81008e4:	f107 0218 	add.w	r2, r7, #24
 81008e8:	4611      	mov	r1, r2
 81008ea:	4618      	mov	r0, r3
 81008ec:	f000 fbae 	bl	810104c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 81008f0:	79fb      	ldrb	r3, [r7, #7]
 81008f2:	4a0a      	ldr	r2, [pc, #40]	@ (810091c <BSP_LED_Init+0xe8>)
 81008f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 81008f8:	79fb      	ldrb	r3, [r7, #7]
 81008fa:	4a07      	ldr	r2, [pc, #28]	@ (8100918 <BSP_LED_Init+0xe4>)
 81008fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8100900:	2200      	movs	r2, #0
 8100902:	4619      	mov	r1, r3
 8100904:	f000 fd52 	bl	81013ac <HAL_GPIO_WritePin>
  }

  return ret;
 8100908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 810090a:	4618      	mov	r0, r3
 810090c:	3730      	adds	r7, #48	@ 0x30
 810090e:	46bd      	mov	sp, r7
 8100910:	bd80      	pop	{r7, pc}
 8100912:	bf00      	nop
 8100914:	58024400 	.word	0x58024400
 8100918:	08102e74 	.word	0x08102e74
 810091c:	1000000c 	.word	0x1000000c

08100920 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8100920:	b580      	push	{r7, lr}
 8100922:	b088      	sub	sp, #32
 8100924:	af00      	add	r7, sp, #0
 8100926:	4603      	mov	r3, r0
 8100928:	460a      	mov	r2, r1
 810092a:	71fb      	strb	r3, [r7, #7]
 810092c:	4613      	mov	r3, r2
 810092e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8100930:	4b2e      	ldr	r3, [pc, #184]	@ (81009ec <BSP_PB_Init+0xcc>)
 8100932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100936:	4a2d      	ldr	r2, [pc, #180]	@ (81009ec <BSP_PB_Init+0xcc>)
 8100938:	f043 0304 	orr.w	r3, r3, #4
 810093c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100940:	4b2a      	ldr	r3, [pc, #168]	@ (81009ec <BSP_PB_Init+0xcc>)
 8100942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100946:	f003 0304 	and.w	r3, r3, #4
 810094a:	60bb      	str	r3, [r7, #8]
 810094c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 810094e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8100952:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8100954:	2302      	movs	r3, #2
 8100956:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8100958:	2302      	movs	r3, #2
 810095a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 810095c:	79bb      	ldrb	r3, [r7, #6]
 810095e:	2b00      	cmp	r3, #0
 8100960:	d10c      	bne.n	810097c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8100962:	2300      	movs	r3, #0
 8100964:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8100966:	79fb      	ldrb	r3, [r7, #7]
 8100968:	4a21      	ldr	r2, [pc, #132]	@ (81009f0 <BSP_PB_Init+0xd0>)
 810096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810096e:	f107 020c 	add.w	r2, r7, #12
 8100972:	4611      	mov	r1, r2
 8100974:	4618      	mov	r0, r3
 8100976:	f000 fb69 	bl	810104c <HAL_GPIO_Init>
 810097a:	e031      	b.n	81009e0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 810097c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8100980:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8100982:	79fb      	ldrb	r3, [r7, #7]
 8100984:	4a1a      	ldr	r2, [pc, #104]	@ (81009f0 <BSP_PB_Init+0xd0>)
 8100986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810098a:	f107 020c 	add.w	r2, r7, #12
 810098e:	4611      	mov	r1, r2
 8100990:	4618      	mov	r0, r3
 8100992:	f000 fb5b 	bl	810104c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8100996:	79fb      	ldrb	r3, [r7, #7]
 8100998:	00db      	lsls	r3, r3, #3
 810099a:	4a16      	ldr	r2, [pc, #88]	@ (81009f4 <BSP_PB_Init+0xd4>)
 810099c:	441a      	add	r2, r3
 810099e:	79fb      	ldrb	r3, [r7, #7]
 81009a0:	4915      	ldr	r1, [pc, #84]	@ (81009f8 <BSP_PB_Init+0xd8>)
 81009a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 81009a6:	4619      	mov	r1, r3
 81009a8:	4610      	mov	r0, r2
 81009aa:	f000 fb00 	bl	8100fae <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 81009ae:	79fb      	ldrb	r3, [r7, #7]
 81009b0:	00db      	lsls	r3, r3, #3
 81009b2:	4a10      	ldr	r2, [pc, #64]	@ (81009f4 <BSP_PB_Init+0xd4>)
 81009b4:	1898      	adds	r0, r3, r2
 81009b6:	79fb      	ldrb	r3, [r7, #7]
 81009b8:	4a10      	ldr	r2, [pc, #64]	@ (81009fc <BSP_PB_Init+0xdc>)
 81009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81009be:	461a      	mov	r2, r3
 81009c0:	2100      	movs	r1, #0
 81009c2:	f000 fad5 	bl	8100f70 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 81009c6:	2028      	movs	r0, #40	@ 0x28
 81009c8:	79fb      	ldrb	r3, [r7, #7]
 81009ca:	4a0d      	ldr	r2, [pc, #52]	@ (8100a00 <BSP_PB_Init+0xe0>)
 81009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81009d0:	2200      	movs	r2, #0
 81009d2:	4619      	mov	r1, r3
 81009d4:	f000 fa85 	bl	8100ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 81009d8:	2328      	movs	r3, #40	@ 0x28
 81009da:	4618      	mov	r0, r3
 81009dc:	f000 fa9b 	bl	8100f16 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 81009e0:	2300      	movs	r3, #0
}
 81009e2:	4618      	mov	r0, r3
 81009e4:	3720      	adds	r7, #32
 81009e6:	46bd      	mov	sp, r7
 81009e8:	bd80      	pop	{r7, pc}
 81009ea:	bf00      	nop
 81009ec:	58024400 	.word	0x58024400
 81009f0:	10000018 	.word	0x10000018
 81009f4:	10000058 	.word	0x10000058
 81009f8:	08102e7c 	.word	0x08102e7c
 81009fc:	1000001c 	.word	0x1000001c
 8100a00:	10000020 	.word	0x10000020

08100a04 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8100a04:	b580      	push	{r7, lr}
 8100a06:	b082      	sub	sp, #8
 8100a08:	af00      	add	r7, sp, #0
 8100a0a:	4603      	mov	r3, r0
 8100a0c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8100a0e:	79fb      	ldrb	r3, [r7, #7]
 8100a10:	00db      	lsls	r3, r3, #3
 8100a12:	4a04      	ldr	r2, [pc, #16]	@ (8100a24 <BSP_PB_IRQHandler+0x20>)
 8100a14:	4413      	add	r3, r2
 8100a16:	4618      	mov	r0, r3
 8100a18:	f000 fadd 	bl	8100fd6 <HAL_EXTI_IRQHandler>
}
 8100a1c:	bf00      	nop
 8100a1e:	3708      	adds	r7, #8
 8100a20:	46bd      	mov	sp, r7
 8100a22:	bd80      	pop	{r7, pc}
 8100a24:	10000058 	.word	0x10000058

08100a28 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8100a28:	b480      	push	{r7}
 8100a2a:	b083      	sub	sp, #12
 8100a2c:	af00      	add	r7, sp, #0
 8100a2e:	4603      	mov	r3, r0
 8100a30:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8100a32:	bf00      	nop
 8100a34:	370c      	adds	r7, #12
 8100a36:	46bd      	mov	sp, r7
 8100a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a3c:	4770      	bx	lr
	...

08100a40 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8100a40:	b580      	push	{r7, lr}
 8100a42:	b084      	sub	sp, #16
 8100a44:	af00      	add	r7, sp, #0
 8100a46:	4603      	mov	r3, r0
 8100a48:	6039      	str	r1, [r7, #0]
 8100a4a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8100a4c:	2300      	movs	r3, #0
 8100a4e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8100a50:	79fb      	ldrb	r3, [r7, #7]
 8100a52:	2b00      	cmp	r3, #0
 8100a54:	d003      	beq.n	8100a5e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8100a56:	f06f 0301 	mvn.w	r3, #1
 8100a5a:	60fb      	str	r3, [r7, #12]
 8100a5c:	e018      	b.n	8100a90 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8100a5e:	79fb      	ldrb	r3, [r7, #7]
 8100a60:	2294      	movs	r2, #148	@ 0x94
 8100a62:	fb02 f303 	mul.w	r3, r2, r3
 8100a66:	4a0d      	ldr	r2, [pc, #52]	@ (8100a9c <BSP_COM_Init+0x5c>)
 8100a68:	4413      	add	r3, r2
 8100a6a:	4618      	mov	r0, r3
 8100a6c:	f000 f852 	bl	8100b14 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8100a70:	79fb      	ldrb	r3, [r7, #7]
 8100a72:	2294      	movs	r2, #148	@ 0x94
 8100a74:	fb02 f303 	mul.w	r3, r2, r3
 8100a78:	4a08      	ldr	r2, [pc, #32]	@ (8100a9c <BSP_COM_Init+0x5c>)
 8100a7a:	4413      	add	r3, r2
 8100a7c:	6839      	ldr	r1, [r7, #0]
 8100a7e:	4618      	mov	r0, r3
 8100a80:	f000 f80e 	bl	8100aa0 <MX_USART3_Init>
 8100a84:	4603      	mov	r3, r0
 8100a86:	2b00      	cmp	r3, #0
 8100a88:	d002      	beq.n	8100a90 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8100a8a:	f06f 0303 	mvn.w	r3, #3
 8100a8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8100a90:	68fb      	ldr	r3, [r7, #12]
}
 8100a92:	4618      	mov	r0, r3
 8100a94:	3710      	adds	r7, #16
 8100a96:	46bd      	mov	sp, r7
 8100a98:	bd80      	pop	{r7, pc}
 8100a9a:	bf00      	nop
 8100a9c:	10000060 	.word	0x10000060

08100aa0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8100aa0:	b580      	push	{r7, lr}
 8100aa2:	b082      	sub	sp, #8
 8100aa4:	af00      	add	r7, sp, #0
 8100aa6:	6078      	str	r0, [r7, #4]
 8100aa8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8100aaa:	4b15      	ldr	r3, [pc, #84]	@ (8100b00 <MX_USART3_Init+0x60>)
 8100aac:	681a      	ldr	r2, [r3, #0]
 8100aae:	687b      	ldr	r3, [r7, #4]
 8100ab0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8100ab2:	683b      	ldr	r3, [r7, #0]
 8100ab4:	681a      	ldr	r2, [r3, #0]
 8100ab6:	687b      	ldr	r3, [r7, #4]
 8100ab8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8100aba:	687b      	ldr	r3, [r7, #4]
 8100abc:	220c      	movs	r2, #12
 8100abe:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8100ac0:	683b      	ldr	r3, [r7, #0]
 8100ac2:	895b      	ldrh	r3, [r3, #10]
 8100ac4:	461a      	mov	r2, r3
 8100ac6:	687b      	ldr	r3, [r7, #4]
 8100ac8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8100aca:	683b      	ldr	r3, [r7, #0]
 8100acc:	685a      	ldr	r2, [r3, #4]
 8100ace:	687b      	ldr	r3, [r7, #4]
 8100ad0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8100ad2:	683b      	ldr	r3, [r7, #0]
 8100ad4:	891b      	ldrh	r3, [r3, #8]
 8100ad6:	461a      	mov	r2, r3
 8100ad8:	687b      	ldr	r3, [r7, #4]
 8100ada:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8100adc:	683b      	ldr	r3, [r7, #0]
 8100ade:	899b      	ldrh	r3, [r3, #12]
 8100ae0:	461a      	mov	r2, r3
 8100ae2:	687b      	ldr	r3, [r7, #4]
 8100ae4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8100ae6:	687b      	ldr	r3, [r7, #4]
 8100ae8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8100aec:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8100aee:	6878      	ldr	r0, [r7, #4]
 8100af0:	f001 f9a6 	bl	8101e40 <HAL_UART_Init>
 8100af4:	4603      	mov	r3, r0
}
 8100af6:	4618      	mov	r0, r3
 8100af8:	3708      	adds	r7, #8
 8100afa:	46bd      	mov	sp, r7
 8100afc:	bd80      	pop	{r7, pc}
 8100afe:	bf00      	nop
 8100b00:	10000008 	.word	0x10000008

08100b04 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8100b04:	b580      	push	{r7, lr}
 8100b06:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8100b08:	2000      	movs	r0, #0
 8100b0a:	f7ff ff8d 	bl	8100a28 <BSP_PB_Callback>
}
 8100b0e:	bf00      	nop
 8100b10:	bd80      	pop	{r7, pc}
	...

08100b14 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8100b14:	b580      	push	{r7, lr}
 8100b16:	b08a      	sub	sp, #40	@ 0x28
 8100b18:	af00      	add	r7, sp, #0
 8100b1a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8100b1c:	4b27      	ldr	r3, [pc, #156]	@ (8100bbc <COM1_MspInit+0xa8>)
 8100b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b22:	4a26      	ldr	r2, [pc, #152]	@ (8100bbc <COM1_MspInit+0xa8>)
 8100b24:	f043 0308 	orr.w	r3, r3, #8
 8100b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b2c:	4b23      	ldr	r3, [pc, #140]	@ (8100bbc <COM1_MspInit+0xa8>)
 8100b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b32:	f003 0308 	and.w	r3, r3, #8
 8100b36:	613b      	str	r3, [r7, #16]
 8100b38:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8100b3a:	4b20      	ldr	r3, [pc, #128]	@ (8100bbc <COM1_MspInit+0xa8>)
 8100b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b40:	4a1e      	ldr	r2, [pc, #120]	@ (8100bbc <COM1_MspInit+0xa8>)
 8100b42:	f043 0308 	orr.w	r3, r3, #8
 8100b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8100bbc <COM1_MspInit+0xa8>)
 8100b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b50:	f003 0308 	and.w	r3, r3, #8
 8100b54:	60fb      	str	r3, [r7, #12]
 8100b56:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8100b58:	4b18      	ldr	r3, [pc, #96]	@ (8100bbc <COM1_MspInit+0xa8>)
 8100b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100b5e:	4a17      	ldr	r2, [pc, #92]	@ (8100bbc <COM1_MspInit+0xa8>)
 8100b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100b64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100b68:	4b14      	ldr	r3, [pc, #80]	@ (8100bbc <COM1_MspInit+0xa8>)
 8100b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8100b72:	60bb      	str	r3, [r7, #8]
 8100b74:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8100b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8100b7a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8100b7c:	2302      	movs	r3, #2
 8100b7e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8100b80:	2302      	movs	r3, #2
 8100b82:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8100b84:	2301      	movs	r3, #1
 8100b86:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8100b88:	2307      	movs	r3, #7
 8100b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8100b8c:	f107 0314 	add.w	r3, r7, #20
 8100b90:	4619      	mov	r1, r3
 8100b92:	480b      	ldr	r0, [pc, #44]	@ (8100bc0 <COM1_MspInit+0xac>)
 8100b94:	f000 fa5a 	bl	810104c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8100b98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8100b9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8100b9e:	2302      	movs	r3, #2
 8100ba0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8100ba2:	2307      	movs	r3, #7
 8100ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8100ba6:	f107 0314 	add.w	r3, r7, #20
 8100baa:	4619      	mov	r1, r3
 8100bac:	4804      	ldr	r0, [pc, #16]	@ (8100bc0 <COM1_MspInit+0xac>)
 8100bae:	f000 fa4d 	bl	810104c <HAL_GPIO_Init>
}
 8100bb2:	bf00      	nop
 8100bb4:	3728      	adds	r7, #40	@ 0x28
 8100bb6:	46bd      	mov	sp, r7
 8100bb8:	bd80      	pop	{r7, pc}
 8100bba:	bf00      	nop
 8100bbc:	58024400 	.word	0x58024400
 8100bc0:	58020c00 	.word	0x58020c00

08100bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100bc4:	b580      	push	{r7, lr}
 8100bc6:	b082      	sub	sp, #8
 8100bc8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100bca:	4b28      	ldr	r3, [pc, #160]	@ (8100c6c <HAL_Init+0xa8>)
 8100bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100bd0:	4a26      	ldr	r2, [pc, #152]	@ (8100c6c <HAL_Init+0xa8>)
 8100bd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100bd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100bda:	4b24      	ldr	r3, [pc, #144]	@ (8100c6c <HAL_Init+0xa8>)
 8100bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100be4:	603b      	str	r3, [r7, #0]
 8100be6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100be8:	4b21      	ldr	r3, [pc, #132]	@ (8100c70 <HAL_Init+0xac>)
 8100bea:	681b      	ldr	r3, [r3, #0]
 8100bec:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100bf0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8100c70 <HAL_Init+0xac>)
 8100bf6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100bfa:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8100c70 <HAL_Init+0xac>)
 8100bfe:	681b      	ldr	r3, [r3, #0]
 8100c00:	4a1b      	ldr	r2, [pc, #108]	@ (8100c70 <HAL_Init+0xac>)
 8100c02:	f043 0301 	orr.w	r3, r3, #1
 8100c06:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100c08:	2003      	movs	r0, #3
 8100c0a:	f000 f95f 	bl	8100ecc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100c0e:	f000 fc81 	bl	8101514 <HAL_RCC_GetSysClockFreq>
 8100c12:	4602      	mov	r2, r0
 8100c14:	4b15      	ldr	r3, [pc, #84]	@ (8100c6c <HAL_Init+0xa8>)
 8100c16:	699b      	ldr	r3, [r3, #24]
 8100c18:	0a1b      	lsrs	r3, r3, #8
 8100c1a:	f003 030f 	and.w	r3, r3, #15
 8100c1e:	4915      	ldr	r1, [pc, #84]	@ (8100c74 <HAL_Init+0xb0>)
 8100c20:	5ccb      	ldrb	r3, [r1, r3]
 8100c22:	f003 031f 	and.w	r3, r3, #31
 8100c26:	fa22 f303 	lsr.w	r3, r2, r3
 8100c2a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8100c6c <HAL_Init+0xa8>)
 8100c2e:	699b      	ldr	r3, [r3, #24]
 8100c30:	f003 030f 	and.w	r3, r3, #15
 8100c34:	4a0f      	ldr	r2, [pc, #60]	@ (8100c74 <HAL_Init+0xb0>)
 8100c36:	5cd3      	ldrb	r3, [r2, r3]
 8100c38:	f003 031f 	and.w	r3, r3, #31
 8100c3c:	687a      	ldr	r2, [r7, #4]
 8100c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8100c42:	4a0d      	ldr	r2, [pc, #52]	@ (8100c78 <HAL_Init+0xb4>)
 8100c44:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100c46:	4b0c      	ldr	r3, [pc, #48]	@ (8100c78 <HAL_Init+0xb4>)
 8100c48:	681b      	ldr	r3, [r3, #0]
 8100c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8100c7c <HAL_Init+0xb8>)
 8100c4c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100c4e:	2000      	movs	r0, #0
 8100c50:	f000 f816 	bl	8100c80 <HAL_InitTick>
 8100c54:	4603      	mov	r3, r0
 8100c56:	2b00      	cmp	r3, #0
 8100c58:	d001      	beq.n	8100c5e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100c5a:	2301      	movs	r3, #1
 8100c5c:	e002      	b.n	8100c64 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100c5e:	f7ff fd6d 	bl	810073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100c62:	2300      	movs	r3, #0
}
 8100c64:	4618      	mov	r0, r3
 8100c66:	3708      	adds	r7, #8
 8100c68:	46bd      	mov	sp, r7
 8100c6a:	bd80      	pop	{r7, pc}
 8100c6c:	58024400 	.word	0x58024400
 8100c70:	40024400 	.word	0x40024400
 8100c74:	08102e64 	.word	0x08102e64
 8100c78:	10000004 	.word	0x10000004
 8100c7c:	10000000 	.word	0x10000000

08100c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100c80:	b580      	push	{r7, lr}
 8100c82:	b082      	sub	sp, #8
 8100c84:	af00      	add	r7, sp, #0
 8100c86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100c88:	4b15      	ldr	r3, [pc, #84]	@ (8100ce0 <HAL_InitTick+0x60>)
 8100c8a:	781b      	ldrb	r3, [r3, #0]
 8100c8c:	2b00      	cmp	r3, #0
 8100c8e:	d101      	bne.n	8100c94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100c90:	2301      	movs	r3, #1
 8100c92:	e021      	b.n	8100cd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100c94:	4b13      	ldr	r3, [pc, #76]	@ (8100ce4 <HAL_InitTick+0x64>)
 8100c96:	681a      	ldr	r2, [r3, #0]
 8100c98:	4b11      	ldr	r3, [pc, #68]	@ (8100ce0 <HAL_InitTick+0x60>)
 8100c9a:	781b      	ldrb	r3, [r3, #0]
 8100c9c:	4619      	mov	r1, r3
 8100c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8100ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8100caa:	4618      	mov	r0, r3
 8100cac:	f000 f941 	bl	8100f32 <HAL_SYSTICK_Config>
 8100cb0:	4603      	mov	r3, r0
 8100cb2:	2b00      	cmp	r3, #0
 8100cb4:	d001      	beq.n	8100cba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100cb6:	2301      	movs	r3, #1
 8100cb8:	e00e      	b.n	8100cd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100cba:	687b      	ldr	r3, [r7, #4]
 8100cbc:	2b0f      	cmp	r3, #15
 8100cbe:	d80a      	bhi.n	8100cd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100cc0:	2200      	movs	r2, #0
 8100cc2:	6879      	ldr	r1, [r7, #4]
 8100cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100cc8:	f000 f90b 	bl	8100ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100ccc:	4a06      	ldr	r2, [pc, #24]	@ (8100ce8 <HAL_InitTick+0x68>)
 8100cce:	687b      	ldr	r3, [r7, #4]
 8100cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100cd2:	2300      	movs	r3, #0
 8100cd4:	e000      	b.n	8100cd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100cd6:	2301      	movs	r3, #1
}
 8100cd8:	4618      	mov	r0, r3
 8100cda:	3708      	adds	r7, #8
 8100cdc:	46bd      	mov	sp, r7
 8100cde:	bd80      	pop	{r7, pc}
 8100ce0:	10000028 	.word	0x10000028
 8100ce4:	10000000 	.word	0x10000000
 8100ce8:	10000024 	.word	0x10000024

08100cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100cec:	b480      	push	{r7}
 8100cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100cf0:	4b06      	ldr	r3, [pc, #24]	@ (8100d0c <HAL_IncTick+0x20>)
 8100cf2:	781b      	ldrb	r3, [r3, #0]
 8100cf4:	461a      	mov	r2, r3
 8100cf6:	4b06      	ldr	r3, [pc, #24]	@ (8100d10 <HAL_IncTick+0x24>)
 8100cf8:	681b      	ldr	r3, [r3, #0]
 8100cfa:	4413      	add	r3, r2
 8100cfc:	4a04      	ldr	r2, [pc, #16]	@ (8100d10 <HAL_IncTick+0x24>)
 8100cfe:	6013      	str	r3, [r2, #0]
}
 8100d00:	bf00      	nop
 8100d02:	46bd      	mov	sp, r7
 8100d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d08:	4770      	bx	lr
 8100d0a:	bf00      	nop
 8100d0c:	10000028 	.word	0x10000028
 8100d10:	100000f4 	.word	0x100000f4

08100d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100d14:	b480      	push	{r7}
 8100d16:	af00      	add	r7, sp, #0
  return uwTick;
 8100d18:	4b03      	ldr	r3, [pc, #12]	@ (8100d28 <HAL_GetTick+0x14>)
 8100d1a:	681b      	ldr	r3, [r3, #0]
}
 8100d1c:	4618      	mov	r0, r3
 8100d1e:	46bd      	mov	sp, r7
 8100d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d24:	4770      	bx	lr
 8100d26:	bf00      	nop
 8100d28:	100000f4 	.word	0x100000f4

08100d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100d2c:	b480      	push	{r7}
 8100d2e:	b085      	sub	sp, #20
 8100d30:	af00      	add	r7, sp, #0
 8100d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100d34:	687b      	ldr	r3, [r7, #4]
 8100d36:	f003 0307 	and.w	r3, r3, #7
 8100d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8100d70 <__NVIC_SetPriorityGrouping+0x44>)
 8100d3e:	68db      	ldr	r3, [r3, #12]
 8100d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100d42:	68ba      	ldr	r2, [r7, #8]
 8100d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100d48:	4013      	ands	r3, r2
 8100d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100d4c:	68fb      	ldr	r3, [r7, #12]
 8100d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100d50:	68bb      	ldr	r3, [r7, #8]
 8100d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100d5e:	4a04      	ldr	r2, [pc, #16]	@ (8100d70 <__NVIC_SetPriorityGrouping+0x44>)
 8100d60:	68bb      	ldr	r3, [r7, #8]
 8100d62:	60d3      	str	r3, [r2, #12]
}
 8100d64:	bf00      	nop
 8100d66:	3714      	adds	r7, #20
 8100d68:	46bd      	mov	sp, r7
 8100d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d6e:	4770      	bx	lr
 8100d70:	e000ed00 	.word	0xe000ed00

08100d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100d74:	b480      	push	{r7}
 8100d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100d78:	4b04      	ldr	r3, [pc, #16]	@ (8100d8c <__NVIC_GetPriorityGrouping+0x18>)
 8100d7a:	68db      	ldr	r3, [r3, #12]
 8100d7c:	0a1b      	lsrs	r3, r3, #8
 8100d7e:	f003 0307 	and.w	r3, r3, #7
}
 8100d82:	4618      	mov	r0, r3
 8100d84:	46bd      	mov	sp, r7
 8100d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d8a:	4770      	bx	lr
 8100d8c:	e000ed00 	.word	0xe000ed00

08100d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100d90:	b480      	push	{r7}
 8100d92:	b083      	sub	sp, #12
 8100d94:	af00      	add	r7, sp, #0
 8100d96:	4603      	mov	r3, r0
 8100d98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d9e:	2b00      	cmp	r3, #0
 8100da0:	db0b      	blt.n	8100dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100da2:	88fb      	ldrh	r3, [r7, #6]
 8100da4:	f003 021f 	and.w	r2, r3, #31
 8100da8:	4907      	ldr	r1, [pc, #28]	@ (8100dc8 <__NVIC_EnableIRQ+0x38>)
 8100daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100dae:	095b      	lsrs	r3, r3, #5
 8100db0:	2001      	movs	r0, #1
 8100db2:	fa00 f202 	lsl.w	r2, r0, r2
 8100db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100dba:	bf00      	nop
 8100dbc:	370c      	adds	r7, #12
 8100dbe:	46bd      	mov	sp, r7
 8100dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc4:	4770      	bx	lr
 8100dc6:	bf00      	nop
 8100dc8:	e000e100 	.word	0xe000e100

08100dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100dcc:	b480      	push	{r7}
 8100dce:	b083      	sub	sp, #12
 8100dd0:	af00      	add	r7, sp, #0
 8100dd2:	4603      	mov	r3, r0
 8100dd4:	6039      	str	r1, [r7, #0]
 8100dd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ddc:	2b00      	cmp	r3, #0
 8100dde:	db0a      	blt.n	8100df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100de0:	683b      	ldr	r3, [r7, #0]
 8100de2:	b2da      	uxtb	r2, r3
 8100de4:	490c      	ldr	r1, [pc, #48]	@ (8100e18 <__NVIC_SetPriority+0x4c>)
 8100de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100dea:	0112      	lsls	r2, r2, #4
 8100dec:	b2d2      	uxtb	r2, r2
 8100dee:	440b      	add	r3, r1
 8100df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100df4:	e00a      	b.n	8100e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100df6:	683b      	ldr	r3, [r7, #0]
 8100df8:	b2da      	uxtb	r2, r3
 8100dfa:	4908      	ldr	r1, [pc, #32]	@ (8100e1c <__NVIC_SetPriority+0x50>)
 8100dfc:	88fb      	ldrh	r3, [r7, #6]
 8100dfe:	f003 030f 	and.w	r3, r3, #15
 8100e02:	3b04      	subs	r3, #4
 8100e04:	0112      	lsls	r2, r2, #4
 8100e06:	b2d2      	uxtb	r2, r2
 8100e08:	440b      	add	r3, r1
 8100e0a:	761a      	strb	r2, [r3, #24]
}
 8100e0c:	bf00      	nop
 8100e0e:	370c      	adds	r7, #12
 8100e10:	46bd      	mov	sp, r7
 8100e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e16:	4770      	bx	lr
 8100e18:	e000e100 	.word	0xe000e100
 8100e1c:	e000ed00 	.word	0xe000ed00

08100e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100e20:	b480      	push	{r7}
 8100e22:	b089      	sub	sp, #36	@ 0x24
 8100e24:	af00      	add	r7, sp, #0
 8100e26:	60f8      	str	r0, [r7, #12]
 8100e28:	60b9      	str	r1, [r7, #8]
 8100e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100e2c:	68fb      	ldr	r3, [r7, #12]
 8100e2e:	f003 0307 	and.w	r3, r3, #7
 8100e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100e34:	69fb      	ldr	r3, [r7, #28]
 8100e36:	f1c3 0307 	rsb	r3, r3, #7
 8100e3a:	2b04      	cmp	r3, #4
 8100e3c:	bf28      	it	cs
 8100e3e:	2304      	movcs	r3, #4
 8100e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100e42:	69fb      	ldr	r3, [r7, #28]
 8100e44:	3304      	adds	r3, #4
 8100e46:	2b06      	cmp	r3, #6
 8100e48:	d902      	bls.n	8100e50 <NVIC_EncodePriority+0x30>
 8100e4a:	69fb      	ldr	r3, [r7, #28]
 8100e4c:	3b03      	subs	r3, #3
 8100e4e:	e000      	b.n	8100e52 <NVIC_EncodePriority+0x32>
 8100e50:	2300      	movs	r3, #0
 8100e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100e54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8100e58:	69bb      	ldr	r3, [r7, #24]
 8100e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e5e:	43da      	mvns	r2, r3
 8100e60:	68bb      	ldr	r3, [r7, #8]
 8100e62:	401a      	ands	r2, r3
 8100e64:	697b      	ldr	r3, [r7, #20]
 8100e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100e68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8100e6c:	697b      	ldr	r3, [r7, #20]
 8100e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8100e72:	43d9      	mvns	r1, r3
 8100e74:	687b      	ldr	r3, [r7, #4]
 8100e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100e78:	4313      	orrs	r3, r2
         );
}
 8100e7a:	4618      	mov	r0, r3
 8100e7c:	3724      	adds	r7, #36	@ 0x24
 8100e7e:	46bd      	mov	sp, r7
 8100e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e84:	4770      	bx	lr
	...

08100e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100e88:	b580      	push	{r7, lr}
 8100e8a:	b082      	sub	sp, #8
 8100e8c:	af00      	add	r7, sp, #0
 8100e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100e90:	687b      	ldr	r3, [r7, #4]
 8100e92:	3b01      	subs	r3, #1
 8100e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100e98:	d301      	bcc.n	8100e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100e9a:	2301      	movs	r3, #1
 8100e9c:	e00f      	b.n	8100ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8100ec8 <SysTick_Config+0x40>)
 8100ea0:	687b      	ldr	r3, [r7, #4]
 8100ea2:	3b01      	subs	r3, #1
 8100ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100ea6:	210f      	movs	r1, #15
 8100ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100eac:	f7ff ff8e 	bl	8100dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100eb0:	4b05      	ldr	r3, [pc, #20]	@ (8100ec8 <SysTick_Config+0x40>)
 8100eb2:	2200      	movs	r2, #0
 8100eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100eb6:	4b04      	ldr	r3, [pc, #16]	@ (8100ec8 <SysTick_Config+0x40>)
 8100eb8:	2207      	movs	r2, #7
 8100eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100ebc:	2300      	movs	r3, #0
}
 8100ebe:	4618      	mov	r0, r3
 8100ec0:	3708      	adds	r7, #8
 8100ec2:	46bd      	mov	sp, r7
 8100ec4:	bd80      	pop	{r7, pc}
 8100ec6:	bf00      	nop
 8100ec8:	e000e010 	.word	0xe000e010

08100ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ecc:	b580      	push	{r7, lr}
 8100ece:	b082      	sub	sp, #8
 8100ed0:	af00      	add	r7, sp, #0
 8100ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100ed4:	6878      	ldr	r0, [r7, #4]
 8100ed6:	f7ff ff29 	bl	8100d2c <__NVIC_SetPriorityGrouping>
}
 8100eda:	bf00      	nop
 8100edc:	3708      	adds	r7, #8
 8100ede:	46bd      	mov	sp, r7
 8100ee0:	bd80      	pop	{r7, pc}

08100ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ee2:	b580      	push	{r7, lr}
 8100ee4:	b086      	sub	sp, #24
 8100ee6:	af00      	add	r7, sp, #0
 8100ee8:	4603      	mov	r3, r0
 8100eea:	60b9      	str	r1, [r7, #8]
 8100eec:	607a      	str	r2, [r7, #4]
 8100eee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100ef0:	f7ff ff40 	bl	8100d74 <__NVIC_GetPriorityGrouping>
 8100ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100ef6:	687a      	ldr	r2, [r7, #4]
 8100ef8:	68b9      	ldr	r1, [r7, #8]
 8100efa:	6978      	ldr	r0, [r7, #20]
 8100efc:	f7ff ff90 	bl	8100e20 <NVIC_EncodePriority>
 8100f00:	4602      	mov	r2, r0
 8100f02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100f06:	4611      	mov	r1, r2
 8100f08:	4618      	mov	r0, r3
 8100f0a:	f7ff ff5f 	bl	8100dcc <__NVIC_SetPriority>
}
 8100f0e:	bf00      	nop
 8100f10:	3718      	adds	r7, #24
 8100f12:	46bd      	mov	sp, r7
 8100f14:	bd80      	pop	{r7, pc}

08100f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100f16:	b580      	push	{r7, lr}
 8100f18:	b082      	sub	sp, #8
 8100f1a:	af00      	add	r7, sp, #0
 8100f1c:	4603      	mov	r3, r0
 8100f1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f24:	4618      	mov	r0, r3
 8100f26:	f7ff ff33 	bl	8100d90 <__NVIC_EnableIRQ>
}
 8100f2a:	bf00      	nop
 8100f2c:	3708      	adds	r7, #8
 8100f2e:	46bd      	mov	sp, r7
 8100f30:	bd80      	pop	{r7, pc}

08100f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100f32:	b580      	push	{r7, lr}
 8100f34:	b082      	sub	sp, #8
 8100f36:	af00      	add	r7, sp, #0
 8100f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100f3a:	6878      	ldr	r0, [r7, #4]
 8100f3c:	f7ff ffa4 	bl	8100e88 <SysTick_Config>
 8100f40:	4603      	mov	r3, r0
}
 8100f42:	4618      	mov	r0, r3
 8100f44:	3708      	adds	r7, #8
 8100f46:	46bd      	mov	sp, r7
 8100f48:	bd80      	pop	{r7, pc}
	...

08100f4c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100f4c:	b480      	push	{r7}
 8100f4e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100f50:	4b06      	ldr	r3, [pc, #24]	@ (8100f6c <HAL_GetCurrentCPUID+0x20>)
 8100f52:	681b      	ldr	r3, [r3, #0]
 8100f54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100f58:	2b70      	cmp	r3, #112	@ 0x70
 8100f5a:	d101      	bne.n	8100f60 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8100f5c:	2303      	movs	r3, #3
 8100f5e:	e000      	b.n	8100f62 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8100f60:	2301      	movs	r3, #1
  }
}
 8100f62:	4618      	mov	r0, r3
 8100f64:	46bd      	mov	sp, r7
 8100f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f6a:	4770      	bx	lr
 8100f6c:	e000ed00 	.word	0xe000ed00

08100f70 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8100f70:	b480      	push	{r7}
 8100f72:	b087      	sub	sp, #28
 8100f74:	af00      	add	r7, sp, #0
 8100f76:	60f8      	str	r0, [r7, #12]
 8100f78:	460b      	mov	r3, r1
 8100f7a:	607a      	str	r2, [r7, #4]
 8100f7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8100f7e:	2300      	movs	r3, #0
 8100f80:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8100f82:	68fb      	ldr	r3, [r7, #12]
 8100f84:	2b00      	cmp	r3, #0
 8100f86:	d101      	bne.n	8100f8c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8100f88:	2301      	movs	r3, #1
 8100f8a:	e00a      	b.n	8100fa2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8100f8c:	7afb      	ldrb	r3, [r7, #11]
 8100f8e:	2b00      	cmp	r3, #0
 8100f90:	d103      	bne.n	8100f9a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8100f92:	68fb      	ldr	r3, [r7, #12]
 8100f94:	687a      	ldr	r2, [r7, #4]
 8100f96:	605a      	str	r2, [r3, #4]
      break;
 8100f98:	e002      	b.n	8100fa0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8100f9a:	2301      	movs	r3, #1
 8100f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8100f9e:	bf00      	nop
  }

  return status;
 8100fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8100fa2:	4618      	mov	r0, r3
 8100fa4:	371c      	adds	r7, #28
 8100fa6:	46bd      	mov	sp, r7
 8100fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fac:	4770      	bx	lr

08100fae <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8100fae:	b480      	push	{r7}
 8100fb0:	b083      	sub	sp, #12
 8100fb2:	af00      	add	r7, sp, #0
 8100fb4:	6078      	str	r0, [r7, #4]
 8100fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8100fb8:	687b      	ldr	r3, [r7, #4]
 8100fba:	2b00      	cmp	r3, #0
 8100fbc:	d101      	bne.n	8100fc2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8100fbe:	2301      	movs	r3, #1
 8100fc0:	e003      	b.n	8100fca <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8100fc2:	687b      	ldr	r3, [r7, #4]
 8100fc4:	683a      	ldr	r2, [r7, #0]
 8100fc6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8100fc8:	2300      	movs	r3, #0
  }
}
 8100fca:	4618      	mov	r0, r3
 8100fcc:	370c      	adds	r7, #12
 8100fce:	46bd      	mov	sp, r7
 8100fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fd4:	4770      	bx	lr

08100fd6 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8100fd6:	b580      	push	{r7, lr}
 8100fd8:	b086      	sub	sp, #24
 8100fda:	af00      	add	r7, sp, #0
 8100fdc:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8100fde:	687b      	ldr	r3, [r7, #4]
 8100fe0:	681b      	ldr	r3, [r3, #0]
 8100fe2:	0c1b      	lsrs	r3, r3, #16
 8100fe4:	f003 0303 	and.w	r3, r3, #3
 8100fe8:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8100fea:	687b      	ldr	r3, [r7, #4]
 8100fec:	681b      	ldr	r3, [r3, #0]
 8100fee:	f003 031f 	and.w	r3, r3, #31
 8100ff2:	2201      	movs	r2, #1
 8100ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8100ff8:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8100ffa:	f7ff ffa7 	bl	8100f4c <HAL_GetCurrentCPUID>
 8100ffe:	4603      	mov	r3, r0
 8101000:	2b03      	cmp	r3, #3
 8101002:	d106      	bne.n	8101012 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8101004:	693b      	ldr	r3, [r7, #16]
 8101006:	011b      	lsls	r3, r3, #4
 8101008:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810100c:	3388      	adds	r3, #136	@ 0x88
 810100e:	617b      	str	r3, [r7, #20]
 8101010:	e005      	b.n	810101e <HAL_EXTI_IRQHandler+0x48>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8101012:	693b      	ldr	r3, [r7, #16]
 8101014:	011b      	lsls	r3, r3, #4
 8101016:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 810101a:	33c8      	adds	r3, #200	@ 0xc8
 810101c:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 810101e:	697b      	ldr	r3, [r7, #20]
 8101020:	681b      	ldr	r3, [r3, #0]
 8101022:	68fa      	ldr	r2, [r7, #12]
 8101024:	4013      	ands	r3, r2
 8101026:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8101028:	68bb      	ldr	r3, [r7, #8]
 810102a:	2b00      	cmp	r3, #0
 810102c:	d009      	beq.n	8101042 <HAL_EXTI_IRQHandler+0x6c>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 810102e:	697b      	ldr	r3, [r7, #20]
 8101030:	68fa      	ldr	r2, [r7, #12]
 8101032:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8101034:	687b      	ldr	r3, [r7, #4]
 8101036:	685b      	ldr	r3, [r3, #4]
 8101038:	2b00      	cmp	r3, #0
 810103a:	d002      	beq.n	8101042 <HAL_EXTI_IRQHandler+0x6c>
    {
      hexti->PendingCallback();
 810103c:	687b      	ldr	r3, [r7, #4]
 810103e:	685b      	ldr	r3, [r3, #4]
 8101040:	4798      	blx	r3
    }
  }
}
 8101042:	bf00      	nop
 8101044:	3718      	adds	r7, #24
 8101046:	46bd      	mov	sp, r7
 8101048:	bd80      	pop	{r7, pc}
	...

0810104c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810104c:	b480      	push	{r7}
 810104e:	b089      	sub	sp, #36	@ 0x24
 8101050:	af00      	add	r7, sp, #0
 8101052:	6078      	str	r0, [r7, #4]
 8101054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101056:	2300      	movs	r3, #0
 8101058:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810105a:	4b89      	ldr	r3, [pc, #548]	@ (8101280 <HAL_GPIO_Init+0x234>)
 810105c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810105e:	e194      	b.n	810138a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101060:	683b      	ldr	r3, [r7, #0]
 8101062:	681a      	ldr	r2, [r3, #0]
 8101064:	2101      	movs	r1, #1
 8101066:	69fb      	ldr	r3, [r7, #28]
 8101068:	fa01 f303 	lsl.w	r3, r1, r3
 810106c:	4013      	ands	r3, r2
 810106e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101070:	693b      	ldr	r3, [r7, #16]
 8101072:	2b00      	cmp	r3, #0
 8101074:	f000 8186 	beq.w	8101384 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101078:	683b      	ldr	r3, [r7, #0]
 810107a:	685b      	ldr	r3, [r3, #4]
 810107c:	f003 0303 	and.w	r3, r3, #3
 8101080:	2b01      	cmp	r3, #1
 8101082:	d005      	beq.n	8101090 <HAL_GPIO_Init+0x44>
 8101084:	683b      	ldr	r3, [r7, #0]
 8101086:	685b      	ldr	r3, [r3, #4]
 8101088:	f003 0303 	and.w	r3, r3, #3
 810108c:	2b02      	cmp	r3, #2
 810108e:	d130      	bne.n	81010f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101090:	687b      	ldr	r3, [r7, #4]
 8101092:	689b      	ldr	r3, [r3, #8]
 8101094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101096:	69fb      	ldr	r3, [r7, #28]
 8101098:	005b      	lsls	r3, r3, #1
 810109a:	2203      	movs	r2, #3
 810109c:	fa02 f303 	lsl.w	r3, r2, r3
 81010a0:	43db      	mvns	r3, r3
 81010a2:	69ba      	ldr	r2, [r7, #24]
 81010a4:	4013      	ands	r3, r2
 81010a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81010a8:	683b      	ldr	r3, [r7, #0]
 81010aa:	68da      	ldr	r2, [r3, #12]
 81010ac:	69fb      	ldr	r3, [r7, #28]
 81010ae:	005b      	lsls	r3, r3, #1
 81010b0:	fa02 f303 	lsl.w	r3, r2, r3
 81010b4:	69ba      	ldr	r2, [r7, #24]
 81010b6:	4313      	orrs	r3, r2
 81010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81010ba:	687b      	ldr	r3, [r7, #4]
 81010bc:	69ba      	ldr	r2, [r7, #24]
 81010be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81010c0:	687b      	ldr	r3, [r7, #4]
 81010c2:	685b      	ldr	r3, [r3, #4]
 81010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81010c6:	2201      	movs	r2, #1
 81010c8:	69fb      	ldr	r3, [r7, #28]
 81010ca:	fa02 f303 	lsl.w	r3, r2, r3
 81010ce:	43db      	mvns	r3, r3
 81010d0:	69ba      	ldr	r2, [r7, #24]
 81010d2:	4013      	ands	r3, r2
 81010d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81010d6:	683b      	ldr	r3, [r7, #0]
 81010d8:	685b      	ldr	r3, [r3, #4]
 81010da:	091b      	lsrs	r3, r3, #4
 81010dc:	f003 0201 	and.w	r2, r3, #1
 81010e0:	69fb      	ldr	r3, [r7, #28]
 81010e2:	fa02 f303 	lsl.w	r3, r2, r3
 81010e6:	69ba      	ldr	r2, [r7, #24]
 81010e8:	4313      	orrs	r3, r2
 81010ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81010ec:	687b      	ldr	r3, [r7, #4]
 81010ee:	69ba      	ldr	r2, [r7, #24]
 81010f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81010f2:	683b      	ldr	r3, [r7, #0]
 81010f4:	685b      	ldr	r3, [r3, #4]
 81010f6:	f003 0303 	and.w	r3, r3, #3
 81010fa:	2b03      	cmp	r3, #3
 81010fc:	d017      	beq.n	810112e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81010fe:	687b      	ldr	r3, [r7, #4]
 8101100:	68db      	ldr	r3, [r3, #12]
 8101102:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101104:	69fb      	ldr	r3, [r7, #28]
 8101106:	005b      	lsls	r3, r3, #1
 8101108:	2203      	movs	r2, #3
 810110a:	fa02 f303 	lsl.w	r3, r2, r3
 810110e:	43db      	mvns	r3, r3
 8101110:	69ba      	ldr	r2, [r7, #24]
 8101112:	4013      	ands	r3, r2
 8101114:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101116:	683b      	ldr	r3, [r7, #0]
 8101118:	689a      	ldr	r2, [r3, #8]
 810111a:	69fb      	ldr	r3, [r7, #28]
 810111c:	005b      	lsls	r3, r3, #1
 810111e:	fa02 f303 	lsl.w	r3, r2, r3
 8101122:	69ba      	ldr	r2, [r7, #24]
 8101124:	4313      	orrs	r3, r2
 8101126:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101128:	687b      	ldr	r3, [r7, #4]
 810112a:	69ba      	ldr	r2, [r7, #24]
 810112c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810112e:	683b      	ldr	r3, [r7, #0]
 8101130:	685b      	ldr	r3, [r3, #4]
 8101132:	f003 0303 	and.w	r3, r3, #3
 8101136:	2b02      	cmp	r3, #2
 8101138:	d123      	bne.n	8101182 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810113a:	69fb      	ldr	r3, [r7, #28]
 810113c:	08da      	lsrs	r2, r3, #3
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	3208      	adds	r2, #8
 8101142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101148:	69fb      	ldr	r3, [r7, #28]
 810114a:	f003 0307 	and.w	r3, r3, #7
 810114e:	009b      	lsls	r3, r3, #2
 8101150:	220f      	movs	r2, #15
 8101152:	fa02 f303 	lsl.w	r3, r2, r3
 8101156:	43db      	mvns	r3, r3
 8101158:	69ba      	ldr	r2, [r7, #24]
 810115a:	4013      	ands	r3, r2
 810115c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810115e:	683b      	ldr	r3, [r7, #0]
 8101160:	691a      	ldr	r2, [r3, #16]
 8101162:	69fb      	ldr	r3, [r7, #28]
 8101164:	f003 0307 	and.w	r3, r3, #7
 8101168:	009b      	lsls	r3, r3, #2
 810116a:	fa02 f303 	lsl.w	r3, r2, r3
 810116e:	69ba      	ldr	r2, [r7, #24]
 8101170:	4313      	orrs	r3, r2
 8101172:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101174:	69fb      	ldr	r3, [r7, #28]
 8101176:	08da      	lsrs	r2, r3, #3
 8101178:	687b      	ldr	r3, [r7, #4]
 810117a:	3208      	adds	r2, #8
 810117c:	69b9      	ldr	r1, [r7, #24]
 810117e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101182:	687b      	ldr	r3, [r7, #4]
 8101184:	681b      	ldr	r3, [r3, #0]
 8101186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101188:	69fb      	ldr	r3, [r7, #28]
 810118a:	005b      	lsls	r3, r3, #1
 810118c:	2203      	movs	r2, #3
 810118e:	fa02 f303 	lsl.w	r3, r2, r3
 8101192:	43db      	mvns	r3, r3
 8101194:	69ba      	ldr	r2, [r7, #24]
 8101196:	4013      	ands	r3, r2
 8101198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810119a:	683b      	ldr	r3, [r7, #0]
 810119c:	685b      	ldr	r3, [r3, #4]
 810119e:	f003 0203 	and.w	r2, r3, #3
 81011a2:	69fb      	ldr	r3, [r7, #28]
 81011a4:	005b      	lsls	r3, r3, #1
 81011a6:	fa02 f303 	lsl.w	r3, r2, r3
 81011aa:	69ba      	ldr	r2, [r7, #24]
 81011ac:	4313      	orrs	r3, r2
 81011ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	69ba      	ldr	r2, [r7, #24]
 81011b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81011b6:	683b      	ldr	r3, [r7, #0]
 81011b8:	685b      	ldr	r3, [r3, #4]
 81011ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81011be:	2b00      	cmp	r3, #0
 81011c0:	f000 80e0 	beq.w	8101384 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8101284 <HAL_GPIO_Init+0x238>)
 81011c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81011ca:	4a2e      	ldr	r2, [pc, #184]	@ (8101284 <HAL_GPIO_Init+0x238>)
 81011cc:	f043 0302 	orr.w	r3, r3, #2
 81011d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8101284 <HAL_GPIO_Init+0x238>)
 81011d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81011da:	f003 0302 	and.w	r3, r3, #2
 81011de:	60fb      	str	r3, [r7, #12]
 81011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81011e2:	4a29      	ldr	r2, [pc, #164]	@ (8101288 <HAL_GPIO_Init+0x23c>)
 81011e4:	69fb      	ldr	r3, [r7, #28]
 81011e6:	089b      	lsrs	r3, r3, #2
 81011e8:	3302      	adds	r3, #2
 81011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81011f0:	69fb      	ldr	r3, [r7, #28]
 81011f2:	f003 0303 	and.w	r3, r3, #3
 81011f6:	009b      	lsls	r3, r3, #2
 81011f8:	220f      	movs	r2, #15
 81011fa:	fa02 f303 	lsl.w	r3, r2, r3
 81011fe:	43db      	mvns	r3, r3
 8101200:	69ba      	ldr	r2, [r7, #24]
 8101202:	4013      	ands	r3, r2
 8101204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101206:	687b      	ldr	r3, [r7, #4]
 8101208:	4a20      	ldr	r2, [pc, #128]	@ (810128c <HAL_GPIO_Init+0x240>)
 810120a:	4293      	cmp	r3, r2
 810120c:	d052      	beq.n	81012b4 <HAL_GPIO_Init+0x268>
 810120e:	687b      	ldr	r3, [r7, #4]
 8101210:	4a1f      	ldr	r2, [pc, #124]	@ (8101290 <HAL_GPIO_Init+0x244>)
 8101212:	4293      	cmp	r3, r2
 8101214:	d031      	beq.n	810127a <HAL_GPIO_Init+0x22e>
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	4a1e      	ldr	r2, [pc, #120]	@ (8101294 <HAL_GPIO_Init+0x248>)
 810121a:	4293      	cmp	r3, r2
 810121c:	d02b      	beq.n	8101276 <HAL_GPIO_Init+0x22a>
 810121e:	687b      	ldr	r3, [r7, #4]
 8101220:	4a1d      	ldr	r2, [pc, #116]	@ (8101298 <HAL_GPIO_Init+0x24c>)
 8101222:	4293      	cmp	r3, r2
 8101224:	d025      	beq.n	8101272 <HAL_GPIO_Init+0x226>
 8101226:	687b      	ldr	r3, [r7, #4]
 8101228:	4a1c      	ldr	r2, [pc, #112]	@ (810129c <HAL_GPIO_Init+0x250>)
 810122a:	4293      	cmp	r3, r2
 810122c:	d01f      	beq.n	810126e <HAL_GPIO_Init+0x222>
 810122e:	687b      	ldr	r3, [r7, #4]
 8101230:	4a1b      	ldr	r2, [pc, #108]	@ (81012a0 <HAL_GPIO_Init+0x254>)
 8101232:	4293      	cmp	r3, r2
 8101234:	d019      	beq.n	810126a <HAL_GPIO_Init+0x21e>
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	4a1a      	ldr	r2, [pc, #104]	@ (81012a4 <HAL_GPIO_Init+0x258>)
 810123a:	4293      	cmp	r3, r2
 810123c:	d013      	beq.n	8101266 <HAL_GPIO_Init+0x21a>
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	4a19      	ldr	r2, [pc, #100]	@ (81012a8 <HAL_GPIO_Init+0x25c>)
 8101242:	4293      	cmp	r3, r2
 8101244:	d00d      	beq.n	8101262 <HAL_GPIO_Init+0x216>
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	4a18      	ldr	r2, [pc, #96]	@ (81012ac <HAL_GPIO_Init+0x260>)
 810124a:	4293      	cmp	r3, r2
 810124c:	d007      	beq.n	810125e <HAL_GPIO_Init+0x212>
 810124e:	687b      	ldr	r3, [r7, #4]
 8101250:	4a17      	ldr	r2, [pc, #92]	@ (81012b0 <HAL_GPIO_Init+0x264>)
 8101252:	4293      	cmp	r3, r2
 8101254:	d101      	bne.n	810125a <HAL_GPIO_Init+0x20e>
 8101256:	2309      	movs	r3, #9
 8101258:	e02d      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 810125a:	230a      	movs	r3, #10
 810125c:	e02b      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 810125e:	2308      	movs	r3, #8
 8101260:	e029      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 8101262:	2307      	movs	r3, #7
 8101264:	e027      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 8101266:	2306      	movs	r3, #6
 8101268:	e025      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 810126a:	2305      	movs	r3, #5
 810126c:	e023      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 810126e:	2304      	movs	r3, #4
 8101270:	e021      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 8101272:	2303      	movs	r3, #3
 8101274:	e01f      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 8101276:	2302      	movs	r3, #2
 8101278:	e01d      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 810127a:	2301      	movs	r3, #1
 810127c:	e01b      	b.n	81012b6 <HAL_GPIO_Init+0x26a>
 810127e:	bf00      	nop
 8101280:	580000c0 	.word	0x580000c0
 8101284:	58024400 	.word	0x58024400
 8101288:	58000400 	.word	0x58000400
 810128c:	58020000 	.word	0x58020000
 8101290:	58020400 	.word	0x58020400
 8101294:	58020800 	.word	0x58020800
 8101298:	58020c00 	.word	0x58020c00
 810129c:	58021000 	.word	0x58021000
 81012a0:	58021400 	.word	0x58021400
 81012a4:	58021800 	.word	0x58021800
 81012a8:	58021c00 	.word	0x58021c00
 81012ac:	58022000 	.word	0x58022000
 81012b0:	58022400 	.word	0x58022400
 81012b4:	2300      	movs	r3, #0
 81012b6:	69fa      	ldr	r2, [r7, #28]
 81012b8:	f002 0203 	and.w	r2, r2, #3
 81012bc:	0092      	lsls	r2, r2, #2
 81012be:	4093      	lsls	r3, r2
 81012c0:	69ba      	ldr	r2, [r7, #24]
 81012c2:	4313      	orrs	r3, r2
 81012c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81012c6:	4938      	ldr	r1, [pc, #224]	@ (81013a8 <HAL_GPIO_Init+0x35c>)
 81012c8:	69fb      	ldr	r3, [r7, #28]
 81012ca:	089b      	lsrs	r3, r3, #2
 81012cc:	3302      	adds	r3, #2
 81012ce:	69ba      	ldr	r2, [r7, #24]
 81012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81012d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81012d8:	681b      	ldr	r3, [r3, #0]
 81012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81012dc:	693b      	ldr	r3, [r7, #16]
 81012de:	43db      	mvns	r3, r3
 81012e0:	69ba      	ldr	r2, [r7, #24]
 81012e2:	4013      	ands	r3, r2
 81012e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81012e6:	683b      	ldr	r3, [r7, #0]
 81012e8:	685b      	ldr	r3, [r3, #4]
 81012ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81012ee:	2b00      	cmp	r3, #0
 81012f0:	d003      	beq.n	81012fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81012f2:	69ba      	ldr	r2, [r7, #24]
 81012f4:	693b      	ldr	r3, [r7, #16]
 81012f6:	4313      	orrs	r3, r2
 81012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81012fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81012fe:	69bb      	ldr	r3, [r7, #24]
 8101300:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101306:	685b      	ldr	r3, [r3, #4]
 8101308:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810130a:	693b      	ldr	r3, [r7, #16]
 810130c:	43db      	mvns	r3, r3
 810130e:	69ba      	ldr	r2, [r7, #24]
 8101310:	4013      	ands	r3, r2
 8101312:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101314:	683b      	ldr	r3, [r7, #0]
 8101316:	685b      	ldr	r3, [r3, #4]
 8101318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810131c:	2b00      	cmp	r3, #0
 810131e:	d003      	beq.n	8101328 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101320:	69ba      	ldr	r2, [r7, #24]
 8101322:	693b      	ldr	r3, [r7, #16]
 8101324:	4313      	orrs	r3, r2
 8101326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101328:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810132c:	69bb      	ldr	r3, [r7, #24]
 810132e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101330:	697b      	ldr	r3, [r7, #20]
 8101332:	685b      	ldr	r3, [r3, #4]
 8101334:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101336:	693b      	ldr	r3, [r7, #16]
 8101338:	43db      	mvns	r3, r3
 810133a:	69ba      	ldr	r2, [r7, #24]
 810133c:	4013      	ands	r3, r2
 810133e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101340:	683b      	ldr	r3, [r7, #0]
 8101342:	685b      	ldr	r3, [r3, #4]
 8101344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101348:	2b00      	cmp	r3, #0
 810134a:	d003      	beq.n	8101354 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810134c:	69ba      	ldr	r2, [r7, #24]
 810134e:	693b      	ldr	r3, [r7, #16]
 8101350:	4313      	orrs	r3, r2
 8101352:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101354:	697b      	ldr	r3, [r7, #20]
 8101356:	69ba      	ldr	r2, [r7, #24]
 8101358:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810135a:	697b      	ldr	r3, [r7, #20]
 810135c:	681b      	ldr	r3, [r3, #0]
 810135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101360:	693b      	ldr	r3, [r7, #16]
 8101362:	43db      	mvns	r3, r3
 8101364:	69ba      	ldr	r2, [r7, #24]
 8101366:	4013      	ands	r3, r2
 8101368:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810136a:	683b      	ldr	r3, [r7, #0]
 810136c:	685b      	ldr	r3, [r3, #4]
 810136e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101372:	2b00      	cmp	r3, #0
 8101374:	d003      	beq.n	810137e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101376:	69ba      	ldr	r2, [r7, #24]
 8101378:	693b      	ldr	r3, [r7, #16]
 810137a:	4313      	orrs	r3, r2
 810137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810137e:	697b      	ldr	r3, [r7, #20]
 8101380:	69ba      	ldr	r2, [r7, #24]
 8101382:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101384:	69fb      	ldr	r3, [r7, #28]
 8101386:	3301      	adds	r3, #1
 8101388:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810138a:	683b      	ldr	r3, [r7, #0]
 810138c:	681a      	ldr	r2, [r3, #0]
 810138e:	69fb      	ldr	r3, [r7, #28]
 8101390:	fa22 f303 	lsr.w	r3, r2, r3
 8101394:	2b00      	cmp	r3, #0
 8101396:	f47f ae63 	bne.w	8101060 <HAL_GPIO_Init+0x14>
  }
}
 810139a:	bf00      	nop
 810139c:	bf00      	nop
 810139e:	3724      	adds	r7, #36	@ 0x24
 81013a0:	46bd      	mov	sp, r7
 81013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a6:	4770      	bx	lr
 81013a8:	58000400 	.word	0x58000400

081013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81013ac:	b480      	push	{r7}
 81013ae:	b083      	sub	sp, #12
 81013b0:	af00      	add	r7, sp, #0
 81013b2:	6078      	str	r0, [r7, #4]
 81013b4:	460b      	mov	r3, r1
 81013b6:	807b      	strh	r3, [r7, #2]
 81013b8:	4613      	mov	r3, r2
 81013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81013bc:	787b      	ldrb	r3, [r7, #1]
 81013be:	2b00      	cmp	r3, #0
 81013c0:	d003      	beq.n	81013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81013c2:	887a      	ldrh	r2, [r7, #2]
 81013c4:	687b      	ldr	r3, [r7, #4]
 81013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81013c8:	e003      	b.n	81013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81013ca:	887b      	ldrh	r3, [r7, #2]
 81013cc:	041a      	lsls	r2, r3, #16
 81013ce:	687b      	ldr	r3, [r7, #4]
 81013d0:	619a      	str	r2, [r3, #24]
}
 81013d2:	bf00      	nop
 81013d4:	370c      	adds	r7, #12
 81013d6:	46bd      	mov	sp, r7
 81013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013dc:	4770      	bx	lr
	...

081013e0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81013e0:	b480      	push	{r7}
 81013e2:	b083      	sub	sp, #12
 81013e4:	af00      	add	r7, sp, #0
 81013e6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81013e8:	4b05      	ldr	r3, [pc, #20]	@ (8101400 <HAL_HSEM_ActivateNotification+0x20>)
 81013ea:	681a      	ldr	r2, [r3, #0]
 81013ec:	4904      	ldr	r1, [pc, #16]	@ (8101400 <HAL_HSEM_ActivateNotification+0x20>)
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	4313      	orrs	r3, r2
 81013f2:	600b      	str	r3, [r1, #0]
#endif
}
 81013f4:	bf00      	nop
 81013f6:	370c      	adds	r7, #12
 81013f8:	46bd      	mov	sp, r7
 81013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013fe:	4770      	bx	lr
 8101400:	58026510 	.word	0x58026510

08101404 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101404:	b580      	push	{r7, lr}
 8101406:	b084      	sub	sp, #16
 8101408:	af00      	add	r7, sp, #0
 810140a:	60f8      	str	r0, [r7, #12]
 810140c:	460b      	mov	r3, r1
 810140e:	607a      	str	r2, [r7, #4]
 8101410:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101412:	4b37      	ldr	r3, [pc, #220]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101414:	681b      	ldr	r3, [r3, #0]
 8101416:	f023 0201 	bic.w	r2, r3, #1
 810141a:	4935      	ldr	r1, [pc, #212]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810141c:	68fb      	ldr	r3, [r7, #12]
 810141e:	4313      	orrs	r3, r2
 8101420:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	2b00      	cmp	r3, #0
 8101426:	d123      	bne.n	8101470 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101428:	f7ff fd90 	bl	8100f4c <HAL_GetCurrentCPUID>
 810142c:	4603      	mov	r3, r0
 810142e:	2b03      	cmp	r3, #3
 8101430:	d158      	bne.n	81014e4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101432:	4b2f      	ldr	r3, [pc, #188]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101434:	691b      	ldr	r3, [r3, #16]
 8101436:	4a2e      	ldr	r2, [pc, #184]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101438:	f023 0301 	bic.w	r3, r3, #1
 810143c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810143e:	4b2d      	ldr	r3, [pc, #180]	@ (81014f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101440:	691b      	ldr	r3, [r3, #16]
 8101442:	4a2c      	ldr	r2, [pc, #176]	@ (81014f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101444:	f043 0304 	orr.w	r3, r3, #4
 8101448:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810144a:	f3bf 8f4f 	dsb	sy
}
 810144e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101450:	f3bf 8f6f 	isb	sy
}
 8101454:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101456:	7afb      	ldrb	r3, [r7, #11]
 8101458:	2b01      	cmp	r3, #1
 810145a:	d101      	bne.n	8101460 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810145c:	bf30      	wfi
 810145e:	e000      	b.n	8101462 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101460:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101462:	4b24      	ldr	r3, [pc, #144]	@ (81014f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101464:	691b      	ldr	r3, [r3, #16]
 8101466:	4a23      	ldr	r2, [pc, #140]	@ (81014f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101468:	f023 0304 	bic.w	r3, r3, #4
 810146c:	6113      	str	r3, [r2, #16]
 810146e:	e03c      	b.n	81014ea <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101470:	687b      	ldr	r3, [r7, #4]
 8101472:	2b01      	cmp	r3, #1
 8101474:	d123      	bne.n	81014be <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101476:	f7ff fd69 	bl	8100f4c <HAL_GetCurrentCPUID>
 810147a:	4603      	mov	r3, r0
 810147c:	2b01      	cmp	r3, #1
 810147e:	d133      	bne.n	81014e8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101480:	4b1b      	ldr	r3, [pc, #108]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101482:	695b      	ldr	r3, [r3, #20]
 8101484:	4a1a      	ldr	r2, [pc, #104]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101486:	f023 0302 	bic.w	r3, r3, #2
 810148a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810148c:	4b19      	ldr	r3, [pc, #100]	@ (81014f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810148e:	691b      	ldr	r3, [r3, #16]
 8101490:	4a18      	ldr	r2, [pc, #96]	@ (81014f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101492:	f043 0304 	orr.w	r3, r3, #4
 8101496:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101498:	f3bf 8f4f 	dsb	sy
}
 810149c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810149e:	f3bf 8f6f 	isb	sy
}
 81014a2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81014a4:	7afb      	ldrb	r3, [r7, #11]
 81014a6:	2b01      	cmp	r3, #1
 81014a8:	d101      	bne.n	81014ae <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81014aa:	bf30      	wfi
 81014ac:	e000      	b.n	81014b0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81014ae:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81014b0:	4b10      	ldr	r3, [pc, #64]	@ (81014f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81014b2:	691b      	ldr	r3, [r3, #16]
 81014b4:	4a0f      	ldr	r2, [pc, #60]	@ (81014f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81014b6:	f023 0304 	bic.w	r3, r3, #4
 81014ba:	6113      	str	r3, [r2, #16]
 81014bc:	e015      	b.n	81014ea <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81014be:	f7ff fd45 	bl	8100f4c <HAL_GetCurrentCPUID>
 81014c2:	4603      	mov	r3, r0
 81014c4:	2b03      	cmp	r3, #3
 81014c6:	d106      	bne.n	81014d6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81014c8:	4b09      	ldr	r3, [pc, #36]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81014ca:	691b      	ldr	r3, [r3, #16]
 81014cc:	4a08      	ldr	r2, [pc, #32]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81014ce:	f023 0304 	bic.w	r3, r3, #4
 81014d2:	6113      	str	r3, [r2, #16]
 81014d4:	e009      	b.n	81014ea <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81014d6:	4b06      	ldr	r3, [pc, #24]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81014d8:	695b      	ldr	r3, [r3, #20]
 81014da:	4a05      	ldr	r2, [pc, #20]	@ (81014f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81014dc:	f023 0304 	bic.w	r3, r3, #4
 81014e0:	6153      	str	r3, [r2, #20]
 81014e2:	e002      	b.n	81014ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81014e4:	bf00      	nop
 81014e6:	e000      	b.n	81014ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81014e8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81014ea:	3710      	adds	r7, #16
 81014ec:	46bd      	mov	sp, r7
 81014ee:	bd80      	pop	{r7, pc}
 81014f0:	58024800 	.word	0x58024800
 81014f4:	e000ed00 	.word	0xe000ed00

081014f8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81014f8:	b580      	push	{r7, lr}
 81014fa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81014fc:	f7ff fd26 	bl	8100f4c <HAL_GetCurrentCPUID>
 8101500:	4603      	mov	r3, r0
 8101502:	2b03      	cmp	r3, #3
 8101504:	d101      	bne.n	810150a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101506:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101508:	e001      	b.n	810150e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810150a:	bf40      	sev
    __WFE ();
 810150c:	bf20      	wfe
}
 810150e:	bf00      	nop
 8101510:	bd80      	pop	{r7, pc}
	...

08101514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101514:	b480      	push	{r7}
 8101516:	b089      	sub	sp, #36	@ 0x24
 8101518:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810151a:	4bb3      	ldr	r3, [pc, #716]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810151c:	691b      	ldr	r3, [r3, #16]
 810151e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8101522:	2b18      	cmp	r3, #24
 8101524:	f200 8155 	bhi.w	81017d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8101528:	a201      	add	r2, pc, #4	@ (adr r2, 8101530 <HAL_RCC_GetSysClockFreq+0x1c>)
 810152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810152e:	bf00      	nop
 8101530:	08101595 	.word	0x08101595
 8101534:	081017d3 	.word	0x081017d3
 8101538:	081017d3 	.word	0x081017d3
 810153c:	081017d3 	.word	0x081017d3
 8101540:	081017d3 	.word	0x081017d3
 8101544:	081017d3 	.word	0x081017d3
 8101548:	081017d3 	.word	0x081017d3
 810154c:	081017d3 	.word	0x081017d3
 8101550:	081015bb 	.word	0x081015bb
 8101554:	081017d3 	.word	0x081017d3
 8101558:	081017d3 	.word	0x081017d3
 810155c:	081017d3 	.word	0x081017d3
 8101560:	081017d3 	.word	0x081017d3
 8101564:	081017d3 	.word	0x081017d3
 8101568:	081017d3 	.word	0x081017d3
 810156c:	081017d3 	.word	0x081017d3
 8101570:	081015c1 	.word	0x081015c1
 8101574:	081017d3 	.word	0x081017d3
 8101578:	081017d3 	.word	0x081017d3
 810157c:	081017d3 	.word	0x081017d3
 8101580:	081017d3 	.word	0x081017d3
 8101584:	081017d3 	.word	0x081017d3
 8101588:	081017d3 	.word	0x081017d3
 810158c:	081017d3 	.word	0x081017d3
 8101590:	081015c7 	.word	0x081015c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101594:	4b94      	ldr	r3, [pc, #592]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101596:	681b      	ldr	r3, [r3, #0]
 8101598:	f003 0320 	and.w	r3, r3, #32
 810159c:	2b00      	cmp	r3, #0
 810159e:	d009      	beq.n	81015b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81015a0:	4b91      	ldr	r3, [pc, #580]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015a2:	681b      	ldr	r3, [r3, #0]
 81015a4:	08db      	lsrs	r3, r3, #3
 81015a6:	f003 0303 	and.w	r3, r3, #3
 81015aa:	4a90      	ldr	r2, [pc, #576]	@ (81017ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81015ac:	fa22 f303 	lsr.w	r3, r2, r3
 81015b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81015b2:	e111      	b.n	81017d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81015b4:	4b8d      	ldr	r3, [pc, #564]	@ (81017ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81015b6:	61bb      	str	r3, [r7, #24]
      break;
 81015b8:	e10e      	b.n	81017d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81015ba:	4b8d      	ldr	r3, [pc, #564]	@ (81017f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81015bc:	61bb      	str	r3, [r7, #24]
      break;
 81015be:	e10b      	b.n	81017d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81015c0:	4b8c      	ldr	r3, [pc, #560]	@ (81017f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81015c2:	61bb      	str	r3, [r7, #24]
      break;
 81015c4:	e108      	b.n	81017d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81015c6:	4b88      	ldr	r3, [pc, #544]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81015ca:	f003 0303 	and.w	r3, r3, #3
 81015ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81015d0:	4b85      	ldr	r3, [pc, #532]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81015d4:	091b      	lsrs	r3, r3, #4
 81015d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81015da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81015dc:	4b82      	ldr	r3, [pc, #520]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81015e0:	f003 0301 	and.w	r3, r3, #1
 81015e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81015e6:	4b80      	ldr	r3, [pc, #512]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81015ea:	08db      	lsrs	r3, r3, #3
 81015ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81015f0:	68fa      	ldr	r2, [r7, #12]
 81015f2:	fb02 f303 	mul.w	r3, r2, r3
 81015f6:	ee07 3a90 	vmov	s15, r3
 81015fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81015fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101602:	693b      	ldr	r3, [r7, #16]
 8101604:	2b00      	cmp	r3, #0
 8101606:	f000 80e1 	beq.w	81017cc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 810160a:	697b      	ldr	r3, [r7, #20]
 810160c:	2b02      	cmp	r3, #2
 810160e:	f000 8083 	beq.w	8101718 <HAL_RCC_GetSysClockFreq+0x204>
 8101612:	697b      	ldr	r3, [r7, #20]
 8101614:	2b02      	cmp	r3, #2
 8101616:	f200 80a1 	bhi.w	810175c <HAL_RCC_GetSysClockFreq+0x248>
 810161a:	697b      	ldr	r3, [r7, #20]
 810161c:	2b00      	cmp	r3, #0
 810161e:	d003      	beq.n	8101628 <HAL_RCC_GetSysClockFreq+0x114>
 8101620:	697b      	ldr	r3, [r7, #20]
 8101622:	2b01      	cmp	r3, #1
 8101624:	d056      	beq.n	81016d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101626:	e099      	b.n	810175c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101628:	4b6f      	ldr	r3, [pc, #444]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810162a:	681b      	ldr	r3, [r3, #0]
 810162c:	f003 0320 	and.w	r3, r3, #32
 8101630:	2b00      	cmp	r3, #0
 8101632:	d02d      	beq.n	8101690 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101634:	4b6c      	ldr	r3, [pc, #432]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101636:	681b      	ldr	r3, [r3, #0]
 8101638:	08db      	lsrs	r3, r3, #3
 810163a:	f003 0303 	and.w	r3, r3, #3
 810163e:	4a6b      	ldr	r2, [pc, #428]	@ (81017ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101640:	fa22 f303 	lsr.w	r3, r2, r3
 8101644:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101646:	687b      	ldr	r3, [r7, #4]
 8101648:	ee07 3a90 	vmov	s15, r3
 810164c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101650:	693b      	ldr	r3, [r7, #16]
 8101652:	ee07 3a90 	vmov	s15, r3
 8101656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810165a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810165e:	4b62      	ldr	r3, [pc, #392]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101666:	ee07 3a90 	vmov	s15, r3
 810166a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810166e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101672:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81017f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810167a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810167e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101686:	ee67 7a27 	vmul.f32	s15, s14, s15
 810168a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810168e:	e087      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101690:	693b      	ldr	r3, [r7, #16]
 8101692:	ee07 3a90 	vmov	s15, r3
 8101696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810169a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81017fc <HAL_RCC_GetSysClockFreq+0x2e8>
 810169e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016a2:	4b51      	ldr	r3, [pc, #324]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81016a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81016aa:	ee07 3a90 	vmov	s15, r3
 81016ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81016b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81016b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81017f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81016ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81016be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81016c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81016c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81016ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81016ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81016d2:	e065      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81016d4:	693b      	ldr	r3, [r7, #16]
 81016d6:	ee07 3a90 	vmov	s15, r3
 81016da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81016de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101800 <HAL_RCC_GetSysClockFreq+0x2ec>
 81016e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016e6:	4b40      	ldr	r3, [pc, #256]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81016ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81016ee:	ee07 3a90 	vmov	s15, r3
 81016f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81016f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81016fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81017f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81016fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810170a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810170e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101716:	e043      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101718:	693b      	ldr	r3, [r7, #16]
 810171a:	ee07 3a90 	vmov	s15, r3
 810171e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101722:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101804 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810172a:	4b2f      	ldr	r3, [pc, #188]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810172e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101732:	ee07 3a90 	vmov	s15, r3
 8101736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810173a:	ed97 6a02 	vldr	s12, [r7, #8]
 810173e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81017f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810174a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810174e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810175a:	e021      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810175c:	693b      	ldr	r3, [r7, #16]
 810175e:	ee07 3a90 	vmov	s15, r3
 8101762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101766:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101800 <HAL_RCC_GetSysClockFreq+0x2ec>
 810176a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810176e:	4b1e      	ldr	r3, [pc, #120]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101776:	ee07 3a90 	vmov	s15, r3
 810177a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810177e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101782:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81017f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810178a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810178e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101796:	ee67 7a27 	vmul.f32	s15, s14, s15
 810179a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810179e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81017a0:	4b11      	ldr	r3, [pc, #68]	@ (81017e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81017a4:	0a5b      	lsrs	r3, r3, #9
 81017a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81017aa:	3301      	adds	r3, #1
 81017ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81017ae:	683b      	ldr	r3, [r7, #0]
 81017b0:	ee07 3a90 	vmov	s15, r3
 81017b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81017b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81017bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81017c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81017c4:	ee17 3a90 	vmov	r3, s15
 81017c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81017ca:	e005      	b.n	81017d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81017cc:	2300      	movs	r3, #0
 81017ce:	61bb      	str	r3, [r7, #24]
      break;
 81017d0:	e002      	b.n	81017d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81017d2:	4b07      	ldr	r3, [pc, #28]	@ (81017f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81017d4:	61bb      	str	r3, [r7, #24]
      break;
 81017d6:	bf00      	nop
  }

  return sysclockfreq;
 81017d8:	69bb      	ldr	r3, [r7, #24]
}
 81017da:	4618      	mov	r0, r3
 81017dc:	3724      	adds	r7, #36	@ 0x24
 81017de:	46bd      	mov	sp, r7
 81017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e4:	4770      	bx	lr
 81017e6:	bf00      	nop
 81017e8:	58024400 	.word	0x58024400
 81017ec:	03d09000 	.word	0x03d09000
 81017f0:	003d0900 	.word	0x003d0900
 81017f4:	017d7840 	.word	0x017d7840
 81017f8:	46000000 	.word	0x46000000
 81017fc:	4c742400 	.word	0x4c742400
 8101800:	4a742400 	.word	0x4a742400
 8101804:	4bbebc20 	.word	0x4bbebc20

08101808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101808:	b580      	push	{r7, lr}
 810180a:	b082      	sub	sp, #8
 810180c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810180e:	f7ff fe81 	bl	8101514 <HAL_RCC_GetSysClockFreq>
 8101812:	4602      	mov	r2, r0
 8101814:	4b11      	ldr	r3, [pc, #68]	@ (810185c <HAL_RCC_GetHCLKFreq+0x54>)
 8101816:	699b      	ldr	r3, [r3, #24]
 8101818:	0a1b      	lsrs	r3, r3, #8
 810181a:	f003 030f 	and.w	r3, r3, #15
 810181e:	4910      	ldr	r1, [pc, #64]	@ (8101860 <HAL_RCC_GetHCLKFreq+0x58>)
 8101820:	5ccb      	ldrb	r3, [r1, r3]
 8101822:	f003 031f 	and.w	r3, r3, #31
 8101826:	fa22 f303 	lsr.w	r3, r2, r3
 810182a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810182c:	4b0b      	ldr	r3, [pc, #44]	@ (810185c <HAL_RCC_GetHCLKFreq+0x54>)
 810182e:	699b      	ldr	r3, [r3, #24]
 8101830:	f003 030f 	and.w	r3, r3, #15
 8101834:	4a0a      	ldr	r2, [pc, #40]	@ (8101860 <HAL_RCC_GetHCLKFreq+0x58>)
 8101836:	5cd3      	ldrb	r3, [r2, r3]
 8101838:	f003 031f 	and.w	r3, r3, #31
 810183c:	687a      	ldr	r2, [r7, #4]
 810183e:	fa22 f303 	lsr.w	r3, r2, r3
 8101842:	4a08      	ldr	r2, [pc, #32]	@ (8101864 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101844:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101846:	4b07      	ldr	r3, [pc, #28]	@ (8101864 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101848:	681b      	ldr	r3, [r3, #0]
 810184a:	4a07      	ldr	r2, [pc, #28]	@ (8101868 <HAL_RCC_GetHCLKFreq+0x60>)
 810184c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810184e:	4b05      	ldr	r3, [pc, #20]	@ (8101864 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101850:	681b      	ldr	r3, [r3, #0]
}
 8101852:	4618      	mov	r0, r3
 8101854:	3708      	adds	r7, #8
 8101856:	46bd      	mov	sp, r7
 8101858:	bd80      	pop	{r7, pc}
 810185a:	bf00      	nop
 810185c:	58024400 	.word	0x58024400
 8101860:	08102e64 	.word	0x08102e64
 8101864:	10000004 	.word	0x10000004
 8101868:	10000000 	.word	0x10000000

0810186c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810186c:	b580      	push	{r7, lr}
 810186e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101870:	f7ff ffca 	bl	8101808 <HAL_RCC_GetHCLKFreq>
 8101874:	4602      	mov	r2, r0
 8101876:	4b06      	ldr	r3, [pc, #24]	@ (8101890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101878:	69db      	ldr	r3, [r3, #28]
 810187a:	091b      	lsrs	r3, r3, #4
 810187c:	f003 0307 	and.w	r3, r3, #7
 8101880:	4904      	ldr	r1, [pc, #16]	@ (8101894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8101882:	5ccb      	ldrb	r3, [r1, r3]
 8101884:	f003 031f 	and.w	r3, r3, #31
 8101888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810188c:	4618      	mov	r0, r3
 810188e:	bd80      	pop	{r7, pc}
 8101890:	58024400 	.word	0x58024400
 8101894:	08102e64 	.word	0x08102e64

08101898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101898:	b580      	push	{r7, lr}
 810189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810189c:	f7ff ffb4 	bl	8101808 <HAL_RCC_GetHCLKFreq>
 81018a0:	4602      	mov	r2, r0
 81018a2:	4b06      	ldr	r3, [pc, #24]	@ (81018bc <HAL_RCC_GetPCLK2Freq+0x24>)
 81018a4:	69db      	ldr	r3, [r3, #28]
 81018a6:	0a1b      	lsrs	r3, r3, #8
 81018a8:	f003 0307 	and.w	r3, r3, #7
 81018ac:	4904      	ldr	r1, [pc, #16]	@ (81018c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81018ae:	5ccb      	ldrb	r3, [r1, r3]
 81018b0:	f003 031f 	and.w	r3, r3, #31
 81018b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81018b8:	4618      	mov	r0, r3
 81018ba:	bd80      	pop	{r7, pc}
 81018bc:	58024400 	.word	0x58024400
 81018c0:	08102e64 	.word	0x08102e64

081018c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81018c4:	b580      	push	{r7, lr}
 81018c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81018c8:	f7ff ff9e 	bl	8101808 <HAL_RCC_GetHCLKFreq>
 81018cc:	4602      	mov	r2, r0
 81018ce:	4b06      	ldr	r3, [pc, #24]	@ (81018e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81018d0:	6a1b      	ldr	r3, [r3, #32]
 81018d2:	091b      	lsrs	r3, r3, #4
 81018d4:	f003 0307 	and.w	r3, r3, #7
 81018d8:	4904      	ldr	r1, [pc, #16]	@ (81018ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81018da:	5ccb      	ldrb	r3, [r1, r3]
 81018dc:	f003 031f 	and.w	r3, r3, #31
 81018e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81018e4:	4618      	mov	r0, r3
 81018e6:	bd80      	pop	{r7, pc}
 81018e8:	58024400 	.word	0x58024400
 81018ec:	08102e64 	.word	0x08102e64

081018f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81018f0:	b480      	push	{r7}
 81018f2:	b089      	sub	sp, #36	@ 0x24
 81018f4:	af00      	add	r7, sp, #0
 81018f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81018f8:	4ba1      	ldr	r3, [pc, #644]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81018fc:	f003 0303 	and.w	r3, r3, #3
 8101900:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8101902:	4b9f      	ldr	r3, [pc, #636]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8101904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101906:	0b1b      	lsrs	r3, r3, #12
 8101908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810190c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810190e:	4b9c      	ldr	r3, [pc, #624]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8101910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101912:	091b      	lsrs	r3, r3, #4
 8101914:	f003 0301 	and.w	r3, r3, #1
 8101918:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810191a:	4b99      	ldr	r3, [pc, #612]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810191c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810191e:	08db      	lsrs	r3, r3, #3
 8101920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101924:	693a      	ldr	r2, [r7, #16]
 8101926:	fb02 f303 	mul.w	r3, r2, r3
 810192a:	ee07 3a90 	vmov	s15, r3
 810192e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101932:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8101936:	697b      	ldr	r3, [r7, #20]
 8101938:	2b00      	cmp	r3, #0
 810193a:	f000 8111 	beq.w	8101b60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810193e:	69bb      	ldr	r3, [r7, #24]
 8101940:	2b02      	cmp	r3, #2
 8101942:	f000 8083 	beq.w	8101a4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8101946:	69bb      	ldr	r3, [r7, #24]
 8101948:	2b02      	cmp	r3, #2
 810194a:	f200 80a1 	bhi.w	8101a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810194e:	69bb      	ldr	r3, [r7, #24]
 8101950:	2b00      	cmp	r3, #0
 8101952:	d003      	beq.n	810195c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8101954:	69bb      	ldr	r3, [r7, #24]
 8101956:	2b01      	cmp	r3, #1
 8101958:	d056      	beq.n	8101a08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810195a:	e099      	b.n	8101a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810195c:	4b88      	ldr	r3, [pc, #544]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	f003 0320 	and.w	r3, r3, #32
 8101964:	2b00      	cmp	r3, #0
 8101966:	d02d      	beq.n	81019c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101968:	4b85      	ldr	r3, [pc, #532]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810196a:	681b      	ldr	r3, [r3, #0]
 810196c:	08db      	lsrs	r3, r3, #3
 810196e:	f003 0303 	and.w	r3, r3, #3
 8101972:	4a84      	ldr	r2, [pc, #528]	@ (8101b84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8101974:	fa22 f303 	lsr.w	r3, r2, r3
 8101978:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810197a:	68bb      	ldr	r3, [r7, #8]
 810197c:	ee07 3a90 	vmov	s15, r3
 8101980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101984:	697b      	ldr	r3, [r7, #20]
 8101986:	ee07 3a90 	vmov	s15, r3
 810198a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810198e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101992:	4b7b      	ldr	r3, [pc, #492]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8101994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810199a:	ee07 3a90 	vmov	s15, r3
 810199e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81019a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8101b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81019aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81019b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81019c2:	e087      	b.n	8101ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81019c4:	697b      	ldr	r3, [r7, #20]
 81019c6:	ee07 3a90 	vmov	s15, r3
 81019ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81019ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8101b8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81019d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81019d6:	4b6a      	ldr	r3, [pc, #424]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81019d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81019da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81019de:	ee07 3a90 	vmov	s15, r3
 81019e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81019ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8101b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81019ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81019fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101a06:	e065      	b.n	8101ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8101a08:	697b      	ldr	r3, [r7, #20]
 8101a0a:	ee07 3a90 	vmov	s15, r3
 8101a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8101b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8101a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a1a:	4b59      	ldr	r3, [pc, #356]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8101a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a22:	ee07 3a90 	vmov	s15, r3
 8101a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8101a2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8101b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8101a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101a4a:	e043      	b.n	8101ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8101a4c:	697b      	ldr	r3, [r7, #20]
 8101a4e:	ee07 3a90 	vmov	s15, r3
 8101a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8101b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8101a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a5e:	4b48      	ldr	r3, [pc, #288]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8101a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a66:	ee07 3a90 	vmov	s15, r3
 8101a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8101a72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8101b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8101a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101a8e:	e021      	b.n	8101ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8101a90:	697b      	ldr	r3, [r7, #20]
 8101a92:	ee07 3a90 	vmov	s15, r3
 8101a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8101b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8101a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101aa2:	4b37      	ldr	r3, [pc, #220]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8101aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101aaa:	ee07 3a90 	vmov	s15, r3
 8101aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8101ab6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8101b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8101aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101ad2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8101ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8101ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101ad8:	0a5b      	lsrs	r3, r3, #9
 8101ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101ade:	ee07 3a90 	vmov	s15, r3
 8101ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ae6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8101af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101afa:	ee17 2a90 	vmov	r2, s15
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8101b02:	4b1f      	ldr	r3, [pc, #124]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8101b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101b06:	0c1b      	lsrs	r3, r3, #16
 8101b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101b0c:	ee07 3a90 	vmov	s15, r3
 8101b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101b18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8101b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b28:	ee17 2a90 	vmov	r2, s15
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8101b30:	4b13      	ldr	r3, [pc, #76]	@ (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8101b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101b34:	0e1b      	lsrs	r3, r3, #24
 8101b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101b3a:	ee07 3a90 	vmov	s15, r3
 8101b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8101b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b56:	ee17 2a90 	vmov	r2, s15
 8101b5a:	687b      	ldr	r3, [r7, #4]
 8101b5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8101b5e:	e008      	b.n	8101b72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	2200      	movs	r2, #0
 8101b64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	2200      	movs	r2, #0
 8101b6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	2200      	movs	r2, #0
 8101b70:	609a      	str	r2, [r3, #8]
}
 8101b72:	bf00      	nop
 8101b74:	3724      	adds	r7, #36	@ 0x24
 8101b76:	46bd      	mov	sp, r7
 8101b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7c:	4770      	bx	lr
 8101b7e:	bf00      	nop
 8101b80:	58024400 	.word	0x58024400
 8101b84:	03d09000 	.word	0x03d09000
 8101b88:	46000000 	.word	0x46000000
 8101b8c:	4c742400 	.word	0x4c742400
 8101b90:	4a742400 	.word	0x4a742400
 8101b94:	4bbebc20 	.word	0x4bbebc20

08101b98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8101b98:	b480      	push	{r7}
 8101b9a:	b089      	sub	sp, #36	@ 0x24
 8101b9c:	af00      	add	r7, sp, #0
 8101b9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101ba0:	4ba1      	ldr	r3, [pc, #644]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101ba4:	f003 0303 	and.w	r3, r3, #3
 8101ba8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8101baa:	4b9f      	ldr	r3, [pc, #636]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101bae:	0d1b      	lsrs	r3, r3, #20
 8101bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101bb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8101bb6:	4b9c      	ldr	r3, [pc, #624]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101bba:	0a1b      	lsrs	r3, r3, #8
 8101bbc:	f003 0301 	and.w	r3, r3, #1
 8101bc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8101bc2:	4b99      	ldr	r3, [pc, #612]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8101bc6:	08db      	lsrs	r3, r3, #3
 8101bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101bcc:	693a      	ldr	r2, [r7, #16]
 8101bce:	fb02 f303 	mul.w	r3, r2, r3
 8101bd2:	ee07 3a90 	vmov	s15, r3
 8101bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101bda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8101bde:	697b      	ldr	r3, [r7, #20]
 8101be0:	2b00      	cmp	r3, #0
 8101be2:	f000 8111 	beq.w	8101e08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8101be6:	69bb      	ldr	r3, [r7, #24]
 8101be8:	2b02      	cmp	r3, #2
 8101bea:	f000 8083 	beq.w	8101cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8101bee:	69bb      	ldr	r3, [r7, #24]
 8101bf0:	2b02      	cmp	r3, #2
 8101bf2:	f200 80a1 	bhi.w	8101d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8101bf6:	69bb      	ldr	r3, [r7, #24]
 8101bf8:	2b00      	cmp	r3, #0
 8101bfa:	d003      	beq.n	8101c04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8101bfc:	69bb      	ldr	r3, [r7, #24]
 8101bfe:	2b01      	cmp	r3, #1
 8101c00:	d056      	beq.n	8101cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8101c02:	e099      	b.n	8101d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101c04:	4b88      	ldr	r3, [pc, #544]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101c06:	681b      	ldr	r3, [r3, #0]
 8101c08:	f003 0320 	and.w	r3, r3, #32
 8101c0c:	2b00      	cmp	r3, #0
 8101c0e:	d02d      	beq.n	8101c6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101c10:	4b85      	ldr	r3, [pc, #532]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101c12:	681b      	ldr	r3, [r3, #0]
 8101c14:	08db      	lsrs	r3, r3, #3
 8101c16:	f003 0303 	and.w	r3, r3, #3
 8101c1a:	4a84      	ldr	r2, [pc, #528]	@ (8101e2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8101c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8101c20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8101c22:	68bb      	ldr	r3, [r7, #8]
 8101c24:	ee07 3a90 	vmov	s15, r3
 8101c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c2c:	697b      	ldr	r3, [r7, #20]
 8101c2e:	ee07 3a90 	vmov	s15, r3
 8101c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101c42:	ee07 3a90 	vmov	s15, r3
 8101c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8101c4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8101e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8101c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8101c6a:	e087      	b.n	8101d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8101c6c:	697b      	ldr	r3, [r7, #20]
 8101c6e:	ee07 3a90 	vmov	s15, r3
 8101c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8101e34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8101c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101c86:	ee07 3a90 	vmov	s15, r3
 8101c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8101c92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8101e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8101c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101cae:	e065      	b.n	8101d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8101cb0:	697b      	ldr	r3, [r7, #20]
 8101cb2:	ee07 3a90 	vmov	s15, r3
 8101cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101cba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8101e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8101cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101cc2:	4b59      	ldr	r3, [pc, #356]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101cca:	ee07 3a90 	vmov	s15, r3
 8101cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8101cd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8101e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8101cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101cf2:	e043      	b.n	8101d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8101cf4:	697b      	ldr	r3, [r7, #20]
 8101cf6:	ee07 3a90 	vmov	s15, r3
 8101cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101cfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8101e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8101d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101d06:	4b48      	ldr	r3, [pc, #288]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101d0e:	ee07 3a90 	vmov	s15, r3
 8101d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8101d1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8101e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8101d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101d36:	e021      	b.n	8101d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8101d38:	697b      	ldr	r3, [r7, #20]
 8101d3a:	ee07 3a90 	vmov	s15, r3
 8101d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8101e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8101d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101d4a:	4b37      	ldr	r3, [pc, #220]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101d52:	ee07 3a90 	vmov	s15, r3
 8101d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8101d5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8101e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8101d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101d7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8101d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101d80:	0a5b      	lsrs	r3, r3, #9
 8101d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101d86:	ee07 3a90 	vmov	s15, r3
 8101d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101d92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8101d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101da2:	ee17 2a90 	vmov	r2, s15
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8101daa:	4b1f      	ldr	r3, [pc, #124]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101dae:	0c1b      	lsrs	r3, r3, #16
 8101db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101db4:	ee07 3a90 	vmov	s15, r3
 8101db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101dbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101dc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8101dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101dd0:	ee17 2a90 	vmov	r2, s15
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8101dd8:	4b13      	ldr	r3, [pc, #76]	@ (8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8101dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101ddc:	0e1b      	lsrs	r3, r3, #24
 8101dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101de2:	ee07 3a90 	vmov	s15, r3
 8101de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101dea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8101dee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8101df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101dfe:	ee17 2a90 	vmov	r2, s15
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8101e06:	e008      	b.n	8101e1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	2200      	movs	r2, #0
 8101e0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	2200      	movs	r2, #0
 8101e12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	2200      	movs	r2, #0
 8101e18:	609a      	str	r2, [r3, #8]
}
 8101e1a:	bf00      	nop
 8101e1c:	3724      	adds	r7, #36	@ 0x24
 8101e1e:	46bd      	mov	sp, r7
 8101e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e24:	4770      	bx	lr
 8101e26:	bf00      	nop
 8101e28:	58024400 	.word	0x58024400
 8101e2c:	03d09000 	.word	0x03d09000
 8101e30:	46000000 	.word	0x46000000
 8101e34:	4c742400 	.word	0x4c742400
 8101e38:	4a742400 	.word	0x4a742400
 8101e3c:	4bbebc20 	.word	0x4bbebc20

08101e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8101e40:	b580      	push	{r7, lr}
 8101e42:	b082      	sub	sp, #8
 8101e44:	af00      	add	r7, sp, #0
 8101e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	2b00      	cmp	r3, #0
 8101e4c:	d101      	bne.n	8101e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8101e4e:	2301      	movs	r3, #1
 8101e50:	e042      	b.n	8101ed8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8101e58:	2b00      	cmp	r3, #0
 8101e5a:	d106      	bne.n	8101e6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	2200      	movs	r2, #0
 8101e60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8101e64:	6878      	ldr	r0, [r7, #4]
 8101e66:	f000 f83b 	bl	8101ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	2224      	movs	r2, #36	@ 0x24
 8101e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	681b      	ldr	r3, [r3, #0]
 8101e76:	681a      	ldr	r2, [r3, #0]
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	681b      	ldr	r3, [r3, #0]
 8101e7c:	f022 0201 	bic.w	r2, r2, #1
 8101e80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101e86:	2b00      	cmp	r3, #0
 8101e88:	d002      	beq.n	8101e90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8101e8a:	6878      	ldr	r0, [r7, #4]
 8101e8c:	f000 fd9a 	bl	81029c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8101e90:	6878      	ldr	r0, [r7, #4]
 8101e92:	f000 f82f 	bl	8101ef4 <UART_SetConfig>
 8101e96:	4603      	mov	r3, r0
 8101e98:	2b01      	cmp	r3, #1
 8101e9a:	d101      	bne.n	8101ea0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8101e9c:	2301      	movs	r3, #1
 8101e9e:	e01b      	b.n	8101ed8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	681b      	ldr	r3, [r3, #0]
 8101ea4:	685a      	ldr	r2, [r3, #4]
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	681b      	ldr	r3, [r3, #0]
 8101eaa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8101eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	689a      	ldr	r2, [r3, #8]
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	681b      	ldr	r3, [r3, #0]
 8101eba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8101ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	681a      	ldr	r2, [r3, #0]
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	681b      	ldr	r3, [r3, #0]
 8101eca:	f042 0201 	orr.w	r2, r2, #1
 8101ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8101ed0:	6878      	ldr	r0, [r7, #4]
 8101ed2:	f000 fe19 	bl	8102b08 <UART_CheckIdleState>
 8101ed6:	4603      	mov	r3, r0
}
 8101ed8:	4618      	mov	r0, r3
 8101eda:	3708      	adds	r7, #8
 8101edc:	46bd      	mov	sp, r7
 8101ede:	bd80      	pop	{r7, pc}

08101ee0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8101ee0:	b480      	push	{r7}
 8101ee2:	b083      	sub	sp, #12
 8101ee4:	af00      	add	r7, sp, #0
 8101ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8101ee8:	bf00      	nop
 8101eea:	370c      	adds	r7, #12
 8101eec:	46bd      	mov	sp, r7
 8101eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ef2:	4770      	bx	lr

08101ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8101ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101ef8:	b092      	sub	sp, #72	@ 0x48
 8101efa:	af00      	add	r7, sp, #0
 8101efc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8101efe:	2300      	movs	r3, #0
 8101f00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8101f04:	697b      	ldr	r3, [r7, #20]
 8101f06:	689a      	ldr	r2, [r3, #8]
 8101f08:	697b      	ldr	r3, [r7, #20]
 8101f0a:	691b      	ldr	r3, [r3, #16]
 8101f0c:	431a      	orrs	r2, r3
 8101f0e:	697b      	ldr	r3, [r7, #20]
 8101f10:	695b      	ldr	r3, [r3, #20]
 8101f12:	431a      	orrs	r2, r3
 8101f14:	697b      	ldr	r3, [r7, #20]
 8101f16:	69db      	ldr	r3, [r3, #28]
 8101f18:	4313      	orrs	r3, r2
 8101f1a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8101f1c:	697b      	ldr	r3, [r7, #20]
 8101f1e:	681b      	ldr	r3, [r3, #0]
 8101f20:	681a      	ldr	r2, [r3, #0]
 8101f22:	4bbd      	ldr	r3, [pc, #756]	@ (8102218 <UART_SetConfig+0x324>)
 8101f24:	4013      	ands	r3, r2
 8101f26:	697a      	ldr	r2, [r7, #20]
 8101f28:	6812      	ldr	r2, [r2, #0]
 8101f2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8101f2c:	430b      	orrs	r3, r1
 8101f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8101f30:	697b      	ldr	r3, [r7, #20]
 8101f32:	681b      	ldr	r3, [r3, #0]
 8101f34:	685b      	ldr	r3, [r3, #4]
 8101f36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8101f3a:	697b      	ldr	r3, [r7, #20]
 8101f3c:	68da      	ldr	r2, [r3, #12]
 8101f3e:	697b      	ldr	r3, [r7, #20]
 8101f40:	681b      	ldr	r3, [r3, #0]
 8101f42:	430a      	orrs	r2, r1
 8101f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8101f46:	697b      	ldr	r3, [r7, #20]
 8101f48:	699b      	ldr	r3, [r3, #24]
 8101f4a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8101f4c:	697b      	ldr	r3, [r7, #20]
 8101f4e:	681b      	ldr	r3, [r3, #0]
 8101f50:	4ab2      	ldr	r2, [pc, #712]	@ (810221c <UART_SetConfig+0x328>)
 8101f52:	4293      	cmp	r3, r2
 8101f54:	d004      	beq.n	8101f60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8101f56:	697b      	ldr	r3, [r7, #20]
 8101f58:	6a1b      	ldr	r3, [r3, #32]
 8101f5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8101f5c:	4313      	orrs	r3, r2
 8101f5e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8101f60:	697b      	ldr	r3, [r7, #20]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	689b      	ldr	r3, [r3, #8]
 8101f66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8101f6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8101f6e:	697a      	ldr	r2, [r7, #20]
 8101f70:	6812      	ldr	r2, [r2, #0]
 8101f72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8101f74:	430b      	orrs	r3, r1
 8101f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8101f78:	697b      	ldr	r3, [r7, #20]
 8101f7a:	681b      	ldr	r3, [r3, #0]
 8101f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101f7e:	f023 010f 	bic.w	r1, r3, #15
 8101f82:	697b      	ldr	r3, [r7, #20]
 8101f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8101f86:	697b      	ldr	r3, [r7, #20]
 8101f88:	681b      	ldr	r3, [r3, #0]
 8101f8a:	430a      	orrs	r2, r1
 8101f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8101f8e:	697b      	ldr	r3, [r7, #20]
 8101f90:	681b      	ldr	r3, [r3, #0]
 8101f92:	4aa3      	ldr	r2, [pc, #652]	@ (8102220 <UART_SetConfig+0x32c>)
 8101f94:	4293      	cmp	r3, r2
 8101f96:	d177      	bne.n	8102088 <UART_SetConfig+0x194>
 8101f98:	4ba2      	ldr	r3, [pc, #648]	@ (8102224 <UART_SetConfig+0x330>)
 8101f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101f9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8101fa0:	2b28      	cmp	r3, #40	@ 0x28
 8101fa2:	d86d      	bhi.n	8102080 <UART_SetConfig+0x18c>
 8101fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8101fac <UART_SetConfig+0xb8>)
 8101fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101faa:	bf00      	nop
 8101fac:	08102051 	.word	0x08102051
 8101fb0:	08102081 	.word	0x08102081
 8101fb4:	08102081 	.word	0x08102081
 8101fb8:	08102081 	.word	0x08102081
 8101fbc:	08102081 	.word	0x08102081
 8101fc0:	08102081 	.word	0x08102081
 8101fc4:	08102081 	.word	0x08102081
 8101fc8:	08102081 	.word	0x08102081
 8101fcc:	08102059 	.word	0x08102059
 8101fd0:	08102081 	.word	0x08102081
 8101fd4:	08102081 	.word	0x08102081
 8101fd8:	08102081 	.word	0x08102081
 8101fdc:	08102081 	.word	0x08102081
 8101fe0:	08102081 	.word	0x08102081
 8101fe4:	08102081 	.word	0x08102081
 8101fe8:	08102081 	.word	0x08102081
 8101fec:	08102061 	.word	0x08102061
 8101ff0:	08102081 	.word	0x08102081
 8101ff4:	08102081 	.word	0x08102081
 8101ff8:	08102081 	.word	0x08102081
 8101ffc:	08102081 	.word	0x08102081
 8102000:	08102081 	.word	0x08102081
 8102004:	08102081 	.word	0x08102081
 8102008:	08102081 	.word	0x08102081
 810200c:	08102069 	.word	0x08102069
 8102010:	08102081 	.word	0x08102081
 8102014:	08102081 	.word	0x08102081
 8102018:	08102081 	.word	0x08102081
 810201c:	08102081 	.word	0x08102081
 8102020:	08102081 	.word	0x08102081
 8102024:	08102081 	.word	0x08102081
 8102028:	08102081 	.word	0x08102081
 810202c:	08102071 	.word	0x08102071
 8102030:	08102081 	.word	0x08102081
 8102034:	08102081 	.word	0x08102081
 8102038:	08102081 	.word	0x08102081
 810203c:	08102081 	.word	0x08102081
 8102040:	08102081 	.word	0x08102081
 8102044:	08102081 	.word	0x08102081
 8102048:	08102081 	.word	0x08102081
 810204c:	08102079 	.word	0x08102079
 8102050:	2301      	movs	r3, #1
 8102052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102056:	e220      	b.n	810249a <UART_SetConfig+0x5a6>
 8102058:	2304      	movs	r3, #4
 810205a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810205e:	e21c      	b.n	810249a <UART_SetConfig+0x5a6>
 8102060:	2308      	movs	r3, #8
 8102062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102066:	e218      	b.n	810249a <UART_SetConfig+0x5a6>
 8102068:	2310      	movs	r3, #16
 810206a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810206e:	e214      	b.n	810249a <UART_SetConfig+0x5a6>
 8102070:	2320      	movs	r3, #32
 8102072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102076:	e210      	b.n	810249a <UART_SetConfig+0x5a6>
 8102078:	2340      	movs	r3, #64	@ 0x40
 810207a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810207e:	e20c      	b.n	810249a <UART_SetConfig+0x5a6>
 8102080:	2380      	movs	r3, #128	@ 0x80
 8102082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102086:	e208      	b.n	810249a <UART_SetConfig+0x5a6>
 8102088:	697b      	ldr	r3, [r7, #20]
 810208a:	681b      	ldr	r3, [r3, #0]
 810208c:	4a66      	ldr	r2, [pc, #408]	@ (8102228 <UART_SetConfig+0x334>)
 810208e:	4293      	cmp	r3, r2
 8102090:	d130      	bne.n	81020f4 <UART_SetConfig+0x200>
 8102092:	4b64      	ldr	r3, [pc, #400]	@ (8102224 <UART_SetConfig+0x330>)
 8102094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102096:	f003 0307 	and.w	r3, r3, #7
 810209a:	2b05      	cmp	r3, #5
 810209c:	d826      	bhi.n	81020ec <UART_SetConfig+0x1f8>
 810209e:	a201      	add	r2, pc, #4	@ (adr r2, 81020a4 <UART_SetConfig+0x1b0>)
 81020a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020a4:	081020bd 	.word	0x081020bd
 81020a8:	081020c5 	.word	0x081020c5
 81020ac:	081020cd 	.word	0x081020cd
 81020b0:	081020d5 	.word	0x081020d5
 81020b4:	081020dd 	.word	0x081020dd
 81020b8:	081020e5 	.word	0x081020e5
 81020bc:	2300      	movs	r3, #0
 81020be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81020c2:	e1ea      	b.n	810249a <UART_SetConfig+0x5a6>
 81020c4:	2304      	movs	r3, #4
 81020c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81020ca:	e1e6      	b.n	810249a <UART_SetConfig+0x5a6>
 81020cc:	2308      	movs	r3, #8
 81020ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81020d2:	e1e2      	b.n	810249a <UART_SetConfig+0x5a6>
 81020d4:	2310      	movs	r3, #16
 81020d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81020da:	e1de      	b.n	810249a <UART_SetConfig+0x5a6>
 81020dc:	2320      	movs	r3, #32
 81020de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81020e2:	e1da      	b.n	810249a <UART_SetConfig+0x5a6>
 81020e4:	2340      	movs	r3, #64	@ 0x40
 81020e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81020ea:	e1d6      	b.n	810249a <UART_SetConfig+0x5a6>
 81020ec:	2380      	movs	r3, #128	@ 0x80
 81020ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81020f2:	e1d2      	b.n	810249a <UART_SetConfig+0x5a6>
 81020f4:	697b      	ldr	r3, [r7, #20]
 81020f6:	681b      	ldr	r3, [r3, #0]
 81020f8:	4a4c      	ldr	r2, [pc, #304]	@ (810222c <UART_SetConfig+0x338>)
 81020fa:	4293      	cmp	r3, r2
 81020fc:	d130      	bne.n	8102160 <UART_SetConfig+0x26c>
 81020fe:	4b49      	ldr	r3, [pc, #292]	@ (8102224 <UART_SetConfig+0x330>)
 8102100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102102:	f003 0307 	and.w	r3, r3, #7
 8102106:	2b05      	cmp	r3, #5
 8102108:	d826      	bhi.n	8102158 <UART_SetConfig+0x264>
 810210a:	a201      	add	r2, pc, #4	@ (adr r2, 8102110 <UART_SetConfig+0x21c>)
 810210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102110:	08102129 	.word	0x08102129
 8102114:	08102131 	.word	0x08102131
 8102118:	08102139 	.word	0x08102139
 810211c:	08102141 	.word	0x08102141
 8102120:	08102149 	.word	0x08102149
 8102124:	08102151 	.word	0x08102151
 8102128:	2300      	movs	r3, #0
 810212a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810212e:	e1b4      	b.n	810249a <UART_SetConfig+0x5a6>
 8102130:	2304      	movs	r3, #4
 8102132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102136:	e1b0      	b.n	810249a <UART_SetConfig+0x5a6>
 8102138:	2308      	movs	r3, #8
 810213a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810213e:	e1ac      	b.n	810249a <UART_SetConfig+0x5a6>
 8102140:	2310      	movs	r3, #16
 8102142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102146:	e1a8      	b.n	810249a <UART_SetConfig+0x5a6>
 8102148:	2320      	movs	r3, #32
 810214a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810214e:	e1a4      	b.n	810249a <UART_SetConfig+0x5a6>
 8102150:	2340      	movs	r3, #64	@ 0x40
 8102152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102156:	e1a0      	b.n	810249a <UART_SetConfig+0x5a6>
 8102158:	2380      	movs	r3, #128	@ 0x80
 810215a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810215e:	e19c      	b.n	810249a <UART_SetConfig+0x5a6>
 8102160:	697b      	ldr	r3, [r7, #20]
 8102162:	681b      	ldr	r3, [r3, #0]
 8102164:	4a32      	ldr	r2, [pc, #200]	@ (8102230 <UART_SetConfig+0x33c>)
 8102166:	4293      	cmp	r3, r2
 8102168:	d130      	bne.n	81021cc <UART_SetConfig+0x2d8>
 810216a:	4b2e      	ldr	r3, [pc, #184]	@ (8102224 <UART_SetConfig+0x330>)
 810216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810216e:	f003 0307 	and.w	r3, r3, #7
 8102172:	2b05      	cmp	r3, #5
 8102174:	d826      	bhi.n	81021c4 <UART_SetConfig+0x2d0>
 8102176:	a201      	add	r2, pc, #4	@ (adr r2, 810217c <UART_SetConfig+0x288>)
 8102178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810217c:	08102195 	.word	0x08102195
 8102180:	0810219d 	.word	0x0810219d
 8102184:	081021a5 	.word	0x081021a5
 8102188:	081021ad 	.word	0x081021ad
 810218c:	081021b5 	.word	0x081021b5
 8102190:	081021bd 	.word	0x081021bd
 8102194:	2300      	movs	r3, #0
 8102196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810219a:	e17e      	b.n	810249a <UART_SetConfig+0x5a6>
 810219c:	2304      	movs	r3, #4
 810219e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81021a2:	e17a      	b.n	810249a <UART_SetConfig+0x5a6>
 81021a4:	2308      	movs	r3, #8
 81021a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81021aa:	e176      	b.n	810249a <UART_SetConfig+0x5a6>
 81021ac:	2310      	movs	r3, #16
 81021ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81021b2:	e172      	b.n	810249a <UART_SetConfig+0x5a6>
 81021b4:	2320      	movs	r3, #32
 81021b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81021ba:	e16e      	b.n	810249a <UART_SetConfig+0x5a6>
 81021bc:	2340      	movs	r3, #64	@ 0x40
 81021be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81021c2:	e16a      	b.n	810249a <UART_SetConfig+0x5a6>
 81021c4:	2380      	movs	r3, #128	@ 0x80
 81021c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81021ca:	e166      	b.n	810249a <UART_SetConfig+0x5a6>
 81021cc:	697b      	ldr	r3, [r7, #20]
 81021ce:	681b      	ldr	r3, [r3, #0]
 81021d0:	4a18      	ldr	r2, [pc, #96]	@ (8102234 <UART_SetConfig+0x340>)
 81021d2:	4293      	cmp	r3, r2
 81021d4:	d140      	bne.n	8102258 <UART_SetConfig+0x364>
 81021d6:	4b13      	ldr	r3, [pc, #76]	@ (8102224 <UART_SetConfig+0x330>)
 81021d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81021da:	f003 0307 	and.w	r3, r3, #7
 81021de:	2b05      	cmp	r3, #5
 81021e0:	d836      	bhi.n	8102250 <UART_SetConfig+0x35c>
 81021e2:	a201      	add	r2, pc, #4	@ (adr r2, 81021e8 <UART_SetConfig+0x2f4>)
 81021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81021e8:	08102201 	.word	0x08102201
 81021ec:	08102209 	.word	0x08102209
 81021f0:	08102211 	.word	0x08102211
 81021f4:	08102239 	.word	0x08102239
 81021f8:	08102241 	.word	0x08102241
 81021fc:	08102249 	.word	0x08102249
 8102200:	2300      	movs	r3, #0
 8102202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102206:	e148      	b.n	810249a <UART_SetConfig+0x5a6>
 8102208:	2304      	movs	r3, #4
 810220a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810220e:	e144      	b.n	810249a <UART_SetConfig+0x5a6>
 8102210:	2308      	movs	r3, #8
 8102212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102216:	e140      	b.n	810249a <UART_SetConfig+0x5a6>
 8102218:	cfff69f3 	.word	0xcfff69f3
 810221c:	58000c00 	.word	0x58000c00
 8102220:	40011000 	.word	0x40011000
 8102224:	58024400 	.word	0x58024400
 8102228:	40004400 	.word	0x40004400
 810222c:	40004800 	.word	0x40004800
 8102230:	40004c00 	.word	0x40004c00
 8102234:	40005000 	.word	0x40005000
 8102238:	2310      	movs	r3, #16
 810223a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810223e:	e12c      	b.n	810249a <UART_SetConfig+0x5a6>
 8102240:	2320      	movs	r3, #32
 8102242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102246:	e128      	b.n	810249a <UART_SetConfig+0x5a6>
 8102248:	2340      	movs	r3, #64	@ 0x40
 810224a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810224e:	e124      	b.n	810249a <UART_SetConfig+0x5a6>
 8102250:	2380      	movs	r3, #128	@ 0x80
 8102252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102256:	e120      	b.n	810249a <UART_SetConfig+0x5a6>
 8102258:	697b      	ldr	r3, [r7, #20]
 810225a:	681b      	ldr	r3, [r3, #0]
 810225c:	4acb      	ldr	r2, [pc, #812]	@ (810258c <UART_SetConfig+0x698>)
 810225e:	4293      	cmp	r3, r2
 8102260:	d176      	bne.n	8102350 <UART_SetConfig+0x45c>
 8102262:	4bcb      	ldr	r3, [pc, #812]	@ (8102590 <UART_SetConfig+0x69c>)
 8102264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810226a:	2b28      	cmp	r3, #40	@ 0x28
 810226c:	d86c      	bhi.n	8102348 <UART_SetConfig+0x454>
 810226e:	a201      	add	r2, pc, #4	@ (adr r2, 8102274 <UART_SetConfig+0x380>)
 8102270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102274:	08102319 	.word	0x08102319
 8102278:	08102349 	.word	0x08102349
 810227c:	08102349 	.word	0x08102349
 8102280:	08102349 	.word	0x08102349
 8102284:	08102349 	.word	0x08102349
 8102288:	08102349 	.word	0x08102349
 810228c:	08102349 	.word	0x08102349
 8102290:	08102349 	.word	0x08102349
 8102294:	08102321 	.word	0x08102321
 8102298:	08102349 	.word	0x08102349
 810229c:	08102349 	.word	0x08102349
 81022a0:	08102349 	.word	0x08102349
 81022a4:	08102349 	.word	0x08102349
 81022a8:	08102349 	.word	0x08102349
 81022ac:	08102349 	.word	0x08102349
 81022b0:	08102349 	.word	0x08102349
 81022b4:	08102329 	.word	0x08102329
 81022b8:	08102349 	.word	0x08102349
 81022bc:	08102349 	.word	0x08102349
 81022c0:	08102349 	.word	0x08102349
 81022c4:	08102349 	.word	0x08102349
 81022c8:	08102349 	.word	0x08102349
 81022cc:	08102349 	.word	0x08102349
 81022d0:	08102349 	.word	0x08102349
 81022d4:	08102331 	.word	0x08102331
 81022d8:	08102349 	.word	0x08102349
 81022dc:	08102349 	.word	0x08102349
 81022e0:	08102349 	.word	0x08102349
 81022e4:	08102349 	.word	0x08102349
 81022e8:	08102349 	.word	0x08102349
 81022ec:	08102349 	.word	0x08102349
 81022f0:	08102349 	.word	0x08102349
 81022f4:	08102339 	.word	0x08102339
 81022f8:	08102349 	.word	0x08102349
 81022fc:	08102349 	.word	0x08102349
 8102300:	08102349 	.word	0x08102349
 8102304:	08102349 	.word	0x08102349
 8102308:	08102349 	.word	0x08102349
 810230c:	08102349 	.word	0x08102349
 8102310:	08102349 	.word	0x08102349
 8102314:	08102341 	.word	0x08102341
 8102318:	2301      	movs	r3, #1
 810231a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810231e:	e0bc      	b.n	810249a <UART_SetConfig+0x5a6>
 8102320:	2304      	movs	r3, #4
 8102322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102326:	e0b8      	b.n	810249a <UART_SetConfig+0x5a6>
 8102328:	2308      	movs	r3, #8
 810232a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810232e:	e0b4      	b.n	810249a <UART_SetConfig+0x5a6>
 8102330:	2310      	movs	r3, #16
 8102332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102336:	e0b0      	b.n	810249a <UART_SetConfig+0x5a6>
 8102338:	2320      	movs	r3, #32
 810233a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810233e:	e0ac      	b.n	810249a <UART_SetConfig+0x5a6>
 8102340:	2340      	movs	r3, #64	@ 0x40
 8102342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102346:	e0a8      	b.n	810249a <UART_SetConfig+0x5a6>
 8102348:	2380      	movs	r3, #128	@ 0x80
 810234a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810234e:	e0a4      	b.n	810249a <UART_SetConfig+0x5a6>
 8102350:	697b      	ldr	r3, [r7, #20]
 8102352:	681b      	ldr	r3, [r3, #0]
 8102354:	4a8f      	ldr	r2, [pc, #572]	@ (8102594 <UART_SetConfig+0x6a0>)
 8102356:	4293      	cmp	r3, r2
 8102358:	d130      	bne.n	81023bc <UART_SetConfig+0x4c8>
 810235a:	4b8d      	ldr	r3, [pc, #564]	@ (8102590 <UART_SetConfig+0x69c>)
 810235c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810235e:	f003 0307 	and.w	r3, r3, #7
 8102362:	2b05      	cmp	r3, #5
 8102364:	d826      	bhi.n	81023b4 <UART_SetConfig+0x4c0>
 8102366:	a201      	add	r2, pc, #4	@ (adr r2, 810236c <UART_SetConfig+0x478>)
 8102368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810236c:	08102385 	.word	0x08102385
 8102370:	0810238d 	.word	0x0810238d
 8102374:	08102395 	.word	0x08102395
 8102378:	0810239d 	.word	0x0810239d
 810237c:	081023a5 	.word	0x081023a5
 8102380:	081023ad 	.word	0x081023ad
 8102384:	2300      	movs	r3, #0
 8102386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810238a:	e086      	b.n	810249a <UART_SetConfig+0x5a6>
 810238c:	2304      	movs	r3, #4
 810238e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102392:	e082      	b.n	810249a <UART_SetConfig+0x5a6>
 8102394:	2308      	movs	r3, #8
 8102396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810239a:	e07e      	b.n	810249a <UART_SetConfig+0x5a6>
 810239c:	2310      	movs	r3, #16
 810239e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81023a2:	e07a      	b.n	810249a <UART_SetConfig+0x5a6>
 81023a4:	2320      	movs	r3, #32
 81023a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81023aa:	e076      	b.n	810249a <UART_SetConfig+0x5a6>
 81023ac:	2340      	movs	r3, #64	@ 0x40
 81023ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81023b2:	e072      	b.n	810249a <UART_SetConfig+0x5a6>
 81023b4:	2380      	movs	r3, #128	@ 0x80
 81023b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81023ba:	e06e      	b.n	810249a <UART_SetConfig+0x5a6>
 81023bc:	697b      	ldr	r3, [r7, #20]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	4a75      	ldr	r2, [pc, #468]	@ (8102598 <UART_SetConfig+0x6a4>)
 81023c2:	4293      	cmp	r3, r2
 81023c4:	d130      	bne.n	8102428 <UART_SetConfig+0x534>
 81023c6:	4b72      	ldr	r3, [pc, #456]	@ (8102590 <UART_SetConfig+0x69c>)
 81023c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81023ca:	f003 0307 	and.w	r3, r3, #7
 81023ce:	2b05      	cmp	r3, #5
 81023d0:	d826      	bhi.n	8102420 <UART_SetConfig+0x52c>
 81023d2:	a201      	add	r2, pc, #4	@ (adr r2, 81023d8 <UART_SetConfig+0x4e4>)
 81023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81023d8:	081023f1 	.word	0x081023f1
 81023dc:	081023f9 	.word	0x081023f9
 81023e0:	08102401 	.word	0x08102401
 81023e4:	08102409 	.word	0x08102409
 81023e8:	08102411 	.word	0x08102411
 81023ec:	08102419 	.word	0x08102419
 81023f0:	2300      	movs	r3, #0
 81023f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81023f6:	e050      	b.n	810249a <UART_SetConfig+0x5a6>
 81023f8:	2304      	movs	r3, #4
 81023fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81023fe:	e04c      	b.n	810249a <UART_SetConfig+0x5a6>
 8102400:	2308      	movs	r3, #8
 8102402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102406:	e048      	b.n	810249a <UART_SetConfig+0x5a6>
 8102408:	2310      	movs	r3, #16
 810240a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810240e:	e044      	b.n	810249a <UART_SetConfig+0x5a6>
 8102410:	2320      	movs	r3, #32
 8102412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102416:	e040      	b.n	810249a <UART_SetConfig+0x5a6>
 8102418:	2340      	movs	r3, #64	@ 0x40
 810241a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810241e:	e03c      	b.n	810249a <UART_SetConfig+0x5a6>
 8102420:	2380      	movs	r3, #128	@ 0x80
 8102422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102426:	e038      	b.n	810249a <UART_SetConfig+0x5a6>
 8102428:	697b      	ldr	r3, [r7, #20]
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	4a5b      	ldr	r2, [pc, #364]	@ (810259c <UART_SetConfig+0x6a8>)
 810242e:	4293      	cmp	r3, r2
 8102430:	d130      	bne.n	8102494 <UART_SetConfig+0x5a0>
 8102432:	4b57      	ldr	r3, [pc, #348]	@ (8102590 <UART_SetConfig+0x69c>)
 8102434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102436:	f003 0307 	and.w	r3, r3, #7
 810243a:	2b05      	cmp	r3, #5
 810243c:	d826      	bhi.n	810248c <UART_SetConfig+0x598>
 810243e:	a201      	add	r2, pc, #4	@ (adr r2, 8102444 <UART_SetConfig+0x550>)
 8102440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102444:	0810245d 	.word	0x0810245d
 8102448:	08102465 	.word	0x08102465
 810244c:	0810246d 	.word	0x0810246d
 8102450:	08102475 	.word	0x08102475
 8102454:	0810247d 	.word	0x0810247d
 8102458:	08102485 	.word	0x08102485
 810245c:	2302      	movs	r3, #2
 810245e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102462:	e01a      	b.n	810249a <UART_SetConfig+0x5a6>
 8102464:	2304      	movs	r3, #4
 8102466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810246a:	e016      	b.n	810249a <UART_SetConfig+0x5a6>
 810246c:	2308      	movs	r3, #8
 810246e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102472:	e012      	b.n	810249a <UART_SetConfig+0x5a6>
 8102474:	2310      	movs	r3, #16
 8102476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810247a:	e00e      	b.n	810249a <UART_SetConfig+0x5a6>
 810247c:	2320      	movs	r3, #32
 810247e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102482:	e00a      	b.n	810249a <UART_SetConfig+0x5a6>
 8102484:	2340      	movs	r3, #64	@ 0x40
 8102486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810248a:	e006      	b.n	810249a <UART_SetConfig+0x5a6>
 810248c:	2380      	movs	r3, #128	@ 0x80
 810248e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8102492:	e002      	b.n	810249a <UART_SetConfig+0x5a6>
 8102494:	2380      	movs	r3, #128	@ 0x80
 8102496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810249a:	697b      	ldr	r3, [r7, #20]
 810249c:	681b      	ldr	r3, [r3, #0]
 810249e:	4a3f      	ldr	r2, [pc, #252]	@ (810259c <UART_SetConfig+0x6a8>)
 81024a0:	4293      	cmp	r3, r2
 81024a2:	f040 80f8 	bne.w	8102696 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81024a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81024aa:	2b20      	cmp	r3, #32
 81024ac:	dc46      	bgt.n	810253c <UART_SetConfig+0x648>
 81024ae:	2b02      	cmp	r3, #2
 81024b0:	f2c0 8082 	blt.w	81025b8 <UART_SetConfig+0x6c4>
 81024b4:	3b02      	subs	r3, #2
 81024b6:	2b1e      	cmp	r3, #30
 81024b8:	d87e      	bhi.n	81025b8 <UART_SetConfig+0x6c4>
 81024ba:	a201      	add	r2, pc, #4	@ (adr r2, 81024c0 <UART_SetConfig+0x5cc>)
 81024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81024c0:	08102543 	.word	0x08102543
 81024c4:	081025b9 	.word	0x081025b9
 81024c8:	0810254b 	.word	0x0810254b
 81024cc:	081025b9 	.word	0x081025b9
 81024d0:	081025b9 	.word	0x081025b9
 81024d4:	081025b9 	.word	0x081025b9
 81024d8:	0810255b 	.word	0x0810255b
 81024dc:	081025b9 	.word	0x081025b9
 81024e0:	081025b9 	.word	0x081025b9
 81024e4:	081025b9 	.word	0x081025b9
 81024e8:	081025b9 	.word	0x081025b9
 81024ec:	081025b9 	.word	0x081025b9
 81024f0:	081025b9 	.word	0x081025b9
 81024f4:	081025b9 	.word	0x081025b9
 81024f8:	0810256b 	.word	0x0810256b
 81024fc:	081025b9 	.word	0x081025b9
 8102500:	081025b9 	.word	0x081025b9
 8102504:	081025b9 	.word	0x081025b9
 8102508:	081025b9 	.word	0x081025b9
 810250c:	081025b9 	.word	0x081025b9
 8102510:	081025b9 	.word	0x081025b9
 8102514:	081025b9 	.word	0x081025b9
 8102518:	081025b9 	.word	0x081025b9
 810251c:	081025b9 	.word	0x081025b9
 8102520:	081025b9 	.word	0x081025b9
 8102524:	081025b9 	.word	0x081025b9
 8102528:	081025b9 	.word	0x081025b9
 810252c:	081025b9 	.word	0x081025b9
 8102530:	081025b9 	.word	0x081025b9
 8102534:	081025b9 	.word	0x081025b9
 8102538:	081025ab 	.word	0x081025ab
 810253c:	2b40      	cmp	r3, #64	@ 0x40
 810253e:	d037      	beq.n	81025b0 <UART_SetConfig+0x6bc>
 8102540:	e03a      	b.n	81025b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8102542:	f7ff f9bf 	bl	81018c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8102546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8102548:	e03c      	b.n	81025c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810254a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810254e:	4618      	mov	r0, r3
 8102550:	f7ff f9ce 	bl	81018f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8102554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102558:	e034      	b.n	81025c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810255a:	f107 0318 	add.w	r3, r7, #24
 810255e:	4618      	mov	r0, r3
 8102560:	f7ff fb1a 	bl	8101b98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8102564:	69fb      	ldr	r3, [r7, #28]
 8102566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102568:	e02c      	b.n	81025c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810256a:	4b09      	ldr	r3, [pc, #36]	@ (8102590 <UART_SetConfig+0x69c>)
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	f003 0320 	and.w	r3, r3, #32
 8102572:	2b00      	cmp	r3, #0
 8102574:	d016      	beq.n	81025a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8102576:	4b06      	ldr	r3, [pc, #24]	@ (8102590 <UART_SetConfig+0x69c>)
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	08db      	lsrs	r3, r3, #3
 810257c:	f003 0303 	and.w	r3, r3, #3
 8102580:	4a07      	ldr	r2, [pc, #28]	@ (81025a0 <UART_SetConfig+0x6ac>)
 8102582:	fa22 f303 	lsr.w	r3, r2, r3
 8102586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8102588:	e01c      	b.n	81025c4 <UART_SetConfig+0x6d0>
 810258a:	bf00      	nop
 810258c:	40011400 	.word	0x40011400
 8102590:	58024400 	.word	0x58024400
 8102594:	40007800 	.word	0x40007800
 8102598:	40007c00 	.word	0x40007c00
 810259c:	58000c00 	.word	0x58000c00
 81025a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81025a4:	4b9d      	ldr	r3, [pc, #628]	@ (810281c <UART_SetConfig+0x928>)
 81025a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81025a8:	e00c      	b.n	81025c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81025aa:	4b9d      	ldr	r3, [pc, #628]	@ (8102820 <UART_SetConfig+0x92c>)
 81025ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81025ae:	e009      	b.n	81025c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81025b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81025b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81025b6:	e005      	b.n	81025c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81025b8:	2300      	movs	r3, #0
 81025ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81025bc:	2301      	movs	r3, #1
 81025be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81025c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81025c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81025c6:	2b00      	cmp	r3, #0
 81025c8:	f000 81de 	beq.w	8102988 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81025cc:	697b      	ldr	r3, [r7, #20]
 81025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81025d0:	4a94      	ldr	r2, [pc, #592]	@ (8102824 <UART_SetConfig+0x930>)
 81025d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81025d6:	461a      	mov	r2, r3
 81025d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81025da:	fbb3 f3f2 	udiv	r3, r3, r2
 81025de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81025e0:	697b      	ldr	r3, [r7, #20]
 81025e2:	685a      	ldr	r2, [r3, #4]
 81025e4:	4613      	mov	r3, r2
 81025e6:	005b      	lsls	r3, r3, #1
 81025e8:	4413      	add	r3, r2
 81025ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81025ec:	429a      	cmp	r2, r3
 81025ee:	d305      	bcc.n	81025fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81025f0:	697b      	ldr	r3, [r7, #20]
 81025f2:	685b      	ldr	r3, [r3, #4]
 81025f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81025f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81025f8:	429a      	cmp	r2, r3
 81025fa:	d903      	bls.n	8102604 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81025fc:	2301      	movs	r3, #1
 81025fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8102602:	e1c1      	b.n	8102988 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8102604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102606:	2200      	movs	r2, #0
 8102608:	60bb      	str	r3, [r7, #8]
 810260a:	60fa      	str	r2, [r7, #12]
 810260c:	697b      	ldr	r3, [r7, #20]
 810260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102610:	4a84      	ldr	r2, [pc, #528]	@ (8102824 <UART_SetConfig+0x930>)
 8102612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8102616:	b29b      	uxth	r3, r3
 8102618:	2200      	movs	r2, #0
 810261a:	603b      	str	r3, [r7, #0]
 810261c:	607a      	str	r2, [r7, #4]
 810261e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8102622:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8102626:	f7fd fe57 	bl	81002d8 <__aeabi_uldivmod>
 810262a:	4602      	mov	r2, r0
 810262c:	460b      	mov	r3, r1
 810262e:	4610      	mov	r0, r2
 8102630:	4619      	mov	r1, r3
 8102632:	f04f 0200 	mov.w	r2, #0
 8102636:	f04f 0300 	mov.w	r3, #0
 810263a:	020b      	lsls	r3, r1, #8
 810263c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8102640:	0202      	lsls	r2, r0, #8
 8102642:	6979      	ldr	r1, [r7, #20]
 8102644:	6849      	ldr	r1, [r1, #4]
 8102646:	0849      	lsrs	r1, r1, #1
 8102648:	2000      	movs	r0, #0
 810264a:	460c      	mov	r4, r1
 810264c:	4605      	mov	r5, r0
 810264e:	eb12 0804 	adds.w	r8, r2, r4
 8102652:	eb43 0905 	adc.w	r9, r3, r5
 8102656:	697b      	ldr	r3, [r7, #20]
 8102658:	685b      	ldr	r3, [r3, #4]
 810265a:	2200      	movs	r2, #0
 810265c:	469a      	mov	sl, r3
 810265e:	4693      	mov	fp, r2
 8102660:	4652      	mov	r2, sl
 8102662:	465b      	mov	r3, fp
 8102664:	4640      	mov	r0, r8
 8102666:	4649      	mov	r1, r9
 8102668:	f7fd fe36 	bl	81002d8 <__aeabi_uldivmod>
 810266c:	4602      	mov	r2, r0
 810266e:	460b      	mov	r3, r1
 8102670:	4613      	mov	r3, r2
 8102672:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8102674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102676:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810267a:	d308      	bcc.n	810268e <UART_SetConfig+0x79a>
 810267c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810267e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102682:	d204      	bcs.n	810268e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8102684:	697b      	ldr	r3, [r7, #20]
 8102686:	681b      	ldr	r3, [r3, #0]
 8102688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810268a:	60da      	str	r2, [r3, #12]
 810268c:	e17c      	b.n	8102988 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810268e:	2301      	movs	r3, #1
 8102690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8102694:	e178      	b.n	8102988 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8102696:	697b      	ldr	r3, [r7, #20]
 8102698:	69db      	ldr	r3, [r3, #28]
 810269a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810269e:	f040 80c5 	bne.w	810282c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81026a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81026a6:	2b20      	cmp	r3, #32
 81026a8:	dc48      	bgt.n	810273c <UART_SetConfig+0x848>
 81026aa:	2b00      	cmp	r3, #0
 81026ac:	db7b      	blt.n	81027a6 <UART_SetConfig+0x8b2>
 81026ae:	2b20      	cmp	r3, #32
 81026b0:	d879      	bhi.n	81027a6 <UART_SetConfig+0x8b2>
 81026b2:	a201      	add	r2, pc, #4	@ (adr r2, 81026b8 <UART_SetConfig+0x7c4>)
 81026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81026b8:	08102743 	.word	0x08102743
 81026bc:	0810274b 	.word	0x0810274b
 81026c0:	081027a7 	.word	0x081027a7
 81026c4:	081027a7 	.word	0x081027a7
 81026c8:	08102753 	.word	0x08102753
 81026cc:	081027a7 	.word	0x081027a7
 81026d0:	081027a7 	.word	0x081027a7
 81026d4:	081027a7 	.word	0x081027a7
 81026d8:	08102763 	.word	0x08102763
 81026dc:	081027a7 	.word	0x081027a7
 81026e0:	081027a7 	.word	0x081027a7
 81026e4:	081027a7 	.word	0x081027a7
 81026e8:	081027a7 	.word	0x081027a7
 81026ec:	081027a7 	.word	0x081027a7
 81026f0:	081027a7 	.word	0x081027a7
 81026f4:	081027a7 	.word	0x081027a7
 81026f8:	08102773 	.word	0x08102773
 81026fc:	081027a7 	.word	0x081027a7
 8102700:	081027a7 	.word	0x081027a7
 8102704:	081027a7 	.word	0x081027a7
 8102708:	081027a7 	.word	0x081027a7
 810270c:	081027a7 	.word	0x081027a7
 8102710:	081027a7 	.word	0x081027a7
 8102714:	081027a7 	.word	0x081027a7
 8102718:	081027a7 	.word	0x081027a7
 810271c:	081027a7 	.word	0x081027a7
 8102720:	081027a7 	.word	0x081027a7
 8102724:	081027a7 	.word	0x081027a7
 8102728:	081027a7 	.word	0x081027a7
 810272c:	081027a7 	.word	0x081027a7
 8102730:	081027a7 	.word	0x081027a7
 8102734:	081027a7 	.word	0x081027a7
 8102738:	08102799 	.word	0x08102799
 810273c:	2b40      	cmp	r3, #64	@ 0x40
 810273e:	d02e      	beq.n	810279e <UART_SetConfig+0x8aa>
 8102740:	e031      	b.n	81027a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8102742:	f7ff f893 	bl	810186c <HAL_RCC_GetPCLK1Freq>
 8102746:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8102748:	e033      	b.n	81027b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810274a:	f7ff f8a5 	bl	8101898 <HAL_RCC_GetPCLK2Freq>
 810274e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8102750:	e02f      	b.n	81027b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8102752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102756:	4618      	mov	r0, r3
 8102758:	f7ff f8ca 	bl	81018f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810275e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102760:	e027      	b.n	81027b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8102762:	f107 0318 	add.w	r3, r7, #24
 8102766:	4618      	mov	r0, r3
 8102768:	f7ff fa16 	bl	8101b98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810276c:	69fb      	ldr	r3, [r7, #28]
 810276e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102770:	e01f      	b.n	81027b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102772:	4b2d      	ldr	r3, [pc, #180]	@ (8102828 <UART_SetConfig+0x934>)
 8102774:	681b      	ldr	r3, [r3, #0]
 8102776:	f003 0320 	and.w	r3, r3, #32
 810277a:	2b00      	cmp	r3, #0
 810277c:	d009      	beq.n	8102792 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810277e:	4b2a      	ldr	r3, [pc, #168]	@ (8102828 <UART_SetConfig+0x934>)
 8102780:	681b      	ldr	r3, [r3, #0]
 8102782:	08db      	lsrs	r3, r3, #3
 8102784:	f003 0303 	and.w	r3, r3, #3
 8102788:	4a24      	ldr	r2, [pc, #144]	@ (810281c <UART_SetConfig+0x928>)
 810278a:	fa22 f303 	lsr.w	r3, r2, r3
 810278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8102790:	e00f      	b.n	81027b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8102792:	4b22      	ldr	r3, [pc, #136]	@ (810281c <UART_SetConfig+0x928>)
 8102794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102796:	e00c      	b.n	81027b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8102798:	4b21      	ldr	r3, [pc, #132]	@ (8102820 <UART_SetConfig+0x92c>)
 810279a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810279c:	e009      	b.n	81027b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810279e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81027a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81027a4:	e005      	b.n	81027b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81027a6:	2300      	movs	r3, #0
 81027a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81027aa:	2301      	movs	r3, #1
 81027ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81027b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81027b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81027b4:	2b00      	cmp	r3, #0
 81027b6:	f000 80e7 	beq.w	8102988 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81027ba:	697b      	ldr	r3, [r7, #20]
 81027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81027be:	4a19      	ldr	r2, [pc, #100]	@ (8102824 <UART_SetConfig+0x930>)
 81027c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81027c4:	461a      	mov	r2, r3
 81027c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81027c8:	fbb3 f3f2 	udiv	r3, r3, r2
 81027cc:	005a      	lsls	r2, r3, #1
 81027ce:	697b      	ldr	r3, [r7, #20]
 81027d0:	685b      	ldr	r3, [r3, #4]
 81027d2:	085b      	lsrs	r3, r3, #1
 81027d4:	441a      	add	r2, r3
 81027d6:	697b      	ldr	r3, [r7, #20]
 81027d8:	685b      	ldr	r3, [r3, #4]
 81027da:	fbb2 f3f3 	udiv	r3, r2, r3
 81027de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81027e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81027e2:	2b0f      	cmp	r3, #15
 81027e4:	d916      	bls.n	8102814 <UART_SetConfig+0x920>
 81027e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81027e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81027ec:	d212      	bcs.n	8102814 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81027ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81027f0:	b29b      	uxth	r3, r3
 81027f2:	f023 030f 	bic.w	r3, r3, #15
 81027f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81027f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81027fa:	085b      	lsrs	r3, r3, #1
 81027fc:	b29b      	uxth	r3, r3
 81027fe:	f003 0307 	and.w	r3, r3, #7
 8102802:	b29a      	uxth	r2, r3
 8102804:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8102806:	4313      	orrs	r3, r2
 8102808:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810280a:	697b      	ldr	r3, [r7, #20]
 810280c:	681b      	ldr	r3, [r3, #0]
 810280e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8102810:	60da      	str	r2, [r3, #12]
 8102812:	e0b9      	b.n	8102988 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8102814:	2301      	movs	r3, #1
 8102816:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810281a:	e0b5      	b.n	8102988 <UART_SetConfig+0xa94>
 810281c:	03d09000 	.word	0x03d09000
 8102820:	003d0900 	.word	0x003d0900
 8102824:	08102e80 	.word	0x08102e80
 8102828:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810282c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8102830:	2b20      	cmp	r3, #32
 8102832:	dc49      	bgt.n	81028c8 <UART_SetConfig+0x9d4>
 8102834:	2b00      	cmp	r3, #0
 8102836:	db7c      	blt.n	8102932 <UART_SetConfig+0xa3e>
 8102838:	2b20      	cmp	r3, #32
 810283a:	d87a      	bhi.n	8102932 <UART_SetConfig+0xa3e>
 810283c:	a201      	add	r2, pc, #4	@ (adr r2, 8102844 <UART_SetConfig+0x950>)
 810283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102842:	bf00      	nop
 8102844:	081028cf 	.word	0x081028cf
 8102848:	081028d7 	.word	0x081028d7
 810284c:	08102933 	.word	0x08102933
 8102850:	08102933 	.word	0x08102933
 8102854:	081028df 	.word	0x081028df
 8102858:	08102933 	.word	0x08102933
 810285c:	08102933 	.word	0x08102933
 8102860:	08102933 	.word	0x08102933
 8102864:	081028ef 	.word	0x081028ef
 8102868:	08102933 	.word	0x08102933
 810286c:	08102933 	.word	0x08102933
 8102870:	08102933 	.word	0x08102933
 8102874:	08102933 	.word	0x08102933
 8102878:	08102933 	.word	0x08102933
 810287c:	08102933 	.word	0x08102933
 8102880:	08102933 	.word	0x08102933
 8102884:	081028ff 	.word	0x081028ff
 8102888:	08102933 	.word	0x08102933
 810288c:	08102933 	.word	0x08102933
 8102890:	08102933 	.word	0x08102933
 8102894:	08102933 	.word	0x08102933
 8102898:	08102933 	.word	0x08102933
 810289c:	08102933 	.word	0x08102933
 81028a0:	08102933 	.word	0x08102933
 81028a4:	08102933 	.word	0x08102933
 81028a8:	08102933 	.word	0x08102933
 81028ac:	08102933 	.word	0x08102933
 81028b0:	08102933 	.word	0x08102933
 81028b4:	08102933 	.word	0x08102933
 81028b8:	08102933 	.word	0x08102933
 81028bc:	08102933 	.word	0x08102933
 81028c0:	08102933 	.word	0x08102933
 81028c4:	08102925 	.word	0x08102925
 81028c8:	2b40      	cmp	r3, #64	@ 0x40
 81028ca:	d02e      	beq.n	810292a <UART_SetConfig+0xa36>
 81028cc:	e031      	b.n	8102932 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81028ce:	f7fe ffcd 	bl	810186c <HAL_RCC_GetPCLK1Freq>
 81028d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81028d4:	e033      	b.n	810293e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81028d6:	f7fe ffdf 	bl	8101898 <HAL_RCC_GetPCLK2Freq>
 81028da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81028dc:	e02f      	b.n	810293e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81028de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81028e2:	4618      	mov	r0, r3
 81028e4:	f7ff f804 	bl	81018f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81028e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81028ec:	e027      	b.n	810293e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81028ee:	f107 0318 	add.w	r3, r7, #24
 81028f2:	4618      	mov	r0, r3
 81028f4:	f7ff f950 	bl	8101b98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81028f8:	69fb      	ldr	r3, [r7, #28]
 81028fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81028fc:	e01f      	b.n	810293e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81028fe:	4b2d      	ldr	r3, [pc, #180]	@ (81029b4 <UART_SetConfig+0xac0>)
 8102900:	681b      	ldr	r3, [r3, #0]
 8102902:	f003 0320 	and.w	r3, r3, #32
 8102906:	2b00      	cmp	r3, #0
 8102908:	d009      	beq.n	810291e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810290a:	4b2a      	ldr	r3, [pc, #168]	@ (81029b4 <UART_SetConfig+0xac0>)
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	08db      	lsrs	r3, r3, #3
 8102910:	f003 0303 	and.w	r3, r3, #3
 8102914:	4a28      	ldr	r2, [pc, #160]	@ (81029b8 <UART_SetConfig+0xac4>)
 8102916:	fa22 f303 	lsr.w	r3, r2, r3
 810291a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810291c:	e00f      	b.n	810293e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810291e:	4b26      	ldr	r3, [pc, #152]	@ (81029b8 <UART_SetConfig+0xac4>)
 8102920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102922:	e00c      	b.n	810293e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8102924:	4b25      	ldr	r3, [pc, #148]	@ (81029bc <UART_SetConfig+0xac8>)
 8102926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102928:	e009      	b.n	810293e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810292a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810292e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8102930:	e005      	b.n	810293e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8102932:	2300      	movs	r3, #0
 8102934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8102936:	2301      	movs	r3, #1
 8102938:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810293c:	bf00      	nop
    }

    if (pclk != 0U)
 810293e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102940:	2b00      	cmp	r3, #0
 8102942:	d021      	beq.n	8102988 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8102944:	697b      	ldr	r3, [r7, #20]
 8102946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102948:	4a1d      	ldr	r2, [pc, #116]	@ (81029c0 <UART_SetConfig+0xacc>)
 810294a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810294e:	461a      	mov	r2, r3
 8102950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102952:	fbb3 f2f2 	udiv	r2, r3, r2
 8102956:	697b      	ldr	r3, [r7, #20]
 8102958:	685b      	ldr	r3, [r3, #4]
 810295a:	085b      	lsrs	r3, r3, #1
 810295c:	441a      	add	r2, r3
 810295e:	697b      	ldr	r3, [r7, #20]
 8102960:	685b      	ldr	r3, [r3, #4]
 8102962:	fbb2 f3f3 	udiv	r3, r2, r3
 8102966:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8102968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810296a:	2b0f      	cmp	r3, #15
 810296c:	d909      	bls.n	8102982 <UART_SetConfig+0xa8e>
 810296e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102974:	d205      	bcs.n	8102982 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8102976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102978:	b29a      	uxth	r2, r3
 810297a:	697b      	ldr	r3, [r7, #20]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	60da      	str	r2, [r3, #12]
 8102980:	e002      	b.n	8102988 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8102982:	2301      	movs	r3, #1
 8102984:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8102988:	697b      	ldr	r3, [r7, #20]
 810298a:	2201      	movs	r2, #1
 810298c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8102990:	697b      	ldr	r3, [r7, #20]
 8102992:	2201      	movs	r2, #1
 8102994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8102998:	697b      	ldr	r3, [r7, #20]
 810299a:	2200      	movs	r2, #0
 810299c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810299e:	697b      	ldr	r3, [r7, #20]
 81029a0:	2200      	movs	r2, #0
 81029a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 81029a4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 81029a8:	4618      	mov	r0, r3
 81029aa:	3748      	adds	r7, #72	@ 0x48
 81029ac:	46bd      	mov	sp, r7
 81029ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81029b2:	bf00      	nop
 81029b4:	58024400 	.word	0x58024400
 81029b8:	03d09000 	.word	0x03d09000
 81029bc:	003d0900 	.word	0x003d0900
 81029c0:	08102e80 	.word	0x08102e80

081029c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81029c4:	b480      	push	{r7}
 81029c6:	b083      	sub	sp, #12
 81029c8:	af00      	add	r7, sp, #0
 81029ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81029cc:	687b      	ldr	r3, [r7, #4]
 81029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81029d0:	f003 0308 	and.w	r3, r3, #8
 81029d4:	2b00      	cmp	r3, #0
 81029d6:	d00a      	beq.n	81029ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	681b      	ldr	r3, [r3, #0]
 81029dc:	685b      	ldr	r3, [r3, #4]
 81029de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	681b      	ldr	r3, [r3, #0]
 81029ea:	430a      	orrs	r2, r1
 81029ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81029ee:	687b      	ldr	r3, [r7, #4]
 81029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81029f2:	f003 0301 	and.w	r3, r3, #1
 81029f6:	2b00      	cmp	r3, #0
 81029f8:	d00a      	beq.n	8102a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	685b      	ldr	r3, [r3, #4]
 8102a00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	430a      	orrs	r2, r1
 8102a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a14:	f003 0302 	and.w	r3, r3, #2
 8102a18:	2b00      	cmp	r3, #0
 8102a1a:	d00a      	beq.n	8102a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	685b      	ldr	r3, [r3, #4]
 8102a22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	430a      	orrs	r2, r1
 8102a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a36:	f003 0304 	and.w	r3, r3, #4
 8102a3a:	2b00      	cmp	r3, #0
 8102a3c:	d00a      	beq.n	8102a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	685b      	ldr	r3, [r3, #4]
 8102a44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8102a4c:	687b      	ldr	r3, [r7, #4]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	430a      	orrs	r2, r1
 8102a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a58:	f003 0310 	and.w	r3, r3, #16
 8102a5c:	2b00      	cmp	r3, #0
 8102a5e:	d00a      	beq.n	8102a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	689b      	ldr	r3, [r3, #8]
 8102a66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8102a6e:	687b      	ldr	r3, [r7, #4]
 8102a70:	681b      	ldr	r3, [r3, #0]
 8102a72:	430a      	orrs	r2, r1
 8102a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a7a:	f003 0320 	and.w	r3, r3, #32
 8102a7e:	2b00      	cmp	r3, #0
 8102a80:	d00a      	beq.n	8102a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	689b      	ldr	r3, [r3, #8]
 8102a88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	430a      	orrs	r2, r1
 8102a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102aa0:	2b00      	cmp	r3, #0
 8102aa2:	d01a      	beq.n	8102ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	685b      	ldr	r3, [r3, #4]
 8102aaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8102ab2:	687b      	ldr	r3, [r7, #4]
 8102ab4:	681b      	ldr	r3, [r3, #0]
 8102ab6:	430a      	orrs	r2, r1
 8102ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102abe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102ac2:	d10a      	bne.n	8102ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	681b      	ldr	r3, [r3, #0]
 8102ac8:	685b      	ldr	r3, [r3, #4]
 8102aca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	430a      	orrs	r2, r1
 8102ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102ae2:	2b00      	cmp	r3, #0
 8102ae4:	d00a      	beq.n	8102afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	685b      	ldr	r3, [r3, #4]
 8102aec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	430a      	orrs	r2, r1
 8102afa:	605a      	str	r2, [r3, #4]
  }
}
 8102afc:	bf00      	nop
 8102afe:	370c      	adds	r7, #12
 8102b00:	46bd      	mov	sp, r7
 8102b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b06:	4770      	bx	lr

08102b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8102b08:	b580      	push	{r7, lr}
 8102b0a:	b098      	sub	sp, #96	@ 0x60
 8102b0c:	af02      	add	r7, sp, #8
 8102b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	2200      	movs	r2, #0
 8102b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8102b18:	f7fe f8fc 	bl	8100d14 <HAL_GetTick>
 8102b1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8102b1e:	687b      	ldr	r3, [r7, #4]
 8102b20:	681b      	ldr	r3, [r3, #0]
 8102b22:	681b      	ldr	r3, [r3, #0]
 8102b24:	f003 0308 	and.w	r3, r3, #8
 8102b28:	2b08      	cmp	r3, #8
 8102b2a:	d12f      	bne.n	8102b8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8102b2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8102b30:	9300      	str	r3, [sp, #0]
 8102b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8102b34:	2200      	movs	r2, #0
 8102b36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8102b3a:	6878      	ldr	r0, [r7, #4]
 8102b3c:	f000 f88e 	bl	8102c5c <UART_WaitOnFlagUntilTimeout>
 8102b40:	4603      	mov	r3, r0
 8102b42:	2b00      	cmp	r3, #0
 8102b44:	d022      	beq.n	8102b8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8102b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102b4e:	e853 3f00 	ldrex	r3, [r3]
 8102b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8102b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8102b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	681b      	ldr	r3, [r3, #0]
 8102b60:	461a      	mov	r2, r3
 8102b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8102b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8102b66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8102b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8102b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8102b6c:	e841 2300 	strex	r3, r2, [r1]
 8102b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8102b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102b74:	2b00      	cmp	r3, #0
 8102b76:	d1e6      	bne.n	8102b46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	2220      	movs	r2, #32
 8102b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	2200      	movs	r2, #0
 8102b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8102b88:	2303      	movs	r3, #3
 8102b8a:	e063      	b.n	8102c54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	681b      	ldr	r3, [r3, #0]
 8102b92:	f003 0304 	and.w	r3, r3, #4
 8102b96:	2b04      	cmp	r3, #4
 8102b98:	d149      	bne.n	8102c2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8102b9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8102b9e:	9300      	str	r3, [sp, #0]
 8102ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8102ba2:	2200      	movs	r2, #0
 8102ba4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8102ba8:	6878      	ldr	r0, [r7, #4]
 8102baa:	f000 f857 	bl	8102c5c <UART_WaitOnFlagUntilTimeout>
 8102bae:	4603      	mov	r3, r0
 8102bb0:	2b00      	cmp	r3, #0
 8102bb2:	d03c      	beq.n	8102c2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8102bb4:	687b      	ldr	r3, [r7, #4]
 8102bb6:	681b      	ldr	r3, [r3, #0]
 8102bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8102bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102bbc:	e853 3f00 	ldrex	r3, [r3]
 8102bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8102bc2:	6a3b      	ldr	r3, [r7, #32]
 8102bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8102bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	461a      	mov	r2, r3
 8102bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8102bd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8102bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8102bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8102bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102bda:	e841 2300 	strex	r3, r2, [r1]
 8102bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8102be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102be2:	2b00      	cmp	r3, #0
 8102be4:	d1e6      	bne.n	8102bb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	681b      	ldr	r3, [r3, #0]
 8102bea:	3308      	adds	r3, #8
 8102bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8102bee:	693b      	ldr	r3, [r7, #16]
 8102bf0:	e853 3f00 	ldrex	r3, [r3]
 8102bf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8102bf6:	68fb      	ldr	r3, [r7, #12]
 8102bf8:	f023 0301 	bic.w	r3, r3, #1
 8102bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102bfe:	687b      	ldr	r3, [r7, #4]
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	3308      	adds	r3, #8
 8102c04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8102c06:	61fa      	str	r2, [r7, #28]
 8102c08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8102c0a:	69b9      	ldr	r1, [r7, #24]
 8102c0c:	69fa      	ldr	r2, [r7, #28]
 8102c0e:	e841 2300 	strex	r3, r2, [r1]
 8102c12:	617b      	str	r3, [r7, #20]
   return(result);
 8102c14:	697b      	ldr	r3, [r7, #20]
 8102c16:	2b00      	cmp	r3, #0
 8102c18:	d1e5      	bne.n	8102be6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	2220      	movs	r2, #32
 8102c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	2200      	movs	r2, #0
 8102c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8102c2a:	2303      	movs	r3, #3
 8102c2c:	e012      	b.n	8102c54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	2220      	movs	r2, #32
 8102c32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	2220      	movs	r2, #32
 8102c3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8102c3e:	687b      	ldr	r3, [r7, #4]
 8102c40:	2200      	movs	r2, #0
 8102c42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	2200      	movs	r2, #0
 8102c48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8102c4a:	687b      	ldr	r3, [r7, #4]
 8102c4c:	2200      	movs	r2, #0
 8102c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8102c52:	2300      	movs	r3, #0
}
 8102c54:	4618      	mov	r0, r3
 8102c56:	3758      	adds	r7, #88	@ 0x58
 8102c58:	46bd      	mov	sp, r7
 8102c5a:	bd80      	pop	{r7, pc}

08102c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8102c5c:	b580      	push	{r7, lr}
 8102c5e:	b084      	sub	sp, #16
 8102c60:	af00      	add	r7, sp, #0
 8102c62:	60f8      	str	r0, [r7, #12]
 8102c64:	60b9      	str	r1, [r7, #8]
 8102c66:	603b      	str	r3, [r7, #0]
 8102c68:	4613      	mov	r3, r2
 8102c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8102c6c:	e04f      	b.n	8102d0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102c6e:	69bb      	ldr	r3, [r7, #24]
 8102c70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8102c74:	d04b      	beq.n	8102d0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102c76:	f7fe f84d 	bl	8100d14 <HAL_GetTick>
 8102c7a:	4602      	mov	r2, r0
 8102c7c:	683b      	ldr	r3, [r7, #0]
 8102c7e:	1ad3      	subs	r3, r2, r3
 8102c80:	69ba      	ldr	r2, [r7, #24]
 8102c82:	429a      	cmp	r2, r3
 8102c84:	d302      	bcc.n	8102c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8102c86:	69bb      	ldr	r3, [r7, #24]
 8102c88:	2b00      	cmp	r3, #0
 8102c8a:	d101      	bne.n	8102c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8102c8c:	2303      	movs	r3, #3
 8102c8e:	e04e      	b.n	8102d2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8102c90:	68fb      	ldr	r3, [r7, #12]
 8102c92:	681b      	ldr	r3, [r3, #0]
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	f003 0304 	and.w	r3, r3, #4
 8102c9a:	2b00      	cmp	r3, #0
 8102c9c:	d037      	beq.n	8102d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8102c9e:	68bb      	ldr	r3, [r7, #8]
 8102ca0:	2b80      	cmp	r3, #128	@ 0x80
 8102ca2:	d034      	beq.n	8102d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8102ca4:	68bb      	ldr	r3, [r7, #8]
 8102ca6:	2b40      	cmp	r3, #64	@ 0x40
 8102ca8:	d031      	beq.n	8102d0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8102caa:	68fb      	ldr	r3, [r7, #12]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	69db      	ldr	r3, [r3, #28]
 8102cb0:	f003 0308 	and.w	r3, r3, #8
 8102cb4:	2b08      	cmp	r3, #8
 8102cb6:	d110      	bne.n	8102cda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8102cb8:	68fb      	ldr	r3, [r7, #12]
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	2208      	movs	r2, #8
 8102cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8102cc0:	68f8      	ldr	r0, [r7, #12]
 8102cc2:	f000 f838 	bl	8102d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8102cc6:	68fb      	ldr	r3, [r7, #12]
 8102cc8:	2208      	movs	r2, #8
 8102cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8102cce:	68fb      	ldr	r3, [r7, #12]
 8102cd0:	2200      	movs	r2, #0
 8102cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8102cd6:	2301      	movs	r3, #1
 8102cd8:	e029      	b.n	8102d2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8102cda:	68fb      	ldr	r3, [r7, #12]
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	69db      	ldr	r3, [r3, #28]
 8102ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8102ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102ce8:	d111      	bne.n	8102d0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8102cea:	68fb      	ldr	r3, [r7, #12]
 8102cec:	681b      	ldr	r3, [r3, #0]
 8102cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8102cf4:	68f8      	ldr	r0, [r7, #12]
 8102cf6:	f000 f81e 	bl	8102d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8102cfa:	68fb      	ldr	r3, [r7, #12]
 8102cfc:	2220      	movs	r2, #32
 8102cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8102d02:	68fb      	ldr	r3, [r7, #12]
 8102d04:	2200      	movs	r2, #0
 8102d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8102d0a:	2303      	movs	r3, #3
 8102d0c:	e00f      	b.n	8102d2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8102d0e:	68fb      	ldr	r3, [r7, #12]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	69da      	ldr	r2, [r3, #28]
 8102d14:	68bb      	ldr	r3, [r7, #8]
 8102d16:	4013      	ands	r3, r2
 8102d18:	68ba      	ldr	r2, [r7, #8]
 8102d1a:	429a      	cmp	r2, r3
 8102d1c:	bf0c      	ite	eq
 8102d1e:	2301      	moveq	r3, #1
 8102d20:	2300      	movne	r3, #0
 8102d22:	b2db      	uxtb	r3, r3
 8102d24:	461a      	mov	r2, r3
 8102d26:	79fb      	ldrb	r3, [r7, #7]
 8102d28:	429a      	cmp	r2, r3
 8102d2a:	d0a0      	beq.n	8102c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8102d2c:	2300      	movs	r3, #0
}
 8102d2e:	4618      	mov	r0, r3
 8102d30:	3710      	adds	r7, #16
 8102d32:	46bd      	mov	sp, r7
 8102d34:	bd80      	pop	{r7, pc}

08102d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8102d36:	b480      	push	{r7}
 8102d38:	b095      	sub	sp, #84	@ 0x54
 8102d3a:	af00      	add	r7, sp, #0
 8102d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8102d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8102d46:	e853 3f00 	ldrex	r3, [r3]
 8102d4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8102d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102d4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8102d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	461a      	mov	r2, r3
 8102d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8102d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8102d5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8102d60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8102d62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8102d64:	e841 2300 	strex	r3, r2, [r1]
 8102d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8102d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102d6c:	2b00      	cmp	r3, #0
 8102d6e:	d1e6      	bne.n	8102d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	681b      	ldr	r3, [r3, #0]
 8102d74:	3308      	adds	r3, #8
 8102d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8102d78:	6a3b      	ldr	r3, [r7, #32]
 8102d7a:	e853 3f00 	ldrex	r3, [r3]
 8102d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8102d80:	69fb      	ldr	r3, [r7, #28]
 8102d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8102d86:	f023 0301 	bic.w	r3, r3, #1
 8102d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	3308      	adds	r3, #8
 8102d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8102d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8102d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8102d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8102d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102d9c:	e841 2300 	strex	r3, r2, [r1]
 8102da0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8102da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102da4:	2b00      	cmp	r3, #0
 8102da6:	d1e3      	bne.n	8102d70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102dac:	2b01      	cmp	r3, #1
 8102dae:	d118      	bne.n	8102de2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8102db6:	68fb      	ldr	r3, [r7, #12]
 8102db8:	e853 3f00 	ldrex	r3, [r3]
 8102dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8102dbe:	68bb      	ldr	r3, [r7, #8]
 8102dc0:	f023 0310 	bic.w	r3, r3, #16
 8102dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	681b      	ldr	r3, [r3, #0]
 8102dca:	461a      	mov	r2, r3
 8102dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102dce:	61bb      	str	r3, [r7, #24]
 8102dd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8102dd2:	6979      	ldr	r1, [r7, #20]
 8102dd4:	69ba      	ldr	r2, [r7, #24]
 8102dd6:	e841 2300 	strex	r3, r2, [r1]
 8102dda:	613b      	str	r3, [r7, #16]
   return(result);
 8102ddc:	693b      	ldr	r3, [r7, #16]
 8102dde:	2b00      	cmp	r3, #0
 8102de0:	d1e6      	bne.n	8102db0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8102de2:	687b      	ldr	r3, [r7, #4]
 8102de4:	2220      	movs	r2, #32
 8102de6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	2200      	movs	r2, #0
 8102dee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	2200      	movs	r2, #0
 8102df4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8102df6:	bf00      	nop
 8102df8:	3754      	adds	r7, #84	@ 0x54
 8102dfa:	46bd      	mov	sp, r7
 8102dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e00:	4770      	bx	lr
	...

08102e04 <__libc_init_array>:
 8102e04:	b570      	push	{r4, r5, r6, lr}
 8102e06:	4d0d      	ldr	r5, [pc, #52]	@ (8102e3c <__libc_init_array+0x38>)
 8102e08:	4c0d      	ldr	r4, [pc, #52]	@ (8102e40 <__libc_init_array+0x3c>)
 8102e0a:	1b64      	subs	r4, r4, r5
 8102e0c:	10a4      	asrs	r4, r4, #2
 8102e0e:	2600      	movs	r6, #0
 8102e10:	42a6      	cmp	r6, r4
 8102e12:	d109      	bne.n	8102e28 <__libc_init_array+0x24>
 8102e14:	4d0b      	ldr	r5, [pc, #44]	@ (8102e44 <__libc_init_array+0x40>)
 8102e16:	4c0c      	ldr	r4, [pc, #48]	@ (8102e48 <__libc_init_array+0x44>)
 8102e18:	f000 f818 	bl	8102e4c <_init>
 8102e1c:	1b64      	subs	r4, r4, r5
 8102e1e:	10a4      	asrs	r4, r4, #2
 8102e20:	2600      	movs	r6, #0
 8102e22:	42a6      	cmp	r6, r4
 8102e24:	d105      	bne.n	8102e32 <__libc_init_array+0x2e>
 8102e26:	bd70      	pop	{r4, r5, r6, pc}
 8102e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8102e2c:	4798      	blx	r3
 8102e2e:	3601      	adds	r6, #1
 8102e30:	e7ee      	b.n	8102e10 <__libc_init_array+0xc>
 8102e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8102e36:	4798      	blx	r3
 8102e38:	3601      	adds	r6, #1
 8102e3a:	e7f2      	b.n	8102e22 <__libc_init_array+0x1e>
 8102e3c:	08102ea0 	.word	0x08102ea0
 8102e40:	08102ea0 	.word	0x08102ea0
 8102e44:	08102ea0 	.word	0x08102ea0
 8102e48:	08102ea4 	.word	0x08102ea4

08102e4c <_init>:
 8102e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102e4e:	bf00      	nop
 8102e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102e52:	bc08      	pop	{r3}
 8102e54:	469e      	mov	lr, r3
 8102e56:	4770      	bx	lr

08102e58 <_fini>:
 8102e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102e5a:	bf00      	nop
 8102e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102e5e:	bc08      	pop	{r3}
 8102e60:	469e      	mov	lr, r3
 8102e62:	4770      	bx	lr
