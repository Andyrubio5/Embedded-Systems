/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body (BIDIRECCIONAL: TX y RX) - VERSIÓN 8 BYTES
  ******************************************************************************
  * ... (Resto del encabezado)
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h> // Para sprintf
#include <string.h> // Para memset

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

// Redirección de printf a SWV/SWO (Debug con ST-Link)
int _write(int file, char *ptr, int len) {
    for(int i = 0; i < len; i++) {
        ITM_SendChar((*ptr++));
    }
    return len;
}
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define DUAL_CORE_BOOT_SYNC_SEQUENCE

#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
#ifndef HSEM_ID_0
#define HSEM_ID_0 (0U) /* HW semaphore 0*/
#endif
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
// Contador para identificar mensajes propios
static uint32_t my_tx_counter = 0;
// Timer simple para controlar la frecuencia de transmisión
static uint32_t last_tx_time = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void UART_SendString(char *str);
// NOTA: Se eliminan UART_SendByte y UART_SendNumber ya que no se usan con el paquete binario
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define RX_BUFFER_SIZE 128
#define RX_TIMEOUT_MS 1000  // Timeout de 1 segundo sin datos

uint8_t rx_buffer[RX_BUFFER_SIZE];
uint8_t rx_data;
volatile uint8_t rx_index = 0;
volatile uint8_t rx_complete = 0;
volatile uint32_t last_rx_time = 0;

// Función auxiliar para enviar cadenas (solo para mensajes de bienvenida/debug)
void UART_SendString(char *str) {
    HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

// Callback de recepción completa
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART3) {
        last_rx_time = HAL_GetTick();

        if (rx_complete && (rx_data == '\r' || rx_data == '\n')) {
            HAL_UART_Receive_IT(&huart3, &rx_data, 1);
            return;
        }

        if (rx_data == '\r' || rx_data == '\n') {
            if (rx_index > 0) {
                rx_buffer[rx_index] = '\0';
                rx_complete = 1;
            }
        } else {
            if (rx_index < RX_BUFFER_SIZE - 1) {
                rx_buffer[rx_index++] = rx_data;
            } else {
                rx_buffer[RX_BUFFER_SIZE - 1] = '\0';
                rx_complete = 1;
                printf("ADVERTENCIA: Buffer RX lleno!\r\n");
            }
        }

        HAL_UART_Receive_IT(&huart3, &rx_data, 1);
    }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  int32_t timeout;
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  timeout = 0xFFFF;
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
  if ( timeout < 0 )
  {
  Error_Handler();
  }
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
__HAL_RCC_HSEM_CLK_ENABLE();
HAL_HSEM_FastTake(HSEM_ID_0);
HAL_HSEM_Release(HSEM_ID_0,0);
timeout = 0xFFFF;
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
if ( timeout < 0 )
{
Error_Handler();
}
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  // Mensaje de bienvenida (visible en UART o SWV)
  UART_SendString("\r\n");
  UART_SendString("=====================================\r\n");
  UART_SendString("  STM32 UART Bidireccional - 8 Bytes TX\r\n");
  UART_SendString("=====================================\r\n");
  UART_SendString("TX: Paquete binario de 8 bytes cada 1.5s\r\n\r\n");

  printf("--- MCU Iniciada. TX 8 Bytes cada 1.5s ---\r\n");

  // Iniciar recepción por interrupción
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
  last_tx_time = HAL_GetTick();
  last_rx_time = HAL_GetTick();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // PARTE 1: LÓGICA DE TRANSMISIÓN PERIÓDICA (TX) - ENVÍO DE 8 BYTES
    if (HAL_GetTick() - last_tx_time >= 1500) // Transmite cada 1500 ms (1.5 segundos)
    {
        // 1. Array de 8 bytes (el paquete binario)
        uint8_t data_to_send[8];
        uint32_t counter_val = my_tx_counter; // Usamos una copia local

        // 2. Llenar los 8 bytes: 4 bytes para el contador, 4 bytes de patrón
        // Byte 0-3: Contador (de MSB a LSB, Big Endian)
        data_to_send[0] = (uint8_t)(counter_val >> 24);
        data_to_send[1] = (uint8_t)(counter_val >> 16);
        data_to_send[2] = (uint8_t)(counter_val >> 8);
        data_to_send[3] = (uint8_t)(counter_val);

        // Byte 4-7: Un patrón fijo para identificación o datos
        data_to_send[4] = 0xAA;
        data_to_send[5] = 0x55;
        data_to_send[6] = 0x00; // Por ejemplo, un byte de estado
        data_to_send[7] = 0xDE; // Por ejemplo, un Checksum (aunque simple aquí)

        // 3. Enviar el bloque de 8 bytes directamente
        if (HAL_UART_Transmit(&huart3, data_to_send, 8, 100) == HAL_OK)
        {
            // Debug propio (visible en SWV/SWO)
            printf("TX OK. Contador: %lu. Bytes: %02X %02X %02X %02X | %02X %02X %02X %02X\r\n",
                    my_tx_counter, data_to_send[0], data_to_send[1], data_to_send[2], data_to_send[3],
                    data_to_send[4], data_to_send[5], data_to_send[6], data_to_send[7]);

            my_tx_counter++;
        } else {
            printf("ERROR: Fallo en la transmision UART.\r\n");
        }

        last_tx_time = HAL_GetTick();
    }

    // PARTE 2: LÓGICA DE RECEPCIÓN Y ECO (RX) (Para recibir si alguien envía texto)
    if (rx_complete) {
        rx_complete = 0;

        printf("RX recibido: [%s] (longitud=%d bytes)\r\n", rx_buffer, rx_index);

        UART_SendString("ECO: ");
        HAL_UART_Transmit(&huart3, rx_buffer, rx_index, HAL_MAX_DELAY);
        UART_SendString("\r\n");

        rx_index = 0;
        memset(rx_buffer, 0, RX_BUFFER_SIZE);
    }

    // PARTE 3: TIMEOUT DE RECEPCIÓN
    if (rx_index > 0 && !rx_complete) {
        if (HAL_GetTick() - last_rx_time >= RX_TIMEOUT_MS) {
            rx_buffer[rx_index] = '\0';
            rx_complete = 1;
            printf("TIMEOUT: Mensaje forzado por timeout\r\n");
        }
    }

  }
  /* USER CODE END 3 */
}

// ... (El resto del código de la UART_Init, GPIO_Init, etc. se mantiene igual)
// Asegúrate de que USART3 esté configurado a 115200 8N1.

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
