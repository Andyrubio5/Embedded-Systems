
UART_UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006324  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080065bc  080065bc  000075bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006604  08006604  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006604  08006604  00007604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800660c  0800660c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800660c  0800660c  0000760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006610  08006610  00007610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08006614  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  08006624  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  08006624  000080c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a2a  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcf  00000000  00000000  00018a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0001aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a9  00000000  00000000  0001b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038acc  00000000  00000000  0001be19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffe4  00000000  00000000  000548e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00178697  00000000  00000000  000648c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dcf60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  001dcfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001dfdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080065a4 	.word	0x080065a4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080065a4 	.word	0x080065a4

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002fc:	f000 b988 	b.w	8000610 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	468e      	mov	lr, r1
 8000320:	4604      	mov	r4, r0
 8000322:	4688      	mov	r8, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4617      	mov	r7, r2
 800032c:	d962      	bls.n	80003f4 <__udivmoddi4+0xdc>
 800032e:	fab2 f682 	clz	r6, r2
 8000332:	b14e      	cbz	r6, 8000348 <__udivmoddi4+0x30>
 8000334:	f1c6 0320 	rsb	r3, r6, #32
 8000338:	fa01 f806 	lsl.w	r8, r1, r6
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	40b7      	lsls	r7, r6
 8000342:	ea43 0808 	orr.w	r8, r3, r8
 8000346:	40b4      	lsls	r4, r6
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f fc87 	uxth.w	ip, r7
 8000350:	fbb8 f1fe 	udiv	r1, r8, lr
 8000354:	0c23      	lsrs	r3, r4, #16
 8000356:	fb0e 8811 	mls	r8, lr, r1, r8
 800035a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035e:	fb01 f20c 	mul.w	r2, r1, ip
 8000362:	429a      	cmp	r2, r3
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0x62>
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800036c:	f080 80ea 	bcs.w	8000544 <__udivmoddi4+0x22c>
 8000370:	429a      	cmp	r2, r3
 8000372:	f240 80e7 	bls.w	8000544 <__udivmoddi4+0x22c>
 8000376:	3902      	subs	r1, #2
 8000378:	443b      	add	r3, r7
 800037a:	1a9a      	subs	r2, r3, r2
 800037c:	b2a3      	uxth	r3, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800038a:	fb00 fc0c 	mul.w	ip, r0, ip
 800038e:	459c      	cmp	ip, r3
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x8e>
 8000392:	18fb      	adds	r3, r7, r3
 8000394:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000398:	f080 80d6 	bcs.w	8000548 <__udivmoddi4+0x230>
 800039c:	459c      	cmp	ip, r3
 800039e:	f240 80d3 	bls.w	8000548 <__udivmoddi4+0x230>
 80003a2:	443b      	add	r3, r7
 80003a4:	3802      	subs	r0, #2
 80003a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003aa:	eba3 030c 	sub.w	r3, r3, ip
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11d      	cbz	r5, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40f3      	lsrs	r3, r6
 80003b4:	2200      	movs	r2, #0
 80003b6:	e9c5 3200 	strd	r3, r2, [r5]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d905      	bls.n	80003ce <__udivmoddi4+0xb6>
 80003c2:	b10d      	cbz	r5, 80003c8 <__udivmoddi4+0xb0>
 80003c4:	e9c5 0100 	strd	r0, r1, [r5]
 80003c8:	2100      	movs	r1, #0
 80003ca:	4608      	mov	r0, r1
 80003cc:	e7f5      	b.n	80003ba <__udivmoddi4+0xa2>
 80003ce:	fab3 f183 	clz	r1, r3
 80003d2:	2900      	cmp	r1, #0
 80003d4:	d146      	bne.n	8000464 <__udivmoddi4+0x14c>
 80003d6:	4573      	cmp	r3, lr
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xc8>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 8105 	bhi.w	80005ea <__udivmoddi4+0x2d2>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4690      	mov	r8, r2
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0e5      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003ee:	e9c5 4800 	strd	r4, r8, [r5]
 80003f2:	e7e2      	b.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f000 8090 	beq.w	800051a <__udivmoddi4+0x202>
 80003fa:	fab2 f682 	clz	r6, r2
 80003fe:	2e00      	cmp	r6, #0
 8000400:	f040 80a4 	bne.w	800054c <__udivmoddi4+0x234>
 8000404:	1a8a      	subs	r2, r1, r2
 8000406:	0c03      	lsrs	r3, r0, #16
 8000408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040c:	b280      	uxth	r0, r0
 800040e:	b2bc      	uxth	r4, r7
 8000410:	2101      	movs	r1, #1
 8000412:	fbb2 fcfe 	udiv	ip, r2, lr
 8000416:	fb0e 221c 	mls	r2, lr, ip, r2
 800041a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800041e:	fb04 f20c 	mul.w	r2, r4, ip
 8000422:	429a      	cmp	r2, r3
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x11e>
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x11c>
 800042e:	429a      	cmp	r2, r3
 8000430:	f200 80e0 	bhi.w	80005f4 <__udivmoddi4+0x2dc>
 8000434:	46c4      	mov	ip, r8
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	fbb3 f2fe 	udiv	r2, r3, lr
 800043c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000440:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000444:	fb02 f404 	mul.w	r4, r2, r4
 8000448:	429c      	cmp	r4, r3
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x144>
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x142>
 8000454:	429c      	cmp	r4, r3
 8000456:	f200 80ca 	bhi.w	80005ee <__udivmoddi4+0x2d6>
 800045a:	4602      	mov	r2, r0
 800045c:	1b1b      	subs	r3, r3, r4
 800045e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0x98>
 8000464:	f1c1 0620 	rsb	r6, r1, #32
 8000468:	408b      	lsls	r3, r1
 800046a:	fa22 f706 	lsr.w	r7, r2, r6
 800046e:	431f      	orrs	r7, r3
 8000470:	fa0e f401 	lsl.w	r4, lr, r1
 8000474:	fa20 f306 	lsr.w	r3, r0, r6
 8000478:	fa2e fe06 	lsr.w	lr, lr, r6
 800047c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000480:	4323      	orrs	r3, r4
 8000482:	fa00 f801 	lsl.w	r8, r0, r1
 8000486:	fa1f fc87 	uxth.w	ip, r7
 800048a:	fbbe f0f9 	udiv	r0, lr, r9
 800048e:	0c1c      	lsrs	r4, r3, #16
 8000490:	fb09 ee10 	mls	lr, r9, r0, lr
 8000494:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000498:	fb00 fe0c 	mul.w	lr, r0, ip
 800049c:	45a6      	cmp	lr, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x1a0>
 80004a4:	193c      	adds	r4, r7, r4
 80004a6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004aa:	f080 809c 	bcs.w	80005e6 <__udivmoddi4+0x2ce>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f240 8099 	bls.w	80005e6 <__udivmoddi4+0x2ce>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	eba4 040e 	sub.w	r4, r4, lr
 80004bc:	fa1f fe83 	uxth.w	lr, r3
 80004c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c4:	fb09 4413 	mls	r4, r9, r3, r4
 80004c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d0:	45a4      	cmp	ip, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1ce>
 80004d4:	193c      	adds	r4, r7, r4
 80004d6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004da:	f080 8082 	bcs.w	80005e2 <__udivmoddi4+0x2ca>
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d97f      	bls.n	80005e2 <__udivmoddi4+0x2ca>
 80004e2:	3b02      	subs	r3, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80004f2:	4564      	cmp	r4, ip
 80004f4:	4673      	mov	r3, lr
 80004f6:	46e1      	mov	r9, ip
 80004f8:	d362      	bcc.n	80005c0 <__udivmoddi4+0x2a8>
 80004fa:	d05f      	beq.n	80005bc <__udivmoddi4+0x2a4>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x1fe>
 80004fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000502:	eb64 0409 	sbc.w	r4, r4, r9
 8000506:	fa04 f606 	lsl.w	r6, r4, r6
 800050a:	fa22 f301 	lsr.w	r3, r2, r1
 800050e:	431e      	orrs	r6, r3
 8000510:	40cc      	lsrs	r4, r1
 8000512:	e9c5 6400 	strd	r6, r4, [r5]
 8000516:	2100      	movs	r1, #0
 8000518:	e74f      	b.n	80003ba <__udivmoddi4+0xa2>
 800051a:	fbb1 fcf2 	udiv	ip, r1, r2
 800051e:	0c01      	lsrs	r1, r0, #16
 8000520:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000524:	b280      	uxth	r0, r0
 8000526:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800052a:	463b      	mov	r3, r7
 800052c:	4638      	mov	r0, r7
 800052e:	463c      	mov	r4, r7
 8000530:	46b8      	mov	r8, r7
 8000532:	46be      	mov	lr, r7
 8000534:	2620      	movs	r6, #32
 8000536:	fbb1 f1f7 	udiv	r1, r1, r7
 800053a:	eba2 0208 	sub.w	r2, r2, r8
 800053e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000542:	e766      	b.n	8000412 <__udivmoddi4+0xfa>
 8000544:	4601      	mov	r1, r0
 8000546:	e718      	b.n	800037a <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e72c      	b.n	80003a6 <__udivmoddi4+0x8e>
 800054c:	f1c6 0220 	rsb	r2, r6, #32
 8000550:	fa2e f302 	lsr.w	r3, lr, r2
 8000554:	40b7      	lsls	r7, r6
 8000556:	40b1      	lsls	r1, r6
 8000558:	fa20 f202 	lsr.w	r2, r0, r2
 800055c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000560:	430a      	orrs	r2, r1
 8000562:	fbb3 f8fe 	udiv	r8, r3, lr
 8000566:	b2bc      	uxth	r4, r7
 8000568:	fb0e 3318 	mls	r3, lr, r8, r3
 800056c:	0c11      	lsrs	r1, r2, #16
 800056e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000572:	fb08 f904 	mul.w	r9, r8, r4
 8000576:	40b0      	lsls	r0, r6
 8000578:	4589      	cmp	r9, r1
 800057a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800057e:	b280      	uxth	r0, r0
 8000580:	d93e      	bls.n	8000600 <__udivmoddi4+0x2e8>
 8000582:	1879      	adds	r1, r7, r1
 8000584:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000588:	d201      	bcs.n	800058e <__udivmoddi4+0x276>
 800058a:	4589      	cmp	r9, r1
 800058c:	d81f      	bhi.n	80005ce <__udivmoddi4+0x2b6>
 800058e:	eba1 0109 	sub.w	r1, r1, r9
 8000592:	fbb1 f9fe 	udiv	r9, r1, lr
 8000596:	fb09 f804 	mul.w	r8, r9, r4
 800059a:	fb0e 1119 	mls	r1, lr, r9, r1
 800059e:	b292      	uxth	r2, r2
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	4542      	cmp	r2, r8
 80005a6:	d229      	bcs.n	80005fc <__udivmoddi4+0x2e4>
 80005a8:	18ba      	adds	r2, r7, r2
 80005aa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005ae:	d2c4      	bcs.n	800053a <__udivmoddi4+0x222>
 80005b0:	4542      	cmp	r2, r8
 80005b2:	d2c2      	bcs.n	800053a <__udivmoddi4+0x222>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443a      	add	r2, r7
 80005ba:	e7be      	b.n	800053a <__udivmoddi4+0x222>
 80005bc:	45f0      	cmp	r8, lr
 80005be:	d29d      	bcs.n	80004fc <__udivmoddi4+0x1e4>
 80005c0:	ebbe 0302 	subs.w	r3, lr, r2
 80005c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c8:	3801      	subs	r0, #1
 80005ca:	46e1      	mov	r9, ip
 80005cc:	e796      	b.n	80004fc <__udivmoddi4+0x1e4>
 80005ce:	eba7 0909 	sub.w	r9, r7, r9
 80005d2:	4449      	add	r1, r9
 80005d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005dc:	fb09 f804 	mul.w	r8, r9, r4
 80005e0:	e7db      	b.n	800059a <__udivmoddi4+0x282>
 80005e2:	4673      	mov	r3, lr
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1ce>
 80005e6:	4650      	mov	r0, sl
 80005e8:	e766      	b.n	80004b8 <__udivmoddi4+0x1a0>
 80005ea:	4608      	mov	r0, r1
 80005ec:	e6fd      	b.n	80003ea <__udivmoddi4+0xd2>
 80005ee:	443b      	add	r3, r7
 80005f0:	3a02      	subs	r2, #2
 80005f2:	e733      	b.n	800045c <__udivmoddi4+0x144>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	443b      	add	r3, r7
 80005fa:	e71c      	b.n	8000436 <__udivmoddi4+0x11e>
 80005fc:	4649      	mov	r1, r9
 80005fe:	e79c      	b.n	800053a <__udivmoddi4+0x222>
 8000600:	eba1 0109 	sub.w	r1, r1, r9
 8000604:	46c4      	mov	ip, r8
 8000606:	fbb1 f9fe 	udiv	r9, r1, lr
 800060a:	fb09 f804 	mul.w	r8, r9, r4
 800060e:	e7c4      	b.n	800059a <__udivmoddi4+0x282>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000618:	4b49      	ldr	r3, [pc, #292]	@ (8000740 <SystemInit+0x12c>)
 800061a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800061e:	4a48      	ldr	r2, [pc, #288]	@ (8000740 <SystemInit+0x12c>)
 8000620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000628:	4b45      	ldr	r3, [pc, #276]	@ (8000740 <SystemInit+0x12c>)
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	4a44      	ldr	r2, [pc, #272]	@ (8000740 <SystemInit+0x12c>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000634:	4b43      	ldr	r3, [pc, #268]	@ (8000744 <SystemInit+0x130>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f003 030f 	and.w	r3, r3, #15
 800063c:	2b06      	cmp	r3, #6
 800063e:	d807      	bhi.n	8000650 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000640:	4b40      	ldr	r3, [pc, #256]	@ (8000744 <SystemInit+0x130>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f023 030f 	bic.w	r3, r3, #15
 8000648:	4a3e      	ldr	r2, [pc, #248]	@ (8000744 <SystemInit+0x130>)
 800064a:	f043 0307 	orr.w	r3, r3, #7
 800064e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000650:	4b3d      	ldr	r3, [pc, #244]	@ (8000748 <SystemInit+0x134>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a3c      	ldr	r2, [pc, #240]	@ (8000748 <SystemInit+0x134>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800065c:	4b3a      	ldr	r3, [pc, #232]	@ (8000748 <SystemInit+0x134>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000662:	4b39      	ldr	r3, [pc, #228]	@ (8000748 <SystemInit+0x134>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4938      	ldr	r1, [pc, #224]	@ (8000748 <SystemInit+0x134>)
 8000668:	4b38      	ldr	r3, [pc, #224]	@ (800074c <SystemInit+0x138>)
 800066a:	4013      	ands	r3, r2
 800066c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800066e:	4b35      	ldr	r3, [pc, #212]	@ (8000744 <SystemInit+0x130>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	2b00      	cmp	r3, #0
 8000678:	d007      	beq.n	800068a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800067a:	4b32      	ldr	r3, [pc, #200]	@ (8000744 <SystemInit+0x130>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f023 030f 	bic.w	r3, r3, #15
 8000682:	4a30      	ldr	r2, [pc, #192]	@ (8000744 <SystemInit+0x130>)
 8000684:	f043 0307 	orr.w	r3, r3, #7
 8000688:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800068a:	4b2f      	ldr	r3, [pc, #188]	@ (8000748 <SystemInit+0x134>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000690:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <SystemInit+0x134>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000696:	4b2c      	ldr	r3, [pc, #176]	@ (8000748 <SystemInit+0x134>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800069c:	4b2a      	ldr	r3, [pc, #168]	@ (8000748 <SystemInit+0x134>)
 800069e:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <SystemInit+0x13c>)
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006a2:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <SystemInit+0x134>)
 80006a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <SystemInit+0x140>)
 80006a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006a8:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <SystemInit+0x134>)
 80006aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000758 <SystemInit+0x144>)
 80006ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006ae:	4b26      	ldr	r3, [pc, #152]	@ (8000748 <SystemInit+0x134>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006b4:	4b24      	ldr	r3, [pc, #144]	@ (8000748 <SystemInit+0x134>)
 80006b6:	4a28      	ldr	r2, [pc, #160]	@ (8000758 <SystemInit+0x144>)
 80006b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006ba:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <SystemInit+0x134>)
 80006bc:	2200      	movs	r2, #0
 80006be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <SystemInit+0x134>)
 80006c2:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <SystemInit+0x144>)
 80006c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006c6:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <SystemInit+0x134>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <SystemInit+0x134>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000748 <SystemInit+0x134>)
 80006d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <SystemInit+0x134>)
 80006da:	2200      	movs	r2, #0
 80006dc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006de:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <SystemInit+0x148>)
 80006e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006e2:	4a1e      	ldr	r2, [pc, #120]	@ (800075c <SystemInit+0x148>)
 80006e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <SystemInit+0x14c>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <SystemInit+0x150>)
 80006f0:	4013      	ands	r3, r2
 80006f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006f6:	d202      	bcs.n	80006fe <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <SystemInit+0x154>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <SystemInit+0x134>)
 8000700:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000708:	2b00      	cmp	r3, #0
 800070a:	d113      	bne.n	8000734 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <SystemInit+0x134>)
 800070e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000712:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <SystemInit+0x134>)
 8000714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000718:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <SystemInit+0x158>)
 800071e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000722:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <SystemInit+0x134>)
 8000726:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800072a:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <SystemInit+0x134>)
 800072c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000730:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00
 8000744:	52002000 	.word	0x52002000
 8000748:	58024400 	.word	0x58024400
 800074c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000750:	02020200 	.word	0x02020200
 8000754:	01ff0000 	.word	0x01ff0000
 8000758:	01010280 	.word	0x01010280
 800075c:	580000c0 	.word	0x580000c0
 8000760:	5c001000 	.word	0x5c001000
 8000764:	ffff0000 	.word	0xffff0000
 8000768:	51008108 	.word	0x51008108
 800076c:	52004000 	.word	0x52004000

08000770 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <ExitRun0Mode+0x2c>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	4a08      	ldr	r2, [pc, #32]	@ (800079c <ExitRun0Mode+0x2c>)
 800077a:	f023 0302 	bic.w	r3, r3, #2
 800077e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000780:	bf00      	nop
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <ExitRun0Mode+0x2c>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d0f9      	beq.n	8000782 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	58024800 	.word	0x58024800

080007a0 <main>:

/**
  * @brief  The application entry point.
  */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80007a6:	f000 fa1b 	bl	8000be0 <HAL_Init>
  SystemClock_Config();
 80007aa:	f000 f8ad 	bl	8000908 <SystemClock_Config>
  MX_GPIO_Init();
 80007ae:	f000 f867 	bl	8000880 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007b2:	f000 f833 	bl	800081c <MX_USART3_UART_Init>

  uint8_t rxData;
  char msg[] = "UART Echo Ready - STM32H745\r\n";
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <main+0x70>)
 80007b8:	463c      	mov	r4, r7
 80007ba:	461d      	mov	r5, r3
 80007bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007c4:	c407      	stmia	r4!, {r0, r1, r2}
 80007c6:	8023      	strh	r3, [r4, #0]

  // Enviar mensaje de inicio
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007c8:	463b      	mov	r3, r7
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd84 	bl	80002d8 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4639      	mov	r1, r7
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007da:	480e      	ldr	r0, [pc, #56]	@ (8000814 <main+0x74>)
 80007dc:	f004 f986 	bl	8004aec <HAL_UART_Transmit>

  /* Infinite loop */
  while (1)
  {
    // Recibir un byte
    if (HAL_UART_Receive(&huart3, &rxData, 1, 100) == HAL_OK)
 80007e0:	f107 011f 	add.w	r1, r7, #31
 80007e4:	2364      	movs	r3, #100	@ 0x64
 80007e6:	2201      	movs	r2, #1
 80007e8:	480a      	ldr	r0, [pc, #40]	@ (8000814 <main+0x74>)
 80007ea:	f004 fa0d 	bl	8004c08 <HAL_UART_Receive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f5      	bne.n	80007e0 <main+0x40>
    {
      // Hacer echo del byte recibido
      HAL_UART_Transmit(&huart3, &rxData, 1, HAL_MAX_DELAY);
 80007f4:	f107 011f 	add.w	r1, r7, #31
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007fc:	2201      	movs	r2, #1
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <main+0x74>)
 8000800:	f004 f974 	bl	8004aec <HAL_UART_Transmit>

      // Encender LED verde al recibir datos
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000804:	2101      	movs	r1, #1
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <main+0x78>)
 8000808:	f001 fa99 	bl	8001d3e <HAL_GPIO_TogglePin>
    if (HAL_UART_Receive(&huart3, &rxData, 1, 100) == HAL_OK)
 800080c:	e7e8      	b.n	80007e0 <main+0x40>
 800080e:	bf00      	nop
 8000810:	080065bc 	.word	0x080065bc
 8000814:	2400002c 	.word	0x2400002c
 8000818:	58020400 	.word	0x58020400

0800081c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 8000822:	4a16      	ldr	r2, [pc, #88]	@ (800087c <MX_USART3_UART_Init+0x60>)
 8000824:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_USART3_UART_Init+0x5c>)
 8000866:	f004 f8f1 	bl	8004a4c <HAL_UART_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000870:	f000 f8c6 	bl	8000a00 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2400002c 	.word	0x2400002c
 800087c:	40004800 	.word	0x40004800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_GPIO_Init+0x80>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089c:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <MX_GPIO_Init+0x80>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_GPIO_Init+0x80>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_GPIO_Init+0x80>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ba:	4a11      	ldr	r2, [pc, #68]	@ (8000900 <MX_GPIO_Init+0x80>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_GPIO_Init+0x80>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2101      	movs	r1, #1
 80008d6:	480b      	ldr	r0, [pc, #44]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008d8:	f001 fa18 	bl	8001d0c <HAL_GPIO_WritePin>

  /* Configure GPIO pin : PB0 (LED Verde) */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008dc:	2301      	movs	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	@ (8000904 <MX_GPIO_Init+0x84>)
 80008f4:	f001 f85a 	bl	80019ac <HAL_GPIO_Init>
}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024400 	.word	0x58024400
 8000904:	58020400 	.word	0x58020400

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	@ 0x70
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000912:	224c      	movs	r2, #76	@ 0x4c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f005 fe17 	bl	800654a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2220      	movs	r2, #32
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f005 fe11 	bl	800654a <memset>

  /** Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000928:	2002      	movs	r0, #2
 800092a:	f001 fa23 	bl	8001d74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b31      	ldr	r3, [pc, #196]	@ (80009f8 <SystemClock_Config+0xf0>)
 8000934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000936:	4a30      	ldr	r2, [pc, #192]	@ (80009f8 <SystemClock_Config+0xf0>)
 8000938:	f023 0301 	bic.w	r3, r3, #1
 800093c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800093e:	4b2e      	ldr	r3, [pc, #184]	@ (80009f8 <SystemClock_Config+0xf0>)
 8000940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <SystemClock_Config+0xf4>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a2b      	ldr	r2, [pc, #172]	@ (80009fc <SystemClock_Config+0xf4>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <SystemClock_Config+0xf4>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000960:	bf00      	nop
 8000962:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <SystemClock_Config+0xf4>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800096a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800096e:	d1f8      	bne.n	8000962 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000974:	2301      	movs	r3, #1
 8000976:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2340      	movs	r3, #64	@ 0x40
 800097a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000984:	2304      	movs	r3, #4
 8000986:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000988:	2332      	movs	r3, #50	@ 0x32
 800098a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000998:	230c      	movs	r3, #12
 800099a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800099c:	2300      	movs	r3, #0
 800099e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fa3d 	bl	8001e28 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009b4:	f000 f824 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	233f      	movs	r3, #63	@ 0x3f
 80009ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2303      	movs	r3, #3
 80009be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009c4:	2308      	movs	r3, #8
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009d6:	2340      	movs	r3, #64	@ 0x40
 80009d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2102      	movs	r1, #2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fe7c 	bl	80026dc <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80009ea:	f000 f809 	bl	8000a00 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3770      	adds	r7, #112	@ 0x70
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58000400 	.word	0x58000400
 80009fc:	58024800 	.word	0x58024800

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  __disable_irq();
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <Error_Handler+0x8>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_MspInit+0x30>)
 8000a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a18:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x30>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x30>)
 8000a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	58024400 	.word	0x58024400

08000a40 <HAL_UART_MspInit>:
  * @retval None
  */

/* USER CODE BEGIN 1 */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ba      	sub	sp, #232	@ 0xe8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	22c0      	movs	r2, #192	@ 0xc0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f005 fd72 	bl	800654a <memset>

  if(huart->Instance==USART3)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a27      	ldr	r2, [pc, #156]	@ (8000b08 <HAL_UART_MspInit+0xc8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d146      	bne.n	8000afe <HAL_UART_MspInit+0xbe>
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */

    /** Initializes the peripherals clock */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a70:	f04f 0202 	mov.w	r2, #2
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 f9b4 	bl	8002df4 <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a92:	f7ff ffb5 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a96:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <HAL_UART_MspInit+0xcc>)
 8000a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b0c <HAL_UART_MspInit+0xcc>)
 8000a9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aa2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_UART_MspInit+0xcc>)
 8000aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000aac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <HAL_UART_MspInit+0xcc>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <HAL_UART_MspInit+0xcc>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <HAL_UART_MspInit+0xcc>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ad2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aec:	2307      	movs	r3, #7
 8000aee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <HAL_UART_MspInit+0xd0>)
 8000afa:	f000 ff57 	bl	80019ac <HAL_GPIO_Init>

    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }
}
 8000afe:	bf00      	nop
 8000b00:	37e8      	adds	r7, #232	@ 0xe8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004800 	.word	0x40004800
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58020400 	.word	0x58020400

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <NMI_Handler+0x4>

08000b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6a:	f000 f8ab 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b78:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <USART3_IRQHandler+0x10>)
 8000b7a:	f004 f90d 	bl	8004d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2400002c 	.word	0x2400002c

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000bc4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000b8c:	f7ff fdf0 	bl	8000770 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b90:	f7ff fd40 	bl	8000614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f005 fccf 	bl	800655c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fdef 	bl	80007a0 <main>
  bx  lr
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bcc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bd0:	08006614 	.word	0x08006614
  ldr r2, =_sbss
 8000bd4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bd8:	240000c4 	.word	0x240000c4

08000bdc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC3_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be6:	2003      	movs	r0, #3
 8000be8:	f000 f94a 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bec:	f001 ff2c 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_Init+0x68>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	0a1b      	lsrs	r3, r3, #8
 8000bf8:	f003 030f 	and.w	r3, r3, #15
 8000bfc:	4913      	ldr	r1, [pc, #76]	@ (8000c4c <HAL_Init+0x6c>)
 8000bfe:	5ccb      	ldrb	r3, [r1, r3]
 8000c00:	f003 031f 	and.w	r3, r3, #31
 8000c04:	fa22 f303 	lsr.w	r3, r2, r3
 8000c08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_Init+0x68>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	4a0e      	ldr	r2, [pc, #56]	@ (8000c4c <HAL_Init+0x6c>)
 8000c14:	5cd3      	ldrb	r3, [r2, r3]
 8000c16:	f003 031f 	and.w	r3, r3, #31
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <HAL_Init+0x70>)
 8000c22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c24:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <HAL_Init+0x74>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2a:	200f      	movs	r0, #15
 8000c2c:	f000 f814 	bl	8000c58 <HAL_InitTick>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e002      	b.n	8000c40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3a:	f7ff fee7 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	080065dc 	.word	0x080065dc
 8000c50:	24000004 	.word	0x24000004
 8000c54:	24000000 	.word	0x24000000

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c60:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <HAL_InitTick+0x60>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e021      	b.n	8000cb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <HAL_InitTick+0x64>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_InitTick+0x60>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f921 	bl	8000eca <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ca0:	f000 f8f9 	bl	8000e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <HAL_InitTick+0x68>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2400000c 	.word	0x2400000c
 8000cbc:	24000000 	.word	0x24000000
 8000cc0:	24000008 	.word	0x24000008

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2400000c 	.word	0x2400000c
 8000ce8:	240000c0 	.word	0x240000c0

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	240000c0 	.word	0x240000c0

08000d04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetREVID+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	0c1b      	lsrs	r3, r3, #16
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	5c001000 	.word	0x5c001000

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x40>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x40>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00
 8000d60:	05fa0000 	.word	0x05fa0000

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	@ (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	@ (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	@ 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	@ 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e4c:	d301      	bcc.n	8000e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00f      	b.n	8000e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <SysTick_Config+0x40>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e60:	f7ff ff8e 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <SysTick_Config+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <SysTick_Config+0x40>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff47 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff90 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5f 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb2 	bl	8000e3c <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff fefe 	bl	8000cec <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e2dc      	b.n	80014b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d008      	beq.n	8000f1a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2280      	movs	r2, #128	@ 0x80
 8000f0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e2cd      	b.n	80014b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a76      	ldr	r2, [pc, #472]	@ (80010f8 <HAL_DMA_Abort+0x214>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d04a      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a74      	ldr	r2, [pc, #464]	@ (80010fc <HAL_DMA_Abort+0x218>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d045      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a73      	ldr	r2, [pc, #460]	@ (8001100 <HAL_DMA_Abort+0x21c>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d040      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a71      	ldr	r2, [pc, #452]	@ (8001104 <HAL_DMA_Abort+0x220>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d03b      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a70      	ldr	r2, [pc, #448]	@ (8001108 <HAL_DMA_Abort+0x224>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d036      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a6e      	ldr	r2, [pc, #440]	@ (800110c <HAL_DMA_Abort+0x228>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d031      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8001110 <HAL_DMA_Abort+0x22c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d02c      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a6b      	ldr	r2, [pc, #428]	@ (8001114 <HAL_DMA_Abort+0x230>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d027      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6a      	ldr	r2, [pc, #424]	@ (8001118 <HAL_DMA_Abort+0x234>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d022      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a68      	ldr	r2, [pc, #416]	@ (800111c <HAL_DMA_Abort+0x238>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d01d      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a67      	ldr	r2, [pc, #412]	@ (8001120 <HAL_DMA_Abort+0x23c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d018      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a65      	ldr	r2, [pc, #404]	@ (8001124 <HAL_DMA_Abort+0x240>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a64      	ldr	r2, [pc, #400]	@ (8001128 <HAL_DMA_Abort+0x244>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d00e      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a62      	ldr	r2, [pc, #392]	@ (800112c <HAL_DMA_Abort+0x248>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d009      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a61      	ldr	r2, [pc, #388]	@ (8001130 <HAL_DMA_Abort+0x24c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d004      	beq.n	8000fba <HAL_DMA_Abort+0xd6>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a5f      	ldr	r2, [pc, #380]	@ (8001134 <HAL_DMA_Abort+0x250>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_DMA_Abort+0xda>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_DMA_Abort+0xdc>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 021e 	bic.w	r2, r2, #30
 8000fd2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fe2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e00a      	b.n	8001002 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 020e 	bic.w	r2, r2, #14
 8000ffa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a3c      	ldr	r2, [pc, #240]	@ (80010f8 <HAL_DMA_Abort+0x214>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d072      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a3a      	ldr	r2, [pc, #232]	@ (80010fc <HAL_DMA_Abort+0x218>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d06d      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a39      	ldr	r2, [pc, #228]	@ (8001100 <HAL_DMA_Abort+0x21c>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d068      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a37      	ldr	r2, [pc, #220]	@ (8001104 <HAL_DMA_Abort+0x220>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d063      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a36      	ldr	r2, [pc, #216]	@ (8001108 <HAL_DMA_Abort+0x224>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d05e      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a34      	ldr	r2, [pc, #208]	@ (800110c <HAL_DMA_Abort+0x228>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d059      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a33      	ldr	r2, [pc, #204]	@ (8001110 <HAL_DMA_Abort+0x22c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d054      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a31      	ldr	r2, [pc, #196]	@ (8001114 <HAL_DMA_Abort+0x230>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d04f      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a30      	ldr	r2, [pc, #192]	@ (8001118 <HAL_DMA_Abort+0x234>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d04a      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <HAL_DMA_Abort+0x238>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d045      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2d      	ldr	r2, [pc, #180]	@ (8001120 <HAL_DMA_Abort+0x23c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d040      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a2b      	ldr	r2, [pc, #172]	@ (8001124 <HAL_DMA_Abort+0x240>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d03b      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2a      	ldr	r2, [pc, #168]	@ (8001128 <HAL_DMA_Abort+0x244>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d036      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a28      	ldr	r2, [pc, #160]	@ (800112c <HAL_DMA_Abort+0x248>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d031      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a27      	ldr	r2, [pc, #156]	@ (8001130 <HAL_DMA_Abort+0x24c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d02c      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a25      	ldr	r2, [pc, #148]	@ (8001134 <HAL_DMA_Abort+0x250>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d027      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a24      	ldr	r2, [pc, #144]	@ (8001138 <HAL_DMA_Abort+0x254>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d022      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a22      	ldr	r2, [pc, #136]	@ (800113c <HAL_DMA_Abort+0x258>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01d      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a21      	ldr	r2, [pc, #132]	@ (8001140 <HAL_DMA_Abort+0x25c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d018      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001144 <HAL_DMA_Abort+0x260>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001148 <HAL_DMA_Abort+0x264>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00e      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <HAL_DMA_Abort+0x268>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d009      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <HAL_DMA_Abort+0x26c>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d004      	beq.n	80010f2 <HAL_DMA_Abort+0x20e>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a19      	ldr	r2, [pc, #100]	@ (8001154 <HAL_DMA_Abort+0x270>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d132      	bne.n	8001158 <HAL_DMA_Abort+0x274>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e031      	b.n	800115a <HAL_DMA_Abort+0x276>
 80010f6:	bf00      	nop
 80010f8:	40020010 	.word	0x40020010
 80010fc:	40020028 	.word	0x40020028
 8001100:	40020040 	.word	0x40020040
 8001104:	40020058 	.word	0x40020058
 8001108:	40020070 	.word	0x40020070
 800110c:	40020088 	.word	0x40020088
 8001110:	400200a0 	.word	0x400200a0
 8001114:	400200b8 	.word	0x400200b8
 8001118:	40020410 	.word	0x40020410
 800111c:	40020428 	.word	0x40020428
 8001120:	40020440 	.word	0x40020440
 8001124:	40020458 	.word	0x40020458
 8001128:	40020470 	.word	0x40020470
 800112c:	40020488 	.word	0x40020488
 8001130:	400204a0 	.word	0x400204a0
 8001134:	400204b8 	.word	0x400204b8
 8001138:	58025408 	.word	0x58025408
 800113c:	5802541c 	.word	0x5802541c
 8001140:	58025430 	.word	0x58025430
 8001144:	58025444 	.word	0x58025444
 8001148:	58025458 	.word	0x58025458
 800114c:	5802546c 	.word	0x5802546c
 8001150:	58025480 	.word	0x58025480
 8001154:	58025494 	.word	0x58025494
 8001158:	2300      	movs	r3, #0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001168:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800116c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6d      	ldr	r2, [pc, #436]	@ (8001328 <HAL_DMA_Abort+0x444>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d04a      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a6b      	ldr	r2, [pc, #428]	@ (800132c <HAL_DMA_Abort+0x448>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d045      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6a      	ldr	r2, [pc, #424]	@ (8001330 <HAL_DMA_Abort+0x44c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d040      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a68      	ldr	r2, [pc, #416]	@ (8001334 <HAL_DMA_Abort+0x450>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d03b      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a67      	ldr	r2, [pc, #412]	@ (8001338 <HAL_DMA_Abort+0x454>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d036      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a65      	ldr	r2, [pc, #404]	@ (800133c <HAL_DMA_Abort+0x458>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d031      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a64      	ldr	r2, [pc, #400]	@ (8001340 <HAL_DMA_Abort+0x45c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d02c      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a62      	ldr	r2, [pc, #392]	@ (8001344 <HAL_DMA_Abort+0x460>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d027      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a61      	ldr	r2, [pc, #388]	@ (8001348 <HAL_DMA_Abort+0x464>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d022      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a5f      	ldr	r2, [pc, #380]	@ (800134c <HAL_DMA_Abort+0x468>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d01d      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001350 <HAL_DMA_Abort+0x46c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d018      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a5c      	ldr	r2, [pc, #368]	@ (8001354 <HAL_DMA_Abort+0x470>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001358 <HAL_DMA_Abort+0x474>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d00e      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a59      	ldr	r2, [pc, #356]	@ (800135c <HAL_DMA_Abort+0x478>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d009      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a58      	ldr	r2, [pc, #352]	@ (8001360 <HAL_DMA_Abort+0x47c>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d004      	beq.n	800120e <HAL_DMA_Abort+0x32a>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a56      	ldr	r2, [pc, #344]	@ (8001364 <HAL_DMA_Abort+0x480>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d108      	bne.n	8001220 <HAL_DMA_Abort+0x33c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e007      	b.n	8001230 <HAL_DMA_Abort+0x34c>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001230:	e013      	b.n	800125a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001232:	f7ff fd5b 	bl	8000cec <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b05      	cmp	r3, #5
 800123e:	d90c      	bls.n	800125a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2220      	movs	r2, #32
 8001244:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e12d      	b.n	80014b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1e5      	bne.n	8001232 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a2f      	ldr	r2, [pc, #188]	@ (8001328 <HAL_DMA_Abort+0x444>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d04a      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a2d      	ldr	r2, [pc, #180]	@ (800132c <HAL_DMA_Abort+0x448>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d045      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a2c      	ldr	r2, [pc, #176]	@ (8001330 <HAL_DMA_Abort+0x44c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d040      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2a      	ldr	r2, [pc, #168]	@ (8001334 <HAL_DMA_Abort+0x450>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d03b      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a29      	ldr	r2, [pc, #164]	@ (8001338 <HAL_DMA_Abort+0x454>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d036      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a27      	ldr	r2, [pc, #156]	@ (800133c <HAL_DMA_Abort+0x458>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d031      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a26      	ldr	r2, [pc, #152]	@ (8001340 <HAL_DMA_Abort+0x45c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d02c      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a24      	ldr	r2, [pc, #144]	@ (8001344 <HAL_DMA_Abort+0x460>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d027      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a23      	ldr	r2, [pc, #140]	@ (8001348 <HAL_DMA_Abort+0x464>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d022      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a21      	ldr	r2, [pc, #132]	@ (800134c <HAL_DMA_Abort+0x468>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d01d      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a20      	ldr	r2, [pc, #128]	@ (8001350 <HAL_DMA_Abort+0x46c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d018      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001354 <HAL_DMA_Abort+0x470>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001358 <HAL_DMA_Abort+0x474>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d00e      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <HAL_DMA_Abort+0x478>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d009      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001360 <HAL_DMA_Abort+0x47c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d004      	beq.n	8001306 <HAL_DMA_Abort+0x422>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a18      	ldr	r2, [pc, #96]	@ (8001364 <HAL_DMA_Abort+0x480>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_DMA_Abort+0x426>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_DMA_Abort+0x428>
 800130a:	2300      	movs	r3, #0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d02b      	beq.n	8001368 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001314:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	223f      	movs	r2, #63	@ 0x3f
 8001320:	409a      	lsls	r2, r3
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	e02a      	b.n	800137e <HAL_DMA_Abort+0x49a>
 8001328:	40020010 	.word	0x40020010
 800132c:	40020028 	.word	0x40020028
 8001330:	40020040 	.word	0x40020040
 8001334:	40020058 	.word	0x40020058
 8001338:	40020070 	.word	0x40020070
 800133c:	40020088 	.word	0x40020088
 8001340:	400200a0 	.word	0x400200a0
 8001344:	400200b8 	.word	0x400200b8
 8001348:	40020410 	.word	0x40020410
 800134c:	40020428 	.word	0x40020428
 8001350:	40020440 	.word	0x40020440
 8001354:	40020458 	.word	0x40020458
 8001358:	40020470 	.word	0x40020470
 800135c:	40020488 	.word	0x40020488
 8001360:	400204a0 	.word	0x400204a0
 8001364:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001372:	f003 031f 	and.w	r3, r3, #31
 8001376:	2201      	movs	r2, #1
 8001378:	409a      	lsls	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a4f      	ldr	r2, [pc, #316]	@ (80014c0 <HAL_DMA_Abort+0x5dc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d072      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a4d      	ldr	r2, [pc, #308]	@ (80014c4 <HAL_DMA_Abort+0x5e0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d06d      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a4c      	ldr	r2, [pc, #304]	@ (80014c8 <HAL_DMA_Abort+0x5e4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d068      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a4a      	ldr	r2, [pc, #296]	@ (80014cc <HAL_DMA_Abort+0x5e8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d063      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a49      	ldr	r2, [pc, #292]	@ (80014d0 <HAL_DMA_Abort+0x5ec>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d05e      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a47      	ldr	r2, [pc, #284]	@ (80014d4 <HAL_DMA_Abort+0x5f0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d059      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a46      	ldr	r2, [pc, #280]	@ (80014d8 <HAL_DMA_Abort+0x5f4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d054      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a44      	ldr	r2, [pc, #272]	@ (80014dc <HAL_DMA_Abort+0x5f8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d04f      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a43      	ldr	r2, [pc, #268]	@ (80014e0 <HAL_DMA_Abort+0x5fc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d04a      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a41      	ldr	r2, [pc, #260]	@ (80014e4 <HAL_DMA_Abort+0x600>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d045      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a40      	ldr	r2, [pc, #256]	@ (80014e8 <HAL_DMA_Abort+0x604>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d040      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a3e      	ldr	r2, [pc, #248]	@ (80014ec <HAL_DMA_Abort+0x608>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d03b      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a3d      	ldr	r2, [pc, #244]	@ (80014f0 <HAL_DMA_Abort+0x60c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d036      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a3b      	ldr	r2, [pc, #236]	@ (80014f4 <HAL_DMA_Abort+0x610>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d031      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a3a      	ldr	r2, [pc, #232]	@ (80014f8 <HAL_DMA_Abort+0x614>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d02c      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a38      	ldr	r2, [pc, #224]	@ (80014fc <HAL_DMA_Abort+0x618>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d027      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a37      	ldr	r2, [pc, #220]	@ (8001500 <HAL_DMA_Abort+0x61c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d022      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a35      	ldr	r2, [pc, #212]	@ (8001504 <HAL_DMA_Abort+0x620>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01d      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a34      	ldr	r2, [pc, #208]	@ (8001508 <HAL_DMA_Abort+0x624>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d018      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a32      	ldr	r2, [pc, #200]	@ (800150c <HAL_DMA_Abort+0x628>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a31      	ldr	r2, [pc, #196]	@ (8001510 <HAL_DMA_Abort+0x62c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d00e      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a2f      	ldr	r2, [pc, #188]	@ (8001514 <HAL_DMA_Abort+0x630>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d009      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2e      	ldr	r2, [pc, #184]	@ (8001518 <HAL_DMA_Abort+0x634>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d004      	beq.n	800146e <HAL_DMA_Abort+0x58a>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a2c      	ldr	r2, [pc, #176]	@ (800151c <HAL_DMA_Abort+0x638>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_DMA_Abort+0x58e>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_DMA_Abort+0x590>
 8001472:	2300      	movs	r3, #0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001480:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00c      	beq.n	80014a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001494:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001498:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80014a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40020010 	.word	0x40020010
 80014c4:	40020028 	.word	0x40020028
 80014c8:	40020040 	.word	0x40020040
 80014cc:	40020058 	.word	0x40020058
 80014d0:	40020070 	.word	0x40020070
 80014d4:	40020088 	.word	0x40020088
 80014d8:	400200a0 	.word	0x400200a0
 80014dc:	400200b8 	.word	0x400200b8
 80014e0:	40020410 	.word	0x40020410
 80014e4:	40020428 	.word	0x40020428
 80014e8:	40020440 	.word	0x40020440
 80014ec:	40020458 	.word	0x40020458
 80014f0:	40020470 	.word	0x40020470
 80014f4:	40020488 	.word	0x40020488
 80014f8:	400204a0 	.word	0x400204a0
 80014fc:	400204b8 	.word	0x400204b8
 8001500:	58025408 	.word	0x58025408
 8001504:	5802541c 	.word	0x5802541c
 8001508:	58025430 	.word	0x58025430
 800150c:	58025444 	.word	0x58025444
 8001510:	58025458 	.word	0x58025458
 8001514:	5802546c 	.word	0x5802546c
 8001518:	58025480 	.word	0x58025480
 800151c:	58025494 	.word	0x58025494

08001520 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e237      	b.n	80019a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d004      	beq.n	8001548 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2280      	movs	r2, #128	@ 0x80
 8001542:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e22c      	b.n	80019a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a5c      	ldr	r2, [pc, #368]	@ (80016c0 <HAL_DMA_Abort_IT+0x1a0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d04a      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a5b      	ldr	r2, [pc, #364]	@ (80016c4 <HAL_DMA_Abort_IT+0x1a4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d045      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a59      	ldr	r2, [pc, #356]	@ (80016c8 <HAL_DMA_Abort_IT+0x1a8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d040      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a58      	ldr	r2, [pc, #352]	@ (80016cc <HAL_DMA_Abort_IT+0x1ac>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d03b      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a56      	ldr	r2, [pc, #344]	@ (80016d0 <HAL_DMA_Abort_IT+0x1b0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d036      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a55      	ldr	r2, [pc, #340]	@ (80016d4 <HAL_DMA_Abort_IT+0x1b4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d031      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a53      	ldr	r2, [pc, #332]	@ (80016d8 <HAL_DMA_Abort_IT+0x1b8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d02c      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a52      	ldr	r2, [pc, #328]	@ (80016dc <HAL_DMA_Abort_IT+0x1bc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d027      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a50      	ldr	r2, [pc, #320]	@ (80016e0 <HAL_DMA_Abort_IT+0x1c0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d022      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a4f      	ldr	r2, [pc, #316]	@ (80016e4 <HAL_DMA_Abort_IT+0x1c4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d01d      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a4d      	ldr	r2, [pc, #308]	@ (80016e8 <HAL_DMA_Abort_IT+0x1c8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d018      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a4c      	ldr	r2, [pc, #304]	@ (80016ec <HAL_DMA_Abort_IT+0x1cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d013      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a4a      	ldr	r2, [pc, #296]	@ (80016f0 <HAL_DMA_Abort_IT+0x1d0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00e      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a49      	ldr	r2, [pc, #292]	@ (80016f4 <HAL_DMA_Abort_IT+0x1d4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d009      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a47      	ldr	r2, [pc, #284]	@ (80016f8 <HAL_DMA_Abort_IT+0x1d8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d004      	beq.n	80015e8 <HAL_DMA_Abort_IT+0xc8>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a46      	ldr	r2, [pc, #280]	@ (80016fc <HAL_DMA_Abort_IT+0x1dc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d101      	bne.n	80015ec <HAL_DMA_Abort_IT+0xcc>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_DMA_Abort_IT+0xce>
 80015ec:	2300      	movs	r3, #0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8086 	beq.w	8001700 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2204      	movs	r2, #4
 80015f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2f      	ldr	r2, [pc, #188]	@ (80016c0 <HAL_DMA_Abort_IT+0x1a0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d04a      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2e      	ldr	r2, [pc, #184]	@ (80016c4 <HAL_DMA_Abort_IT+0x1a4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d045      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2c      	ldr	r2, [pc, #176]	@ (80016c8 <HAL_DMA_Abort_IT+0x1a8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d040      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a2b      	ldr	r2, [pc, #172]	@ (80016cc <HAL_DMA_Abort_IT+0x1ac>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d03b      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a29      	ldr	r2, [pc, #164]	@ (80016d0 <HAL_DMA_Abort_IT+0x1b0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d036      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a28      	ldr	r2, [pc, #160]	@ (80016d4 <HAL_DMA_Abort_IT+0x1b4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d031      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a26      	ldr	r2, [pc, #152]	@ (80016d8 <HAL_DMA_Abort_IT+0x1b8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d02c      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a25      	ldr	r2, [pc, #148]	@ (80016dc <HAL_DMA_Abort_IT+0x1bc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d027      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a23      	ldr	r2, [pc, #140]	@ (80016e0 <HAL_DMA_Abort_IT+0x1c0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d022      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a22      	ldr	r2, [pc, #136]	@ (80016e4 <HAL_DMA_Abort_IT+0x1c4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d01d      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a20      	ldr	r2, [pc, #128]	@ (80016e8 <HAL_DMA_Abort_IT+0x1c8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d018      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ec <HAL_DMA_Abort_IT+0x1cc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d013      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1d      	ldr	r2, [pc, #116]	@ (80016f0 <HAL_DMA_Abort_IT+0x1d0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00e      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1c      	ldr	r2, [pc, #112]	@ (80016f4 <HAL_DMA_Abort_IT+0x1d4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d009      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1a      	ldr	r2, [pc, #104]	@ (80016f8 <HAL_DMA_Abort_IT+0x1d8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d004      	beq.n	800169c <HAL_DMA_Abort_IT+0x17c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <HAL_DMA_Abort_IT+0x1dc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d108      	bne.n	80016ae <HAL_DMA_Abort_IT+0x18e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e178      	b.n	80019a0 <HAL_DMA_Abort_IT+0x480>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e16f      	b.n	80019a0 <HAL_DMA_Abort_IT+0x480>
 80016c0:	40020010 	.word	0x40020010
 80016c4:	40020028 	.word	0x40020028
 80016c8:	40020040 	.word	0x40020040
 80016cc:	40020058 	.word	0x40020058
 80016d0:	40020070 	.word	0x40020070
 80016d4:	40020088 	.word	0x40020088
 80016d8:	400200a0 	.word	0x400200a0
 80016dc:	400200b8 	.word	0x400200b8
 80016e0:	40020410 	.word	0x40020410
 80016e4:	40020428 	.word	0x40020428
 80016e8:	40020440 	.word	0x40020440
 80016ec:	40020458 	.word	0x40020458
 80016f0:	40020470 	.word	0x40020470
 80016f4:	40020488 	.word	0x40020488
 80016f8:	400204a0 	.word	0x400204a0
 80016fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 020e 	bic.w	r2, r2, #14
 800170e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a6c      	ldr	r2, [pc, #432]	@ (80018c8 <HAL_DMA_Abort_IT+0x3a8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d04a      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a6b      	ldr	r2, [pc, #428]	@ (80018cc <HAL_DMA_Abort_IT+0x3ac>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d045      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a69      	ldr	r2, [pc, #420]	@ (80018d0 <HAL_DMA_Abort_IT+0x3b0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d040      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a68      	ldr	r2, [pc, #416]	@ (80018d4 <HAL_DMA_Abort_IT+0x3b4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d03b      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a66      	ldr	r2, [pc, #408]	@ (80018d8 <HAL_DMA_Abort_IT+0x3b8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d036      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a65      	ldr	r2, [pc, #404]	@ (80018dc <HAL_DMA_Abort_IT+0x3bc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d031      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a63      	ldr	r2, [pc, #396]	@ (80018e0 <HAL_DMA_Abort_IT+0x3c0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d02c      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a62      	ldr	r2, [pc, #392]	@ (80018e4 <HAL_DMA_Abort_IT+0x3c4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d027      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a60      	ldr	r2, [pc, #384]	@ (80018e8 <HAL_DMA_Abort_IT+0x3c8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d022      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5f      	ldr	r2, [pc, #380]	@ (80018ec <HAL_DMA_Abort_IT+0x3cc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d01d      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a5d      	ldr	r2, [pc, #372]	@ (80018f0 <HAL_DMA_Abort_IT+0x3d0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d018      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5c      	ldr	r2, [pc, #368]	@ (80018f4 <HAL_DMA_Abort_IT+0x3d4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d013      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a5a      	ldr	r2, [pc, #360]	@ (80018f8 <HAL_DMA_Abort_IT+0x3d8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00e      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a59      	ldr	r2, [pc, #356]	@ (80018fc <HAL_DMA_Abort_IT+0x3dc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d009      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a57      	ldr	r2, [pc, #348]	@ (8001900 <HAL_DMA_Abort_IT+0x3e0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d004      	beq.n	80017b0 <HAL_DMA_Abort_IT+0x290>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a56      	ldr	r2, [pc, #344]	@ (8001904 <HAL_DMA_Abort_IT+0x3e4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d108      	bne.n	80017c2 <HAL_DMA_Abort_IT+0x2a2>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e007      	b.n	80017d2 <HAL_DMA_Abort_IT+0x2b2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a3c      	ldr	r2, [pc, #240]	@ (80018c8 <HAL_DMA_Abort_IT+0x3a8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d072      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a3a      	ldr	r2, [pc, #232]	@ (80018cc <HAL_DMA_Abort_IT+0x3ac>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d06d      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a39      	ldr	r2, [pc, #228]	@ (80018d0 <HAL_DMA_Abort_IT+0x3b0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d068      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <HAL_DMA_Abort_IT+0x3b4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d063      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a36      	ldr	r2, [pc, #216]	@ (80018d8 <HAL_DMA_Abort_IT+0x3b8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d05e      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a34      	ldr	r2, [pc, #208]	@ (80018dc <HAL_DMA_Abort_IT+0x3bc>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d059      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a33      	ldr	r2, [pc, #204]	@ (80018e0 <HAL_DMA_Abort_IT+0x3c0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d054      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a31      	ldr	r2, [pc, #196]	@ (80018e4 <HAL_DMA_Abort_IT+0x3c4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d04f      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a30      	ldr	r2, [pc, #192]	@ (80018e8 <HAL_DMA_Abort_IT+0x3c8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d04a      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a2e      	ldr	r2, [pc, #184]	@ (80018ec <HAL_DMA_Abort_IT+0x3cc>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d045      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a2d      	ldr	r2, [pc, #180]	@ (80018f0 <HAL_DMA_Abort_IT+0x3d0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d040      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2b      	ldr	r2, [pc, #172]	@ (80018f4 <HAL_DMA_Abort_IT+0x3d4>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d03b      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2a      	ldr	r2, [pc, #168]	@ (80018f8 <HAL_DMA_Abort_IT+0x3d8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d036      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a28      	ldr	r2, [pc, #160]	@ (80018fc <HAL_DMA_Abort_IT+0x3dc>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d031      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a27      	ldr	r2, [pc, #156]	@ (8001900 <HAL_DMA_Abort_IT+0x3e0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d02c      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a25      	ldr	r2, [pc, #148]	@ (8001904 <HAL_DMA_Abort_IT+0x3e4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d027      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a24      	ldr	r2, [pc, #144]	@ (8001908 <HAL_DMA_Abort_IT+0x3e8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d022      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a22      	ldr	r2, [pc, #136]	@ (800190c <HAL_DMA_Abort_IT+0x3ec>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01d      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a21      	ldr	r2, [pc, #132]	@ (8001910 <HAL_DMA_Abort_IT+0x3f0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d018      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1f      	ldr	r2, [pc, #124]	@ (8001914 <HAL_DMA_Abort_IT+0x3f4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <HAL_DMA_Abort_IT+0x3f8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d00e      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1c      	ldr	r2, [pc, #112]	@ (800191c <HAL_DMA_Abort_IT+0x3fc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d009      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001920 <HAL_DMA_Abort_IT+0x400>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d004      	beq.n	80018c2 <HAL_DMA_Abort_IT+0x3a2>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a19      	ldr	r2, [pc, #100]	@ (8001924 <HAL_DMA_Abort_IT+0x404>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d132      	bne.n	8001928 <HAL_DMA_Abort_IT+0x408>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e031      	b.n	800192a <HAL_DMA_Abort_IT+0x40a>
 80018c6:	bf00      	nop
 80018c8:	40020010 	.word	0x40020010
 80018cc:	40020028 	.word	0x40020028
 80018d0:	40020040 	.word	0x40020040
 80018d4:	40020058 	.word	0x40020058
 80018d8:	40020070 	.word	0x40020070
 80018dc:	40020088 	.word	0x40020088
 80018e0:	400200a0 	.word	0x400200a0
 80018e4:	400200b8 	.word	0x400200b8
 80018e8:	40020410 	.word	0x40020410
 80018ec:	40020428 	.word	0x40020428
 80018f0:	40020440 	.word	0x40020440
 80018f4:	40020458 	.word	0x40020458
 80018f8:	40020470 	.word	0x40020470
 80018fc:	40020488 	.word	0x40020488
 8001900:	400204a0 	.word	0x400204a0
 8001904:	400204b8 	.word	0x400204b8
 8001908:	58025408 	.word	0x58025408
 800190c:	5802541c 	.word	0x5802541c
 8001910:	58025430 	.word	0x58025430
 8001914:	58025444 	.word	0x58025444
 8001918:	58025458 	.word	0x58025458
 800191c:	5802546c 	.word	0x5802546c
 8001920:	58025480 	.word	0x58025480
 8001924:	58025494 	.word	0x58025494
 8001928:	2300      	movs	r3, #0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d028      	beq.n	8001980 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800193c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	2201      	movs	r2, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800195c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00c      	beq.n	8001980 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001970:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001974:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800197e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019ba:	4b89      	ldr	r3, [pc, #548]	@ (8001be0 <HAL_GPIO_Init+0x234>)
 80019bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019be:	e194      	b.n	8001cea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8186 	beq.w	8001ce4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d005      	beq.n	80019f0 <HAL_GPIO_Init+0x44>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d130      	bne.n	8001a52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a26:	2201      	movs	r2, #1
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	f003 0201 	and.w	r2, r3, #1
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d017      	beq.n	8001a8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d123      	bne.n	8001ae2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	69b9      	ldr	r1, [r7, #24]
 8001ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0203 	and.w	r2, r3, #3
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80e0 	beq.w	8001ce4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b24:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <HAL_GPIO_Init+0x238>)
 8001b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b2a:	4a2e      	ldr	r2, [pc, #184]	@ (8001be4 <HAL_GPIO_Init+0x238>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b34:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_GPIO_Init+0x238>)
 8001b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b42:	4a29      	ldr	r2, [pc, #164]	@ (8001be8 <HAL_GPIO_Init+0x23c>)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a20      	ldr	r2, [pc, #128]	@ (8001bec <HAL_GPIO_Init+0x240>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d052      	beq.n	8001c14 <HAL_GPIO_Init+0x268>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf0 <HAL_GPIO_Init+0x244>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d031      	beq.n	8001bda <HAL_GPIO_Init+0x22e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf4 <HAL_GPIO_Init+0x248>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02b      	beq.n	8001bd6 <HAL_GPIO_Init+0x22a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf8 <HAL_GPIO_Init+0x24c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d025      	beq.n	8001bd2 <HAL_GPIO_Init+0x226>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1c      	ldr	r2, [pc, #112]	@ (8001bfc <HAL_GPIO_Init+0x250>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x222>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a1b      	ldr	r2, [pc, #108]	@ (8001c00 <HAL_GPIO_Init+0x254>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x21e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a1a      	ldr	r2, [pc, #104]	@ (8001c04 <HAL_GPIO_Init+0x258>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x21a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	@ (8001c08 <HAL_GPIO_Init+0x25c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x216>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a18      	ldr	r2, [pc, #96]	@ (8001c0c <HAL_GPIO_Init+0x260>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x212>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a17      	ldr	r2, [pc, #92]	@ (8001c10 <HAL_GPIO_Init+0x264>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x20e>
 8001bb6:	2309      	movs	r3, #9
 8001bb8:	e02d      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bba:	230a      	movs	r3, #10
 8001bbc:	e02b      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	e029      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e027      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e025      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bca:	2305      	movs	r3, #5
 8001bcc:	e023      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e021      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e01f      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e01d      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e01b      	b.n	8001c16 <HAL_GPIO_Init+0x26a>
 8001bde:	bf00      	nop
 8001be0:	58000080 	.word	0x58000080
 8001be4:	58024400 	.word	0x58024400
 8001be8:	58000400 	.word	0x58000400
 8001bec:	58020000 	.word	0x58020000
 8001bf0:	58020400 	.word	0x58020400
 8001bf4:	58020800 	.word	0x58020800
 8001bf8:	58020c00 	.word	0x58020c00
 8001bfc:	58021000 	.word	0x58021000
 8001c00:	58021400 	.word	0x58021400
 8001c04:	58021800 	.word	0x58021800
 8001c08:	58021c00 	.word	0x58021c00
 8001c0c:	58022000 	.word	0x58022000
 8001c10:	58022400 	.word	0x58022400
 8001c14:	2300      	movs	r3, #0
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c26:	4938      	ldr	r1, [pc, #224]	@ (8001d08 <HAL_GPIO_Init+0x35c>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f47f ae63 	bne.w	80019c0 <HAL_GPIO_Init+0x14>
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	3724      	adds	r7, #36	@ 0x24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	58000400 	.word	0x58000400

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d50:	887a      	ldrh	r2, [r7, #2]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4013      	ands	r3, r2
 8001d56:	041a      	lsls	r2, r3, #16
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	400b      	ands	r3, r1
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d00a      	beq.n	8001d9e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d88:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d001      	beq.n	8001d9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e040      	b.n	8001e1c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e03e      	b.n	8001e1c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d9e:	4b21      	ldr	r3, [pc, #132]	@ (8001e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001da6:	491f      	ldr	r1, [pc, #124]	@ (8001e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001dae:	f7fe ff9d 	bl	8000cec <HAL_GetTick>
 8001db2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001db4:	e009      	b.n	8001dca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001db6:	f7fe ff99 	bl	8000cec <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dc4:	d901      	bls.n	8001dca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e028      	b.n	8001e1c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001dca:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dd6:	d1ee      	bne.n	8001db6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b1e      	cmp	r3, #30
 8001ddc:	d008      	beq.n	8001df0 <HAL_PWREx_ConfigSupply+0x7c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001de2:	d005      	beq.n	8001df0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b1d      	cmp	r3, #29
 8001de8:	d002      	beq.n	8001df0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b2d      	cmp	r3, #45	@ 0x2d
 8001dee:	d114      	bne.n	8001e1a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001df0:	f7fe ff7c 	bl	8000cec <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001df6:	e009      	b.n	8001e0c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001df8:	f7fe ff78 	bl	8000cec <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e06:	d901      	bls.n	8001e0c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e007      	b.n	8001e1c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e18:	d1ee      	bne.n	8001df8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	58024800 	.word	0x58024800

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f000 bc48 	b.w	80026cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8088 	beq.w	8001f5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4a:	4b99      	ldr	r3, [pc, #612]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e54:	4b96      	ldr	r3, [pc, #600]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5c:	2b10      	cmp	r3, #16
 8001e5e:	d007      	beq.n	8001e70 <HAL_RCC_OscConfig+0x48>
 8001e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e62:	2b18      	cmp	r3, #24
 8001e64:	d111      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62>
 8001e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	4b8f      	ldr	r3, [pc, #572]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d06d      	beq.n	8001f58 <HAL_RCC_OscConfig+0x130>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d169      	bne.n	8001f58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f000 bc21 	b.w	80026cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x7a>
 8001e94:	4b86      	ldr	r3, [pc, #536]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a85      	ldr	r2, [pc, #532]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e02e      	b.n	8001f00 <HAL_RCC_OscConfig+0xd8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x9c>
 8001eaa:	4b81      	ldr	r3, [pc, #516]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a80      	ldr	r2, [pc, #512]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b7e      	ldr	r3, [pc, #504]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7d      	ldr	r2, [pc, #500]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xd8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xc0>
 8001ece:	4b78      	ldr	r3, [pc, #480]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a77      	ldr	r2, [pc, #476]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b75      	ldr	r3, [pc, #468]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a74      	ldr	r2, [pc, #464]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xd8>
 8001ee8:	4b71      	ldr	r3, [pc, #452]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a70      	ldr	r2, [pc, #448]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a6d      	ldr	r2, [pc, #436]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe fef0 	bl	8000cec <HAL_GetTick>
 8001f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7fe feec 	bl	8000cec <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	@ 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e3d4      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f22:	4b63      	ldr	r3, [pc, #396]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xe8>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7fe fedc 	bl	8000cec <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7fe fed8 	bl	8000cec <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	@ 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e3c0      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f4a:	4b59      	ldr	r3, [pc, #356]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x110>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80ca 	beq.w	80020fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f68:	4b51      	ldr	r3, [pc, #324]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f72:	4b4f      	ldr	r3, [pc, #316]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <HAL_RCC_OscConfig+0x166>
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	2b18      	cmp	r3, #24
 8001f82:	d156      	bne.n	8002032 <HAL_RCC_OscConfig+0x20a>
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d151      	bne.n	8002032 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8e:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x17e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e392      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fa6:	4b42      	ldr	r3, [pc, #264]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0219 	bic.w	r2, r3, #25
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	493f      	ldr	r1, [pc, #252]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fe98 	bl	8000cec <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7fe fe94 	bl	8000cec <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e37c      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fd2:	4b37      	ldr	r3, [pc, #220]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	f7fe fe91 	bl	8000d04 <HAL_GetREVID>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d817      	bhi.n	800201c <HAL_RCC_OscConfig+0x1f4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b40      	cmp	r3, #64	@ 0x40
 8001ff2:	d108      	bne.n	8002006 <HAL_RCC_OscConfig+0x1de>
 8001ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8001ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002002:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002004:	e07a      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	4b2a      	ldr	r3, [pc, #168]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	031b      	lsls	r3, r3, #12
 8002014:	4926      	ldr	r1, [pc, #152]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800201a:	e06f      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b24      	ldr	r3, [pc, #144]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	061b      	lsls	r3, r3, #24
 800202a:	4921      	ldr	r1, [pc, #132]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002030:	e064      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d047      	beq.n	80020ca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800203a:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 0219 	bic.w	r2, r3, #25
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	491a      	ldr	r1, [pc, #104]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe fe4e 	bl	8000cec <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002054:	f7fe fe4a 	bl	8000cec <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e332      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002066:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	f7fe fe47 	bl	8000d04 <HAL_GetREVID>
 8002076:	4603      	mov	r3, r0
 8002078:	f241 0203 	movw	r2, #4099	@ 0x1003
 800207c:	4293      	cmp	r3, r2
 800207e:	d819      	bhi.n	80020b4 <HAL_RCC_OscConfig+0x28c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b40      	cmp	r3, #64	@ 0x40
 8002086:	d108      	bne.n	800209a <HAL_RCC_OscConfig+0x272>
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002090:	4a07      	ldr	r2, [pc, #28]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 8002092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002096:	6053      	str	r3, [r2, #4]
 8002098:	e030      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	031b      	lsls	r3, r3, #12
 80020a8:	4901      	ldr	r1, [pc, #4]	@ (80020b0 <HAL_RCC_OscConfig+0x288>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
 80020ae:	e025      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
 80020b0:	58024400 	.word	0x58024400
 80020b4:	4b9a      	ldr	r3, [pc, #616]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	4997      	ldr	r1, [pc, #604]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
 80020c8:	e018      	b.n	80020fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ca:	4b95      	ldr	r3, [pc, #596]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a94      	ldr	r2, [pc, #592]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fe09 	bl	8000cec <HAL_GetTick>
 80020da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020de:	f7fe fe05 	bl	8000cec <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e2ed      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020f0:	4b8b      	ldr	r3, [pc, #556]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f0      	bne.n	80020de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a9 	beq.w	800225c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210a:	4b85      	ldr	r3, [pc, #532]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002112:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002114:	4b82      	ldr	r3, [pc, #520]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2b08      	cmp	r3, #8
 800211e:	d007      	beq.n	8002130 <HAL_RCC_OscConfig+0x308>
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b18      	cmp	r3, #24
 8002124:	d13a      	bne.n	800219c <HAL_RCC_OscConfig+0x374>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d135      	bne.n	800219c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002130:	4b7b      	ldr	r3, [pc, #492]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x320>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b80      	cmp	r3, #128	@ 0x80
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e2c1      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002148:	f7fe fddc 	bl	8000d04 <HAL_GetREVID>
 800214c:	4603      	mov	r3, r0
 800214e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002152:	4293      	cmp	r3, r2
 8002154:	d817      	bhi.n	8002186 <HAL_RCC_OscConfig+0x35e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	2b20      	cmp	r3, #32
 800215c:	d108      	bne.n	8002170 <HAL_RCC_OscConfig+0x348>
 800215e:	4b70      	ldr	r3, [pc, #448]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002166:	4a6e      	ldr	r2, [pc, #440]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800216c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800216e:	e075      	b.n	800225c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002170:	4b6b      	ldr	r3, [pc, #428]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	069b      	lsls	r3, r3, #26
 800217e:	4968      	ldr	r1, [pc, #416]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002184:	e06a      	b.n	800225c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002186:	4b66      	ldr	r3, [pc, #408]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	061b      	lsls	r3, r3, #24
 8002194:	4962      	ldr	r1, [pc, #392]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800219a:	e05f      	b.n	800225c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d042      	beq.n	800222a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe fd9c 	bl	8000cec <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021b8:	f7fe fd98 	bl	8000cec <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e280      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021ca:	4b55      	ldr	r3, [pc, #340]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021d6:	f7fe fd95 	bl	8000d04 <HAL_GetREVID>
 80021da:	4603      	mov	r3, r0
 80021dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d817      	bhi.n	8002214 <HAL_RCC_OscConfig+0x3ec>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d108      	bne.n	80021fe <HAL_RCC_OscConfig+0x3d6>
 80021ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80021f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80021f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80021fa:	6053      	str	r3, [r2, #4]
 80021fc:	e02e      	b.n	800225c <HAL_RCC_OscConfig+0x434>
 80021fe:	4b48      	ldr	r3, [pc, #288]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	069b      	lsls	r3, r3, #26
 800220c:	4944      	ldr	r1, [pc, #272]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
 8002212:	e023      	b.n	800225c <HAL_RCC_OscConfig+0x434>
 8002214:	4b42      	ldr	r3, [pc, #264]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	493f      	ldr	r1, [pc, #252]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002224:	4313      	orrs	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
 8002228:	e018      	b.n	800225c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800222a:	4b3d      	ldr	r3, [pc, #244]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a3c      	ldr	r2, [pc, #240]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe fd59 	bl	8000cec <HAL_GetTick>
 800223a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800223e:	f7fe fd55 	bl	8000cec <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e23d      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002250:	4b33      	ldr	r3, [pc, #204]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d036      	beq.n	80022d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d019      	beq.n	80022a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002270:	4b2b      	ldr	r3, [pc, #172]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002274:	4a2a      	ldr	r2, [pc, #168]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7fe fd36 	bl	8000cec <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7fe fd32 	bl	8000cec <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e21a      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002296:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x45c>
 80022a2:	e018      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7fe fd1c 	bl	8000cec <HAL_GetTick>
 80022b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b8:	f7fe fd18 	bl	8000cec <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e200      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d039      	beq.n	8002356 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01c      	beq.n	8002324 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fcf9 	bl	8000cec <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022fe:	f7fe fcf5 	bl	8000cec <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1dd      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002310:	4b03      	ldr	r3, [pc, #12]	@ (8002320 <HAL_RCC_OscConfig+0x4f8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x4d6>
 800231c:	e01b      	b.n	8002356 <HAL_RCC_OscConfig+0x52e>
 800231e:	bf00      	nop
 8002320:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002324:	4b9b      	ldr	r3, [pc, #620]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a9a      	ldr	r2, [pc, #616]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800232a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800232e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002330:	f7fe fcdc 	bl	8000cec <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002338:	f7fe fcd8 	bl	8000cec <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1c0      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800234a:	4b92      	ldr	r3, [pc, #584]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8081 	beq.w	8002466 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002364:	4b8c      	ldr	r3, [pc, #560]	@ (8002598 <HAL_RCC_OscConfig+0x770>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a8b      	ldr	r2, [pc, #556]	@ (8002598 <HAL_RCC_OscConfig+0x770>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002370:	f7fe fcbc 	bl	8000cec <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7fe fcb8 	bl	8000cec <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1a0      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800238a:	4b83      	ldr	r3, [pc, #524]	@ (8002598 <HAL_RCC_OscConfig+0x770>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x584>
 800239e:	4b7d      	ldr	r3, [pc, #500]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023aa:	e02d      	b.n	8002408 <HAL_RCC_OscConfig+0x5e0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10c      	bne.n	80023ce <HAL_RCC_OscConfig+0x5a6>
 80023b4:	4b77      	ldr	r3, [pc, #476]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b8:	4a76      	ldr	r2, [pc, #472]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c0:	4b74      	ldr	r3, [pc, #464]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c4:	4a73      	ldr	r2, [pc, #460]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023c6:	f023 0304 	bic.w	r3, r3, #4
 80023ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80023cc:	e01c      	b.n	8002408 <HAL_RCC_OscConfig+0x5e0>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5c8>
 80023d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023da:	4a6e      	ldr	r2, [pc, #440]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e6:	4a6b      	ldr	r2, [pc, #428]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0x5e0>
 80023f0:	4b68      	ldr	r3, [pc, #416]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f4:	4a67      	ldr	r2, [pc, #412]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fc:	4b65      	ldr	r3, [pc, #404]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002400:	4a64      	ldr	r2, [pc, #400]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002402:	f023 0304 	bic.w	r3, r3, #4
 8002406:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe fc6c 	bl	8000cec <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002416:	e00a      	b.n	800242e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7fe fc68 	bl	8000cec <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e14e      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800242e:	4b59      	ldr	r3, [pc, #356]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0ee      	beq.n	8002418 <HAL_RCC_OscConfig+0x5f0>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7fe fc56 	bl	8000cec <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002442:	e00a      	b.n	800245a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7fe fc52 	bl	8000cec <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e138      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800245a:	4b4e      	ldr	r3, [pc, #312]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1ee      	bne.n	8002444 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 812d 	beq.w	80026ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002470:	4b48      	ldr	r3, [pc, #288]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002478:	2b18      	cmp	r3, #24
 800247a:	f000 80bd 	beq.w	80025f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	2b02      	cmp	r3, #2
 8002484:	f040 809e 	bne.w	80025c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b42      	ldr	r3, [pc, #264]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a41      	ldr	r2, [pc, #260]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fc2a 	bl	8000cec <HAL_GetTick>
 8002498:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fc26 	bl	8000cec <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e10e      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024ae:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ba:	4b36      	ldr	r3, [pc, #216]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80024bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024be:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_RCC_OscConfig+0x774>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	430a      	orrs	r2, r1
 80024ce:	4931      	ldr	r1, [pc, #196]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	3b01      	subs	r3, #1
 80024da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e2:	3b01      	subs	r3, #1
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ee:	3b01      	subs	r3, #1
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	3b01      	subs	r3, #1
 80024fe:	061b      	lsls	r3, r3, #24
 8002500:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002504:	4923      	ldr	r1, [pc, #140]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800250a:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002516:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800251a:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <HAL_RCC_OscConfig+0x778>)
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002522:	00d2      	lsls	r2, r2, #3
 8002524:	491b      	ldr	r1, [pc, #108]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002526:	4313      	orrs	r3, r2
 8002528:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	f023 020c 	bic.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	4917      	ldr	r1, [pc, #92]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800253c:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	f023 0202 	bic.w	r2, r3, #2
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002548:	4912      	ldr	r1, [pc, #72]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800254e:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	4a10      	ldr	r2, [pc, #64]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	4a0d      	ldr	r2, [pc, #52]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002566:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 800256c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002570:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002572:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	4a07      	ldr	r2, [pc, #28]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257e:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <HAL_RCC_OscConfig+0x76c>)
 8002584:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fbaf 	bl	8000cec <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002590:	e011      	b.n	80025b6 <HAL_RCC_OscConfig+0x78e>
 8002592:	bf00      	nop
 8002594:	58024400 	.word	0x58024400
 8002598:	58024800 	.word	0x58024800
 800259c:	fffffc0c 	.word	0xfffffc0c
 80025a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fba2 	bl	8000cec <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e08a      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025b6:	4b47      	ldr	r3, [pc, #284]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x77c>
 80025c2:	e082      	b.n	80026ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a42      	ldr	r2, [pc, #264]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fb8c 	bl	8000cec <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fb88 	bl	8000cec <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e070      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025ea:	4b3a      	ldr	r3, [pc, #232]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x7b0>
 80025f6:	e068      	b.n	80026ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025f8:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025fe:	4b35      	ldr	r3, [pc, #212]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002608:	2b01      	cmp	r3, #1
 800260a:	d031      	beq.n	8002670 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f003 0203 	and.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d12a      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d122      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002634:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d11a      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	0a5b      	lsrs	r3, r3, #9
 800263e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002646:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d111      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002658:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	0e1b      	lsrs	r3, r3, #24
 8002662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e02b      	b.n	80026cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002674:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 8002676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800267e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	429a      	cmp	r2, r3
 8002688:	d01f      	beq.n	80026ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800268a:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	4a11      	ldr	r2, [pc, #68]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002696:	f7fe fb29 	bl	8000cec <HAL_GetTick>
 800269a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800269c:	bf00      	nop
 800269e:	f7fe fb25 	bl	8000cec <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d0f9      	beq.n	800269e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 80026ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ae:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <HAL_RCC_OscConfig+0x8b0>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026b6:	00d2      	lsls	r2, r2, #3
 80026b8:	4906      	ldr	r1, [pc, #24]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80026be:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <HAL_RCC_OscConfig+0x8ac>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3730      	adds	r7, #48	@ 0x30
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	58024400 	.word	0x58024400
 80026d8:	ffff0007 	.word	0xffff0007

080026dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e19c      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b8a      	ldr	r3, [pc, #552]	@ (800291c <HAL_RCC_ClockConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b87      	ldr	r3, [pc, #540]	@ (800291c <HAL_RCC_ClockConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 020f 	bic.w	r2, r3, #15
 8002706:	4985      	ldr	r1, [pc, #532]	@ (800291c <HAL_RCC_ClockConfig+0x240>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b83      	ldr	r3, [pc, #524]	@ (800291c <HAL_RCC_ClockConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e184      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d010      	beq.n	800274e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	4b7b      	ldr	r3, [pc, #492]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002738:	429a      	cmp	r2, r3
 800273a:	d908      	bls.n	800274e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800273c:	4b78      	ldr	r3, [pc, #480]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	4975      	ldr	r1, [pc, #468]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800274a:	4313      	orrs	r3, r2
 800274c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d010      	beq.n	800277c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	4b70      	ldr	r3, [pc, #448]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002766:	429a      	cmp	r2, r3
 8002768:	d908      	bls.n	800277c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800276a:	4b6d      	ldr	r3, [pc, #436]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	496a      	ldr	r1, [pc, #424]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002778:	4313      	orrs	r3, r2
 800277a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d010      	beq.n	80027aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	4b64      	ldr	r3, [pc, #400]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002794:	429a      	cmp	r2, r3
 8002796:	d908      	bls.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002798:	4b61      	ldr	r3, [pc, #388]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	495e      	ldr	r1, [pc, #376]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	4b59      	ldr	r3, [pc, #356]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d908      	bls.n	80027d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027c6:	4b56      	ldr	r3, [pc, #344]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4953      	ldr	r1, [pc, #332]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d908      	bls.n	8002806 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f023 020f 	bic.w	r2, r3, #15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4947      	ldr	r1, [pc, #284]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002802:	4313      	orrs	r3, r2
 8002804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d055      	beq.n	80028be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002812:	4b43      	ldr	r3, [pc, #268]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4940      	ldr	r1, [pc, #256]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002820:	4313      	orrs	r3, r2
 8002822:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d107      	bne.n	800283c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800282c:	4b3c      	ldr	r3, [pc, #240]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d121      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0f6      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d107      	bne.n	8002854 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002844:	4b36      	ldr	r3, [pc, #216]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d115      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0ea      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800285c:	4b30      	ldr	r3, [pc, #192]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0de      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286c:	4b2c      	ldr	r3, [pc, #176]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0d6      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800287c:	4b28      	ldr	r3, [pc, #160]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f023 0207 	bic.w	r2, r3, #7
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4925      	ldr	r1, [pc, #148]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 800288a:	4313      	orrs	r3, r2
 800288c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800288e:	f7fe fa2d 	bl	8000cec <HAL_GetTick>
 8002892:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002894:	e00a      	b.n	80028ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002896:	f7fe fa29 	bl	8000cec <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0be      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d1eb      	bne.n	8002896 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d208      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f023 020f 	bic.w	r2, r3, #15
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	490e      	ldr	r1, [pc, #56]	@ (8002920 <HAL_RCC_ClockConfig+0x244>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ec:	4b0b      	ldr	r3, [pc, #44]	@ (800291c <HAL_RCC_ClockConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d214      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b08      	ldr	r3, [pc, #32]	@ (800291c <HAL_RCC_ClockConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 020f 	bic.w	r2, r3, #15
 8002902:	4906      	ldr	r1, [pc, #24]	@ (800291c <HAL_RCC_ClockConfig+0x240>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b04      	ldr	r3, [pc, #16]	@ (800291c <HAL_RCC_ClockConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e086      	b.n	8002a2a <HAL_RCC_ClockConfig+0x34e>
 800291c:	52002000 	.word	0x52002000
 8002920:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d010      	beq.n	8002952 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	4b3f      	ldr	r3, [pc, #252]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800293c:	429a      	cmp	r2, r3
 800293e:	d208      	bcs.n	8002952 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002940:	4b3c      	ldr	r3, [pc, #240]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	4939      	ldr	r1, [pc, #228]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 800294e:	4313      	orrs	r3, r2
 8002950:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d010      	beq.n	8002980 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	4b34      	ldr	r3, [pc, #208]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800296a:	429a      	cmp	r2, r3
 800296c:	d208      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800296e:	4b31      	ldr	r3, [pc, #196]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	492e      	ldr	r1, [pc, #184]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 800297c:	4313      	orrs	r3, r2
 800297e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	d010      	beq.n	80029ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	4b28      	ldr	r3, [pc, #160]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002998:	429a      	cmp	r2, r3
 800299a:	d208      	bcs.n	80029ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800299c:	4b25      	ldr	r3, [pc, #148]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	4922      	ldr	r1, [pc, #136]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	4b1d      	ldr	r3, [pc, #116]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d208      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4917      	ldr	r1, [pc, #92]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029dc:	f000 f834 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	4912      	ldr	r1, [pc, #72]	@ (8002a38 <HAL_RCC_ClockConfig+0x35c>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
 80029f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <HAL_RCC_ClockConfig+0x358>)
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	4a0d      	ldr	r2, [pc, #52]	@ (8002a38 <HAL_RCC_ClockConfig+0x35c>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	4a0a      	ldr	r2, [pc, #40]	@ (8002a3c <HAL_RCC_ClockConfig+0x360>)
 8002a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a14:	4a0a      	ldr	r2, [pc, #40]	@ (8002a40 <HAL_RCC_ClockConfig+0x364>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_RCC_ClockConfig+0x368>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f91a 	bl	8000c58 <HAL_InitTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	58024400 	.word	0x58024400
 8002a38:	080065dc 	.word	0x080065dc
 8002a3c:	24000004 	.word	0x24000004
 8002a40:	24000000 	.word	0x24000000
 8002a44:	24000008 	.word	0x24000008

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	@ 0x24
 8002a4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4e:	4bb3      	ldr	r3, [pc, #716]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a56:	2b18      	cmp	r3, #24
 8002a58:	f200 8155 	bhi.w	8002d06 <HAL_RCC_GetSysClockFreq+0x2be>
 8002a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002ac9 	.word	0x08002ac9
 8002a68:	08002d07 	.word	0x08002d07
 8002a6c:	08002d07 	.word	0x08002d07
 8002a70:	08002d07 	.word	0x08002d07
 8002a74:	08002d07 	.word	0x08002d07
 8002a78:	08002d07 	.word	0x08002d07
 8002a7c:	08002d07 	.word	0x08002d07
 8002a80:	08002d07 	.word	0x08002d07
 8002a84:	08002aef 	.word	0x08002aef
 8002a88:	08002d07 	.word	0x08002d07
 8002a8c:	08002d07 	.word	0x08002d07
 8002a90:	08002d07 	.word	0x08002d07
 8002a94:	08002d07 	.word	0x08002d07
 8002a98:	08002d07 	.word	0x08002d07
 8002a9c:	08002d07 	.word	0x08002d07
 8002aa0:	08002d07 	.word	0x08002d07
 8002aa4:	08002af5 	.word	0x08002af5
 8002aa8:	08002d07 	.word	0x08002d07
 8002aac:	08002d07 	.word	0x08002d07
 8002ab0:	08002d07 	.word	0x08002d07
 8002ab4:	08002d07 	.word	0x08002d07
 8002ab8:	08002d07 	.word	0x08002d07
 8002abc:	08002d07 	.word	0x08002d07
 8002ac0:	08002d07 	.word	0x08002d07
 8002ac4:	08002afb 	.word	0x08002afb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac8:	4b94      	ldr	r3, [pc, #592]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ad4:	4b91      	ldr	r3, [pc, #580]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	4a90      	ldr	r2, [pc, #576]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ae6:	e111      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ae8:	4b8d      	ldr	r3, [pc, #564]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002aea:	61bb      	str	r3, [r7, #24]
      break;
 8002aec:	e10e      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002aee:	4b8d      	ldr	r3, [pc, #564]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002af0:	61bb      	str	r3, [r7, #24]
      break;
 8002af2:	e10b      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002af4:	4b8c      	ldr	r3, [pc, #560]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002af6:	61bb      	str	r3, [r7, #24]
      break;
 8002af8:	e108      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002afa:	4b88      	ldr	r3, [pc, #544]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b04:	4b85      	ldr	r3, [pc, #532]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b10:	4b82      	ldr	r3, [pc, #520]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b1a:	4b80      	ldr	r3, [pc, #512]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b1e:	08db      	lsrs	r3, r3, #3
 8002b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80e1 	beq.w	8002d00 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	f000 8083 	beq.w	8002c4c <HAL_RCC_GetSysClockFreq+0x204>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	f200 80a1 	bhi.w	8002c90 <HAL_RCC_GetSysClockFreq+0x248>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x114>
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d056      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b5a:	e099      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d02d      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b68:	4b6c      	ldr	r3, [pc, #432]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	4a6b      	ldr	r2, [pc, #428]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b92:	4b62      	ldr	r3, [pc, #392]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ba6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002bc2:	e087      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bd6:	4b51      	ldr	r3, [pc, #324]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c06:	e065      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c12:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c1a:	4b40      	ldr	r3, [pc, #256]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c2e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c4a:	e043      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c56:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c72:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c8e:	e021      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cb6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cd2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002cd4:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd8:	0a5b      	lsrs	r3, r3, #9
 8002cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cde:	3301      	adds	r3, #1
 8002ce0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf8:	ee17 3a90 	vmov	r3, s15
 8002cfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002cfe:	e005      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61bb      	str	r3, [r7, #24]
      break;
 8002d04:	e002      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d08:	61bb      	str	r3, [r7, #24]
      break;
 8002d0a:	bf00      	nop
  }

  return sysclockfreq;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	@ 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	58024400 	.word	0x58024400
 8002d20:	03d09000 	.word	0x03d09000
 8002d24:	003d0900 	.word	0x003d0900
 8002d28:	017d7840 	.word	0x017d7840
 8002d2c:	46000000 	.word	0x46000000
 8002d30:	4c742400 	.word	0x4c742400
 8002d34:	4a742400 	.word	0x4a742400
 8002d38:	4bbebc20 	.word	0x4bbebc20

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d42:	f7ff fe81 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b10      	ldr	r3, [pc, #64]	@ (8002d8c <HAL_RCC_GetHCLKFreq+0x50>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490f      	ldr	r1, [pc, #60]	@ (8002d90 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d60:	4b0a      	ldr	r3, [pc, #40]	@ (8002d8c <HAL_RCC_GetHCLKFreq+0x50>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	4a09      	ldr	r2, [pc, #36]	@ (8002d90 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	fa22 f303 	lsr.w	r3, r2, r3
 8002d76:	4a07      	ldr	r2, [pc, #28]	@ (8002d94 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d7a:	4a07      	ldr	r2, [pc, #28]	@ (8002d98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d80:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	58024400 	.word	0x58024400
 8002d90:	080065dc 	.word	0x080065dc
 8002d94:	24000004 	.word	0x24000004
 8002d98:	24000000 	.word	0x24000000

08002d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002da0:	f7ff ffcc 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4904      	ldr	r1, [pc, #16]	@ (8002dc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	080065dc 	.word	0x080065dc

08002dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002dcc:	f7ff ffb6 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4904      	ldr	r1, [pc, #16]	@ (8002df0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58024400 	.word	0x58024400
 8002df0:	080065dc 	.word	0x080065dc

08002df4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b0ca      	sub	sp, #296	@ 0x128
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002e18:	2500      	movs	r5, #0
 8002e1a:	ea54 0305 	orrs.w	r3, r4, r5
 8002e1e:	d049      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e2a:	d02f      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002e2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e30:	d828      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e36:	d01a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e3c:	d822      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e46:	d007      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e48:	e01c      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4a:	4bb8      	ldr	r3, [pc, #736]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	4ab7      	ldr	r2, [pc, #732]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e56:	e01a      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	2102      	movs	r1, #2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 fc8f 	bl	8004784 <RCCEx_PLL2_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e6c:	e00f      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e72:	3328      	adds	r3, #40	@ 0x28
 8002e74:	2102      	movs	r1, #2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 fd36 	bl	80048e8 <RCCEx_PLL3_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e82:	e004      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e96:	4ba5      	ldr	r3, [pc, #660]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ea4:	4aa1      	ldr	r2, [pc, #644]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	6513      	str	r3, [r2, #80]	@ 0x50
 8002eaa:	e003      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ec0:	f04f 0900 	mov.w	r9, #0
 8002ec4:	ea58 0309 	orrs.w	r3, r8, r9
 8002ec8:	d047      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d82a      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8002edc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002ef1 	.word	0x08002ef1
 8002ee0:	08002eff 	.word	0x08002eff
 8002ee4:	08002f15 	.word	0x08002f15
 8002ee8:	08002f33 	.word	0x08002f33
 8002eec:	08002f33 	.word	0x08002f33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ef0:	4b8e      	ldr	r3, [pc, #568]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	4a8d      	ldr	r2, [pc, #564]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002efc:	e01a      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f02:	3308      	adds	r3, #8
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 fc3c 	bl	8004784 <RCCEx_PLL2_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f12:	e00f      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f18:	3328      	adds	r3, #40	@ 0x28
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 fce3 	bl	80048e8 <RCCEx_PLL3_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f28:	e004      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f30:	e000      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f3c:	4b7b      	ldr	r3, [pc, #492]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f40:	f023 0107 	bic.w	r1, r3, #7
 8002f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	4a78      	ldr	r2, [pc, #480]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002f66:	f04f 0b00 	mov.w	fp, #0
 8002f6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f6e:	d04c      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f7a:	d030      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f80:	d829      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f84:	d02d      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f86:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f88:	d825      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f8a:	2b80      	cmp	r3, #128	@ 0x80
 8002f8c:	d018      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f8e:	2b80      	cmp	r3, #128	@ 0x80
 8002f90:	d821      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002f96:	2b40      	cmp	r3, #64	@ 0x40
 8002f98:	d007      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002f9a:	e01c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9c:	4b63      	ldr	r3, [pc, #396]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	4a62      	ldr	r2, [pc, #392]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fae:	3308      	adds	r3, #8
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 fbe6 	bl	8004784 <RCCEx_PLL2_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fbe:	e011      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc4:	3328      	adds	r3, #40	@ 0x28
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 fc8d 	bl	80048e8 <RCCEx_PLL3_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fd4:	e006      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fdc:	e002      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002fec:	4b4f      	ldr	r3, [pc, #316]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffa:	4a4c      	ldr	r2, [pc, #304]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003000:	e003      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800300a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003016:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800301a:	2300      	movs	r3, #0
 800301c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003020:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003024:	460b      	mov	r3, r1
 8003026:	4313      	orrs	r3, r2
 8003028:	d053      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800302e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003032:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003036:	d035      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003038:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800303c:	d82e      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800303e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003042:	d031      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003044:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003048:	d828      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800304e:	d01a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003054:	d822      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800305a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800305e:	d007      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003060:	e01c      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003062:	4b32      	ldr	r3, [pc, #200]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	4a31      	ldr	r2, [pc, #196]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800306c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800306e:	e01c      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003074:	3308      	adds	r3, #8
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fb83 	bl	8004784 <RCCEx_PLL2_Config>
 800307e:	4603      	mov	r3, r0
 8003080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003084:	e011      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308a:	3328      	adds	r3, #40	@ 0x28
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f001 fc2a 	bl	80048e8 <RCCEx_PLL3_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800309a:	e006      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030a2:	e002      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10b      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80030b2:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80030ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030c2:	4a1a      	ldr	r2, [pc, #104]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c8:	e003      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80030de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80030e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80030ec:	460b      	mov	r3, r1
 80030ee:	4313      	orrs	r3, r2
 80030f0:	d056      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80030f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80030fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030fe:	d038      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003100:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003104:	d831      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003106:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800310a:	d034      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800310c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003110:	d82b      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003116:	d01d      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800311c:	d825      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003128:	e01f      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800312a:	bf00      	nop
 800312c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4ba2      	ldr	r3, [pc, #648]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	4aa1      	ldr	r2, [pc, #644]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800313c:	e01c      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003142:	3308      	adds	r3, #8
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f001 fb1c 	bl	8004784 <RCCEx_PLL2_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003152:	e011      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	3328      	adds	r3, #40	@ 0x28
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f001 fbc3 	bl	80048e8 <RCCEx_PLL3_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003170:	e002      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003180:	4b8e      	ldr	r3, [pc, #568]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003184:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003190:	4a8a      	ldr	r2, [pc, #552]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003192:	430b      	orrs	r3, r1
 8003194:	6593      	str	r3, [r2, #88]	@ 0x58
 8003196:	e003      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800319c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80031ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80031b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80031ba:	460b      	mov	r3, r1
 80031bc:	4313      	orrs	r3, r2
 80031be:	d03a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80031c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c6:	2b30      	cmp	r3, #48	@ 0x30
 80031c8:	d01f      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80031ca:	2b30      	cmp	r3, #48	@ 0x30
 80031cc:	d819      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d00c      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d815      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d111      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031de:	4b77      	ldr	r3, [pc, #476]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	4a76      	ldr	r2, [pc, #472]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80031ea:	e011      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	3308      	adds	r3, #8
 80031f2:	2102      	movs	r1, #2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 fac5 	bl	8004784 <RCCEx_PLL2_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800320e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003218:	4b68      	ldr	r3, [pc, #416]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800321a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003226:	4a65      	ldr	r2, [pc, #404]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003228:	430b      	orrs	r3, r1
 800322a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003242:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003246:	2300      	movs	r3, #0
 8003248:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800324c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003250:	460b      	mov	r3, r1
 8003252:	4313      	orrs	r3, r2
 8003254:	d051      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003260:	d035      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003266:	d82e      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003268:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800326c:	d031      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800326e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003272:	d828      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003278:	d01a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800327a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327e:	d822      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003288:	d007      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800328a:	e01c      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800328c:	4b4b      	ldr	r3, [pc, #300]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003290:	4a4a      	ldr	r2, [pc, #296]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003298:	e01c      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329e:	3308      	adds	r3, #8
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 fa6e 	bl	8004784 <RCCEx_PLL2_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032ae:	e011      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b4:	3328      	adds	r3, #40	@ 0x28
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f001 fb15 	bl	80048e8 <RCCEx_PLL3_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032c4:	e006      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032cc:	e002      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032dc:	4b37      	ldr	r3, [pc, #220]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ea:	4a34      	ldr	r2, [pc, #208]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80032f0:	e003      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003306:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800330a:	2300      	movs	r3, #0
 800330c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003310:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003314:	460b      	mov	r3, r1
 8003316:	4313      	orrs	r3, r2
 8003318:	d056      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003324:	d033      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003326:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800332a:	d82c      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800332c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003330:	d02f      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003332:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003336:	d826      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003338:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800333c:	d02b      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800333e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003342:	d820      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003348:	d012      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800334a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800334e:	d81a      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d022      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003358:	d115      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	3308      	adds	r3, #8
 8003360:	2101      	movs	r1, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fa0e 	bl	8004784 <RCCEx_PLL2_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800336e:	e015      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003374:	3328      	adds	r3, #40	@ 0x28
 8003376:	2101      	movs	r1, #1
 8003378:	4618      	mov	r0, r3
 800337a:	f001 fab5 	bl	80048e8 <RCCEx_PLL3_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003384:	e00a      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800338c:	e006      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800338e:	bf00      	nop
 8003390:	e004      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003392:	bf00      	nop
 8003394:	e002      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003396:	bf00      	nop
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800339a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033b2:	4a02      	ldr	r2, [pc, #8]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80033b8:	e006      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80033ba:	bf00      	nop
 80033bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80033d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	d055      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033f4:	d033      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80033f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033fa:	d82c      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003400:	d02f      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003406:	d826      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003408:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800340c:	d02b      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800340e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003412:	d820      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003418:	d012      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800341a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800341e:	d81a      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d022      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003428:	d115      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342e:	3308      	adds	r3, #8
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f001 f9a6 	bl	8004784 <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800343e:	e015      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003444:	3328      	adds	r3, #40	@ 0x28
 8003446:	2101      	movs	r1, #1
 8003448:	4618      	mov	r0, r3
 800344a:	f001 fa4d 	bl	80048e8 <RCCEx_PLL3_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003454:	e00a      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800345c:	e006      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800345e:	bf00      	nop
 8003460:	e004      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800346a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003474:	4ba3      	ldr	r3, [pc, #652]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003484:	4a9f      	ldr	r2, [pc, #636]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003486:	430b      	orrs	r3, r1
 8003488:	6593      	str	r3, [r2, #88]	@ 0x58
 800348a:	e003      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80034a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80034aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034ae:	460b      	mov	r3, r1
 80034b0:	4313      	orrs	r3, r2
 80034b2:	d037      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034be:	d00e      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80034c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034c4:	d816      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80034ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ce:	d111      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	4a8b      	ldr	r2, [pc, #556]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034dc:	e00f      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e2:	3308      	adds	r3, #8
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 f94c 	bl	8004784 <RCCEx_PLL2_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034f2:	e004      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80034fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003506:	4b7f      	ldr	r3, [pc, #508]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	4a7b      	ldr	r2, [pc, #492]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003516:	430b      	orrs	r3, r1
 8003518:	6513      	str	r3, [r2, #80]	@ 0x50
 800351a:	e003      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800353a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800353e:	460b      	mov	r3, r1
 8003540:	4313      	orrs	r3, r2
 8003542:	d039      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354a:	2b03      	cmp	r3, #3
 800354c:	d81c      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800354e:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	08003591 	.word	0x08003591
 8003558:	08003565 	.word	0x08003565
 800355c:	08003573 	.word	0x08003573
 8003560:	08003591 	.word	0x08003591
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003564:	4b67      	ldr	r3, [pc, #412]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	4a66      	ldr	r2, [pc, #408]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800356a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800356e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003570:	e00f      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003576:	3308      	adds	r3, #8
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 f902 	bl	8004784 <RCCEx_PLL2_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800359a:	4b5a      	ldr	r3, [pc, #360]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	f023 0103 	bic.w	r1, r3, #3
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a8:	4a56      	ldr	r2, [pc, #344]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80035c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f000 809f 	beq.w	8003718 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035da:	4b4b      	ldr	r3, [pc, #300]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4a      	ldr	r2, [pc, #296]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e6:	f7fd fb81 	bl	8000cec <HAL_GetTick>
 80035ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ee:	e00b      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fd fb7c 	bl	8000cec <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	@ 0x64
 80035fe:	d903      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003606:	e005      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003608:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ed      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003618:	2b00      	cmp	r3, #0
 800361a:	d179      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800361c:	4b39      	ldr	r3, [pc, #228]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800361e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003624:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003628:	4053      	eors	r3, r2
 800362a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362e:	2b00      	cmp	r3, #0
 8003630:	d015      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003632:	4b34      	ldr	r3, [pc, #208]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800363a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800363e:	4b31      	ldr	r3, [pc, #196]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003642:	4a30      	ldr	r2, [pc, #192]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003648:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800364a:	4b2e      	ldr	r3, [pc, #184]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	4a2d      	ldr	r2, [pc, #180]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003654:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003656:	4a2b      	ldr	r2, [pc, #172]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003658:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800365c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800366a:	d118      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd fb3e 	bl	8000cec <HAL_GetTick>
 8003670:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003674:	e00d      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fd fb39 	bl	8000cec <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003680:	1ad2      	subs	r2, r2, r3
 8003682:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003686:	429a      	cmp	r2, r3
 8003688:	d903      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003690:	e005      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003692:	4b1c      	ldr	r3, [pc, #112]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0eb      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800369e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d129      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036b6:	d10e      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80036b8:	4b12      	ldr	r3, [pc, #72]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036c8:	091a      	lsrs	r2, r3, #4
 80036ca:	4b10      	ldr	r3, [pc, #64]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6113      	str	r3, [r2, #16]
 80036d4:	e005      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036e0:	6113      	str	r3, [r2, #16]
 80036e2:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f8:	e00e      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003702:	e009      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003704:	58024400 	.word	0x58024400
 8003708:	58024800 	.word	0x58024800
 800370c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f002 0301 	and.w	r3, r2, #1
 8003724:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800372e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003732:	460b      	mov	r3, r1
 8003734:	4313      	orrs	r3, r2
 8003736:	f000 8089 	beq.w	800384c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003740:	2b28      	cmp	r3, #40	@ 0x28
 8003742:	d86b      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003744:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003825 	.word	0x08003825
 8003750:	0800381d 	.word	0x0800381d
 8003754:	0800381d 	.word	0x0800381d
 8003758:	0800381d 	.word	0x0800381d
 800375c:	0800381d 	.word	0x0800381d
 8003760:	0800381d 	.word	0x0800381d
 8003764:	0800381d 	.word	0x0800381d
 8003768:	0800381d 	.word	0x0800381d
 800376c:	080037f1 	.word	0x080037f1
 8003770:	0800381d 	.word	0x0800381d
 8003774:	0800381d 	.word	0x0800381d
 8003778:	0800381d 	.word	0x0800381d
 800377c:	0800381d 	.word	0x0800381d
 8003780:	0800381d 	.word	0x0800381d
 8003784:	0800381d 	.word	0x0800381d
 8003788:	0800381d 	.word	0x0800381d
 800378c:	08003807 	.word	0x08003807
 8003790:	0800381d 	.word	0x0800381d
 8003794:	0800381d 	.word	0x0800381d
 8003798:	0800381d 	.word	0x0800381d
 800379c:	0800381d 	.word	0x0800381d
 80037a0:	0800381d 	.word	0x0800381d
 80037a4:	0800381d 	.word	0x0800381d
 80037a8:	0800381d 	.word	0x0800381d
 80037ac:	08003825 	.word	0x08003825
 80037b0:	0800381d 	.word	0x0800381d
 80037b4:	0800381d 	.word	0x0800381d
 80037b8:	0800381d 	.word	0x0800381d
 80037bc:	0800381d 	.word	0x0800381d
 80037c0:	0800381d 	.word	0x0800381d
 80037c4:	0800381d 	.word	0x0800381d
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	08003825 	.word	0x08003825
 80037d0:	0800381d 	.word	0x0800381d
 80037d4:	0800381d 	.word	0x0800381d
 80037d8:	0800381d 	.word	0x0800381d
 80037dc:	0800381d 	.word	0x0800381d
 80037e0:	0800381d 	.word	0x0800381d
 80037e4:	0800381d 	.word	0x0800381d
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	08003825 	.word	0x08003825
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f4:	3308      	adds	r3, #8
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 ffc3 	bl	8004784 <RCCEx_PLL2_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003804:	e00f      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	3328      	adds	r3, #40	@ 0x28
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f001 f86a 	bl	80048e8 <RCCEx_PLL3_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800381a:	e004      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800382e:	4bbf      	ldr	r3, [pc, #764]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003832:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800383c:	4abb      	ldr	r2, [pc, #748]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800383e:	430b      	orrs	r3, r1
 8003840:	6553      	str	r3, [r2, #84]	@ 0x54
 8003842:	e003      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f002 0302 	and.w	r3, r2, #2
 8003858:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003862:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003866:	460b      	mov	r3, r1
 8003868:	4313      	orrs	r3, r2
 800386a:	d041      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003872:	2b05      	cmp	r3, #5
 8003874:	d824      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003876:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	080038c9 	.word	0x080038c9
 8003880:	08003895 	.word	0x08003895
 8003884:	080038ab 	.word	0x080038ab
 8003888:	080038c9 	.word	0x080038c9
 800388c:	080038c9 	.word	0x080038c9
 8003890:	080038c9 	.word	0x080038c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003898:	3308      	adds	r3, #8
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f000 ff71 	bl	8004784 <RCCEx_PLL2_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038a8:	e00f      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	3328      	adds	r3, #40	@ 0x28
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 f818 	bl	80048e8 <RCCEx_PLL3_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038be:	e004      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c6:	e000      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80038c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038d2:	4b96      	ldr	r3, [pc, #600]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	f023 0107 	bic.w	r1, r3, #7
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038e0:	4a92      	ldr	r2, [pc, #584]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80038e6:	e003      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f002 0304 	and.w	r3, r2, #4
 80038fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003906:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800390a:	460b      	mov	r3, r1
 800390c:	4313      	orrs	r3, r2
 800390e:	d044      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003918:	2b05      	cmp	r3, #5
 800391a:	d825      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800391c:	a201      	add	r2, pc, #4	@ (adr r2, 8003924 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003971 	.word	0x08003971
 8003928:	0800393d 	.word	0x0800393d
 800392c:	08003953 	.word	0x08003953
 8003930:	08003971 	.word	0x08003971
 8003934:	08003971 	.word	0x08003971
 8003938:	08003971 	.word	0x08003971
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	3308      	adds	r3, #8
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f000 ff1d 	bl	8004784 <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003950:	e00f      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	3328      	adds	r3, #40	@ 0x28
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f000 ffc4 	bl	80048e8 <RCCEx_PLL3_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003966:	e004      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800397a:	4b6c      	ldr	r3, [pc, #432]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397e:	f023 0107 	bic.w	r1, r3, #7
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800398a:	4a68      	ldr	r2, [pc, #416]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800398c:	430b      	orrs	r3, r1
 800398e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003990:	e003      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f002 0320 	and.w	r3, r2, #32
 80039a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039aa:	2300      	movs	r3, #0
 80039ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039b4:	460b      	mov	r3, r1
 80039b6:	4313      	orrs	r3, r2
 80039b8:	d055      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c6:	d033      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039cc:	d82c      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d2:	d02f      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d8:	d826      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039de:	d02b      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80039e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039e4:	d820      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ea:	d012      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80039ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f0:	d81a      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d022      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80039f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039fa:	d115      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	3308      	adds	r3, #8
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 febd 	bl	8004784 <RCCEx_PLL2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a10:	e015      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	3328      	adds	r3, #40	@ 0x28
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 ff64 	bl	80048e8 <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a26:	e00a      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a2e:	e006      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a30:	bf00      	nop
 8003a32:	e004      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a34:	bf00      	nop
 8003a36:	e002      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10b      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a46:	4b39      	ldr	r3, [pc, #228]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a56:	4a35      	ldr	r2, [pc, #212]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a5c:	e003      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4313      	orrs	r3, r2
 8003a84:	d058      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a8e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a92:	d033      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003a94:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a98:	d82c      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9e:	d02f      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa4:	d826      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003aaa:	d02b      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003aac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ab0:	d820      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab6:	d012      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003abc:	d81a      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d022      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac6:	d115      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	3308      	adds	r3, #8
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fe57 	bl	8004784 <RCCEx_PLL2_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003adc:	e015      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	3328      	adds	r3, #40	@ 0x28
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fefe 	bl	80048e8 <RCCEx_PLL3_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003af2:	e00a      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003afa:	e006      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003afc:	bf00      	nop
 8003afe:	e004      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b00:	bf00      	nop
 8003b02:	e002      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b04:	bf00      	nop
 8003b06:	e000      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10e      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b12:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b22:	4a02      	ldr	r2, [pc, #8]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003b2a:	bf00      	nop
 8003b2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b52:	460b      	mov	r3, r1
 8003b54:	4313      	orrs	r3, r2
 8003b56:	d055      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b64:	d033      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003b66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b6a:	d82c      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b70:	d02f      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b76:	d826      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b7c:	d02b      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003b7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b82:	d820      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b88:	d012      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003b8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b8e:	d81a      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d022      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b98:	d115      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fdee 	bl	8004784 <RCCEx_PLL2_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bae:	e015      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	3328      	adds	r3, #40	@ 0x28
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fe95 	bl	80048e8 <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e004      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003be4:	4ba1      	ldr	r3, [pc, #644]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003bf4:	4a9d      	ldr	r2, [pc, #628]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfa:	e003      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f002 0308 	and.w	r3, r2, #8
 8003c10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	d01e      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	3328      	adds	r3, #40	@ 0x28
 8003c38:	2102      	movs	r1, #2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fe54 	bl	80048e8 <RCCEx_PLL3_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c4c:	4b87      	ldr	r3, [pc, #540]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c5c:	4a83      	ldr	r2, [pc, #524]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f002 0310 	and.w	r3, r2, #16
 8003c6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c78:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d01e      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	3328      	adds	r3, #40	@ 0x28
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fe25 	bl	80048e8 <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003caa:	4b70      	ldr	r3, [pc, #448]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cba:	4a6c      	ldr	r2, [pc, #432]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ccc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cd6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	d03e      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cec:	d022      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003cee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cf2:	d81b      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003cfe:	e015      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d04:	3308      	adds	r3, #8
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fd3b 	bl	8004784 <RCCEx_PLL2_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d14:	e00f      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	3328      	adds	r3, #40	@ 0x28
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fde2 	bl	80048e8 <RCCEx_PLL3_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d2a:	e004      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d4e:	4a47      	ldr	r2, [pc, #284]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d54:	e003      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003d74:	460b      	mov	r3, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d86:	d01f      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003d88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d8c:	d818      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d92:	d003      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003d94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d98:	d007      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003d9a:	e011      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b33      	ldr	r3, [pc, #204]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4a32      	ldr	r2, [pc, #200]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003da8:	e00f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3328      	adds	r3, #40	@ 0x28
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fd98 	bl	80048e8 <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dd2:	4b26      	ldr	r3, [pc, #152]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003de8:	e003      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003dfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e00:	2300      	movs	r3, #0
 8003e02:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d034      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1c:	d007      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003e1e:	e011      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	4a11      	ldr	r2, [pc, #68]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e2c:	e00e      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	3308      	adds	r3, #8
 8003e34:	2102      	movs	r1, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fca4 	bl	8004784 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e42:	e003      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10d      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e62:	4a02      	ldr	r2, [pc, #8]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003e6a:	bf00      	nop
 8003e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e86:	2300      	movs	r3, #0
 8003e88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d00c      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e98:	3328      	adds	r3, #40	@ 0x28
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fd23 	bl	80048e8 <RCCEx_PLL3_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003eba:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ec0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	d038      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ed6:	d018      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003edc:	d811      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee2:	d014      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee8:	d80b      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d011      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef4:	4bc3      	ldr	r3, [pc, #780]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	4ac2      	ldr	r2, [pc, #776]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f00:	e008      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f08:	e004      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e002      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e000      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f1c:	4bb9      	ldr	r3, [pc, #740]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f2c:	4ab5      	ldr	r2, [pc, #724]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003f48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f58:	4baa      	ldr	r3, [pc, #680]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f66:	4aa7      	ldr	r2, [pc, #668]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003f78:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f82:	460b      	mov	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f88:	4b9e      	ldr	r3, [pc, #632]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f98:	4a9a      	ldr	r2, [pc, #616]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003faa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fac:	2300      	movs	r3, #0
 8003fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	d009      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fba:	4b92      	ldr	r3, [pc, #584]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fbe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc8:	4a8e      	ldr	r2, [pc, #568]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003fda:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fdc:	2300      	movs	r3, #0
 8003fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fea:	4b86      	ldr	r3, [pc, #536]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	4a85      	ldr	r2, [pc, #532]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ff0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ff4:	6113      	str	r3, [r2, #16]
 8003ff6:	4b83      	ldr	r3, [pc, #524]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ff8:	6919      	ldr	r1, [r3, #16]
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004002:	4a80      	ldr	r2, [pc, #512]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004004:	430b      	orrs	r3, r1
 8004006:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004016:	2300      	movs	r3, #0
 8004018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800401a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800401e:	460b      	mov	r3, r1
 8004020:	4313      	orrs	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004024:	4b77      	ldr	r3, [pc, #476]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004028:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800402c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004032:	4a74      	ldr	r2, [pc, #464]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004034:	430b      	orrs	r3, r1
 8004036:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004044:	633b      	str	r3, [r7, #48]	@ 0x30
 8004046:	2300      	movs	r3, #0
 8004048:	637b      	str	r3, [r7, #52]	@ 0x34
 800404a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800404e:	460b      	mov	r3, r1
 8004050:	4313      	orrs	r3, r2
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004054:	4b6b      	ldr	r3, [pc, #428]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004058:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004064:	4a67      	ldr	r2, [pc, #412]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004066:	430b      	orrs	r3, r1
 8004068:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	2100      	movs	r1, #0
 8004074:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800407c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004080:	460b      	mov	r3, r1
 8004082:	4313      	orrs	r3, r2
 8004084:	d011      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	3308      	adds	r3, #8
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fb78 	bl	8004784 <RCCEx_PLL2_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800409a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	2100      	movs	r1, #0
 80040b4:	6239      	str	r1, [r7, #32]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80040bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d011      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	3308      	adds	r3, #8
 80040cc:	2101      	movs	r1, #1
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fb58 	bl	8004784 <RCCEx_PLL2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	2100      	movs	r1, #0
 80040f4:	61b9      	str	r1, [r7, #24]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004100:	460b      	mov	r3, r1
 8004102:	4313      	orrs	r3, r2
 8004104:	d011      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	3308      	adds	r3, #8
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fb38 	bl	8004784 <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800411a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	2100      	movs	r1, #0
 8004134:	6139      	str	r1, [r7, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d011      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	3328      	adds	r3, #40	@ 0x28
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fbca 	bl	80048e8 <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800415a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	2100      	movs	r1, #0
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d011      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	3328      	adds	r3, #40	@ 0x28
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fbaa 	bl	80048e8 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800419a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	2100      	movs	r1, #0
 80041b4:	6039      	str	r1, [r7, #0]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d011      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ca:	3328      	adds	r3, #40	@ 0x28
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fb8a 	bl	80048e8 <RCCEx_PLL3_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80041ea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80041fe:	46bd      	mov	sp, r7
 8004200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004204:	58024400 	.word	0x58024400

08004208 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800420c:	f7fe fd96 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8004210:	4602      	mov	r2, r0
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	4904      	ldr	r1, [pc, #16]	@ (8004230 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800421e:	5ccb      	ldrb	r3, [r1, r3]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd80      	pop	{r7, pc}
 800422c:	58024400 	.word	0x58024400
 8004230:	080065dc 	.word	0x080065dc

08004234 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004234:	b480      	push	{r7}
 8004236:	b089      	sub	sp, #36	@ 0x24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800423c:	4ba1      	ldr	r3, [pc, #644]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004246:	4b9f      	ldr	r3, [pc, #636]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424a:	0b1b      	lsrs	r3, r3, #12
 800424c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004250:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004252:	4b9c      	ldr	r3, [pc, #624]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800425e:	4b99      	ldr	r3, [pc, #612]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	fb02 f303 	mul.w	r3, r2, r3
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8111 	beq.w	80044a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	2b02      	cmp	r3, #2
 8004286:	f000 8083 	beq.w	8004390 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b02      	cmp	r3, #2
 800428e:	f200 80a1 	bhi.w	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d056      	beq.n	800434c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800429e:	e099      	b.n	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042a0:	4b88      	ldr	r3, [pc, #544]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d02d      	beq.n	8004308 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042ac:	4b85      	ldr	r3, [pc, #532]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	4a84      	ldr	r2, [pc, #528]	@ (80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	ee07 3a90 	vmov	s15, r3
 80042c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d6:	4b7b      	ldr	r3, [pc, #492]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004306:	e087      	b.n	8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	4b6a      	ldr	r3, [pc, #424]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800431c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a03 	vldr	s12, [r7, #12]
 800432e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800434a:	e065      	b.n	8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80044d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b59      	ldr	r3, [pc, #356]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004372:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800438e:	e043      	b.n	8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b48      	ldr	r3, [pc, #288]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043d2:	e021      	b.n	8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80044d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b37      	ldr	r3, [pc, #220]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004416:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004418:	4b2a      	ldr	r3, [pc, #168]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	0a5b      	lsrs	r3, r3, #9
 800441e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800442e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004432:	edd7 6a07 	vldr	s13, [r7, #28]
 8004436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800443e:	ee17 2a90 	vmov	r2, s15
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004446:	4b1f      	ldr	r3, [pc, #124]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444a:	0c1b      	lsrs	r3, r3, #16
 800444c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004450:	ee07 3a90 	vmov	s15, r3
 8004454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800445c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004460:	edd7 6a07 	vldr	s13, [r7, #28]
 8004464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800446c:	ee17 2a90 	vmov	r2, s15
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004474:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	0e1b      	lsrs	r3, r3, #24
 800447a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800448a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800448e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449a:	ee17 2a90 	vmov	r2, s15
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80044a2:	e008      	b.n	80044b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	609a      	str	r2, [r3, #8]
}
 80044b6:	bf00      	nop
 80044b8:	3724      	adds	r7, #36	@ 0x24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	58024400 	.word	0x58024400
 80044c8:	03d09000 	.word	0x03d09000
 80044cc:	46000000 	.word	0x46000000
 80044d0:	4c742400 	.word	0x4c742400
 80044d4:	4a742400 	.word	0x4a742400
 80044d8:	4bbebc20 	.word	0x4bbebc20

080044dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	@ 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044e4:	4ba1      	ldr	r3, [pc, #644]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80044ee:	4b9f      	ldr	r3, [pc, #636]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	0d1b      	lsrs	r3, r3, #20
 80044f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044fa:	4b9c      	ldr	r3, [pc, #624]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004506:	4b99      	ldr	r3, [pc, #612]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	08db      	lsrs	r3, r3, #3
 800450c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8111 	beq.w	800474c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b02      	cmp	r3, #2
 800452e:	f000 8083 	beq.w	8004638 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b02      	cmp	r3, #2
 8004536:	f200 80a1 	bhi.w	800467c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d056      	beq.n	80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004546:	e099      	b.n	800467c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004548:	4b88      	ldr	r3, [pc, #544]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02d      	beq.n	80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004554:	4b85      	ldr	r3, [pc, #532]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	4a84      	ldr	r2, [pc, #528]	@ (8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
 8004564:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457e:	4b7b      	ldr	r3, [pc, #492]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004592:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045ae:	e087      	b.n	80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004778 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c2:	4b6a      	ldr	r3, [pc, #424]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045f2:	e065      	b.n	80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800477c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004606:	4b59      	ldr	r3, [pc, #356]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004616:	ed97 6a03 	vldr	s12, [r7, #12]
 800461a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800461e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004636:	e043      	b.n	80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464a:	4b48      	ldr	r3, [pc, #288]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465a:	ed97 6a03 	vldr	s12, [r7, #12]
 800465e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800466e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800467a:	e021      	b.n	80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800477c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800468a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468e:	4b37      	ldr	r3, [pc, #220]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469e:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80046c0:	4b2a      	ldr	r3, [pc, #168]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	0a5b      	lsrs	r3, r3, #9
 80046c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046da:	edd7 6a07 	vldr	s13, [r7, #28]
 80046de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e6:	ee17 2a90 	vmov	r2, s15
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80046ee:	4b1f      	ldr	r3, [pc, #124]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004700:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004704:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004708:	edd7 6a07 	vldr	s13, [r7, #28]
 800470c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004714:	ee17 2a90 	vmov	r2, s15
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800471c:	4b13      	ldr	r3, [pc, #76]	@ (800476c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	0e1b      	lsrs	r3, r3, #24
 8004722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004736:	edd7 6a07 	vldr	s13, [r7, #28]
 800473a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004742:	ee17 2a90 	vmov	r2, s15
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800474a:	e008      	b.n	800475e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
}
 800475e:	bf00      	nop
 8004760:	3724      	adds	r7, #36	@ 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	58024400 	.word	0x58024400
 8004770:	03d09000 	.word	0x03d09000
 8004774:	46000000 	.word	0x46000000
 8004778:	4c742400 	.word	0x4c742400
 800477c:	4a742400 	.word	0x4a742400
 8004780:	4bbebc20 	.word	0x4bbebc20

08004784 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004792:	4b53      	ldr	r3, [pc, #332]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b03      	cmp	r3, #3
 800479c:	d101      	bne.n	80047a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e099      	b.n	80048d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80047a2:	4b4f      	ldr	r3, [pc, #316]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a4e      	ldr	r2, [pc, #312]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 80047a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ae:	f7fc fa9d 	bl	8000cec <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047b4:	e008      	b.n	80047c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047b6:	f7fc fa99 	bl	8000cec <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e086      	b.n	80048d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047c8:	4b45      	ldr	r3, [pc, #276]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047d4:	4b42      	ldr	r3, [pc, #264]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 80047d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	031b      	lsls	r3, r3, #12
 80047e2:	493f      	ldr	r1, [pc, #252]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	025b      	lsls	r3, r3, #9
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	3b01      	subs	r3, #1
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	3b01      	subs	r3, #1
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004818:	4931      	ldr	r1, [pc, #196]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800481e:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	492d      	ldr	r1, [pc, #180]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 800482c:	4313      	orrs	r3, r2
 800482e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004830:	4b2b      	ldr	r3, [pc, #172]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	f023 0220 	bic.w	r2, r3, #32
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4928      	ldr	r1, [pc, #160]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 800483e:	4313      	orrs	r3, r2
 8004840:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004842:	4b27      	ldr	r3, [pc, #156]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	4a26      	ldr	r2, [pc, #152]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004848:	f023 0310 	bic.w	r3, r3, #16
 800484c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800484e:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004850:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <RCCEx_PLL2_Config+0x160>)
 8004854:	4013      	ands	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	69d2      	ldr	r2, [r2, #28]
 800485a:	00d2      	lsls	r2, r2, #3
 800485c:	4920      	ldr	r1, [pc, #128]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 800485e:	4313      	orrs	r3, r2
 8004860:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004862:	4b1f      	ldr	r3, [pc, #124]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	4a1e      	ldr	r2, [pc, #120]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004868:	f043 0310 	orr.w	r3, r3, #16
 800486c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004874:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	4a19      	ldr	r2, [pc, #100]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 800487a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800487e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004880:	e00f      	b.n	80048a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d106      	bne.n	8004896 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004888:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	4a14      	ldr	r2, [pc, #80]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 800488e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004892:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004894:	e005      	b.n	80048a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004896:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	4a11      	ldr	r2, [pc, #68]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 800489c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80048a2:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a0e      	ldr	r2, [pc, #56]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 80048a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ae:	f7fc fa1d 	bl	8000cec <HAL_GetTick>
 80048b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048b4:	e008      	b.n	80048c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048b6:	f7fc fa19 	bl	8000cec <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e006      	b.n	80048d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <RCCEx_PLL2_Config+0x15c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	58024400 	.word	0x58024400
 80048e4:	ffff0007 	.word	0xffff0007

080048e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048f6:	4b53      	ldr	r3, [pc, #332]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80048f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d101      	bne.n	8004906 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e099      	b.n	8004a3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004906:	4b4f      	ldr	r3, [pc, #316]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a4e      	ldr	r2, [pc, #312]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 800490c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004912:	f7fc f9eb 	bl	8000cec <HAL_GetTick>
 8004916:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004918:	e008      	b.n	800492c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800491a:	f7fc f9e7 	bl	8000cec <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e086      	b.n	8004a3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800492c:	4b45      	ldr	r3, [pc, #276]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f0      	bne.n	800491a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004938:	4b42      	ldr	r3, [pc, #264]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	051b      	lsls	r3, r3, #20
 8004946:	493f      	ldr	r1, [pc, #252]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 8004948:	4313      	orrs	r3, r2
 800494a:	628b      	str	r3, [r1, #40]	@ 0x28
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	3b01      	subs	r3, #1
 8004952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	3b01      	subs	r3, #1
 800495c:	025b      	lsls	r3, r3, #9
 800495e:	b29b      	uxth	r3, r3
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	3b01      	subs	r3, #1
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	3b01      	subs	r3, #1
 8004976:	061b      	lsls	r3, r3, #24
 8004978:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800497c:	4931      	ldr	r1, [pc, #196]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 800497e:	4313      	orrs	r3, r2
 8004980:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004982:	4b30      	ldr	r3, [pc, #192]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 8004984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004986:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	492d      	ldr	r1, [pc, #180]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 8004990:	4313      	orrs	r3, r2
 8004992:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004994:	4b2b      	ldr	r3, [pc, #172]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	4928      	ldr	r1, [pc, #160]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80049a6:	4b27      	ldr	r3, [pc, #156]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	4a26      	ldr	r2, [pc, #152]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049b2:	4b24      	ldr	r3, [pc, #144]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049b6:	4b24      	ldr	r3, [pc, #144]	@ (8004a48 <RCCEx_PLL3_Config+0x160>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	69d2      	ldr	r2, [r2, #28]
 80049be:	00d2      	lsls	r2, r2, #3
 80049c0:	4920      	ldr	r1, [pc, #128]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	4a19      	ldr	r2, [pc, #100]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049e4:	e00f      	b.n	8004a06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d106      	bne.n	80049fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049ec:	4b15      	ldr	r3, [pc, #84]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f0:	4a14      	ldr	r2, [pc, #80]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049f8:	e005      	b.n	8004a06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049fa:	4b12      	ldr	r3, [pc, #72]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 80049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fe:	4a11      	ldr	r2, [pc, #68]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 8004a00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a06:	4b0f      	ldr	r3, [pc, #60]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a12:	f7fc f96b 	bl	8000cec <HAL_GetTick>
 8004a16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a18:	e008      	b.n	8004a2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a1a:	f7fc f967 	bl	8000cec <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e006      	b.n	8004a3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <RCCEx_PLL3_Config+0x15c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
 8004a48:	ffff0007 	.word	0xffff0007

08004a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e042      	b.n	8004ae4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fb ffe5 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2224      	movs	r2, #36	@ 0x24
 8004a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 fadc 	bl	8006054 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fd71 	bl	8005584 <UART_SetConfig>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e01b      	b.n	8004ae4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f001 fb5b 	bl	8006198 <UART_CheckIdleState>
 8004ae2:	4603      	mov	r3, r0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	@ 0x28
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d17b      	bne.n	8004bfe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_UART_Transmit+0x26>
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e074      	b.n	8004c00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2221      	movs	r2, #33	@ 0x21
 8004b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b26:	f7fc f8e1 	bl	8000cec <HAL_GetTick>
 8004b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b44:	d108      	bne.n	8004b58 <HAL_UART_Transmit+0x6c>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e003      	b.n	8004b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b60:	e030      	b.n	8004bc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2180      	movs	r1, #128	@ 0x80
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f001 fbbd 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e03d      	b.n	8004c00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10b      	bne.n	8004ba2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	e007      	b.n	8004bb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1c8      	bne.n	8004b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2140      	movs	r1, #64	@ 0x40
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f001 fb86 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e006      	b.n	8004c00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e000      	b.n	8004c00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004bfe:	2302      	movs	r3, #2
  }
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	@ 0x28
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	f040 80b5 	bne.w	8004d8e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_UART_Receive+0x28>
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0ad      	b.n	8004d90 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2222      	movs	r2, #34	@ 0x22
 8004c40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c4a:	f7fc f84f 	bl	8000cec <HAL_GetTick>
 8004c4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	88fa      	ldrh	r2, [r7, #6]
 8004c5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c68:	d10e      	bne.n	8004c88 <HAL_UART_Receive+0x80>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d105      	bne.n	8004c7e <HAL_UART_Receive+0x76>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c7c:	e02d      	b.n	8004cda <HAL_UART_Receive+0xd2>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	22ff      	movs	r2, #255	@ 0xff
 8004c82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c86:	e028      	b.n	8004cda <HAL_UART_Receive+0xd2>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10d      	bne.n	8004cac <HAL_UART_Receive+0xa4>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <HAL_UART_Receive+0x9a>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	22ff      	movs	r2, #255	@ 0xff
 8004c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ca0:	e01b      	b.n	8004cda <HAL_UART_Receive+0xd2>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	227f      	movs	r2, #127	@ 0x7f
 8004ca6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004caa:	e016      	b.n	8004cda <HAL_UART_Receive+0xd2>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_UART_Receive+0xca>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <HAL_UART_Receive+0xc0>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	227f      	movs	r2, #127	@ 0x7f
 8004cc2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cc6:	e008      	b.n	8004cda <HAL_UART_Receive+0xd2>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	223f      	movs	r2, #63	@ 0x3f
 8004ccc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cd0:	e003      	b.n	8004cda <HAL_UART_Receive+0xd2>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004ce0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	d108      	bne.n	8004cfe <HAL_UART_Receive+0xf6>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	e003      	b.n	8004d06 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d06:	e036      	b.n	8004d76 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2120      	movs	r1, #32
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f001 faea 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d005      	beq.n	8004d2a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e032      	b.n	8004d90 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10c      	bne.n	8004d4a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	8a7b      	ldrh	r3, [r7, #18]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	3302      	adds	r3, #2
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	e00c      	b.n	8004d64 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	8a7b      	ldrh	r3, [r7, #18]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	4013      	ands	r3, r2
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	3301      	adds	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1c2      	bne.n	8004d08 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
  }
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004dc2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11b      	bne.n	8004e0c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d015      	beq.n	8004e0c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d105      	bne.n	8004df8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d009      	beq.n	8004e0c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8393 	beq.w	8005528 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
      }
      return;
 8004e0a:	e38d      	b.n	8005528 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8123 	beq.w	800505c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005050 <HAL_UART_IRQHandler+0x2b8>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e26:	4b8b      	ldr	r3, [pc, #556]	@ (8005054 <HAL_UART_IRQHandler+0x2bc>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8116 	beq.w	800505c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d011      	beq.n	8004e60 <HAL_UART_IRQHandler+0xc8>
 8004e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00b      	beq.n	8004e60 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e56:	f043 0201 	orr.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d011      	beq.n	8004e90 <HAL_UART_IRQHandler+0xf8>
 8004e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	f043 0204 	orr.w	r2, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d011      	beq.n	8004ec0 <HAL_UART_IRQHandler+0x128>
 8004e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2204      	movs	r2, #4
 8004eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f043 0202 	orr.w	r2, r3, #2
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d017      	beq.n	8004efc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d105      	bne.n	8004ee4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ed8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004edc:	4b5c      	ldr	r3, [pc, #368]	@ (8005050 <HAL_UART_IRQHandler+0x2b8>)
 8004ede:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00b      	beq.n	8004efc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2208      	movs	r2, #8
 8004eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef2:	f043 0208 	orr.w	r2, r3, #8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d012      	beq.n	8004f2e <HAL_UART_IRQHandler+0x196>
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00c      	beq.n	8004f2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f24:	f043 0220 	orr.w	r2, r3, #32
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 82f9 	beq.w	800552c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d013      	beq.n	8004f6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f82:	2b40      	cmp	r3, #64	@ 0x40
 8004f84:	d005      	beq.n	8004f92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f8a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d054      	beq.n	800503c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 fa18 	bl	80063c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa2:	2b40      	cmp	r3, #64	@ 0x40
 8004fa4:	d146      	bne.n	8005034 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1d9      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d017      	beq.n	800502c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005002:	4a15      	ldr	r2, [pc, #84]	@ (8005058 <HAL_UART_IRQHandler+0x2c0>)
 8005004:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800500c:	4618      	mov	r0, r3
 800500e:	f7fc fa87 	bl	8001520 <HAL_DMA_Abort_IT>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d019      	beq.n	800504c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800501e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005026:	4610      	mov	r0, r2
 8005028:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502a:	e00f      	b.n	800504c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fa93 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005032:	e00b      	b.n	800504c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fa8f 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503a:	e007      	b.n	800504c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fa8b 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800504a:	e26f      	b.n	800552c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	bf00      	nop
    return;
 800504e:	e26d      	b.n	800552c <HAL_UART_IRQHandler+0x794>
 8005050:	10000001 	.word	0x10000001
 8005054:	04000120 	.word	0x04000120
 8005058:	08006495 	.word	0x08006495

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005060:	2b01      	cmp	r3, #1
 8005062:	f040 8203 	bne.w	800546c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 81fc 	beq.w	800546c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 81f5 	beq.w	800546c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2210      	movs	r2, #16
 8005088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	f040 816d 	bne.w	8005374 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4aa4      	ldr	r2, [pc, #656]	@ (8005334 <HAL_UART_IRQHandler+0x59c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d068      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4aa1      	ldr	r2, [pc, #644]	@ (8005338 <HAL_UART_IRQHandler+0x5a0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d061      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a9f      	ldr	r2, [pc, #636]	@ (800533c <HAL_UART_IRQHandler+0x5a4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d05a      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a9c      	ldr	r2, [pc, #624]	@ (8005340 <HAL_UART_IRQHandler+0x5a8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d053      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a9a      	ldr	r2, [pc, #616]	@ (8005344 <HAL_UART_IRQHandler+0x5ac>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d04c      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a97      	ldr	r2, [pc, #604]	@ (8005348 <HAL_UART_IRQHandler+0x5b0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d045      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a95      	ldr	r2, [pc, #596]	@ (800534c <HAL_UART_IRQHandler+0x5b4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d03e      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a92      	ldr	r2, [pc, #584]	@ (8005350 <HAL_UART_IRQHandler+0x5b8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d037      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a90      	ldr	r2, [pc, #576]	@ (8005354 <HAL_UART_IRQHandler+0x5bc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d030      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a8d      	ldr	r2, [pc, #564]	@ (8005358 <HAL_UART_IRQHandler+0x5c0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d029      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a8b      	ldr	r2, [pc, #556]	@ (800535c <HAL_UART_IRQHandler+0x5c4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d022      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a88      	ldr	r2, [pc, #544]	@ (8005360 <HAL_UART_IRQHandler+0x5c8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d01b      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a86      	ldr	r2, [pc, #536]	@ (8005364 <HAL_UART_IRQHandler+0x5cc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d014      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a83      	ldr	r2, [pc, #524]	@ (8005368 <HAL_UART_IRQHandler+0x5d0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00d      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a81      	ldr	r2, [pc, #516]	@ (800536c <HAL_UART_IRQHandler+0x5d4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d006      	beq.n	800517a <HAL_UART_IRQHandler+0x3e2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a7e      	ldr	r2, [pc, #504]	@ (8005370 <HAL_UART_IRQHandler+0x5d8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d106      	bne.n	8005188 <HAL_UART_IRQHandler+0x3f0>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	b29b      	uxth	r3, r3
 8005186:	e005      	b.n	8005194 <HAL_UART_IRQHandler+0x3fc>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	b29b      	uxth	r3, r3
 8005194:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80ad 	beq.w	80052fc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051ac:	429a      	cmp	r2, r3
 80051ae:	f080 80a5 	bcs.w	80052fc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051c8:	f000 8087 	beq.w	80052da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005202:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800520e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1da      	bne.n	80051cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005226:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005228:	f023 0301 	bic.w	r3, r3, #1
 800522c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800523a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800523e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005242:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800524c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e1      	bne.n	8005216 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3308      	adds	r3, #8
 8005258:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005276:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005278:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800527c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e3      	bne.n	8005252 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052a8:	f023 0310 	bic.w	r3, r3, #16
 80052ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e4      	bne.n	8005298 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fb fe05 	bl	8000ee4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f939 	bl	800556c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80052fa:	e119      	b.n	8005530 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005306:	429a      	cmp	r2, r3
 8005308:	f040 8112 	bne.w	8005530 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005318:	f040 810a 	bne.w	8005530 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f91e 	bl	800556c <HAL_UARTEx_RxEventCallback>
      return;
 8005330:	e0fe      	b.n	8005530 <HAL_UART_IRQHandler+0x798>
 8005332:	bf00      	nop
 8005334:	40020010 	.word	0x40020010
 8005338:	40020028 	.word	0x40020028
 800533c:	40020040 	.word	0x40020040
 8005340:	40020058 	.word	0x40020058
 8005344:	40020070 	.word	0x40020070
 8005348:	40020088 	.word	0x40020088
 800534c:	400200a0 	.word	0x400200a0
 8005350:	400200b8 	.word	0x400200b8
 8005354:	40020410 	.word	0x40020410
 8005358:	40020428 	.word	0x40020428
 800535c:	40020440 	.word	0x40020440
 8005360:	40020458 	.word	0x40020458
 8005364:	40020470 	.word	0x40020470
 8005368:	40020488 	.word	0x40020488
 800536c:	400204a0 	.word	0x400204a0
 8005370:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005380:	b29b      	uxth	r3, r3
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80cf 	beq.w	8005534 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80ca 	beq.w	8005534 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e4      	bne.n	80053a0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	623b      	str	r3, [r7, #32]
   return(result);
 80053e6:	6a3a      	ldr	r2, [r7, #32]
 80053e8:	4b55      	ldr	r3, [pc, #340]	@ (8005540 <HAL_UART_IRQHandler+0x7a8>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80053fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e3      	bne.n	80053d6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0310 	bic.w	r3, r3, #16
 8005436:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	69b9      	ldr	r1, [r7, #24]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	617b      	str	r3, [r7, #20]
   return(result);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e4      	bne.n	8005422 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800545e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f881 	bl	800556c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800546a:	e063      	b.n	8005534 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005470:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <HAL_UART_IRQHandler+0x6fe>
 8005478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800547c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800548c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 f83d 	bl	800650e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005494:	e051      	b.n	800553a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d014      	beq.n	80054cc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80054a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d03a      	beq.n	8005538 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
    }
    return;
 80054ca:	e035      	b.n	8005538 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <HAL_UART_IRQHandler+0x754>
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 ffe7 	bl	80064b8 <UART_EndTransmit_IT>
    return;
 80054ea:	e026      	b.n	800553a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80054ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <HAL_UART_IRQHandler+0x774>
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 f816 	bl	8006536 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800550a:	e016      	b.n	800553a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <HAL_UART_IRQHandler+0x7a2>
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551c:	2b00      	cmp	r3, #0
 800551e:	da0c      	bge.n	800553a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fffe 	bl	8006522 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005526:	e008      	b.n	800553a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005528:	bf00      	nop
 800552a:	e006      	b.n	800553a <HAL_UART_IRQHandler+0x7a2>
    return;
 800552c:	bf00      	nop
 800552e:	e004      	b.n	800553a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005530:	bf00      	nop
 8005532:	e002      	b.n	800553a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_UART_IRQHandler+0x7a2>
    return;
 8005538:	bf00      	nop
  }
}
 800553a:	37e8      	adds	r7, #232	@ 0xe8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	effffffe 	.word	0xeffffffe

08005544 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005588:	b092      	sub	sp, #72	@ 0x48
 800558a:	af00      	add	r7, sp, #0
 800558c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	431a      	orrs	r2, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4bbe      	ldr	r3, [pc, #760]	@ (80058ac <UART_SetConfig+0x328>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055bc:	430b      	orrs	r3, r1
 80055be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4ab3      	ldr	r2, [pc, #716]	@ (80058b0 <UART_SetConfig+0x32c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ec:	4313      	orrs	r3, r2
 80055ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	4baf      	ldr	r3, [pc, #700]	@ (80058b4 <UART_SetConfig+0x330>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005600:	430b      	orrs	r3, r1
 8005602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	f023 010f 	bic.w	r1, r3, #15
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4aa6      	ldr	r2, [pc, #664]	@ (80058b8 <UART_SetConfig+0x334>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d177      	bne.n	8005714 <UART_SetConfig+0x190>
 8005624:	4ba5      	ldr	r3, [pc, #660]	@ (80058bc <UART_SetConfig+0x338>)
 8005626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005628:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800562c:	2b28      	cmp	r3, #40	@ 0x28
 800562e:	d86d      	bhi.n	800570c <UART_SetConfig+0x188>
 8005630:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <UART_SetConfig+0xb4>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	080056dd 	.word	0x080056dd
 800563c:	0800570d 	.word	0x0800570d
 8005640:	0800570d 	.word	0x0800570d
 8005644:	0800570d 	.word	0x0800570d
 8005648:	0800570d 	.word	0x0800570d
 800564c:	0800570d 	.word	0x0800570d
 8005650:	0800570d 	.word	0x0800570d
 8005654:	0800570d 	.word	0x0800570d
 8005658:	080056e5 	.word	0x080056e5
 800565c:	0800570d 	.word	0x0800570d
 8005660:	0800570d 	.word	0x0800570d
 8005664:	0800570d 	.word	0x0800570d
 8005668:	0800570d 	.word	0x0800570d
 800566c:	0800570d 	.word	0x0800570d
 8005670:	0800570d 	.word	0x0800570d
 8005674:	0800570d 	.word	0x0800570d
 8005678:	080056ed 	.word	0x080056ed
 800567c:	0800570d 	.word	0x0800570d
 8005680:	0800570d 	.word	0x0800570d
 8005684:	0800570d 	.word	0x0800570d
 8005688:	0800570d 	.word	0x0800570d
 800568c:	0800570d 	.word	0x0800570d
 8005690:	0800570d 	.word	0x0800570d
 8005694:	0800570d 	.word	0x0800570d
 8005698:	080056f5 	.word	0x080056f5
 800569c:	0800570d 	.word	0x0800570d
 80056a0:	0800570d 	.word	0x0800570d
 80056a4:	0800570d 	.word	0x0800570d
 80056a8:	0800570d 	.word	0x0800570d
 80056ac:	0800570d 	.word	0x0800570d
 80056b0:	0800570d 	.word	0x0800570d
 80056b4:	0800570d 	.word	0x0800570d
 80056b8:	080056fd 	.word	0x080056fd
 80056bc:	0800570d 	.word	0x0800570d
 80056c0:	0800570d 	.word	0x0800570d
 80056c4:	0800570d 	.word	0x0800570d
 80056c8:	0800570d 	.word	0x0800570d
 80056cc:	0800570d 	.word	0x0800570d
 80056d0:	0800570d 	.word	0x0800570d
 80056d4:	0800570d 	.word	0x0800570d
 80056d8:	08005705 	.word	0x08005705
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e2:	e222      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80056e4:	2304      	movs	r3, #4
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ea:	e21e      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80056ec:	2308      	movs	r3, #8
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f2:	e21a      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80056f4:	2310      	movs	r3, #16
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fa:	e216      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80056fc:	2320      	movs	r3, #32
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005702:	e212      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005704:	2340      	movs	r3, #64	@ 0x40
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570a:	e20e      	b.n	8005b2a <UART_SetConfig+0x5a6>
 800570c:	2380      	movs	r3, #128	@ 0x80
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005712:	e20a      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a69      	ldr	r2, [pc, #420]	@ (80058c0 <UART_SetConfig+0x33c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d130      	bne.n	8005780 <UART_SetConfig+0x1fc>
 800571e:	4b67      	ldr	r3, [pc, #412]	@ (80058bc <UART_SetConfig+0x338>)
 8005720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	2b05      	cmp	r3, #5
 8005728:	d826      	bhi.n	8005778 <UART_SetConfig+0x1f4>
 800572a:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <UART_SetConfig+0x1ac>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005749 	.word	0x08005749
 8005734:	08005751 	.word	0x08005751
 8005738:	08005759 	.word	0x08005759
 800573c:	08005761 	.word	0x08005761
 8005740:	08005769 	.word	0x08005769
 8005744:	08005771 	.word	0x08005771
 8005748:	2300      	movs	r3, #0
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574e:	e1ec      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005750:	2304      	movs	r3, #4
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005756:	e1e8      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005758:	2308      	movs	r3, #8
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575e:	e1e4      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005760:	2310      	movs	r3, #16
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005766:	e1e0      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005768:	2320      	movs	r3, #32
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576e:	e1dc      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005770:	2340      	movs	r3, #64	@ 0x40
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005776:	e1d8      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005778:	2380      	movs	r3, #128	@ 0x80
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577e:	e1d4      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a4f      	ldr	r2, [pc, #316]	@ (80058c4 <UART_SetConfig+0x340>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d130      	bne.n	80057ec <UART_SetConfig+0x268>
 800578a:	4b4c      	ldr	r3, [pc, #304]	@ (80058bc <UART_SetConfig+0x338>)
 800578c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	2b05      	cmp	r3, #5
 8005794:	d826      	bhi.n	80057e4 <UART_SetConfig+0x260>
 8005796:	a201      	add	r2, pc, #4	@ (adr r2, 800579c <UART_SetConfig+0x218>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057b5 	.word	0x080057b5
 80057a0:	080057bd 	.word	0x080057bd
 80057a4:	080057c5 	.word	0x080057c5
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057d5 	.word	0x080057d5
 80057b0:	080057dd 	.word	0x080057dd
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ba:	e1b6      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80057bc:	2304      	movs	r3, #4
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c2:	e1b2      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80057c4:	2308      	movs	r3, #8
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ca:	e1ae      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80057cc:	2310      	movs	r3, #16
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d2:	e1aa      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80057d4:	2320      	movs	r3, #32
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057da:	e1a6      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80057dc:	2340      	movs	r3, #64	@ 0x40
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e2:	e1a2      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80057e4:	2380      	movs	r3, #128	@ 0x80
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ea:	e19e      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a35      	ldr	r2, [pc, #212]	@ (80058c8 <UART_SetConfig+0x344>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d130      	bne.n	8005858 <UART_SetConfig+0x2d4>
 80057f6:	4b31      	ldr	r3, [pc, #196]	@ (80058bc <UART_SetConfig+0x338>)
 80057f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d826      	bhi.n	8005850 <UART_SetConfig+0x2cc>
 8005802:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <UART_SetConfig+0x284>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	08005821 	.word	0x08005821
 800580c:	08005829 	.word	0x08005829
 8005810:	08005831 	.word	0x08005831
 8005814:	08005839 	.word	0x08005839
 8005818:	08005841 	.word	0x08005841
 800581c:	08005849 	.word	0x08005849
 8005820:	2300      	movs	r3, #0
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005826:	e180      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005828:	2304      	movs	r3, #4
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582e:	e17c      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005830:	2308      	movs	r3, #8
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005836:	e178      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005838:	2310      	movs	r3, #16
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583e:	e174      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005840:	2320      	movs	r3, #32
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005846:	e170      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005848:	2340      	movs	r3, #64	@ 0x40
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800584e:	e16c      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005850:	2380      	movs	r3, #128	@ 0x80
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005856:	e168      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1b      	ldr	r2, [pc, #108]	@ (80058cc <UART_SetConfig+0x348>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d142      	bne.n	80058e8 <UART_SetConfig+0x364>
 8005862:	4b16      	ldr	r3, [pc, #88]	@ (80058bc <UART_SetConfig+0x338>)
 8005864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	2b05      	cmp	r3, #5
 800586c:	d838      	bhi.n	80058e0 <UART_SetConfig+0x35c>
 800586e:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <UART_SetConfig+0x2f0>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	0800588d 	.word	0x0800588d
 8005878:	08005895 	.word	0x08005895
 800587c:	0800589d 	.word	0x0800589d
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058d1 	.word	0x080058d1
 8005888:	080058d9 	.word	0x080058d9
 800588c:	2300      	movs	r3, #0
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005892:	e14a      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005894:	2304      	movs	r3, #4
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589a:	e146      	b.n	8005b2a <UART_SetConfig+0x5a6>
 800589c:	2308      	movs	r3, #8
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a2:	e142      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058aa:	e13e      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80058ac:	cfff69f3 	.word	0xcfff69f3
 80058b0:	58000c00 	.word	0x58000c00
 80058b4:	11fff4ff 	.word	0x11fff4ff
 80058b8:	40011000 	.word	0x40011000
 80058bc:	58024400 	.word	0x58024400
 80058c0:	40004400 	.word	0x40004400
 80058c4:	40004800 	.word	0x40004800
 80058c8:	40004c00 	.word	0x40004c00
 80058cc:	40005000 	.word	0x40005000
 80058d0:	2320      	movs	r3, #32
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e128      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80058d8:	2340      	movs	r3, #64	@ 0x40
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e124      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80058e0:	2380      	movs	r3, #128	@ 0x80
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e120      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4acb      	ldr	r2, [pc, #812]	@ (8005c1c <UART_SetConfig+0x698>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d176      	bne.n	80059e0 <UART_SetConfig+0x45c>
 80058f2:	4bcb      	ldr	r3, [pc, #812]	@ (8005c20 <UART_SetConfig+0x69c>)
 80058f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058fa:	2b28      	cmp	r3, #40	@ 0x28
 80058fc:	d86c      	bhi.n	80059d8 <UART_SetConfig+0x454>
 80058fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005904 <UART_SetConfig+0x380>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	080059a9 	.word	0x080059a9
 8005908:	080059d9 	.word	0x080059d9
 800590c:	080059d9 	.word	0x080059d9
 8005910:	080059d9 	.word	0x080059d9
 8005914:	080059d9 	.word	0x080059d9
 8005918:	080059d9 	.word	0x080059d9
 800591c:	080059d9 	.word	0x080059d9
 8005920:	080059d9 	.word	0x080059d9
 8005924:	080059b1 	.word	0x080059b1
 8005928:	080059d9 	.word	0x080059d9
 800592c:	080059d9 	.word	0x080059d9
 8005930:	080059d9 	.word	0x080059d9
 8005934:	080059d9 	.word	0x080059d9
 8005938:	080059d9 	.word	0x080059d9
 800593c:	080059d9 	.word	0x080059d9
 8005940:	080059d9 	.word	0x080059d9
 8005944:	080059b9 	.word	0x080059b9
 8005948:	080059d9 	.word	0x080059d9
 800594c:	080059d9 	.word	0x080059d9
 8005950:	080059d9 	.word	0x080059d9
 8005954:	080059d9 	.word	0x080059d9
 8005958:	080059d9 	.word	0x080059d9
 800595c:	080059d9 	.word	0x080059d9
 8005960:	080059d9 	.word	0x080059d9
 8005964:	080059c1 	.word	0x080059c1
 8005968:	080059d9 	.word	0x080059d9
 800596c:	080059d9 	.word	0x080059d9
 8005970:	080059d9 	.word	0x080059d9
 8005974:	080059d9 	.word	0x080059d9
 8005978:	080059d9 	.word	0x080059d9
 800597c:	080059d9 	.word	0x080059d9
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059c9 	.word	0x080059c9
 8005988:	080059d9 	.word	0x080059d9
 800598c:	080059d9 	.word	0x080059d9
 8005990:	080059d9 	.word	0x080059d9
 8005994:	080059d9 	.word	0x080059d9
 8005998:	080059d9 	.word	0x080059d9
 800599c:	080059d9 	.word	0x080059d9
 80059a0:	080059d9 	.word	0x080059d9
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ae:	e0bc      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80059b0:	2304      	movs	r3, #4
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b6:	e0b8      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80059b8:	2308      	movs	r3, #8
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059be:	e0b4      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80059c0:	2310      	movs	r3, #16
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c6:	e0b0      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80059c8:	2320      	movs	r3, #32
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ce:	e0ac      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80059d0:	2340      	movs	r3, #64	@ 0x40
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d6:	e0a8      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80059d8:	2380      	movs	r3, #128	@ 0x80
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059de:	e0a4      	b.n	8005b2a <UART_SetConfig+0x5a6>
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a8f      	ldr	r2, [pc, #572]	@ (8005c24 <UART_SetConfig+0x6a0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d130      	bne.n	8005a4c <UART_SetConfig+0x4c8>
 80059ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005c20 <UART_SetConfig+0x69c>)
 80059ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	2b05      	cmp	r3, #5
 80059f4:	d826      	bhi.n	8005a44 <UART_SetConfig+0x4c0>
 80059f6:	a201      	add	r2, pc, #4	@ (adr r2, 80059fc <UART_SetConfig+0x478>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a15 	.word	0x08005a15
 8005a00:	08005a1d 	.word	0x08005a1d
 8005a04:	08005a25 	.word	0x08005a25
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a35 	.word	0x08005a35
 8005a10:	08005a3d 	.word	0x08005a3d
 8005a14:	2300      	movs	r3, #0
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1a:	e086      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a22:	e082      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a24:	2308      	movs	r3, #8
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2a:	e07e      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a32:	e07a      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a34:	2320      	movs	r3, #32
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	e076      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a3c:	2340      	movs	r3, #64	@ 0x40
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a42:	e072      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a44:	2380      	movs	r3, #128	@ 0x80
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4a:	e06e      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a75      	ldr	r2, [pc, #468]	@ (8005c28 <UART_SetConfig+0x6a4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d130      	bne.n	8005ab8 <UART_SetConfig+0x534>
 8005a56:	4b72      	ldr	r3, [pc, #456]	@ (8005c20 <UART_SetConfig+0x69c>)
 8005a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	2b05      	cmp	r3, #5
 8005a60:	d826      	bhi.n	8005ab0 <UART_SetConfig+0x52c>
 8005a62:	a201      	add	r2, pc, #4	@ (adr r2, 8005a68 <UART_SetConfig+0x4e4>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005a81 	.word	0x08005a81
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005a91 	.word	0x08005a91
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa9 	.word	0x08005aa9
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a86:	e050      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8e:	e04c      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a96:	e048      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9e:	e044      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e040      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005aa8:	2340      	movs	r3, #64	@ 0x40
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aae:	e03c      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005ab0:	2380      	movs	r3, #128	@ 0x80
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e038      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a5b      	ldr	r2, [pc, #364]	@ (8005c2c <UART_SetConfig+0x6a8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d130      	bne.n	8005b24 <UART_SetConfig+0x5a0>
 8005ac2:	4b57      	ldr	r3, [pc, #348]	@ (8005c20 <UART_SetConfig+0x69c>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	2b05      	cmp	r3, #5
 8005acc:	d826      	bhi.n	8005b1c <UART_SetConfig+0x598>
 8005ace:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <UART_SetConfig+0x550>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005aed 	.word	0x08005aed
 8005ad8:	08005af5 	.word	0x08005af5
 8005adc:	08005afd 	.word	0x08005afd
 8005ae0:	08005b05 	.word	0x08005b05
 8005ae4:	08005b0d 	.word	0x08005b0d
 8005ae8:	08005b15 	.word	0x08005b15
 8005aec:	2302      	movs	r3, #2
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e01a      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005af4:	2304      	movs	r3, #4
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afa:	e016      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005afc:	2308      	movs	r3, #8
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b02:	e012      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005b04:	2310      	movs	r3, #16
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0a:	e00e      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005b0c:	2320      	movs	r3, #32
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e00a      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005b14:	2340      	movs	r3, #64	@ 0x40
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1a:	e006      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005b1c:	2380      	movs	r3, #128	@ 0x80
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e002      	b.n	8005b2a <UART_SetConfig+0x5a6>
 8005b24:	2380      	movs	r3, #128	@ 0x80
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c2c <UART_SetConfig+0x6a8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	f040 80f8 	bne.w	8005d26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	dc46      	bgt.n	8005bcc <UART_SetConfig+0x648>
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	f2c0 8082 	blt.w	8005c48 <UART_SetConfig+0x6c4>
 8005b44:	3b02      	subs	r3, #2
 8005b46:	2b1e      	cmp	r3, #30
 8005b48:	d87e      	bhi.n	8005c48 <UART_SetConfig+0x6c4>
 8005b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b50 <UART_SetConfig+0x5cc>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005bd3 	.word	0x08005bd3
 8005b54:	08005c49 	.word	0x08005c49
 8005b58:	08005bdb 	.word	0x08005bdb
 8005b5c:	08005c49 	.word	0x08005c49
 8005b60:	08005c49 	.word	0x08005c49
 8005b64:	08005c49 	.word	0x08005c49
 8005b68:	08005beb 	.word	0x08005beb
 8005b6c:	08005c49 	.word	0x08005c49
 8005b70:	08005c49 	.word	0x08005c49
 8005b74:	08005c49 	.word	0x08005c49
 8005b78:	08005c49 	.word	0x08005c49
 8005b7c:	08005c49 	.word	0x08005c49
 8005b80:	08005c49 	.word	0x08005c49
 8005b84:	08005c49 	.word	0x08005c49
 8005b88:	08005bfb 	.word	0x08005bfb
 8005b8c:	08005c49 	.word	0x08005c49
 8005b90:	08005c49 	.word	0x08005c49
 8005b94:	08005c49 	.word	0x08005c49
 8005b98:	08005c49 	.word	0x08005c49
 8005b9c:	08005c49 	.word	0x08005c49
 8005ba0:	08005c49 	.word	0x08005c49
 8005ba4:	08005c49 	.word	0x08005c49
 8005ba8:	08005c49 	.word	0x08005c49
 8005bac:	08005c49 	.word	0x08005c49
 8005bb0:	08005c49 	.word	0x08005c49
 8005bb4:	08005c49 	.word	0x08005c49
 8005bb8:	08005c49 	.word	0x08005c49
 8005bbc:	08005c49 	.word	0x08005c49
 8005bc0:	08005c49 	.word	0x08005c49
 8005bc4:	08005c49 	.word	0x08005c49
 8005bc8:	08005c3b 	.word	0x08005c3b
 8005bcc:	2b40      	cmp	r3, #64	@ 0x40
 8005bce:	d037      	beq.n	8005c40 <UART_SetConfig+0x6bc>
 8005bd0:	e03a      	b.n	8005c48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005bd2:	f7fe fb19 	bl	8004208 <HAL_RCCEx_GetD3PCLK1Freq>
 8005bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bd8:	e03c      	b.n	8005c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fe fb28 	bl	8004234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be8:	e034      	b.n	8005c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bea:	f107 0318 	add.w	r3, r7, #24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe fc74 	bl	80044dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf8:	e02c      	b.n	8005c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bfa:	4b09      	ldr	r3, [pc, #36]	@ (8005c20 <UART_SetConfig+0x69c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d016      	beq.n	8005c34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c06:	4b06      	ldr	r3, [pc, #24]	@ (8005c20 <UART_SetConfig+0x69c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	4a07      	ldr	r2, [pc, #28]	@ (8005c30 <UART_SetConfig+0x6ac>)
 8005c12:	fa22 f303 	lsr.w	r3, r2, r3
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c18:	e01c      	b.n	8005c54 <UART_SetConfig+0x6d0>
 8005c1a:	bf00      	nop
 8005c1c:	40011400 	.word	0x40011400
 8005c20:	58024400 	.word	0x58024400
 8005c24:	40007800 	.word	0x40007800
 8005c28:	40007c00 	.word	0x40007c00
 8005c2c:	58000c00 	.word	0x58000c00
 8005c30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005c34:	4b9d      	ldr	r3, [pc, #628]	@ (8005eac <UART_SetConfig+0x928>)
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c38:	e00c      	b.n	8005c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c3a:	4b9d      	ldr	r3, [pc, #628]	@ (8005eb0 <UART_SetConfig+0x92c>)
 8005c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c3e:	e009      	b.n	8005c54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c46:	e005      	b.n	8005c54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 81de 	beq.w	8006018 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	4a94      	ldr	r2, [pc, #592]	@ (8005eb4 <UART_SetConfig+0x930>)
 8005c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c66:	461a      	mov	r2, r3
 8005c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	4613      	mov	r3, r2
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	4413      	add	r3, r2
 8005c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d305      	bcc.n	8005c8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d903      	bls.n	8005c94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c92:	e1c1      	b.n	8006018 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c96:	2200      	movs	r2, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	60fa      	str	r2, [r7, #12]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	4a84      	ldr	r2, [pc, #528]	@ (8005eb4 <UART_SetConfig+0x930>)
 8005ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2200      	movs	r2, #0
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cb6:	f7fa fb17 	bl	80002e8 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	020b      	lsls	r3, r1, #8
 8005ccc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cd0:	0202      	lsls	r2, r0, #8
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	6849      	ldr	r1, [r1, #4]
 8005cd6:	0849      	lsrs	r1, r1, #1
 8005cd8:	2000      	movs	r0, #0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	4605      	mov	r5, r0
 8005cde:	eb12 0804 	adds.w	r8, r2, r4
 8005ce2:	eb43 0905 	adc.w	r9, r3, r5
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	469a      	mov	sl, r3
 8005cee:	4693      	mov	fp, r2
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	465b      	mov	r3, fp
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	f7fa faf6 	bl	80002e8 <__aeabi_uldivmod>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4613      	mov	r3, r2
 8005d02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d0a:	d308      	bcc.n	8005d1e <UART_SetConfig+0x79a>
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d12:	d204      	bcs.n	8005d1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d1a:	60da      	str	r2, [r3, #12]
 8005d1c:	e17c      	b.n	8006018 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d24:	e178      	b.n	8006018 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d2e:	f040 80c5 	bne.w	8005ebc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005d32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	dc48      	bgt.n	8005dcc <UART_SetConfig+0x848>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	db7b      	blt.n	8005e36 <UART_SetConfig+0x8b2>
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d879      	bhi.n	8005e36 <UART_SetConfig+0x8b2>
 8005d42:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <UART_SetConfig+0x7c4>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005dd3 	.word	0x08005dd3
 8005d4c:	08005ddb 	.word	0x08005ddb
 8005d50:	08005e37 	.word	0x08005e37
 8005d54:	08005e37 	.word	0x08005e37
 8005d58:	08005de3 	.word	0x08005de3
 8005d5c:	08005e37 	.word	0x08005e37
 8005d60:	08005e37 	.word	0x08005e37
 8005d64:	08005e37 	.word	0x08005e37
 8005d68:	08005df3 	.word	0x08005df3
 8005d6c:	08005e37 	.word	0x08005e37
 8005d70:	08005e37 	.word	0x08005e37
 8005d74:	08005e37 	.word	0x08005e37
 8005d78:	08005e37 	.word	0x08005e37
 8005d7c:	08005e37 	.word	0x08005e37
 8005d80:	08005e37 	.word	0x08005e37
 8005d84:	08005e37 	.word	0x08005e37
 8005d88:	08005e03 	.word	0x08005e03
 8005d8c:	08005e37 	.word	0x08005e37
 8005d90:	08005e37 	.word	0x08005e37
 8005d94:	08005e37 	.word	0x08005e37
 8005d98:	08005e37 	.word	0x08005e37
 8005d9c:	08005e37 	.word	0x08005e37
 8005da0:	08005e37 	.word	0x08005e37
 8005da4:	08005e37 	.word	0x08005e37
 8005da8:	08005e37 	.word	0x08005e37
 8005dac:	08005e37 	.word	0x08005e37
 8005db0:	08005e37 	.word	0x08005e37
 8005db4:	08005e37 	.word	0x08005e37
 8005db8:	08005e37 	.word	0x08005e37
 8005dbc:	08005e37 	.word	0x08005e37
 8005dc0:	08005e37 	.word	0x08005e37
 8005dc4:	08005e37 	.word	0x08005e37
 8005dc8:	08005e29 	.word	0x08005e29
 8005dcc:	2b40      	cmp	r3, #64	@ 0x40
 8005dce:	d02e      	beq.n	8005e2e <UART_SetConfig+0x8aa>
 8005dd0:	e031      	b.n	8005e36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd2:	f7fc ffe3 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8005dd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005dd8:	e033      	b.n	8005e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dda:	f7fc fff5 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 8005dde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005de0:	e02f      	b.n	8005e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fa24 	bl	8004234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df0:	e027      	b.n	8005e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005df2:	f107 0318 	add.w	r3, r7, #24
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fb70 	bl	80044dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e00:	e01f      	b.n	8005e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e02:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb8 <UART_SetConfig+0x934>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005eb8 <UART_SetConfig+0x934>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	08db      	lsrs	r3, r3, #3
 8005e14:	f003 0303 	and.w	r3, r3, #3
 8005e18:	4a24      	ldr	r2, [pc, #144]	@ (8005eac <UART_SetConfig+0x928>)
 8005e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e20:	e00f      	b.n	8005e42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005e22:	4b22      	ldr	r3, [pc, #136]	@ (8005eac <UART_SetConfig+0x928>)
 8005e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e26:	e00c      	b.n	8005e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e28:	4b21      	ldr	r3, [pc, #132]	@ (8005eb0 <UART_SetConfig+0x92c>)
 8005e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e2c:	e009      	b.n	8005e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e34:	e005      	b.n	8005e42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80e7 	beq.w	8006018 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	4a19      	ldr	r2, [pc, #100]	@ (8005eb4 <UART_SetConfig+0x930>)
 8005e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e54:	461a      	mov	r2, r3
 8005e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e5c:	005a      	lsls	r2, r3, #1
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	441a      	add	r2, r3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	2b0f      	cmp	r3, #15
 8005e74:	d916      	bls.n	8005ea4 <UART_SetConfig+0x920>
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e7c:	d212      	bcs.n	8005ea4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f023 030f 	bic.w	r3, r3, #15
 8005e86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8a:	085b      	lsrs	r3, r3, #1
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e96:	4313      	orrs	r3, r2
 8005e98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005ea0:	60da      	str	r2, [r3, #12]
 8005ea2:	e0b9      	b.n	8006018 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005eaa:	e0b5      	b.n	8006018 <UART_SetConfig+0xa94>
 8005eac:	03d09000 	.word	0x03d09000
 8005eb0:	003d0900 	.word	0x003d0900
 8005eb4:	080065ec 	.word	0x080065ec
 8005eb8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ebc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	dc49      	bgt.n	8005f58 <UART_SetConfig+0x9d4>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	db7c      	blt.n	8005fc2 <UART_SetConfig+0xa3e>
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d87a      	bhi.n	8005fc2 <UART_SetConfig+0xa3e>
 8005ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed4 <UART_SetConfig+0x950>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005f5f 	.word	0x08005f5f
 8005ed8:	08005f67 	.word	0x08005f67
 8005edc:	08005fc3 	.word	0x08005fc3
 8005ee0:	08005fc3 	.word	0x08005fc3
 8005ee4:	08005f6f 	.word	0x08005f6f
 8005ee8:	08005fc3 	.word	0x08005fc3
 8005eec:	08005fc3 	.word	0x08005fc3
 8005ef0:	08005fc3 	.word	0x08005fc3
 8005ef4:	08005f7f 	.word	0x08005f7f
 8005ef8:	08005fc3 	.word	0x08005fc3
 8005efc:	08005fc3 	.word	0x08005fc3
 8005f00:	08005fc3 	.word	0x08005fc3
 8005f04:	08005fc3 	.word	0x08005fc3
 8005f08:	08005fc3 	.word	0x08005fc3
 8005f0c:	08005fc3 	.word	0x08005fc3
 8005f10:	08005fc3 	.word	0x08005fc3
 8005f14:	08005f8f 	.word	0x08005f8f
 8005f18:	08005fc3 	.word	0x08005fc3
 8005f1c:	08005fc3 	.word	0x08005fc3
 8005f20:	08005fc3 	.word	0x08005fc3
 8005f24:	08005fc3 	.word	0x08005fc3
 8005f28:	08005fc3 	.word	0x08005fc3
 8005f2c:	08005fc3 	.word	0x08005fc3
 8005f30:	08005fc3 	.word	0x08005fc3
 8005f34:	08005fc3 	.word	0x08005fc3
 8005f38:	08005fc3 	.word	0x08005fc3
 8005f3c:	08005fc3 	.word	0x08005fc3
 8005f40:	08005fc3 	.word	0x08005fc3
 8005f44:	08005fc3 	.word	0x08005fc3
 8005f48:	08005fc3 	.word	0x08005fc3
 8005f4c:	08005fc3 	.word	0x08005fc3
 8005f50:	08005fc3 	.word	0x08005fc3
 8005f54:	08005fb5 	.word	0x08005fb5
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	d02e      	beq.n	8005fba <UART_SetConfig+0xa36>
 8005f5c:	e031      	b.n	8005fc2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f5e:	f7fc ff1d 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8005f62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f64:	e033      	b.n	8005fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f66:	f7fc ff2f 	bl	8002dc8 <HAL_RCC_GetPCLK2Freq>
 8005f6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f6c:	e02f      	b.n	8005fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe f95e 	bl	8004234 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f7c:	e027      	b.n	8005fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f7e:	f107 0318 	add.w	r3, r7, #24
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe faaa 	bl	80044dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f8c:	e01f      	b.n	8005fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8006044 <UART_SetConfig+0xac0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006044 <UART_SetConfig+0xac0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	08db      	lsrs	r3, r3, #3
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	4a28      	ldr	r2, [pc, #160]	@ (8006048 <UART_SetConfig+0xac4>)
 8005fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fac:	e00f      	b.n	8005fce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005fae:	4b26      	ldr	r3, [pc, #152]	@ (8006048 <UART_SetConfig+0xac4>)
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fb2:	e00c      	b.n	8005fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fb4:	4b25      	ldr	r3, [pc, #148]	@ (800604c <UART_SetConfig+0xac8>)
 8005fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fb8:	e009      	b.n	8005fce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fc0:	e005      	b.n	8005fce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005fcc:	bf00      	nop
    }

    if (pclk != 0U)
 8005fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d021      	beq.n	8006018 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006050 <UART_SetConfig+0xacc>)
 8005fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fe2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	441a      	add	r2, r3
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	2b0f      	cmp	r3, #15
 8005ffc:	d909      	bls.n	8006012 <UART_SetConfig+0xa8e>
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006004:	d205      	bcs.n	8006012 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	b29a      	uxth	r2, r3
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60da      	str	r2, [r3, #12]
 8006010:	e002      	b.n	8006018 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2201      	movs	r2, #1
 800601c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2201      	movs	r2, #1
 8006024:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2200      	movs	r2, #0
 800602c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2200      	movs	r2, #0
 8006032:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006034:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006038:	4618      	mov	r0, r3
 800603a:	3748      	adds	r7, #72	@ 0x48
 800603c:	46bd      	mov	sp, r7
 800603e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006042:	bf00      	nop
 8006044:	58024400 	.word	0x58024400
 8006048:	03d09000 	.word	0x03d09000
 800604c:	003d0900 	.word	0x003d0900
 8006050:	080065ec 	.word	0x080065ec

08006054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	430a      	orrs	r2, r1
 800609e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01a      	beq.n	800616a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006152:	d10a      	bne.n	800616a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b098      	sub	sp, #96	@ 0x60
 800619c:	af02      	add	r7, sp, #8
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061a8:	f7fa fda0 	bl	8000cec <HAL_GetTick>
 80061ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d12f      	bne.n	800621c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c4:	2200      	movs	r2, #0
 80061c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f88e 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d022      	beq.n	800621c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e6      	bne.n	80061d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e063      	b.n	80062e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d149      	bne.n	80062be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800622a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006232:	2200      	movs	r2, #0
 8006234:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f857 	bl	80062ec <UART_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d03c      	beq.n	80062be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	623b      	str	r3, [r7, #32]
   return(result);
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006262:	633b      	str	r3, [r7, #48]	@ 0x30
 8006264:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e6      	bne.n	8006244 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	60fb      	str	r3, [r7, #12]
   return(result);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f023 0301 	bic.w	r3, r3, #1
 800628c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3308      	adds	r3, #8
 8006294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006296:	61fa      	str	r2, [r7, #28]
 8006298:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	69b9      	ldr	r1, [r7, #24]
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	617b      	str	r3, [r7, #20]
   return(result);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1e5      	bne.n	8006276 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e012      	b.n	80062e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3758      	adds	r7, #88	@ 0x58
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062fc:	e04f      	b.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006304:	d04b      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006306:	f7fa fcf1 	bl	8000cec <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	429a      	cmp	r2, r3
 8006314:	d302      	bcc.n	800631c <UART_WaitOnFlagUntilTimeout+0x30>
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e04e      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d037      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b80      	cmp	r3, #128	@ 0x80
 8006332:	d034      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2b40      	cmp	r3, #64	@ 0x40
 8006338:	d031      	beq.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b08      	cmp	r3, #8
 8006346:	d110      	bne.n	800636a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2208      	movs	r2, #8
 800634e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f839 	bl	80063c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2208      	movs	r2, #8
 800635a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e029      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006378:	d111      	bne.n	800639e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f81f 	bl	80063c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e00f      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4013      	ands	r3, r2
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	bf0c      	ite	eq
 80063ae:	2301      	moveq	r3, #1
 80063b0:	2300      	movne	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	461a      	mov	r2, r3
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d0a0      	beq.n	80062fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b095      	sub	sp, #84	@ 0x54
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80063fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e6      	bne.n	80063d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3308      	adds	r3, #8
 8006408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	61fb      	str	r3, [r7, #28]
   return(result);
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	4b1e      	ldr	r3, [pc, #120]	@ (8006490 <UART_EndRxTransfer+0xc8>)
 8006416:	4013      	ands	r3, r2
 8006418:	64bb      	str	r3, [r7, #72]	@ 0x48
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3308      	adds	r3, #8
 8006420:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006424:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e5      	bne.n	8006402 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800643a:	2b01      	cmp	r3, #1
 800643c:	d118      	bne.n	8006470 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	60bb      	str	r3, [r7, #8]
   return(result);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f023 0310 	bic.w	r3, r3, #16
 8006452:	647b      	str	r3, [r7, #68]	@ 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6979      	ldr	r1, [r7, #20]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	613b      	str	r3, [r7, #16]
   return(result);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e6      	bne.n	800643e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006484:	bf00      	nop
 8006486:	3754      	adds	r7, #84	@ 0x54
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	effffffe 	.word	0xeffffffe

08006494 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff f854 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	61bb      	str	r3, [r7, #24]
 80064e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6979      	ldr	r1, [r7, #20]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	613b      	str	r3, [r7, #16]
   return(result);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e6      	bne.n	80064c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff f81f 	bl	8005544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006506:	bf00      	nop
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <memset>:
 800654a:	4402      	add	r2, r0
 800654c:	4603      	mov	r3, r0
 800654e:	4293      	cmp	r3, r2
 8006550:	d100      	bne.n	8006554 <memset+0xa>
 8006552:	4770      	bx	lr
 8006554:	f803 1b01 	strb.w	r1, [r3], #1
 8006558:	e7f9      	b.n	800654e <memset+0x4>
	...

0800655c <__libc_init_array>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	4d0d      	ldr	r5, [pc, #52]	@ (8006594 <__libc_init_array+0x38>)
 8006560:	4c0d      	ldr	r4, [pc, #52]	@ (8006598 <__libc_init_array+0x3c>)
 8006562:	1b64      	subs	r4, r4, r5
 8006564:	10a4      	asrs	r4, r4, #2
 8006566:	2600      	movs	r6, #0
 8006568:	42a6      	cmp	r6, r4
 800656a:	d109      	bne.n	8006580 <__libc_init_array+0x24>
 800656c:	4d0b      	ldr	r5, [pc, #44]	@ (800659c <__libc_init_array+0x40>)
 800656e:	4c0c      	ldr	r4, [pc, #48]	@ (80065a0 <__libc_init_array+0x44>)
 8006570:	f000 f818 	bl	80065a4 <_init>
 8006574:	1b64      	subs	r4, r4, r5
 8006576:	10a4      	asrs	r4, r4, #2
 8006578:	2600      	movs	r6, #0
 800657a:	42a6      	cmp	r6, r4
 800657c:	d105      	bne.n	800658a <__libc_init_array+0x2e>
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	f855 3b04 	ldr.w	r3, [r5], #4
 8006584:	4798      	blx	r3
 8006586:	3601      	adds	r6, #1
 8006588:	e7ee      	b.n	8006568 <__libc_init_array+0xc>
 800658a:	f855 3b04 	ldr.w	r3, [r5], #4
 800658e:	4798      	blx	r3
 8006590:	3601      	adds	r6, #1
 8006592:	e7f2      	b.n	800657a <__libc_init_array+0x1e>
 8006594:	0800660c 	.word	0x0800660c
 8006598:	0800660c 	.word	0x0800660c
 800659c:	0800660c 	.word	0x0800660c
 80065a0:	08006610 	.word	0x08006610

080065a4 <_init>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr

080065b0 <_fini>:
 80065b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b2:	bf00      	nop
 80065b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b6:	bc08      	pop	{r3}
 80065b8:	469e      	mov	lr, r3
 80065ba:	4770      	bx	lr
