
UART_UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008874  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008b14  08008b14  00009b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c14  08008c14  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c14  08008c14  00009c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c1c  08008c1c  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c1c  08008c1c  00009c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c20  08008c20  00009c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  08008c24  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2400006c  08008c90  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002fc  08008c90  0000a2fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011eb7  00000000  00000000  0000a09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002515  00000000  00000000  0001bf51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0001e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b6  00000000  00000000  0001f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039f44  00000000  00000000  0001face  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001175c  00000000  00000000  00059a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017b044  00000000  00000000  0006b16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e61b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d4c  00000000  00000000  001e61f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001e9f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008afc 	.word	0x08008afc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08008afc 	.word	0x08008afc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006c0:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <SystemInit+0x12c>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c6:	4a48      	ldr	r2, [pc, #288]	@ (80007e8 <SystemInit+0x12c>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006d0:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <SystemInit+0x12c>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <SystemInit+0x12c>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <SystemInit+0x130>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <SystemInit+0x130>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a3e      	ldr	r2, [pc, #248]	@ (80007ec <SystemInit+0x130>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <SystemInit+0x134>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3c      	ldr	r2, [pc, #240]	@ (80007f0 <SystemInit+0x134>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b3a      	ldr	r3, [pc, #232]	@ (80007f0 <SystemInit+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <SystemInit+0x134>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4938      	ldr	r1, [pc, #224]	@ (80007f0 <SystemInit+0x134>)
 8000710:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <SystemInit+0x138>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <SystemInit+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b32      	ldr	r3, [pc, #200]	@ (80007ec <SystemInit+0x130>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a30      	ldr	r2, [pc, #192]	@ (80007ec <SystemInit+0x130>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <SystemInit+0x134>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemInit+0x134>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <SystemInit+0x134>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemInit+0x134>)
 8000746:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <SystemInit+0x13c>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <SystemInit+0x134>)
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemInit+0x140>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <SystemInit+0x134>)
 8000752:	4a2b      	ldr	r2, [pc, #172]	@ (8000800 <SystemInit+0x144>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b26      	ldr	r3, [pc, #152]	@ (80007f0 <SystemInit+0x134>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <SystemInit+0x134>)
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <SystemInit+0x144>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemInit+0x134>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <SystemInit+0x134>)
 800076a:	4a25      	ldr	r2, [pc, #148]	@ (8000800 <SystemInit+0x144>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemInit+0x134>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <SystemInit+0x134>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <SystemInit+0x134>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <SystemInit+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemInit+0x148>)
 8000788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <SystemInit+0x148>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <SystemInit+0x14c>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <SystemInit+0x150>)
 8000798:	4013      	ands	r3, r2
 800079a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800079e:	d202      	bcs.n	80007a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x154>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <SystemInit+0x134>)
 80007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <SystemInit+0x134>)
 80007b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <SystemInit+0x134>)
 80007bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <SystemInit+0x158>)
 80007c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <SystemInit+0x134>)
 80007ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <SystemInit+0x134>)
 80007d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	52002000 	.word	0x52002000
 80007f0:	58024400 	.word	0x58024400
 80007f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007f8:	02020200 	.word	0x02020200
 80007fc:	01ff0000 	.word	0x01ff0000
 8000800:	01010280 	.word	0x01010280
 8000804:	580000c0 	.word	0x580000c0
 8000808:	5c001000 	.word	0x5c001000
 800080c:	ffff0000 	.word	0xffff0000
 8000810:	51008108 	.word	0x51008108
 8000814:	52004000 	.word	0x52004000

08000818 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <ExitRun0Mode+0x2c>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <ExitRun0Mode+0x2c>)
 8000822:	f023 0302 	bic.w	r3, r3, #2
 8000826:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000828:	bf00      	nop
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <ExitRun0Mode+0x2c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000850:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000854:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d013      	beq.n	8000888 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000860:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000864:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000868:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800086c:	2b00      	cmp	r3, #0
 800086e:	d00b      	beq.n	8000888 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000870:	e000      	b.n	8000874 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000872:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000874:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f9      	beq.n	8000872 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800087e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_write>:

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

// Redirección de printf a SWV/SWO (Debug con ST-Link)
int _write(int file, char *ptr, int len) {
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
    for(int i = 0; i < len; i++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	e009      	b.n	80008bc <_write+0x26>
        ITM_SendChar((*ptr++));
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	60ba      	str	r2, [r7, #8]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ffc9 	bl	8000848 <ITM_SendChar>
    for(int i = 0; i < len; i++) {
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	3301      	adds	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbf1      	blt.n	80008a8 <_write+0x12>
    }
    return len;
 80008c4:	687b      	ldr	r3, [r7, #4]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <UART_SendString>:
volatile uint8_t rx_index = 0;
volatile uint8_t rx_complete = 0;


// Funciones auxiliares para enviar datos
void UART_SendString(char *str) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff fd01 	bl	80002e0 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <UART_SendString+0x28>)
 80008ea:	f004 fba9 	bl	8005040 <HAL_UART_Transmit>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	24000088 	.word	0x24000088

080008fc <HAL_UART_RxCpltCallback>:
    sprintf(buffer, "%ld", num);
    UART_SendString(buffer);
}

// Callback de recepción completa
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a17      	ldr	r2, [pc, #92]	@ (8000968 <HAL_UART_RxCpltCallback+0x6c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d128      	bne.n	8000960 <HAL_UART_RxCpltCallback+0x64>
        // Guardar byte recibido
        if (rx_data == '\r' || rx_data == '\n') {
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <HAL_UART_RxCpltCallback+0x70>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b0d      	cmp	r3, #13
 8000914:	d003      	beq.n	800091e <HAL_UART_RxCpltCallback+0x22>
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_UART_RxCpltCallback+0x70>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b0a      	cmp	r3, #10
 800091c:	d10a      	bne.n	8000934 <HAL_UART_RxCpltCallback+0x38>
            // Fin de mensaje
            rx_buffer[rx_index] = '\0';
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_UART_RxCpltCallback+0x74>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <HAL_UART_RxCpltCallback+0x78>)
 8000928:	2100      	movs	r1, #0
 800092a:	5499      	strb	r1, [r3, r2]
            rx_complete = 1;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <HAL_UART_RxCpltCallback+0x7c>)
 800092e:	2201      	movs	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e010      	b.n	8000956 <HAL_UART_RxCpltCallback+0x5a>
        } else {
            // Agregar byte al buffer
            if (rx_index < RX_BUFFER_SIZE - 1) {
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <HAL_UART_RxCpltCallback+0x74>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b7e      	cmp	r3, #126	@ 0x7e
 800093c:	d80b      	bhi.n	8000956 <HAL_UART_RxCpltCallback+0x5a>
                rx_buffer[rx_index++] = rx_data;
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_UART_RxCpltCallback+0x74>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	b2d1      	uxtb	r1, r2
 8000948:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <HAL_UART_RxCpltCallback+0x74>)
 800094a:	7011      	strb	r1, [r2, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <HAL_UART_RxCpltCallback+0x70>)
 8000950:	7819      	ldrb	r1, [r3, #0]
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <HAL_UART_RxCpltCallback+0x78>)
 8000954:	5499      	strb	r1, [r3, r2]
            }
        }

        // Continuar recibiendo
        HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8000956:	2201      	movs	r2, #1
 8000958:	4904      	ldr	r1, [pc, #16]	@ (800096c <HAL_UART_RxCpltCallback+0x70>)
 800095a:	4808      	ldr	r0, [pc, #32]	@ (800097c <HAL_UART_RxCpltCallback+0x80>)
 800095c:	f004 fbfe 	bl	800515c <HAL_UART_Receive_IT>
    }
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40004800 	.word	0x40004800
 800096c:	240001a4 	.word	0x240001a4
 8000970:	240001a5 	.word	0x240001a5
 8000974:	24000124 	.word	0x24000124
 8000978:	240001a6 	.word	0x240001a6
 800097c:	24000088 	.word	0x24000088

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b092      	sub	sp, #72	@ 0x48
 8000984:	af00      	add	r7, sp, #0
  int32_t timeout;
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000986:	f000 f98b 	bl	8000ca0 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800098a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800098e:	647b      	str	r3, [r7, #68]	@ 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000990:	bf00      	nop
 8000992:	4b4c      	ldr	r3, [pc, #304]	@ (8000ac4 <main+0x144>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <main+0x28>
 800099e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dcf4      	bgt.n	8000992 <main+0x12>
  if ( timeout < 0 )
 80009a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da01      	bge.n	80009b2 <main+0x32>
  {
  Error_Handler();
 80009ae:	f000 f9a3 	bl	8000cf8 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f000 fb21 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b6:	f000 f8a3 	bl	8000b00 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009ba:	4b42      	ldr	r3, [pc, #264]	@ (8000ac4 <main+0x144>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	4a40      	ldr	r2, [pc, #256]	@ (8000ac4 <main+0x144>)
 80009c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ca:	4b3e      	ldr	r3, [pc, #248]	@ (8000ac4 <main+0x144>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80009d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fc47 	bl	800226c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009de:	2100      	movs	r1, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fc5d 	bl	80022a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ea:	647b      	str	r3, [r7, #68]	@ 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009ec:	bf00      	nop
 80009ee:	4b35      	ldr	r3, [pc, #212]	@ (8000ac4 <main+0x144>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d104      	bne.n	8000a04 <main+0x84>
 80009fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009fc:	1e5a      	subs	r2, r3, #1
 80009fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcf4      	bgt.n	80009ee <main+0x6e>
if ( timeout < 0 )
 8000a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da01      	bge.n	8000a0e <main+0x8e>
{
Error_Handler();
 8000a0a:	f000 f975 	bl	8000cf8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 f92d 	bl	8000c6c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a12:	f000 f8df 	bl	8000bd4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Mensaje de bienvenida (visible en UART o SWV)
  UART_SendString("STM32 UART Bidireccional Iniciada\r\n");
 8000a16:	482c      	ldr	r0, [pc, #176]	@ (8000ac8 <main+0x148>)
 8000a18:	f7ff ff5a 	bl	80008d0 <UART_SendString>
  printf("--- MCU Iniciada. TX cada 1.5s ---\r\n");
 8000a1c:	482b      	ldr	r0, [pc, #172]	@ (8000acc <main+0x14c>)
 8000a1e:	f007 f833 	bl	8007a88 <puts>

  // Iniciar recepción por interrupción
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	492a      	ldr	r1, [pc, #168]	@ (8000ad0 <main+0x150>)
 8000a26:	482b      	ldr	r0, [pc, #172]	@ (8000ad4 <main+0x154>)
 8000a28:	f004 fb98 	bl	800515c <HAL_UART_Receive_IT>
  last_tx_time = HAL_GetTick();
 8000a2c:	f000 fb6a 	bl	8001104 <HAL_GetTick>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a29      	ldr	r2, [pc, #164]	@ (8000ad8 <main+0x158>)
 8000a34:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // PARTE 1: LÓGICA DE TRANSMISIÓN PERIÓDICA (TX)
    if (HAL_GetTick() - last_tx_time >= 1500) // Transmite cada 1500 ms (1.5 segundos)
 8000a36:	f000 fb65 	bl	8001104 <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <main+0x158>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d917      	bls.n	8000a7a <main+0xfa>
    {
        char tx_buffer_msg[64];

        // Construye el mensaje propio (la otra MCU lo recibirá)
        sprintf(tx_buffer_msg, "MSG propio: %lu\r\n", my_tx_counter++);
 8000a4a:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <main+0x15c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	4922      	ldr	r1, [pc, #136]	@ (8000adc <main+0x15c>)
 8000a52:	600a      	str	r2, [r1, #0]
 8000a54:	4638      	mov	r0, r7
 8000a56:	461a      	mov	r2, r3
 8000a58:	4921      	ldr	r1, [pc, #132]	@ (8000ae0 <main+0x160>)
 8000a5a:	f007 f81d 	bl	8007a98 <siprintf>

        UART_SendString(tx_buffer_msg);
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff35 	bl	80008d0 <UART_SendString>

        // Debug propio
        printf("TX Propio: %s", tx_buffer_msg);
 8000a66:	463b      	mov	r3, r7
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481e      	ldr	r0, [pc, #120]	@ (8000ae4 <main+0x164>)
 8000a6c:	f006 ffa4 	bl	80079b8 <iprintf>

        last_tx_time = HAL_GetTick();
 8000a70:	f000 fb48 	bl	8001104 <HAL_GetTick>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a18      	ldr	r2, [pc, #96]	@ (8000ad8 <main+0x158>)
 8000a78:	6013      	str	r3, [r2, #0]
    }


    // PARTE 2: LÓGICA DE RECEPCIÓN Y ECO (RX)
    if (rx_complete) {
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <main+0x168>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0d8      	beq.n	8000a36 <main+0xb6>
        rx_complete = 0;
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <main+0x168>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]

        // Debug: Imprime lo que se recibió de la otra MCU
        printf("RX de la otra MCU: %s\r\n", rx_buffer);
 8000a8a:	4918      	ldr	r1, [pc, #96]	@ (8000aec <main+0x16c>)
 8000a8c:	4818      	ldr	r0, [pc, #96]	@ (8000af0 <main+0x170>)
 8000a8e:	f006 ff93 	bl	80079b8 <iprintf>

        // Hago Eco: Reenvío el mensaje recibido a la otra MCU (como confirmación o "Eco")
        UART_SendString("ECO: ");
 8000a92:	4818      	ldr	r0, [pc, #96]	@ (8000af4 <main+0x174>)
 8000a94:	f7ff ff1c 	bl	80008d0 <UART_SendString>
        HAL_UART_Transmit(&huart3, rx_buffer, rx_index, HAL_MAX_DELAY);
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <main+0x178>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aa4:	4911      	ldr	r1, [pc, #68]	@ (8000aec <main+0x16c>)
 8000aa6:	480b      	ldr	r0, [pc, #44]	@ (8000ad4 <main+0x154>)
 8000aa8:	f004 faca 	bl	8005040 <HAL_UART_Transmit>
        UART_SendString("\r\n");
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <main+0x17c>)
 8000aae:	f7ff ff0f 	bl	80008d0 <UART_SendString>

        // Resetear índice
        rx_index = 0;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <main+0x178>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
        memset(rx_buffer, 0, RX_BUFFER_SIZE);
 8000ab8:	2280      	movs	r2, #128	@ 0x80
 8000aba:	2100      	movs	r1, #0
 8000abc:	480b      	ldr	r0, [pc, #44]	@ (8000aec <main+0x16c>)
 8000abe:	f007 f8e5 	bl	8007c8c <memset>
    if (HAL_GetTick() - last_tx_time >= 1500) // Transmite cada 1500 ms (1.5 segundos)
 8000ac2:	e7b8      	b.n	8000a36 <main+0xb6>
 8000ac4:	58024400 	.word	0x58024400
 8000ac8:	08008b18 	.word	0x08008b18
 8000acc:	08008b3c 	.word	0x08008b3c
 8000ad0:	240001a4 	.word	0x240001a4
 8000ad4:	24000088 	.word	0x24000088
 8000ad8:	24000120 	.word	0x24000120
 8000adc:	2400011c 	.word	0x2400011c
 8000ae0:	08008b60 	.word	0x08008b60
 8000ae4:	08008b74 	.word	0x08008b74
 8000ae8:	240001a6 	.word	0x240001a6
 8000aec:	24000124 	.word	0x24000124
 8000af0:	08008b84 	.word	0x08008b84
 8000af4:	08008b9c 	.word	0x08008b9c
 8000af8:	240001a5 	.word	0x240001a5
 8000afc:	08008ba4 	.word	0x08008ba4

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09c      	sub	sp, #112	@ 0x70
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0a:	224c      	movs	r2, #76	@ 0x4c
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f007 f8bc 	bl	8007c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2220      	movs	r2, #32
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f007 f8b6 	bl	8007c8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b20:	2004      	movs	r0, #4
 8000b22:	f001 fbd1 	bl	80022c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <SystemClock_Config+0xcc>)
 8000b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2e:	4a27      	ldr	r2, [pc, #156]	@ (8000bcc <SystemClock_Config+0xcc>)
 8000b30:	f023 0301 	bic.w	r3, r3, #1
 8000b34:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b36:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <SystemClock_Config+0xcc>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <SystemClock_Config+0xd0>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b48:	4a21      	ldr	r2, [pc, #132]	@ (8000bd0 <SystemClock_Config+0xd0>)
 8000b4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <SystemClock_Config+0xd0>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b5c:	bf00      	nop
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <SystemClock_Config+0xd0>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b6a:	d1f8      	bne.n	8000b5e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b74:	2340      	movs	r3, #64	@ 0x40
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fbfb 	bl	800237c <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b8c:	f000 f8b4 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	233f      	movs	r3, #63	@ 0x3f
 8000b92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ba4:	2340      	movs	r3, #64	@ 0x40
 8000ba6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 f83b 	bl	8002c30 <HAL_RCC_ClockConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bc0:	f000 f89a 	bl	8000cf8 <Error_Handler>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3770      	adds	r7, #112	@ 0x70
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58000400 	.word	0x58000400
 8000bd0:	58024800 	.word	0x58024800

08000bd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000bda:	4a23      	ldr	r2, [pc, #140]	@ (8000c68 <MX_USART3_UART_Init+0x94>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bde:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c16:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c1c:	4811      	ldr	r0, [pc, #68]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c1e:	f004 f9bf 	bl	8004fa0 <HAL_UART_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c28:	f000 f866 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	480d      	ldr	r0, [pc, #52]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c30:	f006 fd35 	bl	800769e <HAL_UARTEx_SetTxFifoThreshold>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c3a:	f000 f85d 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c42:	f006 fd6a 	bl	800771a <HAL_UARTEx_SetRxFifoThreshold>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c4c:	f000 f854 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <MX_USART3_UART_Init+0x90>)
 8000c52:	f006 fceb 	bl	800762c <HAL_UARTEx_DisableFifoMode>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c5c:	f000 f84c 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	24000088 	.word	0x24000088
 8000c68:	40004800 	.word	0x40004800

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <MX_GPIO_Init+0x30>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	4a08      	ldr	r2, [pc, #32]	@ (8000c9c <MX_GPIO_Init+0x30>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_GPIO_Init+0x30>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	58024400 	.word	0x58024400

08000ca0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cb2:	f000 fb4f 	bl	8001354 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cc2:	231f      	movs	r3, #31
 8000cc4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cc6:	2387      	movs	r3, #135	@ 0x87
 8000cc8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 fb6d 	bl	80013c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cea:	2004      	movs	r0, #4
 8000cec:	f000 fb4a 	bl	8001384 <HAL_MPU_Enable>

}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_MspInit+0x30>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d10:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <HAL_MspInit+0x30>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_MspInit+0x30>)
 8000d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	58024400 	.word	0x58024400

08000d38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	22c0      	movs	r2, #192	@ 0xc0
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f006 ff97 	bl	8007c8c <memset>
  if(huart->Instance==USART3)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a2b      	ldr	r2, [pc, #172]	@ (8000e10 <HAL_UART_MspInit+0xd8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d14e      	bne.n	8000e06 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d68:	f04f 0202 	mov.w	r2, #2
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fae2 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d8a:	f7ff ffb5 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <HAL_UART_MspInit+0xdc>)
 8000d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d94:	4a1f      	ldr	r2, [pc, #124]	@ (8000e14 <HAL_UART_MspInit+0xdc>)
 8000d96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <HAL_UART_MspInit+0xdc>)
 8000da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_UART_MspInit+0xdc>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db2:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <HAL_UART_MspInit+0xdc>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_UART_MspInit+0xdc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de4:	2307      	movs	r3, #7
 8000de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4809      	ldr	r0, [pc, #36]	@ (8000e18 <HAL_UART_MspInit+0xe0>)
 8000df2:	f001 f88b 	bl	8001f0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2027      	movs	r0, #39	@ 0x27
 8000dfc:	f000 fa75 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e00:	2027      	movs	r0, #39	@ 0x27
 8000e02:	f000 fa8c 	bl	800131e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e06:	bf00      	nop
 8000e08:	37e8      	adds	r7, #232	@ 0xe8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40004800 	.word	0x40004800
 8000e14:	58024400 	.word	0x58024400
 8000e18:	58020c00 	.word	0x58020c00

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e72:	f000 f933 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <USART3_IRQHandler+0x10>)
 8000e82:	f004 f9b7 	bl	80051f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24000088 	.word	0x24000088

08000e90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
  }

  return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_close>:
  }
  return len;
}

int _close(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ef2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_isatty>:

int _isatty(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f006 fee0 	bl	8007d28 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	24080000 	.word	0x24080000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	240001a8 	.word	0x240001a8
 8000f9c:	24000300 	.word	0x24000300

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000fdc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fa4:	f7ff fc38 	bl	8000818 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa8:	f7ff fb88 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f006 feaf 	bl	8007d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fcd3 	bl	8000980 <main>
  bx  lr
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fe0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000fe8:	08008c24 	.word	0x08008c24
  ldr r2, =_sbss
 8000fec:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000ff0:	240002fc 	.word	0x240002fc

08000ff4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC3_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f968 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001004:	f001 ffca 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_Init+0x68>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	4913      	ldr	r1, [pc, #76]	@ (8001064 <HAL_Init+0x6c>)
 8001016:	5ccb      	ldrb	r3, [r1, r3]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_Init+0x6c>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <HAL_Init+0x70>)
 800103a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800103c:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <HAL_Init+0x74>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	200f      	movs	r0, #15
 8001044:	f000 f814 	bl	8001070 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e002      	b.n	8001058 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001052:	f7ff fe57 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58024400 	.word	0x58024400
 8001064:	08008ba8 	.word	0x08008ba8
 8001068:	24000004 	.word	0x24000004
 800106c:	24000000 	.word	0x24000000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_InitTick+0x60>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e021      	b.n	80010c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_InitTick+0x64>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f94d 	bl	800133a <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b8:	f000 f917 	bl	80012ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x68>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400000c 	.word	0x2400000c
 80010d4:	24000000 	.word	0x24000000
 80010d8:	24000008 	.word	0x24000008

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2400000c 	.word	0x2400000c
 8001100:	240001ac 	.word	0x240001ac

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	240001ac 	.word	0x240001ac

0800111c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetREVID+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0c1b      	lsrs	r3, r3, #16
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	5c001000 	.word	0x5c001000

08001134 <__NVIC_SetPriorityGrouping>:
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0000 	.word	0x05fa0000

0800117c <__NVIC_GetPriorityGrouping>:
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	@ (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	@ (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	@ (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	@ 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	@ 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff40 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff90 	bl	8001228 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5f 	bl	80011d4 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff33 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa4 	bl	8001290 <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001358:	f3bf 8f5f 	dmb	sy
}
 800135c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <HAL_MPU_Disable+0x28>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	4a06      	ldr	r2, [pc, #24]	@ (800137c <HAL_MPU_Disable+0x28>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001368:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800136a:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_MPU_Disable+0x2c>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00
 8001380:	e000ed90 	.word	0xe000ed90

08001384 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800138c:	4a0b      	ldr	r2, [pc, #44]	@ (80013bc <HAL_MPU_Enable+0x38>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <HAL_MPU_Enable+0x3c>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	4a09      	ldr	r2, [pc, #36]	@ (80013c0 <HAL_MPU_Enable+0x3c>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013a2:	f3bf 8f4f 	dsb	sy
}
 80013a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013a8:	f3bf 8f6f 	isb	sy
}
 80013ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed90 	.word	0xe000ed90
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	785a      	ldrb	r2, [r3, #1]
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <HAL_MPU_ConfigRegion+0x7c>)
 80013d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_MPU_ConfigRegion+0x7c>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <HAL_MPU_ConfigRegion+0x7c>)
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013e0:	4a17      	ldr	r2, [pc, #92]	@ (8001440 <HAL_MPU_ConfigRegion+0x7c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7b1b      	ldrb	r3, [r3, #12]
 80013ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7adb      	ldrb	r3, [r3, #11]
 80013f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7a9b      	ldrb	r3, [r3, #10]
 80013fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7b5b      	ldrb	r3, [r3, #13]
 8001402:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001404:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7b9b      	ldrb	r3, [r3, #14]
 800140a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800140c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7bdb      	ldrb	r3, [r3, #15]
 8001412:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001414:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a5b      	ldrb	r3, [r3, #9]
 800141a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800141c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7a1b      	ldrb	r3, [r3, #8]
 8001422:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001424:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800142c:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800142e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001430:	6113      	str	r3, [r2, #16]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed90 	.word	0xe000ed90

08001444 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff fe5a 	bl	8001104 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2dc      	b.n	8001a16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d008      	beq.n	800147a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2280      	movs	r2, #128	@ 0x80
 800146c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e2cd      	b.n	8001a16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a76      	ldr	r2, [pc, #472]	@ (8001658 <HAL_DMA_Abort+0x214>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d04a      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a74      	ldr	r2, [pc, #464]	@ (800165c <HAL_DMA_Abort+0x218>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d045      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a73      	ldr	r2, [pc, #460]	@ (8001660 <HAL_DMA_Abort+0x21c>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d040      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a71      	ldr	r2, [pc, #452]	@ (8001664 <HAL_DMA_Abort+0x220>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d03b      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a70      	ldr	r2, [pc, #448]	@ (8001668 <HAL_DMA_Abort+0x224>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d036      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6e      	ldr	r2, [pc, #440]	@ (800166c <HAL_DMA_Abort+0x228>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001670 <HAL_DMA_Abort+0x22c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d02c      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001674 <HAL_DMA_Abort+0x230>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d027      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001678 <HAL_DMA_Abort+0x234>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d022      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a68      	ldr	r2, [pc, #416]	@ (800167c <HAL_DMA_Abort+0x238>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01d      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a67      	ldr	r2, [pc, #412]	@ (8001680 <HAL_DMA_Abort+0x23c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d018      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a65      	ldr	r2, [pc, #404]	@ (8001684 <HAL_DMA_Abort+0x240>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d013      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a64      	ldr	r2, [pc, #400]	@ (8001688 <HAL_DMA_Abort+0x244>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00e      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a62      	ldr	r2, [pc, #392]	@ (800168c <HAL_DMA_Abort+0x248>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d009      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a61      	ldr	r2, [pc, #388]	@ (8001690 <HAL_DMA_Abort+0x24c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d004      	beq.n	800151a <HAL_DMA_Abort+0xd6>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5f      	ldr	r2, [pc, #380]	@ (8001694 <HAL_DMA_Abort+0x250>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_DMA_Abort+0xda>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_DMA_Abort+0xdc>
 800151e:	2300      	movs	r3, #0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 021e 	bic.w	r2, r2, #30
 8001532:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001542:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e00a      	b.n	8001562 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 020e 	bic.w	r2, r2, #14
 800155a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a3c      	ldr	r2, [pc, #240]	@ (8001658 <HAL_DMA_Abort+0x214>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d072      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a3a      	ldr	r2, [pc, #232]	@ (800165c <HAL_DMA_Abort+0x218>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d06d      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a39      	ldr	r2, [pc, #228]	@ (8001660 <HAL_DMA_Abort+0x21c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d068      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a37      	ldr	r2, [pc, #220]	@ (8001664 <HAL_DMA_Abort+0x220>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d063      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a36      	ldr	r2, [pc, #216]	@ (8001668 <HAL_DMA_Abort+0x224>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d05e      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a34      	ldr	r2, [pc, #208]	@ (800166c <HAL_DMA_Abort+0x228>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d059      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a33      	ldr	r2, [pc, #204]	@ (8001670 <HAL_DMA_Abort+0x22c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d054      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a31      	ldr	r2, [pc, #196]	@ (8001674 <HAL_DMA_Abort+0x230>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d04f      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a30      	ldr	r2, [pc, #192]	@ (8001678 <HAL_DMA_Abort+0x234>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04a      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a2e      	ldr	r2, [pc, #184]	@ (800167c <HAL_DMA_Abort+0x238>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d045      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001680 <HAL_DMA_Abort+0x23c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d040      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001684 <HAL_DMA_Abort+0x240>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d03b      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2a      	ldr	r2, [pc, #168]	@ (8001688 <HAL_DMA_Abort+0x244>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d036      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a28      	ldr	r2, [pc, #160]	@ (800168c <HAL_DMA_Abort+0x248>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d031      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a27      	ldr	r2, [pc, #156]	@ (8001690 <HAL_DMA_Abort+0x24c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d02c      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a25      	ldr	r2, [pc, #148]	@ (8001694 <HAL_DMA_Abort+0x250>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d027      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a24      	ldr	r2, [pc, #144]	@ (8001698 <HAL_DMA_Abort+0x254>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d022      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a22      	ldr	r2, [pc, #136]	@ (800169c <HAL_DMA_Abort+0x258>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01d      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <HAL_DMA_Abort+0x25c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d018      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1f      	ldr	r2, [pc, #124]	@ (80016a4 <HAL_DMA_Abort+0x260>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1e      	ldr	r2, [pc, #120]	@ (80016a8 <HAL_DMA_Abort+0x264>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d00e      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <HAL_DMA_Abort+0x268>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d009      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <HAL_DMA_Abort+0x26c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d004      	beq.n	8001652 <HAL_DMA_Abort+0x20e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a19      	ldr	r2, [pc, #100]	@ (80016b4 <HAL_DMA_Abort+0x270>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d132      	bne.n	80016b8 <HAL_DMA_Abort+0x274>
 8001652:	2301      	movs	r3, #1
 8001654:	e031      	b.n	80016ba <HAL_DMA_Abort+0x276>
 8001656:	bf00      	nop
 8001658:	40020010 	.word	0x40020010
 800165c:	40020028 	.word	0x40020028
 8001660:	40020040 	.word	0x40020040
 8001664:	40020058 	.word	0x40020058
 8001668:	40020070 	.word	0x40020070
 800166c:	40020088 	.word	0x40020088
 8001670:	400200a0 	.word	0x400200a0
 8001674:	400200b8 	.word	0x400200b8
 8001678:	40020410 	.word	0x40020410
 800167c:	40020428 	.word	0x40020428
 8001680:	40020440 	.word	0x40020440
 8001684:	40020458 	.word	0x40020458
 8001688:	40020470 	.word	0x40020470
 800168c:	40020488 	.word	0x40020488
 8001690:	400204a0 	.word	0x400204a0
 8001694:	400204b8 	.word	0x400204b8
 8001698:	58025408 	.word	0x58025408
 800169c:	5802541c 	.word	0x5802541c
 80016a0:	58025430 	.word	0x58025430
 80016a4:	58025444 	.word	0x58025444
 80016a8:	58025458 	.word	0x58025458
 80016ac:	5802546c 	.word	0x5802546c
 80016b0:	58025480 	.word	0x58025480
 80016b4:	58025494 	.word	0x58025494
 80016b8:	2300      	movs	r3, #0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6d      	ldr	r2, [pc, #436]	@ (8001888 <HAL_DMA_Abort+0x444>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d04a      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a6b      	ldr	r2, [pc, #428]	@ (800188c <HAL_DMA_Abort+0x448>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d045      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6a      	ldr	r2, [pc, #424]	@ (8001890 <HAL_DMA_Abort+0x44c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d040      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a68      	ldr	r2, [pc, #416]	@ (8001894 <HAL_DMA_Abort+0x450>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d03b      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a67      	ldr	r2, [pc, #412]	@ (8001898 <HAL_DMA_Abort+0x454>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d036      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a65      	ldr	r2, [pc, #404]	@ (800189c <HAL_DMA_Abort+0x458>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d031      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a64      	ldr	r2, [pc, #400]	@ (80018a0 <HAL_DMA_Abort+0x45c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d02c      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a62      	ldr	r2, [pc, #392]	@ (80018a4 <HAL_DMA_Abort+0x460>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d027      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a61      	ldr	r2, [pc, #388]	@ (80018a8 <HAL_DMA_Abort+0x464>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d022      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a5f      	ldr	r2, [pc, #380]	@ (80018ac <HAL_DMA_Abort+0x468>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d01d      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a5e      	ldr	r2, [pc, #376]	@ (80018b0 <HAL_DMA_Abort+0x46c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d018      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a5c      	ldr	r2, [pc, #368]	@ (80018b4 <HAL_DMA_Abort+0x470>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5b      	ldr	r2, [pc, #364]	@ (80018b8 <HAL_DMA_Abort+0x474>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00e      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a59      	ldr	r2, [pc, #356]	@ (80018bc <HAL_DMA_Abort+0x478>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d009      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a58      	ldr	r2, [pc, #352]	@ (80018c0 <HAL_DMA_Abort+0x47c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d004      	beq.n	800176e <HAL_DMA_Abort+0x32a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a56      	ldr	r2, [pc, #344]	@ (80018c4 <HAL_DMA_Abort+0x480>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d108      	bne.n	8001780 <HAL_DMA_Abort+0x33c>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e007      	b.n	8001790 <HAL_DMA_Abort+0x34c>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001790:	e013      	b.n	80017ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001792:	f7ff fcb7 	bl	8001104 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b05      	cmp	r3, #5
 800179e:	d90c      	bls.n	80017ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2220      	movs	r2, #32
 80017a4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2203      	movs	r2, #3
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e12d      	b.n	8001a16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1e5      	bne.n	8001792 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001888 <HAL_DMA_Abort+0x444>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d04a      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2d      	ldr	r2, [pc, #180]	@ (800188c <HAL_DMA_Abort+0x448>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d045      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2c      	ldr	r2, [pc, #176]	@ (8001890 <HAL_DMA_Abort+0x44c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d040      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001894 <HAL_DMA_Abort+0x450>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d03b      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a29      	ldr	r2, [pc, #164]	@ (8001898 <HAL_DMA_Abort+0x454>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d036      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a27      	ldr	r2, [pc, #156]	@ (800189c <HAL_DMA_Abort+0x458>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a26      	ldr	r2, [pc, #152]	@ (80018a0 <HAL_DMA_Abort+0x45c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d02c      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a24      	ldr	r2, [pc, #144]	@ (80018a4 <HAL_DMA_Abort+0x460>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d027      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a23      	ldr	r2, [pc, #140]	@ (80018a8 <HAL_DMA_Abort+0x464>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d022      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <HAL_DMA_Abort+0x468>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01d      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a20      	ldr	r2, [pc, #128]	@ (80018b0 <HAL_DMA_Abort+0x46c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d018      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <HAL_DMA_Abort+0x470>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <HAL_DMA_Abort+0x474>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00e      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1b      	ldr	r2, [pc, #108]	@ (80018bc <HAL_DMA_Abort+0x478>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d009      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1a      	ldr	r2, [pc, #104]	@ (80018c0 <HAL_DMA_Abort+0x47c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d004      	beq.n	8001866 <HAL_DMA_Abort+0x422>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a18      	ldr	r2, [pc, #96]	@ (80018c4 <HAL_DMA_Abort+0x480>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_DMA_Abort+0x426>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_DMA_Abort+0x428>
 800186a:	2300      	movs	r3, #0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d02b      	beq.n	80018c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001874:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	223f      	movs	r2, #63	@ 0x3f
 8001880:	409a      	lsls	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	e02a      	b.n	80018de <HAL_DMA_Abort+0x49a>
 8001888:	40020010 	.word	0x40020010
 800188c:	40020028 	.word	0x40020028
 8001890:	40020040 	.word	0x40020040
 8001894:	40020058 	.word	0x40020058
 8001898:	40020070 	.word	0x40020070
 800189c:	40020088 	.word	0x40020088
 80018a0:	400200a0 	.word	0x400200a0
 80018a4:	400200b8 	.word	0x400200b8
 80018a8:	40020410 	.word	0x40020410
 80018ac:	40020428 	.word	0x40020428
 80018b0:	40020440 	.word	0x40020440
 80018b4:	40020458 	.word	0x40020458
 80018b8:	40020470 	.word	0x40020470
 80018bc:	40020488 	.word	0x40020488
 80018c0:	400204a0 	.word	0x400204a0
 80018c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2201      	movs	r2, #1
 80018d8:	409a      	lsls	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001a20 <HAL_DMA_Abort+0x5dc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d072      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001a24 <HAL_DMA_Abort+0x5e0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d06d      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001a28 <HAL_DMA_Abort+0x5e4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d068      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a4a      	ldr	r2, [pc, #296]	@ (8001a2c <HAL_DMA_Abort+0x5e8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d063      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a49      	ldr	r2, [pc, #292]	@ (8001a30 <HAL_DMA_Abort+0x5ec>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d05e      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a47      	ldr	r2, [pc, #284]	@ (8001a34 <HAL_DMA_Abort+0x5f0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d059      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a46      	ldr	r2, [pc, #280]	@ (8001a38 <HAL_DMA_Abort+0x5f4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d054      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a44      	ldr	r2, [pc, #272]	@ (8001a3c <HAL_DMA_Abort+0x5f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d04f      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a43      	ldr	r2, [pc, #268]	@ (8001a40 <HAL_DMA_Abort+0x5fc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04a      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a41      	ldr	r2, [pc, #260]	@ (8001a44 <HAL_DMA_Abort+0x600>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d045      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a40      	ldr	r2, [pc, #256]	@ (8001a48 <HAL_DMA_Abort+0x604>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d040      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a3e      	ldr	r2, [pc, #248]	@ (8001a4c <HAL_DMA_Abort+0x608>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d03b      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a50 <HAL_DMA_Abort+0x60c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d036      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a3b      	ldr	r2, [pc, #236]	@ (8001a54 <HAL_DMA_Abort+0x610>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a58 <HAL_DMA_Abort+0x614>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d02c      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a38      	ldr	r2, [pc, #224]	@ (8001a5c <HAL_DMA_Abort+0x618>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d027      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a37      	ldr	r2, [pc, #220]	@ (8001a60 <HAL_DMA_Abort+0x61c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d022      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a35      	ldr	r2, [pc, #212]	@ (8001a64 <HAL_DMA_Abort+0x620>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01d      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a34      	ldr	r2, [pc, #208]	@ (8001a68 <HAL_DMA_Abort+0x624>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d018      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a32      	ldr	r2, [pc, #200]	@ (8001a6c <HAL_DMA_Abort+0x628>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a31      	ldr	r2, [pc, #196]	@ (8001a70 <HAL_DMA_Abort+0x62c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001a74 <HAL_DMA_Abort+0x630>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d009      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2e      	ldr	r2, [pc, #184]	@ (8001a78 <HAL_DMA_Abort+0x634>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d004      	beq.n	80019ce <HAL_DMA_Abort+0x58a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a7c <HAL_DMA_Abort+0x638>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_DMA_Abort+0x58e>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_DMA_Abort+0x590>
 80019d2:	2300      	movs	r3, #0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d015      	beq.n	8001a04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80019e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00c      	beq.n	8001a04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020010 	.word	0x40020010
 8001a24:	40020028 	.word	0x40020028
 8001a28:	40020040 	.word	0x40020040
 8001a2c:	40020058 	.word	0x40020058
 8001a30:	40020070 	.word	0x40020070
 8001a34:	40020088 	.word	0x40020088
 8001a38:	400200a0 	.word	0x400200a0
 8001a3c:	400200b8 	.word	0x400200b8
 8001a40:	40020410 	.word	0x40020410
 8001a44:	40020428 	.word	0x40020428
 8001a48:	40020440 	.word	0x40020440
 8001a4c:	40020458 	.word	0x40020458
 8001a50:	40020470 	.word	0x40020470
 8001a54:	40020488 	.word	0x40020488
 8001a58:	400204a0 	.word	0x400204a0
 8001a5c:	400204b8 	.word	0x400204b8
 8001a60:	58025408 	.word	0x58025408
 8001a64:	5802541c 	.word	0x5802541c
 8001a68:	58025430 	.word	0x58025430
 8001a6c:	58025444 	.word	0x58025444
 8001a70:	58025458 	.word	0x58025458
 8001a74:	5802546c 	.word	0x5802546c
 8001a78:	58025480 	.word	0x58025480
 8001a7c:	58025494 	.word	0x58025494

08001a80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e237      	b.n	8001f02 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2280      	movs	r2, #128	@ 0x80
 8001aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e22c      	b.n	8001f02 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a5c      	ldr	r2, [pc, #368]	@ (8001c20 <HAL_DMA_Abort_IT+0x1a0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d04a      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c24 <HAL_DMA_Abort_IT+0x1a4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d045      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a59      	ldr	r2, [pc, #356]	@ (8001c28 <HAL_DMA_Abort_IT+0x1a8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d040      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a58      	ldr	r2, [pc, #352]	@ (8001c2c <HAL_DMA_Abort_IT+0x1ac>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d03b      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a56      	ldr	r2, [pc, #344]	@ (8001c30 <HAL_DMA_Abort_IT+0x1b0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d036      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a55      	ldr	r2, [pc, #340]	@ (8001c34 <HAL_DMA_Abort_IT+0x1b4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d031      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a53      	ldr	r2, [pc, #332]	@ (8001c38 <HAL_DMA_Abort_IT+0x1b8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02c      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a52      	ldr	r2, [pc, #328]	@ (8001c3c <HAL_DMA_Abort_IT+0x1bc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d027      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a50      	ldr	r2, [pc, #320]	@ (8001c40 <HAL_DMA_Abort_IT+0x1c0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d022      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a4f      	ldr	r2, [pc, #316]	@ (8001c44 <HAL_DMA_Abort_IT+0x1c4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d01d      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a4d      	ldr	r2, [pc, #308]	@ (8001c48 <HAL_DMA_Abort_IT+0x1c8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d018      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c4c <HAL_DMA_Abort_IT+0x1cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d013      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a4a      	ldr	r2, [pc, #296]	@ (8001c50 <HAL_DMA_Abort_IT+0x1d0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00e      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a49      	ldr	r2, [pc, #292]	@ (8001c54 <HAL_DMA_Abort_IT+0x1d4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d009      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a47      	ldr	r2, [pc, #284]	@ (8001c58 <HAL_DMA_Abort_IT+0x1d8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d004      	beq.n	8001b48 <HAL_DMA_Abort_IT+0xc8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a46      	ldr	r2, [pc, #280]	@ (8001c5c <HAL_DMA_Abort_IT+0x1dc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_DMA_Abort_IT+0xcc>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_DMA_Abort_IT+0xce>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8086 	beq.w	8001c60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2204      	movs	r2, #4
 8001b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2f      	ldr	r2, [pc, #188]	@ (8001c20 <HAL_DMA_Abort_IT+0x1a0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d04a      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c24 <HAL_DMA_Abort_IT+0x1a4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d045      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a2c      	ldr	r2, [pc, #176]	@ (8001c28 <HAL_DMA_Abort_IT+0x1a8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d040      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c2c <HAL_DMA_Abort_IT+0x1ac>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d03b      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a29      	ldr	r2, [pc, #164]	@ (8001c30 <HAL_DMA_Abort_IT+0x1b0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d036      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a28      	ldr	r2, [pc, #160]	@ (8001c34 <HAL_DMA_Abort_IT+0x1b4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d031      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a26      	ldr	r2, [pc, #152]	@ (8001c38 <HAL_DMA_Abort_IT+0x1b8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d02c      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a25      	ldr	r2, [pc, #148]	@ (8001c3c <HAL_DMA_Abort_IT+0x1bc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d027      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a23      	ldr	r2, [pc, #140]	@ (8001c40 <HAL_DMA_Abort_IT+0x1c0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d022      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a22      	ldr	r2, [pc, #136]	@ (8001c44 <HAL_DMA_Abort_IT+0x1c4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d01d      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a20      	ldr	r2, [pc, #128]	@ (8001c48 <HAL_DMA_Abort_IT+0x1c8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d018      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1f      	ldr	r2, [pc, #124]	@ (8001c4c <HAL_DMA_Abort_IT+0x1cc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d013      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c50 <HAL_DMA_Abort_IT+0x1d0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00e      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c54 <HAL_DMA_Abort_IT+0x1d4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d009      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1a      	ldr	r2, [pc, #104]	@ (8001c58 <HAL_DMA_Abort_IT+0x1d8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x17c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <HAL_DMA_Abort_IT+0x1dc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d108      	bne.n	8001c0e <HAL_DMA_Abort_IT+0x18e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e178      	b.n	8001f00 <HAL_DMA_Abort_IT+0x480>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0201 	bic.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e16f      	b.n	8001f00 <HAL_DMA_Abort_IT+0x480>
 8001c20:	40020010 	.word	0x40020010
 8001c24:	40020028 	.word	0x40020028
 8001c28:	40020040 	.word	0x40020040
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	40020070 	.word	0x40020070
 8001c34:	40020088 	.word	0x40020088
 8001c38:	400200a0 	.word	0x400200a0
 8001c3c:	400200b8 	.word	0x400200b8
 8001c40:	40020410 	.word	0x40020410
 8001c44:	40020428 	.word	0x40020428
 8001c48:	40020440 	.word	0x40020440
 8001c4c:	40020458 	.word	0x40020458
 8001c50:	40020470 	.word	0x40020470
 8001c54:	40020488 	.word	0x40020488
 8001c58:	400204a0 	.word	0x400204a0
 8001c5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 020e 	bic.w	r2, r2, #14
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6c      	ldr	r2, [pc, #432]	@ (8001e28 <HAL_DMA_Abort_IT+0x3a8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d04a      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6b      	ldr	r2, [pc, #428]	@ (8001e2c <HAL_DMA_Abort_IT+0x3ac>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d045      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a69      	ldr	r2, [pc, #420]	@ (8001e30 <HAL_DMA_Abort_IT+0x3b0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d040      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a68      	ldr	r2, [pc, #416]	@ (8001e34 <HAL_DMA_Abort_IT+0x3b4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d03b      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a66      	ldr	r2, [pc, #408]	@ (8001e38 <HAL_DMA_Abort_IT+0x3b8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d036      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a65      	ldr	r2, [pc, #404]	@ (8001e3c <HAL_DMA_Abort_IT+0x3bc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d031      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a63      	ldr	r2, [pc, #396]	@ (8001e40 <HAL_DMA_Abort_IT+0x3c0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d02c      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a62      	ldr	r2, [pc, #392]	@ (8001e44 <HAL_DMA_Abort_IT+0x3c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d027      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a60      	ldr	r2, [pc, #384]	@ (8001e48 <HAL_DMA_Abort_IT+0x3c8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d022      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a5f      	ldr	r2, [pc, #380]	@ (8001e4c <HAL_DMA_Abort_IT+0x3cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d01d      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001e50 <HAL_DMA_Abort_IT+0x3d0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d018      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e54 <HAL_DMA_Abort_IT+0x3d4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a5a      	ldr	r2, [pc, #360]	@ (8001e58 <HAL_DMA_Abort_IT+0x3d8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00e      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a59      	ldr	r2, [pc, #356]	@ (8001e5c <HAL_DMA_Abort_IT+0x3dc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a57      	ldr	r2, [pc, #348]	@ (8001e60 <HAL_DMA_Abort_IT+0x3e0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x290>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a56      	ldr	r2, [pc, #344]	@ (8001e64 <HAL_DMA_Abort_IT+0x3e4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d108      	bne.n	8001d22 <HAL_DMA_Abort_IT+0x2a2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e007      	b.n	8001d32 <HAL_DMA_Abort_IT+0x2b2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a3c      	ldr	r2, [pc, #240]	@ (8001e28 <HAL_DMA_Abort_IT+0x3a8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d072      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a3a      	ldr	r2, [pc, #232]	@ (8001e2c <HAL_DMA_Abort_IT+0x3ac>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d06d      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a39      	ldr	r2, [pc, #228]	@ (8001e30 <HAL_DMA_Abort_IT+0x3b0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d068      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a37      	ldr	r2, [pc, #220]	@ (8001e34 <HAL_DMA_Abort_IT+0x3b4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d063      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a36      	ldr	r2, [pc, #216]	@ (8001e38 <HAL_DMA_Abort_IT+0x3b8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d05e      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a34      	ldr	r2, [pc, #208]	@ (8001e3c <HAL_DMA_Abort_IT+0x3bc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d059      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a33      	ldr	r2, [pc, #204]	@ (8001e40 <HAL_DMA_Abort_IT+0x3c0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d054      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a31      	ldr	r2, [pc, #196]	@ (8001e44 <HAL_DMA_Abort_IT+0x3c4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d04f      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a30      	ldr	r2, [pc, #192]	@ (8001e48 <HAL_DMA_Abort_IT+0x3c8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04a      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a2e      	ldr	r2, [pc, #184]	@ (8001e4c <HAL_DMA_Abort_IT+0x3cc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d045      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e50 <HAL_DMA_Abort_IT+0x3d0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d040      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a2b      	ldr	r2, [pc, #172]	@ (8001e54 <HAL_DMA_Abort_IT+0x3d4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d03b      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2a      	ldr	r2, [pc, #168]	@ (8001e58 <HAL_DMA_Abort_IT+0x3d8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d036      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a28      	ldr	r2, [pc, #160]	@ (8001e5c <HAL_DMA_Abort_IT+0x3dc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d031      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a27      	ldr	r2, [pc, #156]	@ (8001e60 <HAL_DMA_Abort_IT+0x3e0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d02c      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a25      	ldr	r2, [pc, #148]	@ (8001e64 <HAL_DMA_Abort_IT+0x3e4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d027      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <HAL_DMA_Abort_IT+0x3e8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d022      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a22      	ldr	r2, [pc, #136]	@ (8001e6c <HAL_DMA_Abort_IT+0x3ec>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01d      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a21      	ldr	r2, [pc, #132]	@ (8001e70 <HAL_DMA_Abort_IT+0x3f0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d018      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e74 <HAL_DMA_Abort_IT+0x3f4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <HAL_DMA_Abort_IT+0x3f8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00e      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <HAL_DMA_Abort_IT+0x3fc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d009      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1b      	ldr	r2, [pc, #108]	@ (8001e80 <HAL_DMA_Abort_IT+0x400>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_DMA_Abort_IT+0x3a2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <HAL_DMA_Abort_IT+0x404>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d132      	bne.n	8001e88 <HAL_DMA_Abort_IT+0x408>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e031      	b.n	8001e8a <HAL_DMA_Abort_IT+0x40a>
 8001e26:	bf00      	nop
 8001e28:	40020010 	.word	0x40020010
 8001e2c:	40020028 	.word	0x40020028
 8001e30:	40020040 	.word	0x40020040
 8001e34:	40020058 	.word	0x40020058
 8001e38:	40020070 	.word	0x40020070
 8001e3c:	40020088 	.word	0x40020088
 8001e40:	400200a0 	.word	0x400200a0
 8001e44:	400200b8 	.word	0x400200b8
 8001e48:	40020410 	.word	0x40020410
 8001e4c:	40020428 	.word	0x40020428
 8001e50:	40020440 	.word	0x40020440
 8001e54:	40020458 	.word	0x40020458
 8001e58:	40020470 	.word	0x40020470
 8001e5c:	40020488 	.word	0x40020488
 8001e60:	400204a0 	.word	0x400204a0
 8001e64:	400204b8 	.word	0x400204b8
 8001e68:	58025408 	.word	0x58025408
 8001e6c:	5802541c 	.word	0x5802541c
 8001e70:	58025430 	.word	0x58025430
 8001e74:	58025444 	.word	0x58025444
 8001e78:	58025458 	.word	0x58025458
 8001e7c:	5802546c 	.word	0x5802546c
 8001e80:	58025480 	.word	0x58025480
 8001e84:	58025494 	.word	0x58025494
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d028      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2201      	movs	r2, #1
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ebc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00c      	beq.n	8001ee0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ed0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ed4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ede:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f1a:	4b89      	ldr	r3, [pc, #548]	@ (8002140 <HAL_GPIO_Init+0x234>)
 8001f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f1e:	e194      	b.n	800224a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2101      	movs	r1, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8186 	beq.w	8002244 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d005      	beq.n	8001f50 <HAL_GPIO_Init+0x44>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d130      	bne.n	8001fb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f86:	2201      	movs	r2, #1
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 0201 	and.w	r2, r3, #1
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d017      	beq.n	8001fee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d123      	bne.n	8002042 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	69b9      	ldr	r1, [r7, #24]
 800203e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2203      	movs	r2, #3
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0203 	and.w	r2, r3, #3
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80e0 	beq.w	8002244 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002084:	4b2f      	ldr	r3, [pc, #188]	@ (8002144 <HAL_GPIO_Init+0x238>)
 8002086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800208a:	4a2e      	ldr	r2, [pc, #184]	@ (8002144 <HAL_GPIO_Init+0x238>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002094:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <HAL_GPIO_Init+0x238>)
 8002096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a2:	4a29      	ldr	r2, [pc, #164]	@ (8002148 <HAL_GPIO_Init+0x23c>)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	220f      	movs	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a20      	ldr	r2, [pc, #128]	@ (800214c <HAL_GPIO_Init+0x240>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d052      	beq.n	8002174 <HAL_GPIO_Init+0x268>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_GPIO_Init+0x244>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d031      	beq.n	800213a <HAL_GPIO_Init+0x22e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002154 <HAL_GPIO_Init+0x248>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02b      	beq.n	8002136 <HAL_GPIO_Init+0x22a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <HAL_GPIO_Init+0x24c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d025      	beq.n	8002132 <HAL_GPIO_Init+0x226>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	@ (800215c <HAL_GPIO_Init+0x250>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d01f      	beq.n	800212e <HAL_GPIO_Init+0x222>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002160 <HAL_GPIO_Init+0x254>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d019      	beq.n	800212a <HAL_GPIO_Init+0x21e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002164 <HAL_GPIO_Init+0x258>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0x21a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a19      	ldr	r2, [pc, #100]	@ (8002168 <HAL_GPIO_Init+0x25c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00d      	beq.n	8002122 <HAL_GPIO_Init+0x216>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a18      	ldr	r2, [pc, #96]	@ (800216c <HAL_GPIO_Init+0x260>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <HAL_GPIO_Init+0x212>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a17      	ldr	r2, [pc, #92]	@ (8002170 <HAL_GPIO_Init+0x264>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_GPIO_Init+0x20e>
 8002116:	2309      	movs	r3, #9
 8002118:	e02d      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 800211a:	230a      	movs	r3, #10
 800211c:	e02b      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 800211e:	2308      	movs	r3, #8
 8002120:	e029      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 8002122:	2307      	movs	r3, #7
 8002124:	e027      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 8002126:	2306      	movs	r3, #6
 8002128:	e025      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 800212a:	2305      	movs	r3, #5
 800212c:	e023      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 800212e:	2304      	movs	r3, #4
 8002130:	e021      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 8002132:	2303      	movs	r3, #3
 8002134:	e01f      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 8002136:	2302      	movs	r3, #2
 8002138:	e01d      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 800213a:	2301      	movs	r3, #1
 800213c:	e01b      	b.n	8002176 <HAL_GPIO_Init+0x26a>
 800213e:	bf00      	nop
 8002140:	58000080 	.word	0x58000080
 8002144:	58024400 	.word	0x58024400
 8002148:	58000400 	.word	0x58000400
 800214c:	58020000 	.word	0x58020000
 8002150:	58020400 	.word	0x58020400
 8002154:	58020800 	.word	0x58020800
 8002158:	58020c00 	.word	0x58020c00
 800215c:	58021000 	.word	0x58021000
 8002160:	58021400 	.word	0x58021400
 8002164:	58021800 	.word	0x58021800
 8002168:	58021c00 	.word	0x58021c00
 800216c:	58022000 	.word	0x58022000
 8002170:	58022400 	.word	0x58022400
 8002174:	2300      	movs	r3, #0
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	f002 0203 	and.w	r2, r2, #3
 800217c:	0092      	lsls	r2, r2, #2
 800217e:	4093      	lsls	r3, r2
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002186:	4938      	ldr	r1, [pc, #224]	@ (8002268 <HAL_GPIO_Init+0x35c>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d003      	beq.n	80021e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	f47f ae63 	bne.w	8001f20 <HAL_GPIO_Init+0x14>
  }
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	3724      	adds	r7, #36	@ 0x24
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	58000400 	.word	0x58000400

0800226c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002274:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_HSEM_FastTake+0x2c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3320      	adds	r3, #32
 800227a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227e:	4a07      	ldr	r2, [pc, #28]	@ (800229c <HAL_HSEM_FastTake+0x30>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	e000      	b.n	800228a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	58026400 	.word	0x58026400
 800229c:	80000300 	.word	0x80000300

080022a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80022aa:	4906      	ldr	r1, [pc, #24]	@ (80022c4 <HAL_HSEM_Release+0x24>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	58026400 	.word	0x58026400

080022c8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022d0:	4b29      	ldr	r3, [pc, #164]	@ (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	2b06      	cmp	r3, #6
 80022da:	d00a      	beq.n	80022f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022dc:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e040      	b.n	8002370 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e03e      	b.n	8002370 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022f2:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80022fa:	491f      	ldr	r1, [pc, #124]	@ (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002302:	f7fe feff 	bl	8001104 <HAL_GetTick>
 8002306:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002308:	e009      	b.n	800231e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800230a:	f7fe fefb 	bl	8001104 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002318:	d901      	bls.n	800231e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e028      	b.n	8002370 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800231e:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800232a:	d1ee      	bne.n	800230a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b1e      	cmp	r3, #30
 8002330:	d008      	beq.n	8002344 <HAL_PWREx_ConfigSupply+0x7c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b2e      	cmp	r3, #46	@ 0x2e
 8002336:	d005      	beq.n	8002344 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b1d      	cmp	r3, #29
 800233c:	d002      	beq.n	8002344 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b2d      	cmp	r3, #45	@ 0x2d
 8002342:	d114      	bne.n	800236e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002344:	f7fe fede 	bl	8001104 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800234a:	e009      	b.n	8002360 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800234c:	f7fe feda 	bl	8001104 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800235a:	d901      	bls.n	8002360 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_PWREx_ConfigSupply+0xb0>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236c:	d1ee      	bne.n	800234c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	58024800 	.word	0x58024800

0800237c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	@ 0x30
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f000 bc48 	b.w	8002c20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8088 	beq.w	80024ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239e:	4b99      	ldr	r3, [pc, #612]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023a8:	4b96      	ldr	r3, [pc, #600]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d007      	beq.n	80023c4 <HAL_RCC_OscConfig+0x48>
 80023b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b6:	2b18      	cmp	r3, #24
 80023b8:	d111      	bne.n	80023de <HAL_RCC_OscConfig+0x62>
 80023ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d10c      	bne.n	80023de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d06d      	beq.n	80024ac <HAL_RCC_OscConfig+0x130>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d169      	bne.n	80024ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f000 bc21 	b.w	8002c20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x7a>
 80023e8:	4b86      	ldr	r3, [pc, #536]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a85      	ldr	r2, [pc, #532]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e02e      	b.n	8002454 <HAL_RCC_OscConfig+0xd8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x9c>
 80023fe:	4b81      	ldr	r3, [pc, #516]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a80      	ldr	r2, [pc, #512]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b7e      	ldr	r3, [pc, #504]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7d      	ldr	r2, [pc, #500]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002410:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xd8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0xc0>
 8002422:	4b78      	ldr	r3, [pc, #480]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a77      	ldr	r2, [pc, #476]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b75      	ldr	r3, [pc, #468]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a74      	ldr	r2, [pc, #464]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xd8>
 800243c:	4b71      	ldr	r3, [pc, #452]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a70      	ldr	r2, [pc, #448]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b6e      	ldr	r3, [pc, #440]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6d      	ldr	r2, [pc, #436]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fe52 	bl	8001104 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe fe4e 	bl	8001104 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	@ 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e3d4      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002476:	4b63      	ldr	r3, [pc, #396]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xe8>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fe3e 	bl	8001104 <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7fe fe3a 	bl	8001104 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	@ 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e3c0      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800249e:	4b59      	ldr	r3, [pc, #356]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x110>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80ca 	beq.w	8002650 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024bc:	4b51      	ldr	r3, [pc, #324]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_RCC_OscConfig+0x166>
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	2b18      	cmp	r3, #24
 80024d6:	d156      	bne.n	8002586 <HAL_RCC_OscConfig+0x20a>
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d151      	bne.n	8002586 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e2:	4b48      	ldr	r3, [pc, #288]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x17e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e392      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024fa:	4b42      	ldr	r3, [pc, #264]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0219 	bic.w	r2, r3, #25
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	493f      	ldr	r1, [pc, #252]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe fdfa 	bl	8001104 <HAL_GetTick>
 8002510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe fdf6 	bl	8001104 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e37c      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002526:	4b37      	ldr	r3, [pc, #220]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	f7fe fdf3 	bl	800111c <HAL_GetREVID>
 8002536:	4603      	mov	r3, r0
 8002538:	f241 0203 	movw	r2, #4099	@ 0x1003
 800253c:	4293      	cmp	r3, r2
 800253e:	d817      	bhi.n	8002570 <HAL_RCC_OscConfig+0x1f4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b40      	cmp	r3, #64	@ 0x40
 8002546:	d108      	bne.n	800255a <HAL_RCC_OscConfig+0x1de>
 8002548:	4b2e      	ldr	r3, [pc, #184]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002550:	4a2c      	ldr	r2, [pc, #176]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002556:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002558:	e07a      	b.n	8002650 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b2a      	ldr	r3, [pc, #168]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	031b      	lsls	r3, r3, #12
 8002568:	4926      	ldr	r1, [pc, #152]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256e:	e06f      	b.n	8002650 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b24      	ldr	r3, [pc, #144]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	4921      	ldr	r1, [pc, #132]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	e064      	b.n	8002650 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d047      	beq.n	800261e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800258e:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0219 	bic.w	r2, r3, #25
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	491a      	ldr	r1, [pc, #104]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7fe fdb0 	bl	8001104 <HAL_GetTick>
 80025a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe fdac 	bl	8001104 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e332      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	f7fe fda9 	bl	800111c <HAL_GetREVID>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d819      	bhi.n	8002608 <HAL_RCC_OscConfig+0x28c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b40      	cmp	r3, #64	@ 0x40
 80025da:	d108      	bne.n	80025ee <HAL_RCC_OscConfig+0x272>
 80025dc:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025e4:	4a07      	ldr	r2, [pc, #28]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80025e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ea:	6053      	str	r3, [r2, #4]
 80025ec:	e030      	b.n	8002650 <HAL_RCC_OscConfig+0x2d4>
 80025ee:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	031b      	lsls	r3, r3, #12
 80025fc:	4901      	ldr	r1, [pc, #4]	@ (8002604 <HAL_RCC_OscConfig+0x288>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
 8002602:	e025      	b.n	8002650 <HAL_RCC_OscConfig+0x2d4>
 8002604:	58024400 	.word	0x58024400
 8002608:	4b9a      	ldr	r3, [pc, #616]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	4997      	ldr	r1, [pc, #604]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	e018      	b.n	8002650 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261e:	4b95      	ldr	r3, [pc, #596]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a94      	ldr	r2, [pc, #592]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fd6b 	bl	8001104 <HAL_GetTick>
 800262e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002632:	f7fe fd67 	bl	8001104 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e2ed      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002644:	4b8b      	ldr	r3, [pc, #556]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80a9 	beq.w	80027b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265e:	4b85      	ldr	r3, [pc, #532]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002666:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002668:	4b82      	ldr	r3, [pc, #520]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d007      	beq.n	8002684 <HAL_RCC_OscConfig+0x308>
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b18      	cmp	r3, #24
 8002678:	d13a      	bne.n	80026f0 <HAL_RCC_OscConfig+0x374>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d135      	bne.n	80026f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002684:	4b7b      	ldr	r3, [pc, #492]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_OscConfig+0x320>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b80      	cmp	r3, #128	@ 0x80
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e2c1      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800269c:	f7fe fd3e 	bl	800111c <HAL_GetREVID>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d817      	bhi.n	80026da <HAL_RCC_OscConfig+0x35e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_OscConfig+0x348>
 80026b2:	4b70      	ldr	r3, [pc, #448]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026c2:	e075      	b.n	80027b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	069b      	lsls	r3, r3, #26
 80026d2:	4968      	ldr	r1, [pc, #416]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026d8:	e06a      	b.n	80027b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026da:	4b66      	ldr	r3, [pc, #408]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	4962      	ldr	r1, [pc, #392]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ee:	e05f      	b.n	80027b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d042      	beq.n	800277e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80026fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fcfe 	bl	8001104 <HAL_GetTick>
 8002708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800270c:	f7fe fcfa 	bl	8001104 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e280      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800271e:	4b55      	ldr	r3, [pc, #340]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800272a:	f7fe fcf7 	bl	800111c <HAL_GetREVID>
 800272e:	4603      	mov	r3, r0
 8002730:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002734:	4293      	cmp	r3, r2
 8002736:	d817      	bhi.n	8002768 <HAL_RCC_OscConfig+0x3ec>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	2b20      	cmp	r3, #32
 800273e:	d108      	bne.n	8002752 <HAL_RCC_OscConfig+0x3d6>
 8002740:	4b4c      	ldr	r3, [pc, #304]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002748:	4a4a      	ldr	r2, [pc, #296]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800274e:	6053      	str	r3, [r2, #4]
 8002750:	e02e      	b.n	80027b0 <HAL_RCC_OscConfig+0x434>
 8002752:	4b48      	ldr	r3, [pc, #288]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	069b      	lsls	r3, r3, #26
 8002760:	4944      	ldr	r1, [pc, #272]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
 8002766:	e023      	b.n	80027b0 <HAL_RCC_OscConfig+0x434>
 8002768:	4b42      	ldr	r3, [pc, #264]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	493f      	ldr	r1, [pc, #252]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	4313      	orrs	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
 800277c:	e018      	b.n	80027b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800277e:	4b3d      	ldr	r3, [pc, #244]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a3c      	ldr	r2, [pc, #240]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002784:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe fcbb 	bl	8001104 <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002792:	f7fe fcb7 	bl	8001104 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e23d      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027a4:	4b33      	ldr	r3, [pc, #204]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d036      	beq.n	800282a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d019      	beq.n	80027f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fc98 	bl	8001104 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fc94 	bl	8001104 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e21a      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027ea:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x45c>
 80027f6:	e018      	b.n	800282a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80027fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fc7e 	bl	8001104 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fc7a 	bl	8001104 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e200      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d039      	beq.n	80028aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01c      	beq.n	8002878 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800283e:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a0c      	ldr	r2, [pc, #48]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002844:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002848:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800284a:	f7fe fc5b 	bl	8001104 <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002852:	f7fe fc57 	bl	8001104 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1dd      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002864:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x4d6>
 8002870:	e01b      	b.n	80028aa <HAL_RCC_OscConfig+0x52e>
 8002872:	bf00      	nop
 8002874:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002878:	4b9b      	ldr	r3, [pc, #620]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a9a      	ldr	r2, [pc, #616]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 800287e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002882:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002884:	f7fe fc3e 	bl	8001104 <HAL_GetTick>
 8002888:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800288c:	f7fe fc3a 	bl	8001104 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1c0      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800289e:	4b92      	ldr	r3, [pc, #584]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8081 	beq.w	80029ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028b8:	4b8c      	ldr	r3, [pc, #560]	@ (8002aec <HAL_RCC_OscConfig+0x770>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a8b      	ldr	r2, [pc, #556]	@ (8002aec <HAL_RCC_OscConfig+0x770>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fc1e 	bl	8001104 <HAL_GetTick>
 80028c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028cc:	f7fe fc1a 	bl	8001104 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1a0      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028de:	4b83      	ldr	r3, [pc, #524]	@ (8002aec <HAL_RCC_OscConfig+0x770>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x584>
 80028f2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028fe:	e02d      	b.n	800295c <HAL_RCC_OscConfig+0x5e0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10c      	bne.n	8002922 <HAL_RCC_OscConfig+0x5a6>
 8002908:	4b77      	ldr	r3, [pc, #476]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290c:	4a76      	ldr	r2, [pc, #472]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 800290e:	f023 0301 	bic.w	r3, r3, #1
 8002912:	6713      	str	r3, [r2, #112]	@ 0x70
 8002914:	4b74      	ldr	r3, [pc, #464]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	4a73      	ldr	r2, [pc, #460]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 800291a:	f023 0304 	bic.w	r3, r3, #4
 800291e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002920:	e01c      	b.n	800295c <HAL_RCC_OscConfig+0x5e0>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 800292a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6713      	str	r3, [r2, #112]	@ 0x70
 8002936:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293a:	4a6b      	ldr	r2, [pc, #428]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6713      	str	r3, [r2, #112]	@ 0x70
 8002942:	e00b      	b.n	800295c <HAL_RCC_OscConfig+0x5e0>
 8002944:	4b68      	ldr	r3, [pc, #416]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	4a67      	ldr	r2, [pc, #412]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002950:	4b65      	ldr	r3, [pc, #404]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002954:	4a64      	ldr	r2, [pc, #400]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002956:	f023 0304 	bic.w	r3, r3, #4
 800295a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fbce 	bl	8001104 <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe fbca 	bl	8001104 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e14e      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002982:	4b59      	ldr	r3, [pc, #356]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0ee      	beq.n	800296c <HAL_RCC_OscConfig+0x5f0>
 800298e:	e014      	b.n	80029ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe fbb8 	bl	8001104 <HAL_GetTick>
 8002994:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe fbb4 	bl	8001104 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e138      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ae:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1ee      	bne.n	8002998 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 812d 	beq.w	8002c1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029c4:	4b48      	ldr	r3, [pc, #288]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029cc:	2b18      	cmp	r3, #24
 80029ce:	f000 80bd 	beq.w	8002b4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	f040 809e 	bne.w	8002b18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b42      	ldr	r3, [pc, #264]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a41      	ldr	r2, [pc, #260]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 80029e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fb8c 	bl	8001104 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fb88 	bl	8001104 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e10e      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a02:	4b39      	ldr	r3, [pc, #228]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a0e:	4b36      	ldr	r3, [pc, #216]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a12:	4b37      	ldr	r3, [pc, #220]	@ (8002af0 <HAL_RCC_OscConfig+0x774>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	430a      	orrs	r2, r1
 8002a22:	4931      	ldr	r1, [pc, #196]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a36:	3b01      	subs	r3, #1
 8002a38:	025b      	lsls	r3, r3, #9
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a42:	3b01      	subs	r3, #1
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	3b01      	subs	r3, #1
 8002a52:	061b      	lsls	r3, r3, #24
 8002a54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a58:	4923      	ldr	r1, [pc, #140]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	4a21      	ldr	r2, [pc, #132]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a6e:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <HAL_RCC_OscConfig+0x778>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a76:	00d2      	lsls	r2, r2, #3
 8002a78:	491b      	ldr	r1, [pc, #108]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	f023 020c 	bic.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	4917      	ldr	r1, [pc, #92]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a90:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	f023 0202 	bic.w	r2, r3, #2
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	4912      	ldr	r1, [pc, #72]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002aa2:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	4a10      	ldr	r2, [pc, #64]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002aba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ac6:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	4a07      	ldr	r2, [pc, #28]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a04      	ldr	r2, [pc, #16]	@ (8002ae8 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe fb11 	bl	8001104 <HAL_GetTick>
 8002ae2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ae4:	e011      	b.n	8002b0a <HAL_RCC_OscConfig+0x78e>
 8002ae6:	bf00      	nop
 8002ae8:	58024400 	.word	0x58024400
 8002aec:	58024800 	.word	0x58024800
 8002af0:	fffffc0c 	.word	0xfffffc0c
 8002af4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fb04 	bl	8001104 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e08a      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b0a:	4b47      	ldr	r3, [pc, #284]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x77c>
 8002b16:	e082      	b.n	8002c1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b18:	4b43      	ldr	r3, [pc, #268]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a42      	ldr	r2, [pc, #264]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe faee 	bl	8001104 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe faea 	bl	8001104 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e070      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x7b0>
 8002b4a:	e068      	b.n	8002c1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b4c:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b52:	4b35      	ldr	r3, [pc, #212]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d031      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f003 0203 	and.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d12a      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d122      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11a      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0a5b      	lsrs	r3, r3, #9
 8002b92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d111      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d108      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	0e1b      	lsrs	r3, r3, #24
 8002bb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e02b      	b.n	8002c20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bc8:	4b17      	ldr	r3, [pc, #92]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bcc:	08db      	lsrs	r3, r3, #3
 8002bce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d01f      	beq.n	8002c1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	4a11      	ldr	r2, [pc, #68]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bea:	f7fe fa8b 	bl	8001104 <HAL_GetTick>
 8002bee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002bf0:	bf00      	nop
 8002bf2:	f7fe fa87 	bl	8001104 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d0f9      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <HAL_RCC_OscConfig+0x8b0>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c0a:	00d2      	lsls	r2, r2, #3
 8002c0c:	4906      	ldr	r1, [pc, #24]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c12:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <HAL_RCC_OscConfig+0x8ac>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3730      	adds	r7, #48	@ 0x30
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	ffff0007 	.word	0xffff0007

08002c30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e19c      	b.n	8002f7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c44:	4b8a      	ldr	r3, [pc, #552]	@ (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d910      	bls.n	8002c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c52:	4b87      	ldr	r3, [pc, #540]	@ (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 020f 	bic.w	r2, r3, #15
 8002c5a:	4985      	ldr	r1, [pc, #532]	@ (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b83      	ldr	r3, [pc, #524]	@ (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e184      	b.n	8002f7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d010      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	4b7b      	ldr	r3, [pc, #492]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d908      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c90:	4b78      	ldr	r3, [pc, #480]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	4975      	ldr	r1, [pc, #468]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d010      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	4b70      	ldr	r3, [pc, #448]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d908      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	496a      	ldr	r1, [pc, #424]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	4b64      	ldr	r3, [pc, #400]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d908      	bls.n	8002cfe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cec:	4b61      	ldr	r3, [pc, #388]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	495e      	ldr	r1, [pc, #376]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	4b59      	ldr	r3, [pc, #356]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d908      	bls.n	8002d2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d1a:	4b56      	ldr	r3, [pc, #344]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	4953      	ldr	r1, [pc, #332]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d908      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d48:	4b4a      	ldr	r3, [pc, #296]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f023 020f 	bic.w	r2, r3, #15
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4947      	ldr	r1, [pc, #284]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d055      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d66:	4b43      	ldr	r3, [pc, #268]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	4940      	ldr	r1, [pc, #256]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d107      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d80:	4b3c      	ldr	r3, [pc, #240]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d121      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0f6      	b.n	8002f7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d98:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d115      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0ea      	b.n	8002f7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002db0:	4b30      	ldr	r3, [pc, #192]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0de      	b.n	8002f7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0d6      	b.n	8002f7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dd0:	4b28      	ldr	r3, [pc, #160]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f023 0207 	bic.w	r2, r3, #7
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4925      	ldr	r1, [pc, #148]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de2:	f7fe f98f 	bl	8001104 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dea:	f7fe f98b 	bl	8001104 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0be      	b.n	8002f7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e00:	4b1c      	ldr	r3, [pc, #112]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d1eb      	bne.n	8002dea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	4b14      	ldr	r3, [pc, #80]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d208      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e2e:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f023 020f 	bic.w	r2, r3, #15
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	490e      	ldr	r1, [pc, #56]	@ (8002e74 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d214      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b08      	ldr	r3, [pc, #32]	@ (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 020f 	bic.w	r2, r3, #15
 8002e56:	4906      	ldr	r1, [pc, #24]	@ (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <HAL_RCC_ClockConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e086      	b.n	8002f7e <HAL_RCC_ClockConfig+0x34e>
 8002e70:	52002000 	.word	0x52002000
 8002e74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d010      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	4b3f      	ldr	r3, [pc, #252]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d208      	bcs.n	8002ea6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e94:	4b3c      	ldr	r3, [pc, #240]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	4939      	ldr	r1, [pc, #228]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	4b34      	ldr	r3, [pc, #208]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d208      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ec2:	4b31      	ldr	r3, [pc, #196]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	492e      	ldr	r1, [pc, #184]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	4b28      	ldr	r3, [pc, #160]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d208      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ef0:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	4922      	ldr	r1, [pc, #136]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d010      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d208      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4917      	ldr	r1, [pc, #92]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f30:	f000 f834 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b14      	ldr	r3, [pc, #80]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	4912      	ldr	r1, [pc, #72]	@ (8002f8c <HAL_RCC_ClockConfig+0x35c>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <HAL_RCC_ClockConfig+0x358>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	4a0d      	ldr	r2, [pc, #52]	@ (8002f8c <HAL_RCC_ClockConfig+0x35c>)
 8002f58:	5cd3      	ldrb	r3, [r2, r3]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <HAL_RCC_ClockConfig+0x360>)
 8002f66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f68:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <HAL_RCC_ClockConfig+0x364>)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <HAL_RCC_ClockConfig+0x368>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe f87c 	bl	8001070 <HAL_InitTick>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	08008ba8 	.word	0x08008ba8
 8002f90:	24000004 	.word	0x24000004
 8002f94:	24000000 	.word	0x24000000
 8002f98:	24000008 	.word	0x24000008

08002f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	@ 0x24
 8002fa0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fa2:	4bb3      	ldr	r3, [pc, #716]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002faa:	2b18      	cmp	r3, #24
 8002fac:	f200 8155 	bhi.w	800325a <HAL_RCC_GetSysClockFreq+0x2be>
 8002fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	0800301d 	.word	0x0800301d
 8002fbc:	0800325b 	.word	0x0800325b
 8002fc0:	0800325b 	.word	0x0800325b
 8002fc4:	0800325b 	.word	0x0800325b
 8002fc8:	0800325b 	.word	0x0800325b
 8002fcc:	0800325b 	.word	0x0800325b
 8002fd0:	0800325b 	.word	0x0800325b
 8002fd4:	0800325b 	.word	0x0800325b
 8002fd8:	08003043 	.word	0x08003043
 8002fdc:	0800325b 	.word	0x0800325b
 8002fe0:	0800325b 	.word	0x0800325b
 8002fe4:	0800325b 	.word	0x0800325b
 8002fe8:	0800325b 	.word	0x0800325b
 8002fec:	0800325b 	.word	0x0800325b
 8002ff0:	0800325b 	.word	0x0800325b
 8002ff4:	0800325b 	.word	0x0800325b
 8002ff8:	08003049 	.word	0x08003049
 8002ffc:	0800325b 	.word	0x0800325b
 8003000:	0800325b 	.word	0x0800325b
 8003004:	0800325b 	.word	0x0800325b
 8003008:	0800325b 	.word	0x0800325b
 800300c:	0800325b 	.word	0x0800325b
 8003010:	0800325b 	.word	0x0800325b
 8003014:	0800325b 	.word	0x0800325b
 8003018:	0800304f 	.word	0x0800304f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800301c:	4b94      	ldr	r3, [pc, #592]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003028:	4b91      	ldr	r3, [pc, #580]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	08db      	lsrs	r3, r3, #3
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	4a90      	ldr	r2, [pc, #576]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800303a:	e111      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800303c:	4b8d      	ldr	r3, [pc, #564]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800303e:	61bb      	str	r3, [r7, #24]
      break;
 8003040:	e10e      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003042:	4b8d      	ldr	r3, [pc, #564]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003044:	61bb      	str	r3, [r7, #24]
      break;
 8003046:	e10b      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003048:	4b8c      	ldr	r3, [pc, #560]	@ (800327c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800304a:	61bb      	str	r3, [r7, #24]
      break;
 800304c:	e108      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800304e:	4b88      	ldr	r3, [pc, #544]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003058:	4b85      	ldr	r3, [pc, #532]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003062:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003064:	4b82      	ldr	r3, [pc, #520]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800306e:	4b80      	ldr	r3, [pc, #512]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003072:	08db      	lsrs	r3, r3, #3
 8003074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003086:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80e1 	beq.w	8003254 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b02      	cmp	r3, #2
 8003096:	f000 8083 	beq.w	80031a0 <HAL_RCC_GetSysClockFreq+0x204>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b02      	cmp	r3, #2
 800309e:	f200 80a1 	bhi.w	80031e4 <HAL_RCC_GetSysClockFreq+0x248>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x114>
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d056      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ae:	e099      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d02d      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	4a6b      	ldr	r2, [pc, #428]	@ (8003274 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
 80030cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030e6:	4b62      	ldr	r3, [pc, #392]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003280 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800310a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003116:	e087      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003122:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003284 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800312a:	4b51      	ldr	r3, [pc, #324]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800313a:	ed97 6a02 	vldr	s12, [r7, #8]
 800313e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003280 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800314a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800314e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003156:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800315a:	e065      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003166:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003288 <HAL_RCC_GetSysClockFreq+0x2ec>
 800316a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316e:	4b40      	ldr	r3, [pc, #256]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003182:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003280 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800318a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800319e:	e043      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800328c <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003280 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031e2:	e021      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003288 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003206:	ed97 6a02 	vldr	s12, [r7, #8]
 800320a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003280 <HAL_RCC_GetSysClockFreq+0x2e4>
 800320e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800321a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003226:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003228:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322c:	0a5b      	lsrs	r3, r3, #9
 800322e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003232:	3301      	adds	r3, #1
 8003234:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003240:	edd7 6a07 	vldr	s13, [r7, #28]
 8003244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800324c:	ee17 3a90 	vmov	r3, s15
 8003250:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003252:	e005      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
      break;
 8003258:	e002      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800325a:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800325c:	61bb      	str	r3, [r7, #24]
      break;
 800325e:	bf00      	nop
  }

  return sysclockfreq;
 8003260:	69bb      	ldr	r3, [r7, #24]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	@ 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	58024400 	.word	0x58024400
 8003274:	03d09000 	.word	0x03d09000
 8003278:	003d0900 	.word	0x003d0900
 800327c:	017d7840 	.word	0x017d7840
 8003280:	46000000 	.word	0x46000000
 8003284:	4c742400 	.word	0x4c742400
 8003288:	4a742400 	.word	0x4a742400
 800328c:	4bbebc20 	.word	0x4bbebc20

08003290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003296:	f7ff fe81 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b10      	ldr	r3, [pc, #64]	@ (80032e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	490f      	ldr	r1, [pc, #60]	@ (80032e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032b4:	4b0a      	ldr	r3, [pc, #40]	@ (80032e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	4a09      	ldr	r2, [pc, #36]	@ (80032e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a07      	ldr	r2, [pc, #28]	@ (80032e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80032cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ce:	4a07      	ldr	r2, [pc, #28]	@ (80032ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032d4:	4b04      	ldr	r3, [pc, #16]	@ (80032e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80032d6:	681b      	ldr	r3, [r3, #0]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	58024400 	.word	0x58024400
 80032e4:	08008ba8 	.word	0x08008ba8
 80032e8:	24000004 	.word	0x24000004
 80032ec:	24000000 	.word	0x24000000

080032f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032f4:	f7ff ffcc 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 80032f8:	4602      	mov	r2, r0
 80032fa:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	4904      	ldr	r1, [pc, #16]	@ (8003318 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	58024400 	.word	0x58024400
 8003318:	08008ba8 	.word	0x08008ba8

0800331c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003320:	f7ff ffb6 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4904      	ldr	r1, [pc, #16]	@ (8003344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	58024400 	.word	0x58024400
 8003344:	08008ba8 	.word	0x08008ba8

08003348 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b0ca      	sub	sp, #296	@ 0x128
 800334e:	af00      	add	r7, sp, #0
 8003350:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800336c:	2500      	movs	r5, #0
 800336e:	ea54 0305 	orrs.w	r3, r4, r5
 8003372:	d049      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800337a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800337e:	d02f      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003380:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003384:	d828      	bhi.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003386:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800338a:	d01a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800338c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003390:	d822      	bhi.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800339a:	d007      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800339c:	e01c      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800339e:	4bb8      	ldr	r3, [pc, #736]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	4ab7      	ldr	r2, [pc, #732]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033aa:	e01a      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b0:	3308      	adds	r3, #8
 80033b2:	2102      	movs	r1, #2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f001 fc8f 	bl	8004cd8 <RCCEx_PLL2_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033c0:	e00f      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	3328      	adds	r3, #40	@ 0x28
 80033c8:	2102      	movs	r1, #2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fd36 	bl	8004e3c <RCCEx_PLL3_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033d6:	e004      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033de:	e000      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80033e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033ea:	4ba5      	ldr	r3, [pc, #660]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80033f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033f8:	4aa1      	ldr	r2, [pc, #644]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033fa:	430b      	orrs	r3, r1
 80033fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80033fe:	e003      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003414:	f04f 0900 	mov.w	r9, #0
 8003418:	ea58 0309 	orrs.w	r3, r8, r9
 800341c:	d047      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	2b04      	cmp	r3, #4
 8003426:	d82a      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003428:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003445 	.word	0x08003445
 8003434:	08003453 	.word	0x08003453
 8003438:	08003469 	.word	0x08003469
 800343c:	08003487 	.word	0x08003487
 8003440:	08003487 	.word	0x08003487
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003444:	4b8e      	ldr	r3, [pc, #568]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	4a8d      	ldr	r2, [pc, #564]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800344a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800344e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003450:	e01a      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	3308      	adds	r3, #8
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f001 fc3c 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003466:	e00f      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	3328      	adds	r3, #40	@ 0x28
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f001 fce3 	bl	8004e3c <RCCEx_PLL3_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800347c:	e004      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003484:	e000      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003490:	4b7b      	ldr	r3, [pc, #492]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003494:	f023 0107 	bic.w	r1, r3, #7
 8003498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349e:	4a78      	ldr	r2, [pc, #480]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80034a4:	e003      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80034ba:	f04f 0b00 	mov.w	fp, #0
 80034be:	ea5a 030b 	orrs.w	r3, sl, fp
 80034c2:	d04c      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ce:	d030      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80034d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d4:	d829      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034d8:	d02d      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034da:	2bc0      	cmp	r3, #192	@ 0xc0
 80034dc:	d825      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034de:	2b80      	cmp	r3, #128	@ 0x80
 80034e0:	d018      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034e2:	2b80      	cmp	r3, #128	@ 0x80
 80034e4:	d821      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80034ea:	2b40      	cmp	r3, #64	@ 0x40
 80034ec:	d007      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80034ee:	e01c      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f0:	4b63      	ldr	r3, [pc, #396]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	4a62      	ldr	r2, [pc, #392]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034fc:	e01c      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	3308      	adds	r3, #8
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f001 fbe6 	bl	8004cd8 <RCCEx_PLL2_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003512:	e011      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003518:	3328      	adds	r3, #40	@ 0x28
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f001 fc8d 	bl	8004e3c <RCCEx_PLL3_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003528:	e006      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003530:	e002      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003540:	4b4f      	ldr	r3, [pc, #316]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003544:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354e:	4a4c      	ldr	r2, [pc, #304]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003550:	430b      	orrs	r3, r1
 8003552:	6513      	str	r3, [r2, #80]	@ 0x50
 8003554:	e003      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800355a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800356a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800356e:	2300      	movs	r3, #0
 8003570:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003574:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003578:	460b      	mov	r3, r1
 800357a:	4313      	orrs	r3, r2
 800357c:	d053      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003586:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800358a:	d035      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800358c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003590:	d82e      	bhi.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003592:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003596:	d031      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003598:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800359c:	d828      	bhi.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800359e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035a2:	d01a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035a8:	d822      	bhi.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035b2:	d007      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80035b4:	e01c      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b6:	4b32      	ldr	r3, [pc, #200]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	4a31      	ldr	r2, [pc, #196]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c2:	e01c      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c8:	3308      	adds	r3, #8
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 fb83 	bl	8004cd8 <RCCEx_PLL2_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035d8:	e011      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	3328      	adds	r3, #40	@ 0x28
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 fc2a 	bl	8004e3c <RCCEx_PLL3_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ee:	e006      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035f6:	e002      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035f8:	bf00      	nop
 80035fa:	e000      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003606:	4b1e      	ldr	r3, [pc, #120]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003612:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003616:	4a1a      	ldr	r2, [pc, #104]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003618:	430b      	orrs	r3, r1
 800361a:	6593      	str	r3, [r2, #88]	@ 0x58
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003632:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800363c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003640:	460b      	mov	r3, r1
 8003642:	4313      	orrs	r3, r2
 8003644:	d056      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800364e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003652:	d038      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003654:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003658:	d831      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800365a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800365e:	d034      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003660:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003664:	d82b      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800366a:	d01d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800366c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003670:	d825      	bhi.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003676:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800367c:	e01f      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800367e:	bf00      	nop
 8003680:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003684:	4ba2      	ldr	r3, [pc, #648]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	4aa1      	ldr	r2, [pc, #644]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800368e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003690:	e01c      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	3308      	adds	r3, #8
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fb1c 	bl	8004cd8 <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036a6:	e011      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ac:	3328      	adds	r3, #40	@ 0x28
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 fbc3 	bl	8004e3c <RCCEx_PLL3_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036bc:	e006      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c4:	e002      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036c6:	bf00      	nop
 80036c8:	e000      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036d4:	4b8e      	ldr	r3, [pc, #568]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036e4:	4a8a      	ldr	r2, [pc, #552]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e6:	430b      	orrs	r3, r1
 80036e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ea:	e003      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800370a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800370e:	460b      	mov	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	d03a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	2b30      	cmp	r3, #48	@ 0x30
 800371c:	d01f      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800371e:	2b30      	cmp	r3, #48	@ 0x30
 8003720:	d819      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003722:	2b20      	cmp	r3, #32
 8003724:	d00c      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003726:	2b20      	cmp	r3, #32
 8003728:	d815      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d019      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800372e:	2b10      	cmp	r3, #16
 8003730:	d111      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003732:	4b77      	ldr	r3, [pc, #476]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	4a76      	ldr	r2, [pc, #472]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800373c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800373e:	e011      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	3308      	adds	r3, #8
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fac5 	bl	8004cd8 <RCCEx_PLL2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800375c:	e002      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800375e:	bf00      	nop
 8003760:	e000      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800376c:	4b68      	ldr	r3, [pc, #416]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800376e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003770:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377a:	4a65      	ldr	r2, [pc, #404]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800377c:	430b      	orrs	r3, r1
 800377e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003796:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800379a:	2300      	movs	r3, #0
 800379c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4313      	orrs	r3, r2
 80037a8:	d051      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b4:	d035      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ba:	d82e      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037c0:	d031      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80037c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037c6:	d828      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037cc:	d01a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d2:	d822      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037dc:	d007      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80037de:	e01c      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037ec:	e01c      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	3308      	adds	r3, #8
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 fa6e 	bl	8004cd8 <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003802:	e011      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003808:	3328      	adds	r3, #40	@ 0x28
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f001 fb15 	bl	8004e3c <RCCEx_PLL3_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003818:	e006      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003820:	e002      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003830:	4b37      	ldr	r3, [pc, #220]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003834:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383e:	4a34      	ldr	r2, [pc, #208]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003840:	430b      	orrs	r3, r1
 8003842:	6513      	str	r3, [r2, #80]	@ 0x50
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800385a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800385e:	2300      	movs	r3, #0
 8003860:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003864:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003868:	460b      	mov	r3, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	d056      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003878:	d033      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800387a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800387e:	d82c      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003880:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003884:	d02f      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003886:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800388a:	d826      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800388c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003890:	d02b      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003892:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003896:	d820      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800389c:	d012      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800389e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038a2:	d81a      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ac:	d115      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	3308      	adds	r3, #8
 80038b4:	2101      	movs	r1, #1
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 fa0e 	bl	8004cd8 <RCCEx_PLL2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038c2:	e015      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	3328      	adds	r3, #40	@ 0x28
 80038ca:	2101      	movs	r1, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 fab5 	bl	8004e3c <RCCEx_PLL3_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038d8:	e00a      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038e0:	e006      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038e2:	bf00      	nop
 80038e4:	e004      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003906:	4a02      	ldr	r2, [pc, #8]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003908:	430b      	orrs	r3, r1
 800390a:	6513      	str	r3, [r2, #80]	@ 0x50
 800390c:	e006      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800390e:	bf00      	nop
 8003910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003918:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003932:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d055      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003948:	d033      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800394a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800394e:	d82c      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003954:	d02f      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395a:	d826      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800395c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003960:	d02b      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003962:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003966:	d820      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800396c:	d012      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800396e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003972:	d81a      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d022      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800397c:	d115      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	3308      	adds	r3, #8
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f001 f9a6 	bl	8004cd8 <RCCEx_PLL2_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003992:	e015      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003998:	3328      	adds	r3, #40	@ 0x28
 800399a:	2101      	movs	r1, #1
 800399c:	4618      	mov	r0, r3
 800399e:	f001 fa4d 	bl	8004e3c <RCCEx_PLL3_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039a8:	e00a      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039b0:	e006      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039b2:	bf00      	nop
 80039b4:	e004      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039b6:	bf00      	nop
 80039b8:	e002      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039c8:	4ba3      	ldr	r3, [pc, #652]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039d8:	4a9f      	ldr	r2, [pc, #636]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039de:	e003      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80039fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a02:	460b      	mov	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	d037      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a12:	d00e      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a18:	d816      	bhi.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d018      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a22:	d111      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a24:	4b8c      	ldr	r3, [pc, #560]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	4a8b      	ldr	r2, [pc, #556]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a30:	e00f      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a36:	3308      	adds	r3, #8
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 f94c 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a46:	e004      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a4e:	e000      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a68:	4a7b      	ldr	r2, [pc, #492]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	d039      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d81c      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003ae5 	.word	0x08003ae5
 8003aac:	08003ab9 	.word	0x08003ab9
 8003ab0:	08003ac7 	.word	0x08003ac7
 8003ab4:	08003ae5 	.word	0x08003ae5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab8:	4b67      	ldr	r3, [pc, #412]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	4a66      	ldr	r2, [pc, #408]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ac4:	e00f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aca:	3308      	adds	r3, #8
 8003acc:	2102      	movs	r1, #2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 f902 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ada:	e004      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003aee:	4b5a      	ldr	r3, [pc, #360]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af2:	f023 0103 	bic.w	r1, r3, #3
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afc:	4a56      	ldr	r2, [pc, #344]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afe:	430b      	orrs	r3, r1
 8003b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b02:	e003      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b26:	460b      	mov	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f000 809f 	beq.w	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a4a      	ldr	r2, [pc, #296]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3a:	f7fd fae3 	bl	8001104 <HAL_GetTick>
 8003b3e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b42:	e00b      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7fd fade 	bl	8001104 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	@ 0x64
 8003b52:	d903      	bls.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b5a:	e005      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ed      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d179      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b70:	4b39      	ldr	r3, [pc, #228]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b7c:	4053      	eors	r3, r2
 8003b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b86:	4b34      	ldr	r3, [pc, #208]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b92:	4b31      	ldr	r3, [pc, #196]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	4a30      	ldr	r2, [pc, #192]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003baa:	4a2b      	ldr	r2, [pc, #172]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bb0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bbe:	d118      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd faa0 	bl	8001104 <HAL_GetTick>
 8003bc4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc8:	e00d      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fd fa9b 	bl	8001104 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d903      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003be4:	e005      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0eb      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d129      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c0a:	d10e      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c0c:	4b12      	ldr	r3, [pc, #72]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c1c:	091a      	lsrs	r2, r3, #4
 8003c1e:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	4a0d      	ldr	r2, [pc, #52]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6113      	str	r3, [r2, #16]
 8003c28:	e005      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c34:	6113      	str	r3, [r2, #16]
 8003c36:	4b08      	ldr	r3, [pc, #32]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4c:	e00e      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003c56:	e009      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	58024800 	.word	0x58024800
 8003c60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f002 0301 	and.w	r3, r2, #1
 8003c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f000 8089 	beq.w	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c94:	2b28      	cmp	r3, #40	@ 0x28
 8003c96:	d86b      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003d79 	.word	0x08003d79
 8003ca4:	08003d71 	.word	0x08003d71
 8003ca8:	08003d71 	.word	0x08003d71
 8003cac:	08003d71 	.word	0x08003d71
 8003cb0:	08003d71 	.word	0x08003d71
 8003cb4:	08003d71 	.word	0x08003d71
 8003cb8:	08003d71 	.word	0x08003d71
 8003cbc:	08003d71 	.word	0x08003d71
 8003cc0:	08003d45 	.word	0x08003d45
 8003cc4:	08003d71 	.word	0x08003d71
 8003cc8:	08003d71 	.word	0x08003d71
 8003ccc:	08003d71 	.word	0x08003d71
 8003cd0:	08003d71 	.word	0x08003d71
 8003cd4:	08003d71 	.word	0x08003d71
 8003cd8:	08003d71 	.word	0x08003d71
 8003cdc:	08003d71 	.word	0x08003d71
 8003ce0:	08003d5b 	.word	0x08003d5b
 8003ce4:	08003d71 	.word	0x08003d71
 8003ce8:	08003d71 	.word	0x08003d71
 8003cec:	08003d71 	.word	0x08003d71
 8003cf0:	08003d71 	.word	0x08003d71
 8003cf4:	08003d71 	.word	0x08003d71
 8003cf8:	08003d71 	.word	0x08003d71
 8003cfc:	08003d71 	.word	0x08003d71
 8003d00:	08003d79 	.word	0x08003d79
 8003d04:	08003d71 	.word	0x08003d71
 8003d08:	08003d71 	.word	0x08003d71
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003d71 	.word	0x08003d71
 8003d14:	08003d71 	.word	0x08003d71
 8003d18:	08003d71 	.word	0x08003d71
 8003d1c:	08003d71 	.word	0x08003d71
 8003d20:	08003d79 	.word	0x08003d79
 8003d24:	08003d71 	.word	0x08003d71
 8003d28:	08003d71 	.word	0x08003d71
 8003d2c:	08003d71 	.word	0x08003d71
 8003d30:	08003d71 	.word	0x08003d71
 8003d34:	08003d71 	.word	0x08003d71
 8003d38:	08003d71 	.word	0x08003d71
 8003d3c:	08003d71 	.word	0x08003d71
 8003d40:	08003d79 	.word	0x08003d79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	3308      	adds	r3, #8
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 ffc3 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d58:	e00f      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	3328      	adds	r3, #40	@ 0x28
 8003d60:	2101      	movs	r1, #1
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 f86a 	bl	8004e3c <RCCEx_PLL3_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d6e:	e004      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d76:	e000      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d82:	4bbf      	ldr	r3, [pc, #764]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d90:	4abb      	ldr	r2, [pc, #748]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d92:	430b      	orrs	r3, r1
 8003d94:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d96:	e003      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	f002 0302 	and.w	r3, r2, #2
 8003dac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003db6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	d041      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	d824      	bhi.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003dca:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003e1d 	.word	0x08003e1d
 8003dd4:	08003de9 	.word	0x08003de9
 8003dd8:	08003dff 	.word	0x08003dff
 8003ddc:	08003e1d 	.word	0x08003e1d
 8003de0:	08003e1d 	.word	0x08003e1d
 8003de4:	08003e1d 	.word	0x08003e1d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dec:	3308      	adds	r3, #8
 8003dee:	2101      	movs	r1, #1
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 ff71 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dfc:	e00f      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	3328      	adds	r3, #40	@ 0x28
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 f818 	bl	8004e3c <RCCEx_PLL3_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e12:	e004      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e1a:	e000      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e26:	4b96      	ldr	r3, [pc, #600]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2a:	f023 0107 	bic.w	r1, r3, #7
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e34:	4a92      	ldr	r2, [pc, #584]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e36:	430b      	orrs	r3, r1
 8003e38:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e3a:	e003      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f002 0304 	and.w	r3, r2, #4
 8003e50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e5a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	d044      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d825      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e70:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003ec5 	.word	0x08003ec5
 8003e7c:	08003e91 	.word	0x08003e91
 8003e80:	08003ea7 	.word	0x08003ea7
 8003e84:	08003ec5 	.word	0x08003ec5
 8003e88:	08003ec5 	.word	0x08003ec5
 8003e8c:	08003ec5 	.word	0x08003ec5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e94:	3308      	adds	r3, #8
 8003e96:	2101      	movs	r1, #1
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 ff1d 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ea4:	e00f      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eaa:	3328      	adds	r3, #40	@ 0x28
 8003eac:	2101      	movs	r1, #1
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 ffc4 	bl	8004e3c <RCCEx_PLL3_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eba:	e004      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10b      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ece:	4b6c      	ldr	r3, [pc, #432]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed2:	f023 0107 	bic.w	r1, r3, #7
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ede:	4a68      	ldr	r2, [pc, #416]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ee4:	e003      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f002 0320 	and.w	r3, r2, #32
 8003efa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	d055      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f1a:	d033      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f20:	d82c      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f26:	d02f      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f2c:	d826      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f32:	d02b      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f38:	d820      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f3e:	d012      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f44:	d81a      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d022      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f4e:	d115      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	3308      	adds	r3, #8
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 febd 	bl	8004cd8 <RCCEx_PLL2_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f64:	e015      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	3328      	adds	r3, #40	@ 0x28
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 ff64 	bl	8004e3c <RCCEx_PLL3_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f82:	e006      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f84:	bf00      	nop
 8003f86:	e004      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f88:	bf00      	nop
 8003f8a:	e002      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f8c:	bf00      	nop
 8003f8e:	e000      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f9a:	4b39      	ldr	r3, [pc, #228]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003faa:	4a35      	ldr	r2, [pc, #212]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fd0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	d058      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fe2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fe6:	d033      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003fe8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fec:	d82c      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff2:	d02f      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff8:	d826      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ffa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ffe:	d02b      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004000:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004004:	d820      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800400a:	d012      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800400c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004010:	d81a      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d022      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401a:	d115      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	3308      	adds	r3, #8
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fe57 	bl	8004cd8 <RCCEx_PLL2_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004030:	e015      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004036:	3328      	adds	r3, #40	@ 0x28
 8004038:	2102      	movs	r1, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fefe 	bl	8004e3c <RCCEx_PLL3_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004046:	e00a      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800404e:	e006      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004050:	bf00      	nop
 8004052:	e004      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004054:	bf00      	nop
 8004056:	e002      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10e      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004066:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004076:	4a02      	ldr	r2, [pc, #8]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004078:	430b      	orrs	r3, r1
 800407a:	6593      	str	r3, [r2, #88]	@ 0x58
 800407c:	e006      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800407e:	bf00      	nop
 8004080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	d055      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040b8:	d033      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80040ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040be:	d82c      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c4:	d02f      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ca:	d826      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040d0:	d02b      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80040d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040d6:	d820      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040dc:	d012      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80040de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040e2:	d81a      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d022      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80040e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ec:	d115      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	3308      	adds	r3, #8
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fdee 	bl	8004cd8 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004102:	e015      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004108:	3328      	adds	r3, #40	@ 0x28
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fe95 	bl	8004e3c <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004118:	e00a      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004120:	e006      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004122:	bf00      	nop
 8004124:	e004      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004126:	bf00      	nop
 8004128:	e002      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800412a:	bf00      	nop
 800412c:	e000      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800412e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004138:	4ba1      	ldr	r3, [pc, #644]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004144:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004148:	4a9d      	ldr	r2, [pc, #628]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800414a:	430b      	orrs	r3, r1
 800414c:	6593      	str	r3, [r2, #88]	@ 0x58
 800414e:	e003      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f002 0308 	and.w	r3, r2, #8
 8004164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004168:	2300      	movs	r3, #0
 800416a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800416e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004172:	460b      	mov	r3, r1
 8004174:	4313      	orrs	r3, r2
 8004176:	d01e      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	3328      	adds	r3, #40	@ 0x28
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fe54 	bl	8004e3c <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041a0:	4b87      	ldr	r3, [pc, #540]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041b0:	4a83      	ldr	r2, [pc, #524]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b2:	430b      	orrs	r3, r1
 80041b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f002 0310 	and.w	r3, r2, #16
 80041c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041d0:	460b      	mov	r3, r1
 80041d2:	4313      	orrs	r3, r2
 80041d4:	d01e      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e2:	d10c      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e8:	3328      	adds	r3, #40	@ 0x28
 80041ea:	2102      	movs	r1, #2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fe25 	bl	8004e3c <RCCEx_PLL3_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041fe:	4b70      	ldr	r3, [pc, #448]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800420e:	4a6c      	ldr	r2, [pc, #432]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800422a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800422e:	460b      	mov	r3, r1
 8004230:	4313      	orrs	r3, r2
 8004232:	d03e      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800423c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004240:	d022      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004246:	d81b      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004250:	d00b      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004252:	e015      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004258:	3308      	adds	r3, #8
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fd3b 	bl	8004cd8 <RCCEx_PLL2_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004268:	e00f      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	3328      	adds	r3, #40	@ 0x28
 8004270:	2102      	movs	r1, #2
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fde2 	bl	8004e3c <RCCEx_PLL3_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800427e:	e004      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004292:	4b4b      	ldr	r3, [pc, #300]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004296:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042a2:	4a47      	ldr	r2, [pc, #284]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a8:	e003      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042c0:	2300      	movs	r3, #0
 80042c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042c8:	460b      	mov	r3, r1
 80042ca:	4313      	orrs	r3, r2
 80042cc:	d03b      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042da:	d01f      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80042dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042e0:	d818      	bhi.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80042e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042e6:	d003      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80042e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ec:	d007      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80042ee:	e011      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f0:	4b33      	ldr	r3, [pc, #204]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	4a32      	ldr	r2, [pc, #200]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042fc:	e00f      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3328      	adds	r3, #40	@ 0x28
 8004304:	2101      	movs	r1, #1
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fd98 	bl	8004e3c <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004312:	e004      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800431a:	e000      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800431c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004326:	4b26      	ldr	r3, [pc, #152]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004336:	4a22      	ldr	r2, [pc, #136]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004338:	430b      	orrs	r3, r1
 800433a:	6553      	str	r3, [r2, #84]	@ 0x54
 800433c:	e003      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004352:	673b      	str	r3, [r7, #112]	@ 0x70
 8004354:	2300      	movs	r3, #0
 8004356:	677b      	str	r3, [r7, #116]	@ 0x74
 8004358:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800435c:	460b      	mov	r3, r1
 800435e:	4313      	orrs	r3, r2
 8004360:	d034      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800436c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004370:	d007      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004372:	e011      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004374:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	4a11      	ldr	r2, [pc, #68]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800437a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800437e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004380:	e00e      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004386:	3308      	adds	r3, #8
 8004388:	2102      	movs	r1, #2
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fca4 	bl	8004cd8 <RCCEx_PLL2_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004396:	e003      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800439e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10d      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b6:	4a02      	ldr	r2, [pc, #8]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b8:	430b      	orrs	r3, r1
 80043ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043bc:	e006      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80043be:	bf00      	nop
 80043c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043da:	2300      	movs	r3, #0
 80043dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d00c      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	3328      	adds	r3, #40	@ 0x28
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fd23 	bl	8004e3c <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800440e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004410:	2300      	movs	r3, #0
 8004412:	667b      	str	r3, [r7, #100]	@ 0x64
 8004414:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004418:	460b      	mov	r3, r1
 800441a:	4313      	orrs	r3, r2
 800441c:	d038      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800442a:	d018      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800442c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004430:	d811      	bhi.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004432:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004436:	d014      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800443c:	d80b      	bhi.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d011      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004446:	d106      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004448:	4bc3      	ldr	r3, [pc, #780]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	4ac2      	ldr	r2, [pc, #776]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004454:	e008      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800445c:	e004      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800445e:	bf00      	nop
 8004460:	e002      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004470:	4bb9      	ldr	r3, [pc, #740]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004480:	4ab5      	ldr	r2, [pc, #724]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004482:	430b      	orrs	r3, r1
 8004484:	6553      	str	r3, [r2, #84]	@ 0x54
 8004486:	e003      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800448c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800449c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800449e:	2300      	movs	r3, #0
 80044a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044a6:	460b      	mov	r3, r1
 80044a8:	4313      	orrs	r3, r2
 80044aa:	d009      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ac:	4baa      	ldr	r3, [pc, #680]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ba:	4aa7      	ldr	r2, [pc, #668]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044bc:	430b      	orrs	r3, r1
 80044be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80044cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ce:	2300      	movs	r3, #0
 80044d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80044d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d00a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044dc:	4b9e      	ldr	r3, [pc, #632]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80044ec:	4a9a      	ldr	r2, [pc, #616]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ee:	430b      	orrs	r3, r1
 80044f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004500:	2300      	movs	r3, #0
 8004502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004504:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004508:	460b      	mov	r3, r1
 800450a:	4313      	orrs	r3, r2
 800450c:	d009      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800450e:	4b92      	ldr	r3, [pc, #584]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004512:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800451c:	4a8e      	ldr	r2, [pc, #568]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451e:	430b      	orrs	r3, r1
 8004520:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800452e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004530:	2300      	movs	r3, #0
 8004532:	647b      	str	r3, [r7, #68]	@ 0x44
 8004534:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d00e      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800453e:	4b86      	ldr	r3, [pc, #536]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	4a85      	ldr	r2, [pc, #532]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004544:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004548:	6113      	str	r3, [r2, #16]
 800454a:	4b83      	ldr	r3, [pc, #524]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800454c:	6919      	ldr	r1, [r3, #16]
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004552:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004556:	4a80      	ldr	r2, [pc, #512]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004558:	430b      	orrs	r3, r1
 800455a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004568:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456a:	2300      	movs	r3, #0
 800456c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800456e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004572:	460b      	mov	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	d009      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004578:	4b77      	ldr	r3, [pc, #476]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004586:	4a74      	ldr	r2, [pc, #464]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004588:	430b      	orrs	r3, r1
 800458a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004598:	633b      	str	r3, [r7, #48]	@ 0x30
 800459a:	2300      	movs	r3, #0
 800459c:	637b      	str	r3, [r7, #52]	@ 0x34
 800459e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045b8:	4a67      	ldr	r2, [pc, #412]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	2100      	movs	r1, #0
 80045c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045d4:	460b      	mov	r3, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d011      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	3308      	adds	r3, #8
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fb78 	bl	8004cd8 <RCCEx_PLL2_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	2100      	movs	r1, #0
 8004608:	6239      	str	r1, [r7, #32]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004610:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004614:	460b      	mov	r3, r1
 8004616:	4313      	orrs	r3, r2
 8004618:	d011      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461e:	3308      	adds	r3, #8
 8004620:	2101      	movs	r1, #1
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fb58 	bl	8004cd8 <RCCEx_PLL2_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	2100      	movs	r1, #0
 8004648:	61b9      	str	r1, [r7, #24]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004654:	460b      	mov	r3, r1
 8004656:	4313      	orrs	r3, r2
 8004658:	d011      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465e:	3308      	adds	r3, #8
 8004660:	2102      	movs	r1, #2
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fb38 	bl	8004cd8 <RCCEx_PLL2_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800466e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	2100      	movs	r1, #0
 8004688:	6139      	str	r1, [r7, #16]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004694:	460b      	mov	r3, r1
 8004696:	4313      	orrs	r3, r2
 8004698:	d011      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	3328      	adds	r3, #40	@ 0x28
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fbca 	bl	8004e3c <RCCEx_PLL3_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80046ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	2100      	movs	r1, #0
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d011      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046de:	3328      	adds	r3, #40	@ 0x28
 80046e0:	2101      	movs	r1, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fbaa 	bl	8004e3c <RCCEx_PLL3_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	2100      	movs	r1, #0
 8004708:	6039      	str	r1, [r7, #0]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004714:	460b      	mov	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	d011      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	3328      	adds	r3, #40	@ 0x28
 8004720:	2102      	movs	r1, #2
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fb8a 	bl	8004e3c <RCCEx_PLL3_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800472e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800473e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
}
 800474c:	4618      	mov	r0, r3
 800474e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004752:	46bd      	mov	sp, r7
 8004754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004758:	58024400 	.word	0x58024400

0800475c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004760:	f7fe fd96 	bl	8003290 <HAL_RCC_GetHCLKFreq>
 8004764:	4602      	mov	r2, r0
 8004766:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	4904      	ldr	r1, [pc, #16]	@ (8004784 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004772:	5ccb      	ldrb	r3, [r1, r3]
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800477c:	4618      	mov	r0, r3
 800477e:	bd80      	pop	{r7, pc}
 8004780:	58024400 	.word	0x58024400
 8004784:	08008ba8 	.word	0x08008ba8

08004788 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	@ 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004790:	4ba1      	ldr	r3, [pc, #644]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800479a:	4b9f      	ldr	r3, [pc, #636]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479e:	0b1b      	lsrs	r3, r3, #12
 80047a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047a6:	4b9c      	ldr	r3, [pc, #624]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047b2:	4b99      	ldr	r3, [pc, #612]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b6:	08db      	lsrs	r3, r3, #3
 80047b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8111 	beq.w	80049f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	f000 8083 	beq.w	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	f200 80a1 	bhi.w	8004928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d056      	beq.n	80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047f2:	e099      	b.n	8004928 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f4:	4b88      	ldr	r3, [pc, #544]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02d      	beq.n	800485c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004800:	4b85      	ldr	r3, [pc, #532]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	08db      	lsrs	r3, r3, #3
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	4a84      	ldr	r2, [pc, #528]	@ (8004a1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	ee07 3a90 	vmov	s15, r3
 8004818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a03 	vldr	s12, [r7, #12]
 800483e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800485a:	e087      	b.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004882:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489e:	e065      	b.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b59      	ldr	r3, [pc, #356]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e2:	e043      	b.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b48      	ldr	r3, [pc, #288]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a03 	vldr	s12, [r7, #12]
 800490a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004926:	e021      	b.n	800496c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b37      	ldr	r3, [pc, #220]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800496c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	0a5b      	lsrs	r3, r3, #9
 8004972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004986:	edd7 6a07 	vldr	s13, [r7, #28]
 800498a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004992:	ee17 2a90 	vmov	r2, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800499a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049a4:	ee07 3a90 	vmov	s15, r3
 80049a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c0:	ee17 2a90 	vmov	r2, s15
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049c8:	4b13      	ldr	r3, [pc, #76]	@ (8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	0e1b      	lsrs	r3, r3, #24
 80049ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ee:	ee17 2a90 	vmov	r2, s15
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049f6:	e008      	b.n	8004a0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
}
 8004a0a:	bf00      	nop
 8004a0c:	3724      	adds	r7, #36	@ 0x24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	03d09000 	.word	0x03d09000
 8004a20:	46000000 	.word	0x46000000
 8004a24:	4c742400 	.word	0x4c742400
 8004a28:	4a742400 	.word	0x4a742400
 8004a2c:	4bbebc20 	.word	0x4bbebc20

08004a30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b089      	sub	sp, #36	@ 0x24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a38:	4ba1      	ldr	r3, [pc, #644]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a42:	4b9f      	ldr	r3, [pc, #636]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	0d1b      	lsrs	r3, r3, #20
 8004a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a4e:	4b9c      	ldr	r3, [pc, #624]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a5a:	4b99      	ldr	r3, [pc, #612]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8111 	beq.w	8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	f000 8083 	beq.w	8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	f200 80a1 	bhi.w	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d056      	beq.n	8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a9a:	e099      	b.n	8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a9c:	4b88      	ldr	r3, [pc, #544]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02d      	beq.n	8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004aa8:	4b85      	ldr	r3, [pc, #532]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	08db      	lsrs	r3, r3, #3
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	4a84      	ldr	r2, [pc, #528]	@ (8004cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b02:	e087      	b.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b16:	4b6a      	ldr	r3, [pc, #424]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b46:	e065      	b.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5a:	4b59      	ldr	r3, [pc, #356]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8a:	e043      	b.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9e:	4b48      	ldr	r3, [pc, #288]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bce:	e021      	b.n	8004c14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be2:	4b37      	ldr	r3, [pc, #220]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c14:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	0a5b      	lsrs	r3, r3, #9
 8004c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c3a:	ee17 2a90 	vmov	r2, s15
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c42:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c68:	ee17 2a90 	vmov	r2, s15
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c70:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	0e1b      	lsrs	r3, r3, #24
 8004c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c96:	ee17 2a90 	vmov	r2, s15
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
}
 8004cb2:	bf00      	nop
 8004cb4:	3724      	adds	r7, #36	@ 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	03d09000 	.word	0x03d09000
 8004cc8:	46000000 	.word	0x46000000
 8004ccc:	4c742400 	.word	0x4c742400
 8004cd0:	4a742400 	.word	0x4a742400
 8004cd4:	4bbebc20 	.word	0x4bbebc20

08004cd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ce6:	4b53      	ldr	r3, [pc, #332]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d101      	bne.n	8004cf6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e099      	b.n	8004e2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a4e      	ldr	r2, [pc, #312]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d02:	f7fc f9ff 	bl	8001104 <HAL_GetTick>
 8004d06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d0a:	f7fc f9fb 	bl	8001104 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e086      	b.n	8004e2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d1c:	4b45      	ldr	r3, [pc, #276]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d28:	4b42      	ldr	r3, [pc, #264]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	031b      	lsls	r3, r3, #12
 8004d36:	493f      	ldr	r1, [pc, #252]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	025b      	lsls	r3, r3, #9
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	041b      	lsls	r3, r3, #16
 8004d5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d6c:	4931      	ldr	r1, [pc, #196]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d72:	4b30      	ldr	r3, [pc, #192]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	492d      	ldr	r1, [pc, #180]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d84:	4b2b      	ldr	r3, [pc, #172]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	f023 0220 	bic.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	4928      	ldr	r1, [pc, #160]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d96:	4b27      	ldr	r3, [pc, #156]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	4a26      	ldr	r2, [pc, #152]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	f023 0310 	bic.w	r3, r3, #16
 8004da0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004da2:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004da6:	4b24      	ldr	r3, [pc, #144]	@ (8004e38 <RCCEx_PLL2_Config+0x160>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	69d2      	ldr	r2, [r2, #28]
 8004dae:	00d2      	lsls	r2, r2, #3
 8004db0:	4920      	ldr	r1, [pc, #128]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004db6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	4a1e      	ldr	r2, [pc, #120]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	f043 0310 	orr.w	r3, r3, #16
 8004dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	4a19      	ldr	r2, [pc, #100]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dd4:	e00f      	b.n	8004df6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d106      	bne.n	8004dea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ddc:	4b15      	ldr	r3, [pc, #84]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	4a14      	ldr	r2, [pc, #80]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004de6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004de8:	e005      	b.n	8004df6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dea:	4b12      	ldr	r3, [pc, #72]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	4a11      	ldr	r2, [pc, #68]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004df0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004df4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004df6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e02:	f7fc f97f 	bl	8001104 <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e08:	e008      	b.n	8004e1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e0a:	f7fc f97b 	bl	8001104 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e006      	b.n	8004e2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <RCCEx_PLL2_Config+0x15c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	58024400 	.word	0x58024400
 8004e38:	ffff0007 	.word	0xffff0007

08004e3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e4a:	4b53      	ldr	r3, [pc, #332]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d101      	bne.n	8004e5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e099      	b.n	8004f8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e66:	f7fc f94d 	bl	8001104 <HAL_GetTick>
 8004e6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e6e:	f7fc f949 	bl	8001104 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e086      	b.n	8004f8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e80:	4b45      	ldr	r3, [pc, #276]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e8c:	4b42      	ldr	r3, [pc, #264]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	051b      	lsls	r3, r3, #20
 8004e9a:	493f      	ldr	r1, [pc, #252]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	025b      	lsls	r3, r3, #9
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ed0:	4931      	ldr	r1, [pc, #196]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ed6:	4b30      	ldr	r3, [pc, #192]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	492d      	ldr	r1, [pc, #180]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	4928      	ldr	r1, [pc, #160]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004efa:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	4a26      	ldr	r2, [pc, #152]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f06:	4b24      	ldr	r3, [pc, #144]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f0a:	4b24      	ldr	r3, [pc, #144]	@ (8004f9c <RCCEx_PLL3_Config+0x160>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	69d2      	ldr	r2, [r2, #28]
 8004f12:	00d2      	lsls	r2, r2, #3
 8004f14:	4920      	ldr	r1, [pc, #128]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	4a19      	ldr	r2, [pc, #100]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f38:	e00f      	b.n	8004f5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d106      	bne.n	8004f4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f40:	4b15      	ldr	r3, [pc, #84]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	4a14      	ldr	r2, [pc, #80]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f4c:	e005      	b.n	8004f5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a11      	ldr	r2, [pc, #68]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f66:	f7fc f8cd 	bl	8001104 <HAL_GetTick>
 8004f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f6c:	e008      	b.n	8004f80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f6e:	f7fc f8c9 	bl	8001104 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f80:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <RCCEx_PLL3_Config+0x15c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	ffff0007 	.word	0xffff0007

08004fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e042      	b.n	8005038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fb feb7 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2224      	movs	r2, #36	@ 0x24
 8004fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f001 fa60 	bl	80064b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fcf5 	bl	80059e0 <UART_SetConfig>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e01b      	b.n	8005038 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800500e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800501e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 fadf 	bl	80065f4 <UART_CheckIdleState>
 8005036:	4603      	mov	r3, r0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	@ 0x28
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005056:	2b20      	cmp	r3, #32
 8005058:	d17b      	bne.n	8005152 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_UART_Transmit+0x26>
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e074      	b.n	8005154 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2221      	movs	r2, #33	@ 0x21
 8005076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800507a:	f7fc f843 	bl	8001104 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005098:	d108      	bne.n	80050ac <HAL_UART_Transmit+0x6c>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	e003      	b.n	80050b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050b4:	e030      	b.n	8005118 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2200      	movs	r2, #0
 80050be:	2180      	movs	r1, #128	@ 0x80
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f001 fb41 	bl	8006748 <UART_WaitOnFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e03d      	b.n	8005154 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10b      	bne.n	80050f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	3302      	adds	r3, #2
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	e007      	b.n	8005106 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	781a      	ldrb	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1c8      	bne.n	80050b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	2140      	movs	r1, #64	@ 0x40
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f001 fb0a 	bl	8006748 <UART_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e006      	b.n	8005154 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e000      	b.n	8005154 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005152:	2302      	movs	r3, #2
  }
}
 8005154:	4618      	mov	r0, r3
 8005156:	3720      	adds	r7, #32
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	@ 0x28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005170:	2b20      	cmp	r3, #32
 8005172:	d137      	bne.n	80051e4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_UART_Receive_IT+0x24>
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e030      	b.n	80051e6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a18      	ldr	r2, [pc, #96]	@ (80051f0 <HAL_UART_Receive_IT+0x94>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d01f      	beq.n	80051d4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d018      	beq.n	80051d4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	613b      	str	r3, [r7, #16]
   return(result);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	69f9      	ldr	r1, [r7, #28]
 80051c6:	6a3a      	ldr	r2, [r7, #32]
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e6      	bne.n	80051a2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	461a      	mov	r2, r3
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f001 fb22 	bl	8006824 <UART_Start_Receive_IT>
 80051e0:	4603      	mov	r3, r0
 80051e2:	e000      	b.n	80051e6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3728      	adds	r7, #40	@ 0x28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	58000c00 	.word	0x58000c00

080051f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b0ba      	sub	sp, #232	@ 0xe8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800521a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800521e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005222:	4013      	ands	r3, r2
 8005224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d11b      	bne.n	8005268 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800524c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 8393 	beq.w	8005984 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	4798      	blx	r3
      }
      return;
 8005266:	e38d      	b.n	8005984 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8123 	beq.w	80054b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005272:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005276:	4b8d      	ldr	r3, [pc, #564]	@ (80054ac <HAL_UART_IRQHandler+0x2b8>)
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800527e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005282:	4b8b      	ldr	r3, [pc, #556]	@ (80054b0 <HAL_UART_IRQHandler+0x2bc>)
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8116 	beq.w	80054b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d011      	beq.n	80052bc <HAL_UART_IRQHandler+0xc8>
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800529c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b2:	f043 0201 	orr.w	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d011      	beq.n	80052ec <HAL_UART_IRQHandler+0xf8>
 80052c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2202      	movs	r2, #2
 80052da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e2:	f043 0204 	orr.w	r2, r3, #4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d011      	beq.n	800531c <HAL_UART_IRQHandler+0x128>
 80052f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00b      	beq.n	800531c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2204      	movs	r2, #4
 800530a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005312:	f043 0202 	orr.w	r2, r3, #2
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d017      	beq.n	8005358 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005334:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005338:	4b5c      	ldr	r3, [pc, #368]	@ (80054ac <HAL_UART_IRQHandler+0x2b8>)
 800533a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2208      	movs	r2, #8
 8005346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534e:	f043 0208 	orr.w	r2, r3, #8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800535c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <HAL_UART_IRQHandler+0x196>
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005368:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00c      	beq.n	800538a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005380:	f043 0220 	orr.w	r2, r3, #32
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 82f9 	beq.w	8005988 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539a:	f003 0320 	and.w	r3, r3, #32
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053de:	2b40      	cmp	r3, #64	@ 0x40
 80053e0:	d005      	beq.n	80053ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d054      	beq.n	8005498 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f001 fb3a 	bl	8006a68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fe:	2b40      	cmp	r3, #64	@ 0x40
 8005400:	d146      	bne.n	8005490 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005418:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800541c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800542e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005432:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800543a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d9      	bne.n	8005402 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005454:	2b00      	cmp	r3, #0
 8005456:	d017      	beq.n	8005488 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800545e:	4a15      	ldr	r2, [pc, #84]	@ (80054b4 <HAL_UART_IRQHandler+0x2c0>)
 8005460:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005468:	4618      	mov	r0, r3
 800546a:	f7fc fb09 	bl	8001a80 <HAL_DMA_Abort_IT>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d019      	beq.n	80054a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800547a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005482:	4610      	mov	r0, r2
 8005484:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005486:	e00f      	b.n	80054a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fa93 	bl	80059b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548e:	e00b      	b.n	80054a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fa8f 	bl	80059b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005496:	e007      	b.n	80054a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fa8b 	bl	80059b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80054a6:	e26f      	b.n	8005988 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	bf00      	nop
    return;
 80054aa:	e26d      	b.n	8005988 <HAL_UART_IRQHandler+0x794>
 80054ac:	10000001 	.word	0x10000001
 80054b0:	04000120 	.word	0x04000120
 80054b4:	08006b35 	.word	0x08006b35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	f040 8203 	bne.w	80058c8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 81fc 	beq.w	80058c8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 81f5 	beq.w	80058c8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2210      	movs	r2, #16
 80054e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f0:	2b40      	cmp	r3, #64	@ 0x40
 80054f2:	f040 816d 	bne.w	80057d0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4aa4      	ldr	r2, [pc, #656]	@ (8005790 <HAL_UART_IRQHandler+0x59c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d068      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4aa1      	ldr	r2, [pc, #644]	@ (8005794 <HAL_UART_IRQHandler+0x5a0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d061      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a9f      	ldr	r2, [pc, #636]	@ (8005798 <HAL_UART_IRQHandler+0x5a4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d05a      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a9c      	ldr	r2, [pc, #624]	@ (800579c <HAL_UART_IRQHandler+0x5a8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d053      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a9a      	ldr	r2, [pc, #616]	@ (80057a0 <HAL_UART_IRQHandler+0x5ac>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d04c      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a97      	ldr	r2, [pc, #604]	@ (80057a4 <HAL_UART_IRQHandler+0x5b0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d045      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a95      	ldr	r2, [pc, #596]	@ (80057a8 <HAL_UART_IRQHandler+0x5b4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d03e      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a92      	ldr	r2, [pc, #584]	@ (80057ac <HAL_UART_IRQHandler+0x5b8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d037      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a90      	ldr	r2, [pc, #576]	@ (80057b0 <HAL_UART_IRQHandler+0x5bc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d030      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a8d      	ldr	r2, [pc, #564]	@ (80057b4 <HAL_UART_IRQHandler+0x5c0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d029      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a8b      	ldr	r2, [pc, #556]	@ (80057b8 <HAL_UART_IRQHandler+0x5c4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d022      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a88      	ldr	r2, [pc, #544]	@ (80057bc <HAL_UART_IRQHandler+0x5c8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01b      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a86      	ldr	r2, [pc, #536]	@ (80057c0 <HAL_UART_IRQHandler+0x5cc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d014      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a83      	ldr	r2, [pc, #524]	@ (80057c4 <HAL_UART_IRQHandler+0x5d0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00d      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a81      	ldr	r2, [pc, #516]	@ (80057c8 <HAL_UART_IRQHandler+0x5d4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d006      	beq.n	80055d6 <HAL_UART_IRQHandler+0x3e2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a7e      	ldr	r2, [pc, #504]	@ (80057cc <HAL_UART_IRQHandler+0x5d8>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d106      	bne.n	80055e4 <HAL_UART_IRQHandler+0x3f0>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	e005      	b.n	80055f0 <HAL_UART_IRQHandler+0x3fc>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 80ad 	beq.w	8005758 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005608:	429a      	cmp	r2, r3
 800560a:	f080 80a5 	bcs.w	8005758 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005614:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005624:	f000 8087 	beq.w	8005736 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800563c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005644:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005652:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005656:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800565e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800566a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1da      	bne.n	8005628 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3308      	adds	r3, #8
 8005692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005696:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800569a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800569e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e1      	bne.n	8005672 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3308      	adds	r3, #8
 80056ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e3      	bne.n	80056ae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005704:	f023 0310 	bic.w	r3, r3, #16
 8005708:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005716:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005718:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800571c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e4      	bne.n	80056f4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005730:	4618      	mov	r0, r3
 8005732:	f7fb fe87 	bl	8001444 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005748:	b29b      	uxth	r3, r3
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	b29b      	uxth	r3, r3
 800574e:	4619      	mov	r1, r3
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f939 	bl	80059c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005756:	e119      	b.n	800598c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800575e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005762:	429a      	cmp	r2, r3
 8005764:	f040 8112 	bne.w	800598c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005774:	f040 810a 	bne.w	800598c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f91e 	bl	80059c8 <HAL_UARTEx_RxEventCallback>
      return;
 800578c:	e0fe      	b.n	800598c <HAL_UART_IRQHandler+0x798>
 800578e:	bf00      	nop
 8005790:	40020010 	.word	0x40020010
 8005794:	40020028 	.word	0x40020028
 8005798:	40020040 	.word	0x40020040
 800579c:	40020058 	.word	0x40020058
 80057a0:	40020070 	.word	0x40020070
 80057a4:	40020088 	.word	0x40020088
 80057a8:	400200a0 	.word	0x400200a0
 80057ac:	400200b8 	.word	0x400200b8
 80057b0:	40020410 	.word	0x40020410
 80057b4:	40020428 	.word	0x40020428
 80057b8:	40020440 	.word	0x40020440
 80057bc:	40020458 	.word	0x40020458
 80057c0:	40020470 	.word	0x40020470
 80057c4:	40020488 	.word	0x40020488
 80057c8:	400204a0 	.word	0x400204a0
 80057cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80cf 	beq.w	8005990 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80057f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80ca 	beq.w	8005990 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800581e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005820:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800582c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e4      	bne.n	80057fc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3308      	adds	r3, #8
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	623b      	str	r3, [r7, #32]
   return(result);
 8005842:	6a3a      	ldr	r2, [r7, #32]
 8005844:	4b55      	ldr	r3, [pc, #340]	@ (800599c <HAL_UART_IRQHandler+0x7a8>)
 8005846:	4013      	ands	r3, r2
 8005848:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005856:	633a      	str	r2, [r7, #48]	@ 0x30
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800585c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e3      	bne.n	8005832 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	60fb      	str	r3, [r7, #12]
   return(result);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0310 	bic.w	r3, r3, #16
 8005892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	69b9      	ldr	r1, [r7, #24]
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	617b      	str	r3, [r7, #20]
   return(result);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e4      	bne.n	800587e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f881 	bl	80059c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058c6:	e063      	b.n	8005990 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00e      	beq.n	80058f2 <HAL_UART_IRQHandler+0x6fe>
 80058d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fe80 	bl	80075f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058f0:	e051      	b.n	8005996 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d014      	beq.n	8005928 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d105      	bne.n	8005916 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800590a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800591a:	2b00      	cmp	r3, #0
 800591c:	d03a      	beq.n	8005994 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
    }
    return;
 8005926:	e035      	b.n	8005994 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <HAL_UART_IRQHandler+0x754>
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 f909 	bl	8006b58 <UART_EndTransmit_IT>
    return;
 8005946:	e026      	b.n	8005996 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <HAL_UART_IRQHandler+0x774>
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005958:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 fe59 	bl	8007618 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005966:	e016      	b.n	8005996 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d010      	beq.n	8005996 <HAL_UART_IRQHandler+0x7a2>
 8005974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005978:	2b00      	cmp	r3, #0
 800597a:	da0c      	bge.n	8005996 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 fe41 	bl	8007604 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005982:	e008      	b.n	8005996 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005984:	bf00      	nop
 8005986:	e006      	b.n	8005996 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005988:	bf00      	nop
 800598a:	e004      	b.n	8005996 <HAL_UART_IRQHandler+0x7a2>
      return;
 800598c:	bf00      	nop
 800598e:	e002      	b.n	8005996 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005994:	bf00      	nop
  }
}
 8005996:	37e8      	adds	r7, #232	@ 0xe8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	effffffe 	.word	0xeffffffe

080059a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e4:	b092      	sub	sp, #72	@ 0x48
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	431a      	orrs	r2, r3
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4bbe      	ldr	r3, [pc, #760]	@ (8005d08 <UART_SetConfig+0x328>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	6812      	ldr	r2, [r2, #0]
 8005a16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4ab3      	ldr	r2, [pc, #716]	@ (8005d0c <UART_SetConfig+0x32c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	4baf      	ldr	r3, [pc, #700]	@ (8005d10 <UART_SetConfig+0x330>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a66:	f023 010f 	bic.w	r1, r3, #15
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4aa6      	ldr	r2, [pc, #664]	@ (8005d14 <UART_SetConfig+0x334>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d177      	bne.n	8005b70 <UART_SetConfig+0x190>
 8005a80:	4ba5      	ldr	r3, [pc, #660]	@ (8005d18 <UART_SetConfig+0x338>)
 8005a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a88:	2b28      	cmp	r3, #40	@ 0x28
 8005a8a:	d86d      	bhi.n	8005b68 <UART_SetConfig+0x188>
 8005a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a94 <UART_SetConfig+0xb4>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005b39 	.word	0x08005b39
 8005a98:	08005b69 	.word	0x08005b69
 8005a9c:	08005b69 	.word	0x08005b69
 8005aa0:	08005b69 	.word	0x08005b69
 8005aa4:	08005b69 	.word	0x08005b69
 8005aa8:	08005b69 	.word	0x08005b69
 8005aac:	08005b69 	.word	0x08005b69
 8005ab0:	08005b69 	.word	0x08005b69
 8005ab4:	08005b41 	.word	0x08005b41
 8005ab8:	08005b69 	.word	0x08005b69
 8005abc:	08005b69 	.word	0x08005b69
 8005ac0:	08005b69 	.word	0x08005b69
 8005ac4:	08005b69 	.word	0x08005b69
 8005ac8:	08005b69 	.word	0x08005b69
 8005acc:	08005b69 	.word	0x08005b69
 8005ad0:	08005b69 	.word	0x08005b69
 8005ad4:	08005b49 	.word	0x08005b49
 8005ad8:	08005b69 	.word	0x08005b69
 8005adc:	08005b69 	.word	0x08005b69
 8005ae0:	08005b69 	.word	0x08005b69
 8005ae4:	08005b69 	.word	0x08005b69
 8005ae8:	08005b69 	.word	0x08005b69
 8005aec:	08005b69 	.word	0x08005b69
 8005af0:	08005b69 	.word	0x08005b69
 8005af4:	08005b51 	.word	0x08005b51
 8005af8:	08005b69 	.word	0x08005b69
 8005afc:	08005b69 	.word	0x08005b69
 8005b00:	08005b69 	.word	0x08005b69
 8005b04:	08005b69 	.word	0x08005b69
 8005b08:	08005b69 	.word	0x08005b69
 8005b0c:	08005b69 	.word	0x08005b69
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b59 	.word	0x08005b59
 8005b18:	08005b69 	.word	0x08005b69
 8005b1c:	08005b69 	.word	0x08005b69
 8005b20:	08005b69 	.word	0x08005b69
 8005b24:	08005b69 	.word	0x08005b69
 8005b28:	08005b69 	.word	0x08005b69
 8005b2c:	08005b69 	.word	0x08005b69
 8005b30:	08005b69 	.word	0x08005b69
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3e:	e222      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005b40:	2304      	movs	r3, #4
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e21e      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e21a      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b56:	e216      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005b58:	2320      	movs	r3, #32
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e212      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005b60:	2340      	movs	r3, #64	@ 0x40
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b66:	e20e      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005b68:	2380      	movs	r3, #128	@ 0x80
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6e:	e20a      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a69      	ldr	r2, [pc, #420]	@ (8005d1c <UART_SetConfig+0x33c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d130      	bne.n	8005bdc <UART_SetConfig+0x1fc>
 8005b7a:	4b67      	ldr	r3, [pc, #412]	@ (8005d18 <UART_SetConfig+0x338>)
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	d826      	bhi.n	8005bd4 <UART_SetConfig+0x1f4>
 8005b86:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <UART_SetConfig+0x1ac>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005ba5 	.word	0x08005ba5
 8005b90:	08005bad 	.word	0x08005bad
 8005b94:	08005bb5 	.word	0x08005bb5
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bc5 	.word	0x08005bc5
 8005ba0:	08005bcd 	.word	0x08005bcd
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005baa:	e1ec      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005bac:	2304      	movs	r3, #4
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e1e8      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e1e4      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e1e0      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e1dc      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005bcc:	2340      	movs	r3, #64	@ 0x40
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e1d8      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005bd4:	2380      	movs	r3, #128	@ 0x80
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e1d4      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a4f      	ldr	r2, [pc, #316]	@ (8005d20 <UART_SetConfig+0x340>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d130      	bne.n	8005c48 <UART_SetConfig+0x268>
 8005be6:	4b4c      	ldr	r3, [pc, #304]	@ (8005d18 <UART_SetConfig+0x338>)
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	d826      	bhi.n	8005c40 <UART_SetConfig+0x260>
 8005bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <UART_SetConfig+0x218>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c11 	.word	0x08005c11
 8005bfc:	08005c19 	.word	0x08005c19
 8005c00:	08005c21 	.word	0x08005c21
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c39 	.word	0x08005c39
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c16:	e1b6      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1e:	e1b2      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c20:	2308      	movs	r3, #8
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c26:	e1ae      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2e:	e1aa      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c30:	2320      	movs	r3, #32
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c36:	e1a6      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c38:	2340      	movs	r3, #64	@ 0x40
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e1a2      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c40:	2380      	movs	r3, #128	@ 0x80
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e19e      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a35      	ldr	r2, [pc, #212]	@ (8005d24 <UART_SetConfig+0x344>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d130      	bne.n	8005cb4 <UART_SetConfig+0x2d4>
 8005c52:	4b31      	ldr	r3, [pc, #196]	@ (8005d18 <UART_SetConfig+0x338>)
 8005c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	d826      	bhi.n	8005cac <UART_SetConfig+0x2cc>
 8005c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <UART_SetConfig+0x284>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c7d 	.word	0x08005c7d
 8005c68:	08005c85 	.word	0x08005c85
 8005c6c:	08005c8d 	.word	0x08005c8d
 8005c70:	08005c95 	.word	0x08005c95
 8005c74:	08005c9d 	.word	0x08005c9d
 8005c78:	08005ca5 	.word	0x08005ca5
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c82:	e180      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c84:	2304      	movs	r3, #4
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8a:	e17c      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c92:	e178      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c94:	2310      	movs	r3, #16
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e174      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005c9c:	2320      	movs	r3, #32
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e170      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005ca4:	2340      	movs	r3, #64	@ 0x40
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e16c      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005cac:	2380      	movs	r3, #128	@ 0x80
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e168      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d28 <UART_SetConfig+0x348>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d142      	bne.n	8005d44 <UART_SetConfig+0x364>
 8005cbe:	4b16      	ldr	r3, [pc, #88]	@ (8005d18 <UART_SetConfig+0x338>)
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d838      	bhi.n	8005d3c <UART_SetConfig+0x35c>
 8005cca:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <UART_SetConfig+0x2f0>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005ce9 	.word	0x08005ce9
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	08005cf9 	.word	0x08005cf9
 8005cdc:	08005d01 	.word	0x08005d01
 8005ce0:	08005d2d 	.word	0x08005d2d
 8005ce4:	08005d35 	.word	0x08005d35
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e14a      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e146      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e142      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005d00:	2310      	movs	r3, #16
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e13e      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005d08:	cfff69f3 	.word	0xcfff69f3
 8005d0c:	58000c00 	.word	0x58000c00
 8005d10:	11fff4ff 	.word	0x11fff4ff
 8005d14:	40011000 	.word	0x40011000
 8005d18:	58024400 	.word	0x58024400
 8005d1c:	40004400 	.word	0x40004400
 8005d20:	40004800 	.word	0x40004800
 8005d24:	40004c00 	.word	0x40004c00
 8005d28:	40005000 	.word	0x40005000
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e128      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005d34:	2340      	movs	r3, #64	@ 0x40
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e124      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005d3c:	2380      	movs	r3, #128	@ 0x80
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e120      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4acb      	ldr	r2, [pc, #812]	@ (8006078 <UART_SetConfig+0x698>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d176      	bne.n	8005e3c <UART_SetConfig+0x45c>
 8005d4e:	4bcb      	ldr	r3, [pc, #812]	@ (800607c <UART_SetConfig+0x69c>)
 8005d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d56:	2b28      	cmp	r3, #40	@ 0x28
 8005d58:	d86c      	bhi.n	8005e34 <UART_SetConfig+0x454>
 8005d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d60 <UART_SetConfig+0x380>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005e05 	.word	0x08005e05
 8005d64:	08005e35 	.word	0x08005e35
 8005d68:	08005e35 	.word	0x08005e35
 8005d6c:	08005e35 	.word	0x08005e35
 8005d70:	08005e35 	.word	0x08005e35
 8005d74:	08005e35 	.word	0x08005e35
 8005d78:	08005e35 	.word	0x08005e35
 8005d7c:	08005e35 	.word	0x08005e35
 8005d80:	08005e0d 	.word	0x08005e0d
 8005d84:	08005e35 	.word	0x08005e35
 8005d88:	08005e35 	.word	0x08005e35
 8005d8c:	08005e35 	.word	0x08005e35
 8005d90:	08005e35 	.word	0x08005e35
 8005d94:	08005e35 	.word	0x08005e35
 8005d98:	08005e35 	.word	0x08005e35
 8005d9c:	08005e35 	.word	0x08005e35
 8005da0:	08005e15 	.word	0x08005e15
 8005da4:	08005e35 	.word	0x08005e35
 8005da8:	08005e35 	.word	0x08005e35
 8005dac:	08005e35 	.word	0x08005e35
 8005db0:	08005e35 	.word	0x08005e35
 8005db4:	08005e35 	.word	0x08005e35
 8005db8:	08005e35 	.word	0x08005e35
 8005dbc:	08005e35 	.word	0x08005e35
 8005dc0:	08005e1d 	.word	0x08005e1d
 8005dc4:	08005e35 	.word	0x08005e35
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005e35 	.word	0x08005e35
 8005dd0:	08005e35 	.word	0x08005e35
 8005dd4:	08005e35 	.word	0x08005e35
 8005dd8:	08005e35 	.word	0x08005e35
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e25 	.word	0x08005e25
 8005de4:	08005e35 	.word	0x08005e35
 8005de8:	08005e35 	.word	0x08005e35
 8005dec:	08005e35 	.word	0x08005e35
 8005df0:	08005e35 	.word	0x08005e35
 8005df4:	08005e35 	.word	0x08005e35
 8005df8:	08005e35 	.word	0x08005e35
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e2d 	.word	0x08005e2d
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e0bc      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e0b8      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e0b4      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e22:	e0b0      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e24:	2320      	movs	r3, #32
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e0ac      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e2c:	2340      	movs	r3, #64	@ 0x40
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e0a8      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e34:	2380      	movs	r3, #128	@ 0x80
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e0a4      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a8f      	ldr	r2, [pc, #572]	@ (8006080 <UART_SetConfig+0x6a0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d130      	bne.n	8005ea8 <UART_SetConfig+0x4c8>
 8005e46:	4b8d      	ldr	r3, [pc, #564]	@ (800607c <UART_SetConfig+0x69c>)
 8005e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d826      	bhi.n	8005ea0 <UART_SetConfig+0x4c0>
 8005e52:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <UART_SetConfig+0x478>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e71 	.word	0x08005e71
 8005e5c:	08005e79 	.word	0x08005e79
 8005e60:	08005e81 	.word	0x08005e81
 8005e64:	08005e89 	.word	0x08005e89
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e99 	.word	0x08005e99
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e086      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e082      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e80:	2308      	movs	r3, #8
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e07e      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e07a      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e90:	2320      	movs	r3, #32
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e076      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005e98:	2340      	movs	r3, #64	@ 0x40
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e072      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e06e      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a75      	ldr	r2, [pc, #468]	@ (8006084 <UART_SetConfig+0x6a4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d130      	bne.n	8005f14 <UART_SetConfig+0x534>
 8005eb2:	4b72      	ldr	r3, [pc, #456]	@ (800607c <UART_SetConfig+0x69c>)
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d826      	bhi.n	8005f0c <UART_SetConfig+0x52c>
 8005ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <UART_SetConfig+0x4e4>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005edd 	.word	0x08005edd
 8005ec8:	08005ee5 	.word	0x08005ee5
 8005ecc:	08005eed 	.word	0x08005eed
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005efd 	.word	0x08005efd
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	2300      	movs	r3, #0
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee2:	e050      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eea:	e04c      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005eec:	2308      	movs	r3, #8
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef2:	e048      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e044      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005efc:	2320      	movs	r3, #32
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f02:	e040      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f04:	2340      	movs	r3, #64	@ 0x40
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e03c      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f0c:	2380      	movs	r3, #128	@ 0x80
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e038      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a5b      	ldr	r2, [pc, #364]	@ (8006088 <UART_SetConfig+0x6a8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d130      	bne.n	8005f80 <UART_SetConfig+0x5a0>
 8005f1e:	4b57      	ldr	r3, [pc, #348]	@ (800607c <UART_SetConfig+0x69c>)
 8005f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d826      	bhi.n	8005f78 <UART_SetConfig+0x598>
 8005f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f30 <UART_SetConfig+0x550>)
 8005f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f30:	08005f49 	.word	0x08005f49
 8005f34:	08005f51 	.word	0x08005f51
 8005f38:	08005f59 	.word	0x08005f59
 8005f3c:	08005f61 	.word	0x08005f61
 8005f40:	08005f69 	.word	0x08005f69
 8005f44:	08005f71 	.word	0x08005f71
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4e:	e01a      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f56:	e016      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5e:	e012      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f66:	e00e      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f68:	2320      	movs	r3, #32
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e00a      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f70:	2340      	movs	r3, #64	@ 0x40
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e006      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f78:	2380      	movs	r3, #128	@ 0x80
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e002      	b.n	8005f86 <UART_SetConfig+0x5a6>
 8005f80:	2380      	movs	r3, #128	@ 0x80
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8006088 <UART_SetConfig+0x6a8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	f040 80f8 	bne.w	8006182 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	dc46      	bgt.n	8006028 <UART_SetConfig+0x648>
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	f2c0 8082 	blt.w	80060a4 <UART_SetConfig+0x6c4>
 8005fa0:	3b02      	subs	r3, #2
 8005fa2:	2b1e      	cmp	r3, #30
 8005fa4:	d87e      	bhi.n	80060a4 <UART_SetConfig+0x6c4>
 8005fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fac <UART_SetConfig+0x5cc>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	0800602f 	.word	0x0800602f
 8005fb0:	080060a5 	.word	0x080060a5
 8005fb4:	08006037 	.word	0x08006037
 8005fb8:	080060a5 	.word	0x080060a5
 8005fbc:	080060a5 	.word	0x080060a5
 8005fc0:	080060a5 	.word	0x080060a5
 8005fc4:	08006047 	.word	0x08006047
 8005fc8:	080060a5 	.word	0x080060a5
 8005fcc:	080060a5 	.word	0x080060a5
 8005fd0:	080060a5 	.word	0x080060a5
 8005fd4:	080060a5 	.word	0x080060a5
 8005fd8:	080060a5 	.word	0x080060a5
 8005fdc:	080060a5 	.word	0x080060a5
 8005fe0:	080060a5 	.word	0x080060a5
 8005fe4:	08006057 	.word	0x08006057
 8005fe8:	080060a5 	.word	0x080060a5
 8005fec:	080060a5 	.word	0x080060a5
 8005ff0:	080060a5 	.word	0x080060a5
 8005ff4:	080060a5 	.word	0x080060a5
 8005ff8:	080060a5 	.word	0x080060a5
 8005ffc:	080060a5 	.word	0x080060a5
 8006000:	080060a5 	.word	0x080060a5
 8006004:	080060a5 	.word	0x080060a5
 8006008:	080060a5 	.word	0x080060a5
 800600c:	080060a5 	.word	0x080060a5
 8006010:	080060a5 	.word	0x080060a5
 8006014:	080060a5 	.word	0x080060a5
 8006018:	080060a5 	.word	0x080060a5
 800601c:	080060a5 	.word	0x080060a5
 8006020:	080060a5 	.word	0x080060a5
 8006024:	08006097 	.word	0x08006097
 8006028:	2b40      	cmp	r3, #64	@ 0x40
 800602a:	d037      	beq.n	800609c <UART_SetConfig+0x6bc>
 800602c:	e03a      	b.n	80060a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800602e:	f7fe fb95 	bl	800475c <HAL_RCCEx_GetD3PCLK1Freq>
 8006032:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006034:	e03c      	b.n	80060b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe fba4 	bl	8004788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006044:	e034      	b.n	80060b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006046:	f107 0318 	add.w	r3, r7, #24
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fcf0 	bl	8004a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006054:	e02c      	b.n	80060b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006056:	4b09      	ldr	r3, [pc, #36]	@ (800607c <UART_SetConfig+0x69c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d016      	beq.n	8006090 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006062:	4b06      	ldr	r3, [pc, #24]	@ (800607c <UART_SetConfig+0x69c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	08db      	lsrs	r3, r3, #3
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	4a07      	ldr	r2, [pc, #28]	@ (800608c <UART_SetConfig+0x6ac>)
 800606e:	fa22 f303 	lsr.w	r3, r2, r3
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006074:	e01c      	b.n	80060b0 <UART_SetConfig+0x6d0>
 8006076:	bf00      	nop
 8006078:	40011400 	.word	0x40011400
 800607c:	58024400 	.word	0x58024400
 8006080:	40007800 	.word	0x40007800
 8006084:	40007c00 	.word	0x40007c00
 8006088:	58000c00 	.word	0x58000c00
 800608c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006090:	4b9d      	ldr	r3, [pc, #628]	@ (8006308 <UART_SetConfig+0x928>)
 8006092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006094:	e00c      	b.n	80060b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006096:	4b9d      	ldr	r3, [pc, #628]	@ (800630c <UART_SetConfig+0x92c>)
 8006098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800609a:	e009      	b.n	80060b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060a2:	e005      	b.n	80060b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80060ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 81de 	beq.w	8006474 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	4a94      	ldr	r2, [pc, #592]	@ (8006310 <UART_SetConfig+0x930>)
 80060be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	4613      	mov	r3, r2
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	4413      	add	r3, r2
 80060d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d8:	429a      	cmp	r2, r3
 80060da:	d305      	bcc.n	80060e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d903      	bls.n	80060f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060ee:	e1c1      	b.n	8006474 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f2:	2200      	movs	r2, #0
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	60fa      	str	r2, [r7, #12]
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	4a84      	ldr	r2, [pc, #528]	@ (8006310 <UART_SetConfig+0x930>)
 80060fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006102:	b29b      	uxth	r3, r3
 8006104:	2200      	movs	r2, #0
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800610e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006112:	f7fa f93d 	bl	8000390 <__aeabi_uldivmod>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4610      	mov	r0, r2
 800611c:	4619      	mov	r1, r3
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	020b      	lsls	r3, r1, #8
 8006128:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800612c:	0202      	lsls	r2, r0, #8
 800612e:	6979      	ldr	r1, [r7, #20]
 8006130:	6849      	ldr	r1, [r1, #4]
 8006132:	0849      	lsrs	r1, r1, #1
 8006134:	2000      	movs	r0, #0
 8006136:	460c      	mov	r4, r1
 8006138:	4605      	mov	r5, r0
 800613a:	eb12 0804 	adds.w	r8, r2, r4
 800613e:	eb43 0905 	adc.w	r9, r3, r5
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	469a      	mov	sl, r3
 800614a:	4693      	mov	fp, r2
 800614c:	4652      	mov	r2, sl
 800614e:	465b      	mov	r3, fp
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	f7fa f91c 	bl	8000390 <__aeabi_uldivmod>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4613      	mov	r3, r2
 800615e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006166:	d308      	bcc.n	800617a <UART_SetConfig+0x79a>
 8006168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800616e:	d204      	bcs.n	800617a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006176:	60da      	str	r2, [r3, #12]
 8006178:	e17c      	b.n	8006474 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006180:	e178      	b.n	8006474 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800618a:	f040 80c5 	bne.w	8006318 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800618e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006192:	2b20      	cmp	r3, #32
 8006194:	dc48      	bgt.n	8006228 <UART_SetConfig+0x848>
 8006196:	2b00      	cmp	r3, #0
 8006198:	db7b      	blt.n	8006292 <UART_SetConfig+0x8b2>
 800619a:	2b20      	cmp	r3, #32
 800619c:	d879      	bhi.n	8006292 <UART_SetConfig+0x8b2>
 800619e:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <UART_SetConfig+0x7c4>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	0800622f 	.word	0x0800622f
 80061a8:	08006237 	.word	0x08006237
 80061ac:	08006293 	.word	0x08006293
 80061b0:	08006293 	.word	0x08006293
 80061b4:	0800623f 	.word	0x0800623f
 80061b8:	08006293 	.word	0x08006293
 80061bc:	08006293 	.word	0x08006293
 80061c0:	08006293 	.word	0x08006293
 80061c4:	0800624f 	.word	0x0800624f
 80061c8:	08006293 	.word	0x08006293
 80061cc:	08006293 	.word	0x08006293
 80061d0:	08006293 	.word	0x08006293
 80061d4:	08006293 	.word	0x08006293
 80061d8:	08006293 	.word	0x08006293
 80061dc:	08006293 	.word	0x08006293
 80061e0:	08006293 	.word	0x08006293
 80061e4:	0800625f 	.word	0x0800625f
 80061e8:	08006293 	.word	0x08006293
 80061ec:	08006293 	.word	0x08006293
 80061f0:	08006293 	.word	0x08006293
 80061f4:	08006293 	.word	0x08006293
 80061f8:	08006293 	.word	0x08006293
 80061fc:	08006293 	.word	0x08006293
 8006200:	08006293 	.word	0x08006293
 8006204:	08006293 	.word	0x08006293
 8006208:	08006293 	.word	0x08006293
 800620c:	08006293 	.word	0x08006293
 8006210:	08006293 	.word	0x08006293
 8006214:	08006293 	.word	0x08006293
 8006218:	08006293 	.word	0x08006293
 800621c:	08006293 	.word	0x08006293
 8006220:	08006293 	.word	0x08006293
 8006224:	08006285 	.word	0x08006285
 8006228:	2b40      	cmp	r3, #64	@ 0x40
 800622a:	d02e      	beq.n	800628a <UART_SetConfig+0x8aa>
 800622c:	e031      	b.n	8006292 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800622e:	f7fd f85f 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 8006232:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006234:	e033      	b.n	800629e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006236:	f7fd f871 	bl	800331c <HAL_RCC_GetPCLK2Freq>
 800623a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800623c:	e02f      	b.n	800629e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800623e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe faa0 	bl	8004788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800624c:	e027      	b.n	800629e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800624e:	f107 0318 	add.w	r3, r7, #24
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fbec 	bl	8004a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800625c:	e01f      	b.n	800629e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800625e:	4b2d      	ldr	r3, [pc, #180]	@ (8006314 <UART_SetConfig+0x934>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800626a:	4b2a      	ldr	r3, [pc, #168]	@ (8006314 <UART_SetConfig+0x934>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	08db      	lsrs	r3, r3, #3
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	4a24      	ldr	r2, [pc, #144]	@ (8006308 <UART_SetConfig+0x928>)
 8006276:	fa22 f303 	lsr.w	r3, r2, r3
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800627c:	e00f      	b.n	800629e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800627e:	4b22      	ldr	r3, [pc, #136]	@ (8006308 <UART_SetConfig+0x928>)
 8006280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006282:	e00c      	b.n	800629e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006284:	4b21      	ldr	r3, [pc, #132]	@ (800630c <UART_SetConfig+0x92c>)
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006288:	e009      	b.n	800629e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800628a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006290:	e005      	b.n	800629e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800629c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800629e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80e7 	beq.w	8006474 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062aa:	4a19      	ldr	r2, [pc, #100]	@ (8006310 <UART_SetConfig+0x930>)
 80062ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b0:	461a      	mov	r2, r3
 80062b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062b8:	005a      	lsls	r2, r3, #1
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	441a      	add	r2, r3
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	2b0f      	cmp	r3, #15
 80062d0:	d916      	bls.n	8006300 <UART_SetConfig+0x920>
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062d8:	d212      	bcs.n	8006300 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f023 030f 	bic.w	r3, r3, #15
 80062e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062f2:	4313      	orrs	r3, r2
 80062f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80062fc:	60da      	str	r2, [r3, #12]
 80062fe:	e0b9      	b.n	8006474 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006306:	e0b5      	b.n	8006474 <UART_SetConfig+0xa94>
 8006308:	03d09000 	.word	0x03d09000
 800630c:	003d0900 	.word	0x003d0900
 8006310:	08008bb8 	.word	0x08008bb8
 8006314:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006318:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800631c:	2b20      	cmp	r3, #32
 800631e:	dc49      	bgt.n	80063b4 <UART_SetConfig+0x9d4>
 8006320:	2b00      	cmp	r3, #0
 8006322:	db7c      	blt.n	800641e <UART_SetConfig+0xa3e>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d87a      	bhi.n	800641e <UART_SetConfig+0xa3e>
 8006328:	a201      	add	r2, pc, #4	@ (adr r2, 8006330 <UART_SetConfig+0x950>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	080063bb 	.word	0x080063bb
 8006334:	080063c3 	.word	0x080063c3
 8006338:	0800641f 	.word	0x0800641f
 800633c:	0800641f 	.word	0x0800641f
 8006340:	080063cb 	.word	0x080063cb
 8006344:	0800641f 	.word	0x0800641f
 8006348:	0800641f 	.word	0x0800641f
 800634c:	0800641f 	.word	0x0800641f
 8006350:	080063db 	.word	0x080063db
 8006354:	0800641f 	.word	0x0800641f
 8006358:	0800641f 	.word	0x0800641f
 800635c:	0800641f 	.word	0x0800641f
 8006360:	0800641f 	.word	0x0800641f
 8006364:	0800641f 	.word	0x0800641f
 8006368:	0800641f 	.word	0x0800641f
 800636c:	0800641f 	.word	0x0800641f
 8006370:	080063eb 	.word	0x080063eb
 8006374:	0800641f 	.word	0x0800641f
 8006378:	0800641f 	.word	0x0800641f
 800637c:	0800641f 	.word	0x0800641f
 8006380:	0800641f 	.word	0x0800641f
 8006384:	0800641f 	.word	0x0800641f
 8006388:	0800641f 	.word	0x0800641f
 800638c:	0800641f 	.word	0x0800641f
 8006390:	0800641f 	.word	0x0800641f
 8006394:	0800641f 	.word	0x0800641f
 8006398:	0800641f 	.word	0x0800641f
 800639c:	0800641f 	.word	0x0800641f
 80063a0:	0800641f 	.word	0x0800641f
 80063a4:	0800641f 	.word	0x0800641f
 80063a8:	0800641f 	.word	0x0800641f
 80063ac:	0800641f 	.word	0x0800641f
 80063b0:	08006411 	.word	0x08006411
 80063b4:	2b40      	cmp	r3, #64	@ 0x40
 80063b6:	d02e      	beq.n	8006416 <UART_SetConfig+0xa36>
 80063b8:	e031      	b.n	800641e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ba:	f7fc ff99 	bl	80032f0 <HAL_RCC_GetPCLK1Freq>
 80063be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063c0:	e033      	b.n	800642a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c2:	f7fc ffab 	bl	800331c <HAL_RCC_GetPCLK2Freq>
 80063c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063c8:	e02f      	b.n	800642a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fe f9da 	bl	8004788 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063d8:	e027      	b.n	800642a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063da:	f107 0318 	add.w	r3, r7, #24
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fb26 	bl	8004a30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e8:	e01f      	b.n	800642a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ea:	4b2d      	ldr	r3, [pc, #180]	@ (80064a0 <UART_SetConfig+0xac0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063f6:	4b2a      	ldr	r3, [pc, #168]	@ (80064a0 <UART_SetConfig+0xac0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	08db      	lsrs	r3, r3, #3
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	4a28      	ldr	r2, [pc, #160]	@ (80064a4 <UART_SetConfig+0xac4>)
 8006402:	fa22 f303 	lsr.w	r3, r2, r3
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006408:	e00f      	b.n	800642a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800640a:	4b26      	ldr	r3, [pc, #152]	@ (80064a4 <UART_SetConfig+0xac4>)
 800640c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800640e:	e00c      	b.n	800642a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006410:	4b25      	ldr	r3, [pc, #148]	@ (80064a8 <UART_SetConfig+0xac8>)
 8006412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006414:	e009      	b.n	800642a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800641a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800641c:	e005      	b.n	800642a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006428:	bf00      	nop
    }

    if (pclk != 0U)
 800642a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d021      	beq.n	8006474 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006434:	4a1d      	ldr	r2, [pc, #116]	@ (80064ac <UART_SetConfig+0xacc>)
 8006436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800643a:	461a      	mov	r2, r3
 800643c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800643e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	441a      	add	r2, r3
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	2b0f      	cmp	r3, #15
 8006458:	d909      	bls.n	800646e <UART_SetConfig+0xa8e>
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006460:	d205      	bcs.n	800646e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	b29a      	uxth	r2, r3
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60da      	str	r2, [r3, #12]
 800646c:	e002      	b.n	8006474 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2201      	movs	r2, #1
 8006478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2201      	movs	r2, #1
 8006480:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2200      	movs	r2, #0
 800648e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006490:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006494:	4618      	mov	r0, r3
 8006496:	3748      	adds	r7, #72	@ 0x48
 8006498:	46bd      	mov	sp, r7
 800649a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800649e:	bf00      	nop
 80064a0:	58024400 	.word	0x58024400
 80064a4:	03d09000 	.word	0x03d09000
 80064a8:	003d0900 	.word	0x003d0900
 80064ac:	08008bb8 	.word	0x08008bb8

080064b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01a      	beq.n	80065c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ae:	d10a      	bne.n	80065c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b098      	sub	sp, #96	@ 0x60
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006604:	f7fa fd7e 	bl	8001104 <HAL_GetTick>
 8006608:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b08      	cmp	r3, #8
 8006616:	d12f      	bne.n	8006678 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f88e 	bl	8006748 <UART_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d022      	beq.n	8006678 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	e853 3f00 	ldrex	r3, [r3]
 800663e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006646:	653b      	str	r3, [r7, #80]	@ 0x50
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006650:	647b      	str	r3, [r7, #68]	@ 0x44
 8006652:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800665e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e6      	bne.n	8006632 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e063      	b.n	8006740 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b04      	cmp	r3, #4
 8006684:	d149      	bne.n	800671a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006686:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668e:	2200      	movs	r2, #0
 8006690:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f857 	bl	8006748 <UART_WaitOnFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d03c      	beq.n	800671a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	623b      	str	r3, [r7, #32]
   return(result);
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066be:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e6      	bne.n	80066a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3308      	adds	r3, #8
 80066d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066f2:	61fa      	str	r2, [r7, #28]
 80066f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	69b9      	ldr	r1, [r7, #24]
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e5      	bne.n	80066d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e012      	b.n	8006740 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3758      	adds	r7, #88	@ 0x58
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	4613      	mov	r3, r2
 8006756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006758:	e04f      	b.n	80067fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006760:	d04b      	beq.n	80067fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006762:	f7fa fccf 	bl	8001104 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	429a      	cmp	r2, r3
 8006770:	d302      	bcc.n	8006778 <UART_WaitOnFlagUntilTimeout+0x30>
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e04e      	b.n	800681a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d037      	beq.n	80067fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b80      	cmp	r3, #128	@ 0x80
 800678e:	d034      	beq.n	80067fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b40      	cmp	r3, #64	@ 0x40
 8006794:	d031      	beq.n	80067fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d110      	bne.n	80067c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2208      	movs	r2, #8
 80067aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f95b 	bl	8006a68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2208      	movs	r2, #8
 80067b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e029      	b.n	800681a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067d4:	d111      	bne.n	80067fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f941 	bl	8006a68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e00f      	b.n	800681a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4013      	ands	r3, r2
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	429a      	cmp	r2, r3
 8006808:	bf0c      	ite	eq
 800680a:	2301      	moveq	r3, #1
 800680c:	2300      	movne	r3, #0
 800680e:	b2db      	uxtb	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	79fb      	ldrb	r3, [r7, #7]
 8006814:	429a      	cmp	r2, r3
 8006816:	d0a0      	beq.n	800675a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006824:	b480      	push	{r7}
 8006826:	b0a3      	sub	sp, #140	@ 0x8c
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	88fa      	ldrh	r2, [r7, #6]
 800683c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	88fa      	ldrh	r2, [r7, #6]
 8006844:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006856:	d10e      	bne.n	8006876 <UART_Start_Receive_IT+0x52>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d105      	bne.n	800686c <UART_Start_Receive_IT+0x48>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006866:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800686a:	e02d      	b.n	80068c8 <UART_Start_Receive_IT+0xa4>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	22ff      	movs	r2, #255	@ 0xff
 8006870:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006874:	e028      	b.n	80068c8 <UART_Start_Receive_IT+0xa4>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10d      	bne.n	800689a <UART_Start_Receive_IT+0x76>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <UART_Start_Receive_IT+0x6c>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	22ff      	movs	r2, #255	@ 0xff
 800688a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800688e:	e01b      	b.n	80068c8 <UART_Start_Receive_IT+0xa4>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	227f      	movs	r2, #127	@ 0x7f
 8006894:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006898:	e016      	b.n	80068c8 <UART_Start_Receive_IT+0xa4>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a2:	d10d      	bne.n	80068c0 <UART_Start_Receive_IT+0x9c>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <UART_Start_Receive_IT+0x92>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	227f      	movs	r2, #127	@ 0x7f
 80068b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068b4:	e008      	b.n	80068c8 <UART_Start_Receive_IT+0xa4>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	223f      	movs	r2, #63	@ 0x3f
 80068ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068be:	e003      	b.n	80068c8 <UART_Start_Receive_IT+0xa4>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2222      	movs	r2, #34	@ 0x22
 80068d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80068e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80068fc:	673a      	str	r2, [r7, #112]	@ 0x70
 80068fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006902:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800690a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e3      	bne.n	80068d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006918:	d14f      	bne.n	80069ba <UART_Start_Receive_IT+0x196>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	429a      	cmp	r2, r3
 8006924:	d349      	bcc.n	80069ba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692e:	d107      	bne.n	8006940 <UART_Start_Receive_IT+0x11c>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4a47      	ldr	r2, [pc, #284]	@ (8006a58 <UART_Start_Receive_IT+0x234>)
 800693c:	675a      	str	r2, [r3, #116]	@ 0x74
 800693e:	e002      	b.n	8006946 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a46      	ldr	r2, [pc, #280]	@ (8006a5c <UART_Start_Receive_IT+0x238>)
 8006944:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01a      	beq.n	8006984 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800695c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800695e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006972:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006976:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800697e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e4      	bne.n	800694e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3308      	adds	r3, #8
 800698a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800699a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3308      	adds	r3, #8
 80069a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80069a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80069a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80069b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e5      	bne.n	8006984 <UART_Start_Receive_IT+0x160>
 80069b8:	e046      	b.n	8006a48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c2:	d107      	bne.n	80069d4 <UART_Start_Receive_IT+0x1b0>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a24      	ldr	r2, [pc, #144]	@ (8006a60 <UART_Start_Receive_IT+0x23c>)
 80069d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80069d2:	e002      	b.n	80069da <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4a23      	ldr	r2, [pc, #140]	@ (8006a64 <UART_Start_Receive_IT+0x240>)
 80069d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d019      	beq.n	8006a16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80069f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a02:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e6      	bne.n	80069e2 <UART_Start_Receive_IT+0x1be>
 8006a14:	e018      	b.n	8006a48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	e853 3f00 	ldrex	r3, [r3]
 8006a22:	613b      	str	r3, [r7, #16]
   return(result);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f043 0320 	orr.w	r3, r3, #32
 8006a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	69f9      	ldr	r1, [r7, #28]
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	e841 2300 	strex	r3, r2, [r1]
 8006a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e6      	bne.n	8006a16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	378c      	adds	r7, #140	@ 0x8c
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	08007285 	.word	0x08007285
 8006a5c:	08006f21 	.word	0x08006f21
 8006a60:	08006d69 	.word	0x08006d69
 8006a64:	08006bb1 	.word	0x08006bb1

08006a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b095      	sub	sp, #84	@ 0x54
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e6      	bne.n	8006a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8006b30 <UART_EndRxTransfer+0xc8>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d118      	bne.n	8006b10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f023 0310 	bic.w	r3, r3, #16
 8006af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6979      	ldr	r1, [r7, #20]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e6      	bne.n	8006ade <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b24:	bf00      	nop
 8006b26:	3754      	adds	r7, #84	@ 0x54
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	effffffe 	.word	0xeffffffe

08006b34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7fe ff32 	bl	80059b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b74:	61fb      	str	r3, [r7, #28]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6979      	ldr	r1, [r7, #20]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e6      	bne.n	8006b60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fe fefd 	bl	80059a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba6:	bf00      	nop
 8006ba8:	3720      	adds	r7, #32
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b09c      	sub	sp, #112	@ 0x70
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006bbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bc8:	2b22      	cmp	r3, #34	@ 0x22
 8006bca:	f040 80be 	bne.w	8006d4a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006bdc:	b2d9      	uxtb	r1, r3
 8006bde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be8:	400a      	ands	r2, r1
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f040 80a1 	bne.w	8006d5a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e6      	bne.n	8006c18 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e5      	bne.n	8006c4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a33      	ldr	r2, [pc, #204]	@ (8006d64 <UART_RxISR_8BIT+0x1b4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d01f      	beq.n	8006cdc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d018      	beq.n	8006cdc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e6      	bne.n	8006caa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d12e      	bne.n	8006d42 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0310 	bic.w	r3, r3, #16
 8006cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	69b9      	ldr	r1, [r7, #24]
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	617b      	str	r3, [r7, #20]
   return(result);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f003 0310 	and.w	r3, r3, #16
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d103      	bne.n	8006d32 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fe fe44 	bl	80059c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d40:	e00b      	b.n	8006d5a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7f9 fdda 	bl	80008fc <HAL_UART_RxCpltCallback>
}
 8006d48:	e007      	b.n	8006d5a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0208 	orr.w	r2, r2, #8
 8006d58:	619a      	str	r2, [r3, #24]
}
 8006d5a:	bf00      	nop
 8006d5c:	3770      	adds	r7, #112	@ 0x70
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	58000c00 	.word	0x58000c00

08006d68 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b09c      	sub	sp, #112	@ 0x70
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d76:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d80:	2b22      	cmp	r3, #34	@ 0x22
 8006d82:	f040 80be 	bne.w	8006f02 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d94:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d96:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006d9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d9e:	4013      	ands	r3, r2
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006da4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006daa:	1c9a      	adds	r2, r3, #2
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 80a1 	bne.w	8006f12 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dee:	657b      	str	r3, [r7, #84]	@ 0x54
 8006df0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006df4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e6      	bne.n	8006dd0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3308      	adds	r3, #8
 8006e08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	f023 0301 	bic.w	r3, r3, #1
 8006e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e22:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e5      	bne.n	8006e02 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a33      	ldr	r2, [pc, #204]	@ (8006f1c <UART_RxISR_16BIT+0x1b4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d01f      	beq.n	8006e94 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d018      	beq.n	8006e94 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e82:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e6      	bne.n	8006e62 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d12e      	bne.n	8006efa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f023 0310 	bic.w	r3, r3, #16
 8006eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6979      	ldr	r1, [r7, #20]
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e6      	bne.n	8006ea2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f003 0310 	and.w	r3, r3, #16
 8006ede:	2b10      	cmp	r3, #16
 8006ee0:	d103      	bne.n	8006eea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fe fd68 	bl	80059c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ef8:	e00b      	b.n	8006f12 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7f9 fcfe 	bl	80008fc <HAL_UART_RxCpltCallback>
}
 8006f00:	e007      	b.n	8006f12 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0208 	orr.w	r2, r2, #8
 8006f10:	619a      	str	r2, [r3, #24]
}
 8006f12:	bf00      	nop
 8006f14:	3770      	adds	r7, #112	@ 0x70
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	58000c00 	.word	0x58000c00

08006f20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b0ac      	sub	sp, #176	@ 0xb0
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f56:	2b22      	cmp	r3, #34	@ 0x22
 8006f58:	f040 8181 	bne.w	800725e <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f62:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f66:	e124      	b.n	80071b2 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f72:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006f76:	b2d9      	uxtb	r1, r3
 8006f78:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f82:	400a      	ands	r2, r1
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d053      	beq.n	8007062 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d011      	beq.n	8006fea <UART_RxISR_8BIT_FIFOEN+0xca>
 8006fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe0:	f043 0201 	orr.w	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d011      	beq.n	800701a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00b      	beq.n	800701a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2202      	movs	r2, #2
 8007008:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007010:	f043 0204 	orr.w	r2, r3, #4
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800701a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d011      	beq.n	800704a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2204      	movs	r2, #4
 8007038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007040:	f043 0202 	orr.w	r2, r3, #2
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007050:	2b00      	cmp	r3, #0
 8007052:	d006      	beq.n	8007062 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fe fcad 	bl	80059b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 80a1 	bne.w	80071b2 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800707e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007092:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007094:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007098:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80070a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e4      	bne.n	8007070 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80070b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007278 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3308      	adds	r3, #8
 80070c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070ca:	66ba      	str	r2, [r7, #104]	@ 0x68
 80070cc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80070d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80070d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e3      	bne.n	80070a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a61      	ldr	r2, [pc, #388]	@ (800727c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d021      	beq.n	8007140 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01a      	beq.n	8007140 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800711a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800711e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800712c:	657b      	str	r3, [r7, #84]	@ 0x54
 800712e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007132:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800713a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e4      	bne.n	800710a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007144:	2b01      	cmp	r3, #1
 8007146:	d130      	bne.n	80071aa <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	f023 0310 	bic.w	r3, r3, #16
 8007162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007170:	643b      	str	r3, [r7, #64]	@ 0x40
 8007172:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800717e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e4      	bne.n	800714e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f003 0310 	and.w	r3, r3, #16
 800718e:	2b10      	cmp	r3, #16
 8007190:	d103      	bne.n	800719a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2210      	movs	r2, #16
 8007198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fe fc10 	bl	80059c8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80071a8:	e00e      	b.n	80071c8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7f9 fba6 	bl	80008fc <HAL_UART_RxCpltCallback>
        break;
 80071b0:	e00a      	b.n	80071c8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071b2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d006      	beq.n	80071c8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 80071ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f47f aed0 	bne.w	8006f68 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071ce:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d049      	beq.n	800726e <UART_RxISR_8BIT_FIFOEN+0x34e>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80071e0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d242      	bcs.n	800726e <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3308      	adds	r3, #8
 80071ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800720c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800720e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e3      	bne.n	80071e8 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a17      	ldr	r2, [pc, #92]	@ (8007280 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007224:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60bb      	str	r3, [r7, #8]
   return(result);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f043 0320 	orr.w	r3, r3, #32
 800723a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6979      	ldr	r1, [r7, #20]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	613b      	str	r3, [r7, #16]
   return(result);
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e4      	bne.n	8007226 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800725c:	e007      	b.n	800726e <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699a      	ldr	r2, [r3, #24]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 0208 	orr.w	r2, r2, #8
 800726c:	619a      	str	r2, [r3, #24]
}
 800726e:	bf00      	nop
 8007270:	37b0      	adds	r7, #176	@ 0xb0
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	effffffe 	.word	0xeffffffe
 800727c:	58000c00 	.word	0x58000c00
 8007280:	08006bb1 	.word	0x08006bb1

08007284 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b0ae      	sub	sp, #184	@ 0xb8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007292:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072ba:	2b22      	cmp	r3, #34	@ 0x22
 80072bc:	f040 8185 	bne.w	80075ca <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072ca:	e128      	b.n	800751e <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80072de:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80072e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80072e6:	4013      	ands	r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f4:	1c9a      	adds	r2, r3, #2
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	2b00      	cmp	r3, #0
 8007320:	d053      	beq.n	80073ca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d011      	beq.n	8007352 <UART_RxISR_16BIT_FIFOEN+0xce>
 800732e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00b      	beq.n	8007352 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2201      	movs	r2, #1
 8007340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007348:	f043 0201 	orr.w	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007352:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d011      	beq.n	8007382 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800735e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2202      	movs	r2, #2
 8007370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007378:	f043 0204 	orr.w	r2, r3, #4
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007382:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d011      	beq.n	80073b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800738e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2204      	movs	r2, #4
 80073a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a8:	f043 0202 	orr.w	r2, r3, #2
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d006      	beq.n	80073ca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7fe faf9 	bl	80059b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f040 80a3 	bne.w	800751e <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007402:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800740c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e2      	bne.n	80073d8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3308      	adds	r3, #8
 8007418:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007422:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007424:	4b6f      	ldr	r3, [pc, #444]	@ (80075e4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007426:	4013      	ands	r3, r2
 8007428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3308      	adds	r3, #8
 8007432:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007436:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007438:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800743c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e3      	bne.n	8007412 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a61      	ldr	r2, [pc, #388]	@ (80075e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d021      	beq.n	80074ac <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d01a      	beq.n	80074ac <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007486:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800748a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007498:	65bb      	str	r3, [r7, #88]	@ 0x58
 800749a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800749e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e4      	bne.n	8007476 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d130      	bne.n	8007516 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ca:	f023 0310 	bic.w	r3, r3, #16
 80074ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80074dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80074de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e4      	bne.n	80074ba <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d103      	bne.n	8007506 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2210      	movs	r2, #16
 8007504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fe fa5a 	bl	80059c8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007514:	e00e      	b.n	8007534 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7f9 f9f0 	bl	80008fc <HAL_UART_RxCpltCallback>
        break;
 800751c:	e00a      	b.n	8007534 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800751e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007522:	2b00      	cmp	r3, #0
 8007524:	d006      	beq.n	8007534 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8007526:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b00      	cmp	r3, #0
 8007530:	f47f aecc 	bne.w	80072cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800753a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800753e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007542:	2b00      	cmp	r3, #0
 8007544:	d049      	beq.n	80075da <UART_RxISR_16BIT_FIFOEN+0x356>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800754c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007550:	429a      	cmp	r2, r3
 8007552:	d242      	bcs.n	80075da <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3308      	adds	r3, #8
 800755a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	623b      	str	r3, [r7, #32]
   return(result);
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800756a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007578:	633a      	str	r2, [r7, #48]	@ 0x30
 800757a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800757e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e3      	bne.n	8007554 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a17      	ldr	r2, [pc, #92]	@ (80075ec <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007590:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f043 0320 	orr.w	r3, r3, #32
 80075a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	69b9      	ldr	r1, [r7, #24]
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	617b      	str	r3, [r7, #20]
   return(result);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e4      	bne.n	8007592 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075c8:	e007      	b.n	80075da <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699a      	ldr	r2, [r3, #24]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f042 0208 	orr.w	r2, r2, #8
 80075d8:	619a      	str	r2, [r3, #24]
}
 80075da:	bf00      	nop
 80075dc:	37b8      	adds	r7, #184	@ 0xb8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	effffffe 	.word	0xeffffffe
 80075e8:	58000c00 	.word	0x58000c00
 80075ec:	08006d69 	.word	0x08006d69

080075f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800763a:	2b01      	cmp	r3, #1
 800763c:	d101      	bne.n	8007642 <HAL_UARTEx_DisableFifoMode+0x16>
 800763e:	2302      	movs	r3, #2
 8007640:	e027      	b.n	8007692 <HAL_UARTEx_DisableFifoMode+0x66>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2224      	movs	r2, #36	@ 0x24
 800764e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0201 	bic.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007670:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e02d      	b.n	8007712 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2224      	movs	r2, #36	@ 0x24
 80076c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0201 	bic.w	r2, r2, #1
 80076dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f850 	bl	8007798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800772e:	2302      	movs	r3, #2
 8007730:	e02d      	b.n	800778e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2224      	movs	r2, #36	@ 0x24
 800773e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f812 	bl	8007798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d108      	bne.n	80077ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077b8:	e031      	b.n	800781e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077ba:	2310      	movs	r3, #16
 80077bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077be:	2310      	movs	r3, #16
 80077c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	0e5b      	lsrs	r3, r3, #25
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	0f5b      	lsrs	r3, r3, #29
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	7b3a      	ldrb	r2, [r7, #12]
 80077e6:	4911      	ldr	r1, [pc, #68]	@ (800782c <UARTEx_SetNbDataToProcess+0x94>)
 80077e8:	5c8a      	ldrb	r2, [r1, r2]
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077ee:	7b3a      	ldrb	r2, [r7, #12]
 80077f0:	490f      	ldr	r1, [pc, #60]	@ (8007830 <UARTEx_SetNbDataToProcess+0x98>)
 80077f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	7b7a      	ldrb	r2, [r7, #13]
 8007804:	4909      	ldr	r1, [pc, #36]	@ (800782c <UARTEx_SetNbDataToProcess+0x94>)
 8007806:	5c8a      	ldrb	r2, [r1, r2]
 8007808:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800780c:	7b7a      	ldrb	r2, [r7, #13]
 800780e:	4908      	ldr	r1, [pc, #32]	@ (8007830 <UARTEx_SetNbDataToProcess+0x98>)
 8007810:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007812:	fb93 f3f2 	sdiv	r3, r3, r2
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	08008bd0 	.word	0x08008bd0
 8007830:	08008bd8 	.word	0x08008bd8

08007834 <std>:
 8007834:	2300      	movs	r3, #0
 8007836:	b510      	push	{r4, lr}
 8007838:	4604      	mov	r4, r0
 800783a:	e9c0 3300 	strd	r3, r3, [r0]
 800783e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007842:	6083      	str	r3, [r0, #8]
 8007844:	8181      	strh	r1, [r0, #12]
 8007846:	6643      	str	r3, [r0, #100]	@ 0x64
 8007848:	81c2      	strh	r2, [r0, #14]
 800784a:	6183      	str	r3, [r0, #24]
 800784c:	4619      	mov	r1, r3
 800784e:	2208      	movs	r2, #8
 8007850:	305c      	adds	r0, #92	@ 0x5c
 8007852:	f000 fa1b 	bl	8007c8c <memset>
 8007856:	4b0d      	ldr	r3, [pc, #52]	@ (800788c <std+0x58>)
 8007858:	6263      	str	r3, [r4, #36]	@ 0x24
 800785a:	4b0d      	ldr	r3, [pc, #52]	@ (8007890 <std+0x5c>)
 800785c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800785e:	4b0d      	ldr	r3, [pc, #52]	@ (8007894 <std+0x60>)
 8007860:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007862:	4b0d      	ldr	r3, [pc, #52]	@ (8007898 <std+0x64>)
 8007864:	6323      	str	r3, [r4, #48]	@ 0x30
 8007866:	4b0d      	ldr	r3, [pc, #52]	@ (800789c <std+0x68>)
 8007868:	6224      	str	r4, [r4, #32]
 800786a:	429c      	cmp	r4, r3
 800786c:	d006      	beq.n	800787c <std+0x48>
 800786e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007872:	4294      	cmp	r4, r2
 8007874:	d002      	beq.n	800787c <std+0x48>
 8007876:	33d0      	adds	r3, #208	@ 0xd0
 8007878:	429c      	cmp	r4, r3
 800787a:	d105      	bne.n	8007888 <std+0x54>
 800787c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007884:	f000 ba7a 	b.w	8007d7c <__retarget_lock_init_recursive>
 8007888:	bd10      	pop	{r4, pc}
 800788a:	bf00      	nop
 800788c:	08007add 	.word	0x08007add
 8007890:	08007aff 	.word	0x08007aff
 8007894:	08007b37 	.word	0x08007b37
 8007898:	08007b5b 	.word	0x08007b5b
 800789c:	240001b0 	.word	0x240001b0

080078a0 <stdio_exit_handler>:
 80078a0:	4a02      	ldr	r2, [pc, #8]	@ (80078ac <stdio_exit_handler+0xc>)
 80078a2:	4903      	ldr	r1, [pc, #12]	@ (80078b0 <stdio_exit_handler+0x10>)
 80078a4:	4803      	ldr	r0, [pc, #12]	@ (80078b4 <stdio_exit_handler+0x14>)
 80078a6:	f000 b869 	b.w	800797c <_fwalk_sglue>
 80078aa:	bf00      	nop
 80078ac:	24000010 	.word	0x24000010
 80078b0:	080088c9 	.word	0x080088c9
 80078b4:	24000020 	.word	0x24000020

080078b8 <cleanup_stdio>:
 80078b8:	6841      	ldr	r1, [r0, #4]
 80078ba:	4b0c      	ldr	r3, [pc, #48]	@ (80078ec <cleanup_stdio+0x34>)
 80078bc:	4299      	cmp	r1, r3
 80078be:	b510      	push	{r4, lr}
 80078c0:	4604      	mov	r4, r0
 80078c2:	d001      	beq.n	80078c8 <cleanup_stdio+0x10>
 80078c4:	f001 f800 	bl	80088c8 <_fflush_r>
 80078c8:	68a1      	ldr	r1, [r4, #8]
 80078ca:	4b09      	ldr	r3, [pc, #36]	@ (80078f0 <cleanup_stdio+0x38>)
 80078cc:	4299      	cmp	r1, r3
 80078ce:	d002      	beq.n	80078d6 <cleanup_stdio+0x1e>
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 fff9 	bl	80088c8 <_fflush_r>
 80078d6:	68e1      	ldr	r1, [r4, #12]
 80078d8:	4b06      	ldr	r3, [pc, #24]	@ (80078f4 <cleanup_stdio+0x3c>)
 80078da:	4299      	cmp	r1, r3
 80078dc:	d004      	beq.n	80078e8 <cleanup_stdio+0x30>
 80078de:	4620      	mov	r0, r4
 80078e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e4:	f000 bff0 	b.w	80088c8 <_fflush_r>
 80078e8:	bd10      	pop	{r4, pc}
 80078ea:	bf00      	nop
 80078ec:	240001b0 	.word	0x240001b0
 80078f0:	24000218 	.word	0x24000218
 80078f4:	24000280 	.word	0x24000280

080078f8 <global_stdio_init.part.0>:
 80078f8:	b510      	push	{r4, lr}
 80078fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007928 <global_stdio_init.part.0+0x30>)
 80078fc:	4c0b      	ldr	r4, [pc, #44]	@ (800792c <global_stdio_init.part.0+0x34>)
 80078fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007930 <global_stdio_init.part.0+0x38>)
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	4620      	mov	r0, r4
 8007904:	2200      	movs	r2, #0
 8007906:	2104      	movs	r1, #4
 8007908:	f7ff ff94 	bl	8007834 <std>
 800790c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007910:	2201      	movs	r2, #1
 8007912:	2109      	movs	r1, #9
 8007914:	f7ff ff8e 	bl	8007834 <std>
 8007918:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800791c:	2202      	movs	r2, #2
 800791e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007922:	2112      	movs	r1, #18
 8007924:	f7ff bf86 	b.w	8007834 <std>
 8007928:	240002e8 	.word	0x240002e8
 800792c:	240001b0 	.word	0x240001b0
 8007930:	080078a1 	.word	0x080078a1

08007934 <__sfp_lock_acquire>:
 8007934:	4801      	ldr	r0, [pc, #4]	@ (800793c <__sfp_lock_acquire+0x8>)
 8007936:	f000 ba22 	b.w	8007d7e <__retarget_lock_acquire_recursive>
 800793a:	bf00      	nop
 800793c:	240002f1 	.word	0x240002f1

08007940 <__sfp_lock_release>:
 8007940:	4801      	ldr	r0, [pc, #4]	@ (8007948 <__sfp_lock_release+0x8>)
 8007942:	f000 ba1d 	b.w	8007d80 <__retarget_lock_release_recursive>
 8007946:	bf00      	nop
 8007948:	240002f1 	.word	0x240002f1

0800794c <__sinit>:
 800794c:	b510      	push	{r4, lr}
 800794e:	4604      	mov	r4, r0
 8007950:	f7ff fff0 	bl	8007934 <__sfp_lock_acquire>
 8007954:	6a23      	ldr	r3, [r4, #32]
 8007956:	b11b      	cbz	r3, 8007960 <__sinit+0x14>
 8007958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800795c:	f7ff bff0 	b.w	8007940 <__sfp_lock_release>
 8007960:	4b04      	ldr	r3, [pc, #16]	@ (8007974 <__sinit+0x28>)
 8007962:	6223      	str	r3, [r4, #32]
 8007964:	4b04      	ldr	r3, [pc, #16]	@ (8007978 <__sinit+0x2c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1f5      	bne.n	8007958 <__sinit+0xc>
 800796c:	f7ff ffc4 	bl	80078f8 <global_stdio_init.part.0>
 8007970:	e7f2      	b.n	8007958 <__sinit+0xc>
 8007972:	bf00      	nop
 8007974:	080078b9 	.word	0x080078b9
 8007978:	240002e8 	.word	0x240002e8

0800797c <_fwalk_sglue>:
 800797c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007980:	4607      	mov	r7, r0
 8007982:	4688      	mov	r8, r1
 8007984:	4614      	mov	r4, r2
 8007986:	2600      	movs	r6, #0
 8007988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800798c:	f1b9 0901 	subs.w	r9, r9, #1
 8007990:	d505      	bpl.n	800799e <_fwalk_sglue+0x22>
 8007992:	6824      	ldr	r4, [r4, #0]
 8007994:	2c00      	cmp	r4, #0
 8007996:	d1f7      	bne.n	8007988 <_fwalk_sglue+0xc>
 8007998:	4630      	mov	r0, r6
 800799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799e:	89ab      	ldrh	r3, [r5, #12]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d907      	bls.n	80079b4 <_fwalk_sglue+0x38>
 80079a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079a8:	3301      	adds	r3, #1
 80079aa:	d003      	beq.n	80079b4 <_fwalk_sglue+0x38>
 80079ac:	4629      	mov	r1, r5
 80079ae:	4638      	mov	r0, r7
 80079b0:	47c0      	blx	r8
 80079b2:	4306      	orrs	r6, r0
 80079b4:	3568      	adds	r5, #104	@ 0x68
 80079b6:	e7e9      	b.n	800798c <_fwalk_sglue+0x10>

080079b8 <iprintf>:
 80079b8:	b40f      	push	{r0, r1, r2, r3}
 80079ba:	b507      	push	{r0, r1, r2, lr}
 80079bc:	4906      	ldr	r1, [pc, #24]	@ (80079d8 <iprintf+0x20>)
 80079be:	ab04      	add	r3, sp, #16
 80079c0:	6808      	ldr	r0, [r1, #0]
 80079c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c6:	6881      	ldr	r1, [r0, #8]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	f000 fc55 	bl	8008278 <_vfiprintf_r>
 80079ce:	b003      	add	sp, #12
 80079d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d4:	b004      	add	sp, #16
 80079d6:	4770      	bx	lr
 80079d8:	2400001c 	.word	0x2400001c

080079dc <_puts_r>:
 80079dc:	6a03      	ldr	r3, [r0, #32]
 80079de:	b570      	push	{r4, r5, r6, lr}
 80079e0:	6884      	ldr	r4, [r0, #8]
 80079e2:	4605      	mov	r5, r0
 80079e4:	460e      	mov	r6, r1
 80079e6:	b90b      	cbnz	r3, 80079ec <_puts_r+0x10>
 80079e8:	f7ff ffb0 	bl	800794c <__sinit>
 80079ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079ee:	07db      	lsls	r3, r3, #31
 80079f0:	d405      	bmi.n	80079fe <_puts_r+0x22>
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	0598      	lsls	r0, r3, #22
 80079f6:	d402      	bmi.n	80079fe <_puts_r+0x22>
 80079f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079fa:	f000 f9c0 	bl	8007d7e <__retarget_lock_acquire_recursive>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	0719      	lsls	r1, r3, #28
 8007a02:	d502      	bpl.n	8007a0a <_puts_r+0x2e>
 8007a04:	6923      	ldr	r3, [r4, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d135      	bne.n	8007a76 <_puts_r+0x9a>
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 f8e7 	bl	8007be0 <__swsetup_r>
 8007a12:	b380      	cbz	r0, 8007a76 <_puts_r+0x9a>
 8007a14:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007a18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a1a:	07da      	lsls	r2, r3, #31
 8007a1c:	d405      	bmi.n	8007a2a <_puts_r+0x4e>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	059b      	lsls	r3, r3, #22
 8007a22:	d402      	bmi.n	8007a2a <_puts_r+0x4e>
 8007a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a26:	f000 f9ab 	bl	8007d80 <__retarget_lock_release_recursive>
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	bd70      	pop	{r4, r5, r6, pc}
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da04      	bge.n	8007a3c <_puts_r+0x60>
 8007a32:	69a2      	ldr	r2, [r4, #24]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	dc17      	bgt.n	8007a68 <_puts_r+0x8c>
 8007a38:	290a      	cmp	r1, #10
 8007a3a:	d015      	beq.n	8007a68 <_puts_r+0x8c>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	6022      	str	r2, [r4, #0]
 8007a42:	7019      	strb	r1, [r3, #0]
 8007a44:	68a3      	ldr	r3, [r4, #8]
 8007a46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	60a3      	str	r3, [r4, #8]
 8007a4e:	2900      	cmp	r1, #0
 8007a50:	d1ed      	bne.n	8007a2e <_puts_r+0x52>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da11      	bge.n	8007a7a <_puts_r+0x9e>
 8007a56:	4622      	mov	r2, r4
 8007a58:	210a      	movs	r1, #10
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 f881 	bl	8007b62 <__swbuf_r>
 8007a60:	3001      	adds	r0, #1
 8007a62:	d0d7      	beq.n	8007a14 <_puts_r+0x38>
 8007a64:	250a      	movs	r5, #10
 8007a66:	e7d7      	b.n	8007a18 <_puts_r+0x3c>
 8007a68:	4622      	mov	r2, r4
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f000 f879 	bl	8007b62 <__swbuf_r>
 8007a70:	3001      	adds	r0, #1
 8007a72:	d1e7      	bne.n	8007a44 <_puts_r+0x68>
 8007a74:	e7ce      	b.n	8007a14 <_puts_r+0x38>
 8007a76:	3e01      	subs	r6, #1
 8007a78:	e7e4      	b.n	8007a44 <_puts_r+0x68>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	6022      	str	r2, [r4, #0]
 8007a80:	220a      	movs	r2, #10
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e7ee      	b.n	8007a64 <_puts_r+0x88>
	...

08007a88 <puts>:
 8007a88:	4b02      	ldr	r3, [pc, #8]	@ (8007a94 <puts+0xc>)
 8007a8a:	4601      	mov	r1, r0
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	f7ff bfa5 	b.w	80079dc <_puts_r>
 8007a92:	bf00      	nop
 8007a94:	2400001c 	.word	0x2400001c

08007a98 <siprintf>:
 8007a98:	b40e      	push	{r1, r2, r3}
 8007a9a:	b510      	push	{r4, lr}
 8007a9c:	b09d      	sub	sp, #116	@ 0x74
 8007a9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007aa0:	9002      	str	r0, [sp, #8]
 8007aa2:	9006      	str	r0, [sp, #24]
 8007aa4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007aa8:	480a      	ldr	r0, [pc, #40]	@ (8007ad4 <siprintf+0x3c>)
 8007aaa:	9107      	str	r1, [sp, #28]
 8007aac:	9104      	str	r1, [sp, #16]
 8007aae:	490a      	ldr	r1, [pc, #40]	@ (8007ad8 <siprintf+0x40>)
 8007ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab4:	9105      	str	r1, [sp, #20]
 8007ab6:	2400      	movs	r4, #0
 8007ab8:	a902      	add	r1, sp, #8
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007ac0:	f000 fab4 	bl	800802c <_svfiprintf_r>
 8007ac4:	9b02      	ldr	r3, [sp, #8]
 8007ac6:	701c      	strb	r4, [r3, #0]
 8007ac8:	b01d      	add	sp, #116	@ 0x74
 8007aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ace:	b003      	add	sp, #12
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	2400001c 	.word	0x2400001c
 8007ad8:	ffff0208 	.word	0xffff0208

08007adc <__sread>:
 8007adc:	b510      	push	{r4, lr}
 8007ade:	460c      	mov	r4, r1
 8007ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae4:	f000 f8fc 	bl	8007ce0 <_read_r>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	bfab      	itete	ge
 8007aec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007aee:	89a3      	ldrhlt	r3, [r4, #12]
 8007af0:	181b      	addge	r3, r3, r0
 8007af2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007af6:	bfac      	ite	ge
 8007af8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007afa:	81a3      	strhlt	r3, [r4, #12]
 8007afc:	bd10      	pop	{r4, pc}

08007afe <__swrite>:
 8007afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b02:	461f      	mov	r7, r3
 8007b04:	898b      	ldrh	r3, [r1, #12]
 8007b06:	05db      	lsls	r3, r3, #23
 8007b08:	4605      	mov	r5, r0
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	d505      	bpl.n	8007b1c <__swrite+0x1e>
 8007b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b14:	2302      	movs	r3, #2
 8007b16:	2200      	movs	r2, #0
 8007b18:	f000 f8d0 	bl	8007cbc <_lseek_r>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	4632      	mov	r2, r6
 8007b2a:	463b      	mov	r3, r7
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b32:	f000 b8e7 	b.w	8007d04 <_write_r>

08007b36 <__sseek>:
 8007b36:	b510      	push	{r4, lr}
 8007b38:	460c      	mov	r4, r1
 8007b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3e:	f000 f8bd 	bl	8007cbc <_lseek_r>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	bf15      	itete	ne
 8007b48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b52:	81a3      	strheq	r3, [r4, #12]
 8007b54:	bf18      	it	ne
 8007b56:	81a3      	strhne	r3, [r4, #12]
 8007b58:	bd10      	pop	{r4, pc}

08007b5a <__sclose>:
 8007b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5e:	f000 b89d 	b.w	8007c9c <_close_r>

08007b62 <__swbuf_r>:
 8007b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b64:	460e      	mov	r6, r1
 8007b66:	4614      	mov	r4, r2
 8007b68:	4605      	mov	r5, r0
 8007b6a:	b118      	cbz	r0, 8007b74 <__swbuf_r+0x12>
 8007b6c:	6a03      	ldr	r3, [r0, #32]
 8007b6e:	b90b      	cbnz	r3, 8007b74 <__swbuf_r+0x12>
 8007b70:	f7ff feec 	bl	800794c <__sinit>
 8007b74:	69a3      	ldr	r3, [r4, #24]
 8007b76:	60a3      	str	r3, [r4, #8]
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	071a      	lsls	r2, r3, #28
 8007b7c:	d501      	bpl.n	8007b82 <__swbuf_r+0x20>
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	b943      	cbnz	r3, 8007b94 <__swbuf_r+0x32>
 8007b82:	4621      	mov	r1, r4
 8007b84:	4628      	mov	r0, r5
 8007b86:	f000 f82b 	bl	8007be0 <__swsetup_r>
 8007b8a:	b118      	cbz	r0, 8007b94 <__swbuf_r+0x32>
 8007b8c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007b90:	4638      	mov	r0, r7
 8007b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	6922      	ldr	r2, [r4, #16]
 8007b98:	1a98      	subs	r0, r3, r2
 8007b9a:	6963      	ldr	r3, [r4, #20]
 8007b9c:	b2f6      	uxtb	r6, r6
 8007b9e:	4283      	cmp	r3, r0
 8007ba0:	4637      	mov	r7, r6
 8007ba2:	dc05      	bgt.n	8007bb0 <__swbuf_r+0x4e>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 fe8e 	bl	80088c8 <_fflush_r>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d1ed      	bne.n	8007b8c <__swbuf_r+0x2a>
 8007bb0:	68a3      	ldr	r3, [r4, #8]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	60a3      	str	r3, [r4, #8]
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	6022      	str	r2, [r4, #0]
 8007bbc:	701e      	strb	r6, [r3, #0]
 8007bbe:	6962      	ldr	r2, [r4, #20]
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d004      	beq.n	8007bd0 <__swbuf_r+0x6e>
 8007bc6:	89a3      	ldrh	r3, [r4, #12]
 8007bc8:	07db      	lsls	r3, r3, #31
 8007bca:	d5e1      	bpl.n	8007b90 <__swbuf_r+0x2e>
 8007bcc:	2e0a      	cmp	r6, #10
 8007bce:	d1df      	bne.n	8007b90 <__swbuf_r+0x2e>
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 fe78 	bl	80088c8 <_fflush_r>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d0d9      	beq.n	8007b90 <__swbuf_r+0x2e>
 8007bdc:	e7d6      	b.n	8007b8c <__swbuf_r+0x2a>
	...

08007be0 <__swsetup_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4b29      	ldr	r3, [pc, #164]	@ (8007c88 <__swsetup_r+0xa8>)
 8007be4:	4605      	mov	r5, r0
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	460c      	mov	r4, r1
 8007bea:	b118      	cbz	r0, 8007bf4 <__swsetup_r+0x14>
 8007bec:	6a03      	ldr	r3, [r0, #32]
 8007bee:	b90b      	cbnz	r3, 8007bf4 <__swsetup_r+0x14>
 8007bf0:	f7ff feac 	bl	800794c <__sinit>
 8007bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf8:	0719      	lsls	r1, r3, #28
 8007bfa:	d422      	bmi.n	8007c42 <__swsetup_r+0x62>
 8007bfc:	06da      	lsls	r2, r3, #27
 8007bfe:	d407      	bmi.n	8007c10 <__swsetup_r+0x30>
 8007c00:	2209      	movs	r2, #9
 8007c02:	602a      	str	r2, [r5, #0]
 8007c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c08:	81a3      	strh	r3, [r4, #12]
 8007c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c0e:	e033      	b.n	8007c78 <__swsetup_r+0x98>
 8007c10:	0758      	lsls	r0, r3, #29
 8007c12:	d512      	bpl.n	8007c3a <__swsetup_r+0x5a>
 8007c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c16:	b141      	cbz	r1, 8007c2a <__swsetup_r+0x4a>
 8007c18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c1c:	4299      	cmp	r1, r3
 8007c1e:	d002      	beq.n	8007c26 <__swsetup_r+0x46>
 8007c20:	4628      	mov	r0, r5
 8007c22:	f000 f8af 	bl	8007d84 <_free_r>
 8007c26:	2300      	movs	r3, #0
 8007c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	2300      	movs	r3, #0
 8007c34:	6063      	str	r3, [r4, #4]
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	f043 0308 	orr.w	r3, r3, #8
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	b94b      	cbnz	r3, 8007c5a <__swsetup_r+0x7a>
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c50:	d003      	beq.n	8007c5a <__swsetup_r+0x7a>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f000 fe85 	bl	8008964 <__smakebuf_r>
 8007c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c5e:	f013 0201 	ands.w	r2, r3, #1
 8007c62:	d00a      	beq.n	8007c7a <__swsetup_r+0x9a>
 8007c64:	2200      	movs	r2, #0
 8007c66:	60a2      	str	r2, [r4, #8]
 8007c68:	6962      	ldr	r2, [r4, #20]
 8007c6a:	4252      	negs	r2, r2
 8007c6c:	61a2      	str	r2, [r4, #24]
 8007c6e:	6922      	ldr	r2, [r4, #16]
 8007c70:	b942      	cbnz	r2, 8007c84 <__swsetup_r+0xa4>
 8007c72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c76:	d1c5      	bne.n	8007c04 <__swsetup_r+0x24>
 8007c78:	bd38      	pop	{r3, r4, r5, pc}
 8007c7a:	0799      	lsls	r1, r3, #30
 8007c7c:	bf58      	it	pl
 8007c7e:	6962      	ldrpl	r2, [r4, #20]
 8007c80:	60a2      	str	r2, [r4, #8]
 8007c82:	e7f4      	b.n	8007c6e <__swsetup_r+0x8e>
 8007c84:	2000      	movs	r0, #0
 8007c86:	e7f7      	b.n	8007c78 <__swsetup_r+0x98>
 8007c88:	2400001c 	.word	0x2400001c

08007c8c <memset>:
 8007c8c:	4402      	add	r2, r0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d100      	bne.n	8007c96 <memset+0xa>
 8007c94:	4770      	bx	lr
 8007c96:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9a:	e7f9      	b.n	8007c90 <memset+0x4>

08007c9c <_close_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d06      	ldr	r5, [pc, #24]	@ (8007cb8 <_close_r+0x1c>)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	602b      	str	r3, [r5, #0]
 8007ca8:	f7f9 f90f 	bl	8000eca <_close>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_close_r+0x1a>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_close_r+0x1a>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	240002ec 	.word	0x240002ec

08007cbc <_lseek_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d07      	ldr	r5, [pc, #28]	@ (8007cdc <_lseek_r+0x20>)
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	4608      	mov	r0, r1
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	602a      	str	r2, [r5, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f7f9 f924 	bl	8000f18 <_lseek>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_lseek_r+0x1e>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_lseek_r+0x1e>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	240002ec 	.word	0x240002ec

08007ce0 <_read_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d07      	ldr	r5, [pc, #28]	@ (8007d00 <_read_r+0x20>)
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	4608      	mov	r0, r1
 8007ce8:	4611      	mov	r1, r2
 8007cea:	2200      	movs	r2, #0
 8007cec:	602a      	str	r2, [r5, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f7f9 f8ce 	bl	8000e90 <_read>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d102      	bne.n	8007cfe <_read_r+0x1e>
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	b103      	cbz	r3, 8007cfe <_read_r+0x1e>
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}
 8007d00:	240002ec 	.word	0x240002ec

08007d04 <_write_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4d07      	ldr	r5, [pc, #28]	@ (8007d24 <_write_r+0x20>)
 8007d08:	4604      	mov	r4, r0
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	2200      	movs	r2, #0
 8007d10:	602a      	str	r2, [r5, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	f7f8 fdbf 	bl	8000896 <_write>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_write_r+0x1e>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_write_r+0x1e>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	240002ec 	.word	0x240002ec

08007d28 <__errno>:
 8007d28:	4b01      	ldr	r3, [pc, #4]	@ (8007d30 <__errno+0x8>)
 8007d2a:	6818      	ldr	r0, [r3, #0]
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	2400001c 	.word	0x2400001c

08007d34 <__libc_init_array>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	4d0d      	ldr	r5, [pc, #52]	@ (8007d6c <__libc_init_array+0x38>)
 8007d38:	4c0d      	ldr	r4, [pc, #52]	@ (8007d70 <__libc_init_array+0x3c>)
 8007d3a:	1b64      	subs	r4, r4, r5
 8007d3c:	10a4      	asrs	r4, r4, #2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	d109      	bne.n	8007d58 <__libc_init_array+0x24>
 8007d44:	4d0b      	ldr	r5, [pc, #44]	@ (8007d74 <__libc_init_array+0x40>)
 8007d46:	4c0c      	ldr	r4, [pc, #48]	@ (8007d78 <__libc_init_array+0x44>)
 8007d48:	f000 fed8 	bl	8008afc <_init>
 8007d4c:	1b64      	subs	r4, r4, r5
 8007d4e:	10a4      	asrs	r4, r4, #2
 8007d50:	2600      	movs	r6, #0
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	d105      	bne.n	8007d62 <__libc_init_array+0x2e>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5c:	4798      	blx	r3
 8007d5e:	3601      	adds	r6, #1
 8007d60:	e7ee      	b.n	8007d40 <__libc_init_array+0xc>
 8007d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d66:	4798      	blx	r3
 8007d68:	3601      	adds	r6, #1
 8007d6a:	e7f2      	b.n	8007d52 <__libc_init_array+0x1e>
 8007d6c:	08008c1c 	.word	0x08008c1c
 8007d70:	08008c1c 	.word	0x08008c1c
 8007d74:	08008c1c 	.word	0x08008c1c
 8007d78:	08008c20 	.word	0x08008c20

08007d7c <__retarget_lock_init_recursive>:
 8007d7c:	4770      	bx	lr

08007d7e <__retarget_lock_acquire_recursive>:
 8007d7e:	4770      	bx	lr

08007d80 <__retarget_lock_release_recursive>:
 8007d80:	4770      	bx	lr
	...

08007d84 <_free_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4605      	mov	r5, r0
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d041      	beq.n	8007e10 <_free_r+0x8c>
 8007d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d90:	1f0c      	subs	r4, r1, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfb8      	it	lt
 8007d96:	18e4      	addlt	r4, r4, r3
 8007d98:	f000 f8e0 	bl	8007f5c <__malloc_lock>
 8007d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <_free_r+0x90>)
 8007d9e:	6813      	ldr	r3, [r2, #0]
 8007da0:	b933      	cbnz	r3, 8007db0 <_free_r+0x2c>
 8007da2:	6063      	str	r3, [r4, #4]
 8007da4:	6014      	str	r4, [r2, #0]
 8007da6:	4628      	mov	r0, r5
 8007da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dac:	f000 b8dc 	b.w	8007f68 <__malloc_unlock>
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	d908      	bls.n	8007dc6 <_free_r+0x42>
 8007db4:	6820      	ldr	r0, [r4, #0]
 8007db6:	1821      	adds	r1, r4, r0
 8007db8:	428b      	cmp	r3, r1
 8007dba:	bf01      	itttt	eq
 8007dbc:	6819      	ldreq	r1, [r3, #0]
 8007dbe:	685b      	ldreq	r3, [r3, #4]
 8007dc0:	1809      	addeq	r1, r1, r0
 8007dc2:	6021      	streq	r1, [r4, #0]
 8007dc4:	e7ed      	b.n	8007da2 <_free_r+0x1e>
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	b10b      	cbz	r3, 8007dd0 <_free_r+0x4c>
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d9fa      	bls.n	8007dc6 <_free_r+0x42>
 8007dd0:	6811      	ldr	r1, [r2, #0]
 8007dd2:	1850      	adds	r0, r2, r1
 8007dd4:	42a0      	cmp	r0, r4
 8007dd6:	d10b      	bne.n	8007df0 <_free_r+0x6c>
 8007dd8:	6820      	ldr	r0, [r4, #0]
 8007dda:	4401      	add	r1, r0
 8007ddc:	1850      	adds	r0, r2, r1
 8007dde:	4283      	cmp	r3, r0
 8007de0:	6011      	str	r1, [r2, #0]
 8007de2:	d1e0      	bne.n	8007da6 <_free_r+0x22>
 8007de4:	6818      	ldr	r0, [r3, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	6053      	str	r3, [r2, #4]
 8007dea:	4408      	add	r0, r1
 8007dec:	6010      	str	r0, [r2, #0]
 8007dee:	e7da      	b.n	8007da6 <_free_r+0x22>
 8007df0:	d902      	bls.n	8007df8 <_free_r+0x74>
 8007df2:	230c      	movs	r3, #12
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	e7d6      	b.n	8007da6 <_free_r+0x22>
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	1821      	adds	r1, r4, r0
 8007dfc:	428b      	cmp	r3, r1
 8007dfe:	bf04      	itt	eq
 8007e00:	6819      	ldreq	r1, [r3, #0]
 8007e02:	685b      	ldreq	r3, [r3, #4]
 8007e04:	6063      	str	r3, [r4, #4]
 8007e06:	bf04      	itt	eq
 8007e08:	1809      	addeq	r1, r1, r0
 8007e0a:	6021      	streq	r1, [r4, #0]
 8007e0c:	6054      	str	r4, [r2, #4]
 8007e0e:	e7ca      	b.n	8007da6 <_free_r+0x22>
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
 8007e12:	bf00      	nop
 8007e14:	240002f8 	.word	0x240002f8

08007e18 <sbrk_aligned>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8007e58 <sbrk_aligned+0x40>)
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	6831      	ldr	r1, [r6, #0]
 8007e20:	4605      	mov	r5, r0
 8007e22:	b911      	cbnz	r1, 8007e2a <sbrk_aligned+0x12>
 8007e24:	f000 fe16 	bl	8008a54 <_sbrk_r>
 8007e28:	6030      	str	r0, [r6, #0]
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f000 fe11 	bl	8008a54 <_sbrk_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	d103      	bne.n	8007e3e <sbrk_aligned+0x26>
 8007e36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	bd70      	pop	{r4, r5, r6, pc}
 8007e3e:	1cc4      	adds	r4, r0, #3
 8007e40:	f024 0403 	bic.w	r4, r4, #3
 8007e44:	42a0      	cmp	r0, r4
 8007e46:	d0f8      	beq.n	8007e3a <sbrk_aligned+0x22>
 8007e48:	1a21      	subs	r1, r4, r0
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f000 fe02 	bl	8008a54 <_sbrk_r>
 8007e50:	3001      	adds	r0, #1
 8007e52:	d1f2      	bne.n	8007e3a <sbrk_aligned+0x22>
 8007e54:	e7ef      	b.n	8007e36 <sbrk_aligned+0x1e>
 8007e56:	bf00      	nop
 8007e58:	240002f4 	.word	0x240002f4

08007e5c <_malloc_r>:
 8007e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e60:	1ccd      	adds	r5, r1, #3
 8007e62:	f025 0503 	bic.w	r5, r5, #3
 8007e66:	3508      	adds	r5, #8
 8007e68:	2d0c      	cmp	r5, #12
 8007e6a:	bf38      	it	cc
 8007e6c:	250c      	movcc	r5, #12
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	4606      	mov	r6, r0
 8007e72:	db01      	blt.n	8007e78 <_malloc_r+0x1c>
 8007e74:	42a9      	cmp	r1, r5
 8007e76:	d904      	bls.n	8007e82 <_malloc_r+0x26>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	6033      	str	r3, [r6, #0]
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f58 <_malloc_r+0xfc>
 8007e86:	f000 f869 	bl	8007f5c <__malloc_lock>
 8007e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e8e:	461c      	mov	r4, r3
 8007e90:	bb44      	cbnz	r4, 8007ee4 <_malloc_r+0x88>
 8007e92:	4629      	mov	r1, r5
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7ff ffbf 	bl	8007e18 <sbrk_aligned>
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	d158      	bne.n	8007f52 <_malloc_r+0xf6>
 8007ea0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ea4:	4627      	mov	r7, r4
 8007ea6:	2f00      	cmp	r7, #0
 8007ea8:	d143      	bne.n	8007f32 <_malloc_r+0xd6>
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	d04b      	beq.n	8007f46 <_malloc_r+0xea>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	eb04 0903 	add.w	r9, r4, r3
 8007eb8:	f000 fdcc 	bl	8008a54 <_sbrk_r>
 8007ebc:	4581      	cmp	r9, r0
 8007ebe:	d142      	bne.n	8007f46 <_malloc_r+0xea>
 8007ec0:	6821      	ldr	r1, [r4, #0]
 8007ec2:	1a6d      	subs	r5, r5, r1
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff ffa6 	bl	8007e18 <sbrk_aligned>
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d03a      	beq.n	8007f46 <_malloc_r+0xea>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	442b      	add	r3, r5
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	bb62      	cbnz	r2, 8007f38 <_malloc_r+0xdc>
 8007ede:	f8c8 7000 	str.w	r7, [r8]
 8007ee2:	e00f      	b.n	8007f04 <_malloc_r+0xa8>
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	1b52      	subs	r2, r2, r5
 8007ee8:	d420      	bmi.n	8007f2c <_malloc_r+0xd0>
 8007eea:	2a0b      	cmp	r2, #11
 8007eec:	d917      	bls.n	8007f1e <_malloc_r+0xc2>
 8007eee:	1961      	adds	r1, r4, r5
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	6025      	str	r5, [r4, #0]
 8007ef4:	bf18      	it	ne
 8007ef6:	6059      	strne	r1, [r3, #4]
 8007ef8:	6863      	ldr	r3, [r4, #4]
 8007efa:	bf08      	it	eq
 8007efc:	f8c8 1000 	streq.w	r1, [r8]
 8007f00:	5162      	str	r2, [r4, r5]
 8007f02:	604b      	str	r3, [r1, #4]
 8007f04:	4630      	mov	r0, r6
 8007f06:	f000 f82f 	bl	8007f68 <__malloc_unlock>
 8007f0a:	f104 000b 	add.w	r0, r4, #11
 8007f0e:	1d23      	adds	r3, r4, #4
 8007f10:	f020 0007 	bic.w	r0, r0, #7
 8007f14:	1ac2      	subs	r2, r0, r3
 8007f16:	bf1c      	itt	ne
 8007f18:	1a1b      	subne	r3, r3, r0
 8007f1a:	50a3      	strne	r3, [r4, r2]
 8007f1c:	e7af      	b.n	8007e7e <_malloc_r+0x22>
 8007f1e:	6862      	ldr	r2, [r4, #4]
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	bf0c      	ite	eq
 8007f24:	f8c8 2000 	streq.w	r2, [r8]
 8007f28:	605a      	strne	r2, [r3, #4]
 8007f2a:	e7eb      	b.n	8007f04 <_malloc_r+0xa8>
 8007f2c:	4623      	mov	r3, r4
 8007f2e:	6864      	ldr	r4, [r4, #4]
 8007f30:	e7ae      	b.n	8007e90 <_malloc_r+0x34>
 8007f32:	463c      	mov	r4, r7
 8007f34:	687f      	ldr	r7, [r7, #4]
 8007f36:	e7b6      	b.n	8007ea6 <_malloc_r+0x4a>
 8007f38:	461a      	mov	r2, r3
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	d1fb      	bne.n	8007f38 <_malloc_r+0xdc>
 8007f40:	2300      	movs	r3, #0
 8007f42:	6053      	str	r3, [r2, #4]
 8007f44:	e7de      	b.n	8007f04 <_malloc_r+0xa8>
 8007f46:	230c      	movs	r3, #12
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f000 f80c 	bl	8007f68 <__malloc_unlock>
 8007f50:	e794      	b.n	8007e7c <_malloc_r+0x20>
 8007f52:	6005      	str	r5, [r0, #0]
 8007f54:	e7d6      	b.n	8007f04 <_malloc_r+0xa8>
 8007f56:	bf00      	nop
 8007f58:	240002f8 	.word	0x240002f8

08007f5c <__malloc_lock>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	@ (8007f64 <__malloc_lock+0x8>)
 8007f5e:	f7ff bf0e 	b.w	8007d7e <__retarget_lock_acquire_recursive>
 8007f62:	bf00      	nop
 8007f64:	240002f0 	.word	0x240002f0

08007f68 <__malloc_unlock>:
 8007f68:	4801      	ldr	r0, [pc, #4]	@ (8007f70 <__malloc_unlock+0x8>)
 8007f6a:	f7ff bf09 	b.w	8007d80 <__retarget_lock_release_recursive>
 8007f6e:	bf00      	nop
 8007f70:	240002f0 	.word	0x240002f0

08007f74 <__ssputs_r>:
 8007f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f78:	688e      	ldr	r6, [r1, #8]
 8007f7a:	461f      	mov	r7, r3
 8007f7c:	42be      	cmp	r6, r7
 8007f7e:	680b      	ldr	r3, [r1, #0]
 8007f80:	4682      	mov	sl, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	4690      	mov	r8, r2
 8007f86:	d82d      	bhi.n	8007fe4 <__ssputs_r+0x70>
 8007f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f90:	d026      	beq.n	8007fe0 <__ssputs_r+0x6c>
 8007f92:	6965      	ldr	r5, [r4, #20]
 8007f94:	6909      	ldr	r1, [r1, #16]
 8007f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f9a:	eba3 0901 	sub.w	r9, r3, r1
 8007f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fa2:	1c7b      	adds	r3, r7, #1
 8007fa4:	444b      	add	r3, r9
 8007fa6:	106d      	asrs	r5, r5, #1
 8007fa8:	429d      	cmp	r5, r3
 8007faa:	bf38      	it	cc
 8007fac:	461d      	movcc	r5, r3
 8007fae:	0553      	lsls	r3, r2, #21
 8007fb0:	d527      	bpl.n	8008002 <__ssputs_r+0x8e>
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	f7ff ff52 	bl	8007e5c <_malloc_r>
 8007fb8:	4606      	mov	r6, r0
 8007fba:	b360      	cbz	r0, 8008016 <__ssputs_r+0xa2>
 8007fbc:	6921      	ldr	r1, [r4, #16]
 8007fbe:	464a      	mov	r2, r9
 8007fc0:	f000 fd58 	bl	8008a74 <memcpy>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	6126      	str	r6, [r4, #16]
 8007fd2:	6165      	str	r5, [r4, #20]
 8007fd4:	444e      	add	r6, r9
 8007fd6:	eba5 0509 	sub.w	r5, r5, r9
 8007fda:	6026      	str	r6, [r4, #0]
 8007fdc:	60a5      	str	r5, [r4, #8]
 8007fde:	463e      	mov	r6, r7
 8007fe0:	42be      	cmp	r6, r7
 8007fe2:	d900      	bls.n	8007fe6 <__ssputs_r+0x72>
 8007fe4:	463e      	mov	r6, r7
 8007fe6:	6820      	ldr	r0, [r4, #0]
 8007fe8:	4632      	mov	r2, r6
 8007fea:	4641      	mov	r1, r8
 8007fec:	f000 fcf6 	bl	80089dc <memmove>
 8007ff0:	68a3      	ldr	r3, [r4, #8]
 8007ff2:	1b9b      	subs	r3, r3, r6
 8007ff4:	60a3      	str	r3, [r4, #8]
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	4433      	add	r3, r6
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008002:	462a      	mov	r2, r5
 8008004:	f000 fd44 	bl	8008a90 <_realloc_r>
 8008008:	4606      	mov	r6, r0
 800800a:	2800      	cmp	r0, #0
 800800c:	d1e0      	bne.n	8007fd0 <__ssputs_r+0x5c>
 800800e:	6921      	ldr	r1, [r4, #16]
 8008010:	4650      	mov	r0, sl
 8008012:	f7ff feb7 	bl	8007d84 <_free_r>
 8008016:	230c      	movs	r3, #12
 8008018:	f8ca 3000 	str.w	r3, [sl]
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008028:	e7e9      	b.n	8007ffe <__ssputs_r+0x8a>
	...

0800802c <_svfiprintf_r>:
 800802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008030:	4698      	mov	r8, r3
 8008032:	898b      	ldrh	r3, [r1, #12]
 8008034:	061b      	lsls	r3, r3, #24
 8008036:	b09d      	sub	sp, #116	@ 0x74
 8008038:	4607      	mov	r7, r0
 800803a:	460d      	mov	r5, r1
 800803c:	4614      	mov	r4, r2
 800803e:	d510      	bpl.n	8008062 <_svfiprintf_r+0x36>
 8008040:	690b      	ldr	r3, [r1, #16]
 8008042:	b973      	cbnz	r3, 8008062 <_svfiprintf_r+0x36>
 8008044:	2140      	movs	r1, #64	@ 0x40
 8008046:	f7ff ff09 	bl	8007e5c <_malloc_r>
 800804a:	6028      	str	r0, [r5, #0]
 800804c:	6128      	str	r0, [r5, #16]
 800804e:	b930      	cbnz	r0, 800805e <_svfiprintf_r+0x32>
 8008050:	230c      	movs	r3, #12
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008058:	b01d      	add	sp, #116	@ 0x74
 800805a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805e:	2340      	movs	r3, #64	@ 0x40
 8008060:	616b      	str	r3, [r5, #20]
 8008062:	2300      	movs	r3, #0
 8008064:	9309      	str	r3, [sp, #36]	@ 0x24
 8008066:	2320      	movs	r3, #32
 8008068:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800806c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008070:	2330      	movs	r3, #48	@ 0x30
 8008072:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008210 <_svfiprintf_r+0x1e4>
 8008076:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800807a:	f04f 0901 	mov.w	r9, #1
 800807e:	4623      	mov	r3, r4
 8008080:	469a      	mov	sl, r3
 8008082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008086:	b10a      	cbz	r2, 800808c <_svfiprintf_r+0x60>
 8008088:	2a25      	cmp	r2, #37	@ 0x25
 800808a:	d1f9      	bne.n	8008080 <_svfiprintf_r+0x54>
 800808c:	ebba 0b04 	subs.w	fp, sl, r4
 8008090:	d00b      	beq.n	80080aa <_svfiprintf_r+0x7e>
 8008092:	465b      	mov	r3, fp
 8008094:	4622      	mov	r2, r4
 8008096:	4629      	mov	r1, r5
 8008098:	4638      	mov	r0, r7
 800809a:	f7ff ff6b 	bl	8007f74 <__ssputs_r>
 800809e:	3001      	adds	r0, #1
 80080a0:	f000 80a7 	beq.w	80081f2 <_svfiprintf_r+0x1c6>
 80080a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080a6:	445a      	add	r2, fp
 80080a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80080aa:	f89a 3000 	ldrb.w	r3, [sl]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 809f 	beq.w	80081f2 <_svfiprintf_r+0x1c6>
 80080b4:	2300      	movs	r3, #0
 80080b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080be:	f10a 0a01 	add.w	sl, sl, #1
 80080c2:	9304      	str	r3, [sp, #16]
 80080c4:	9307      	str	r3, [sp, #28]
 80080c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80080cc:	4654      	mov	r4, sl
 80080ce:	2205      	movs	r2, #5
 80080d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d4:	484e      	ldr	r0, [pc, #312]	@ (8008210 <_svfiprintf_r+0x1e4>)
 80080d6:	f7f8 f90b 	bl	80002f0 <memchr>
 80080da:	9a04      	ldr	r2, [sp, #16]
 80080dc:	b9d8      	cbnz	r0, 8008116 <_svfiprintf_r+0xea>
 80080de:	06d0      	lsls	r0, r2, #27
 80080e0:	bf44      	itt	mi
 80080e2:	2320      	movmi	r3, #32
 80080e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080e8:	0711      	lsls	r1, r2, #28
 80080ea:	bf44      	itt	mi
 80080ec:	232b      	movmi	r3, #43	@ 0x2b
 80080ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080f2:	f89a 3000 	ldrb.w	r3, [sl]
 80080f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f8:	d015      	beq.n	8008126 <_svfiprintf_r+0xfa>
 80080fa:	9a07      	ldr	r2, [sp, #28]
 80080fc:	4654      	mov	r4, sl
 80080fe:	2000      	movs	r0, #0
 8008100:	f04f 0c0a 	mov.w	ip, #10
 8008104:	4621      	mov	r1, r4
 8008106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800810a:	3b30      	subs	r3, #48	@ 0x30
 800810c:	2b09      	cmp	r3, #9
 800810e:	d94b      	bls.n	80081a8 <_svfiprintf_r+0x17c>
 8008110:	b1b0      	cbz	r0, 8008140 <_svfiprintf_r+0x114>
 8008112:	9207      	str	r2, [sp, #28]
 8008114:	e014      	b.n	8008140 <_svfiprintf_r+0x114>
 8008116:	eba0 0308 	sub.w	r3, r0, r8
 800811a:	fa09 f303 	lsl.w	r3, r9, r3
 800811e:	4313      	orrs	r3, r2
 8008120:	9304      	str	r3, [sp, #16]
 8008122:	46a2      	mov	sl, r4
 8008124:	e7d2      	b.n	80080cc <_svfiprintf_r+0xa0>
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	1d19      	adds	r1, r3, #4
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	9103      	str	r1, [sp, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	bfbb      	ittet	lt
 8008132:	425b      	neglt	r3, r3
 8008134:	f042 0202 	orrlt.w	r2, r2, #2
 8008138:	9307      	strge	r3, [sp, #28]
 800813a:	9307      	strlt	r3, [sp, #28]
 800813c:	bfb8      	it	lt
 800813e:	9204      	strlt	r2, [sp, #16]
 8008140:	7823      	ldrb	r3, [r4, #0]
 8008142:	2b2e      	cmp	r3, #46	@ 0x2e
 8008144:	d10a      	bne.n	800815c <_svfiprintf_r+0x130>
 8008146:	7863      	ldrb	r3, [r4, #1]
 8008148:	2b2a      	cmp	r3, #42	@ 0x2a
 800814a:	d132      	bne.n	80081b2 <_svfiprintf_r+0x186>
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	1d1a      	adds	r2, r3, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	9203      	str	r2, [sp, #12]
 8008154:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008158:	3402      	adds	r4, #2
 800815a:	9305      	str	r3, [sp, #20]
 800815c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008220 <_svfiprintf_r+0x1f4>
 8008160:	7821      	ldrb	r1, [r4, #0]
 8008162:	2203      	movs	r2, #3
 8008164:	4650      	mov	r0, sl
 8008166:	f7f8 f8c3 	bl	80002f0 <memchr>
 800816a:	b138      	cbz	r0, 800817c <_svfiprintf_r+0x150>
 800816c:	9b04      	ldr	r3, [sp, #16]
 800816e:	eba0 000a 	sub.w	r0, r0, sl
 8008172:	2240      	movs	r2, #64	@ 0x40
 8008174:	4082      	lsls	r2, r0
 8008176:	4313      	orrs	r3, r2
 8008178:	3401      	adds	r4, #1
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008180:	4824      	ldr	r0, [pc, #144]	@ (8008214 <_svfiprintf_r+0x1e8>)
 8008182:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008186:	2206      	movs	r2, #6
 8008188:	f7f8 f8b2 	bl	80002f0 <memchr>
 800818c:	2800      	cmp	r0, #0
 800818e:	d036      	beq.n	80081fe <_svfiprintf_r+0x1d2>
 8008190:	4b21      	ldr	r3, [pc, #132]	@ (8008218 <_svfiprintf_r+0x1ec>)
 8008192:	bb1b      	cbnz	r3, 80081dc <_svfiprintf_r+0x1b0>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	3307      	adds	r3, #7
 8008198:	f023 0307 	bic.w	r3, r3, #7
 800819c:	3308      	adds	r3, #8
 800819e:	9303      	str	r3, [sp, #12]
 80081a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a2:	4433      	add	r3, r6
 80081a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a6:	e76a      	b.n	800807e <_svfiprintf_r+0x52>
 80081a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ac:	460c      	mov	r4, r1
 80081ae:	2001      	movs	r0, #1
 80081b0:	e7a8      	b.n	8008104 <_svfiprintf_r+0xd8>
 80081b2:	2300      	movs	r3, #0
 80081b4:	3401      	adds	r4, #1
 80081b6:	9305      	str	r3, [sp, #20]
 80081b8:	4619      	mov	r1, r3
 80081ba:	f04f 0c0a 	mov.w	ip, #10
 80081be:	4620      	mov	r0, r4
 80081c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c4:	3a30      	subs	r2, #48	@ 0x30
 80081c6:	2a09      	cmp	r2, #9
 80081c8:	d903      	bls.n	80081d2 <_svfiprintf_r+0x1a6>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0c6      	beq.n	800815c <_svfiprintf_r+0x130>
 80081ce:	9105      	str	r1, [sp, #20]
 80081d0:	e7c4      	b.n	800815c <_svfiprintf_r+0x130>
 80081d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d6:	4604      	mov	r4, r0
 80081d8:	2301      	movs	r3, #1
 80081da:	e7f0      	b.n	80081be <_svfiprintf_r+0x192>
 80081dc:	ab03      	add	r3, sp, #12
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	462a      	mov	r2, r5
 80081e2:	4b0e      	ldr	r3, [pc, #56]	@ (800821c <_svfiprintf_r+0x1f0>)
 80081e4:	a904      	add	r1, sp, #16
 80081e6:	4638      	mov	r0, r7
 80081e8:	f3af 8000 	nop.w
 80081ec:	1c42      	adds	r2, r0, #1
 80081ee:	4606      	mov	r6, r0
 80081f0:	d1d6      	bne.n	80081a0 <_svfiprintf_r+0x174>
 80081f2:	89ab      	ldrh	r3, [r5, #12]
 80081f4:	065b      	lsls	r3, r3, #25
 80081f6:	f53f af2d 	bmi.w	8008054 <_svfiprintf_r+0x28>
 80081fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081fc:	e72c      	b.n	8008058 <_svfiprintf_r+0x2c>
 80081fe:	ab03      	add	r3, sp, #12
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	462a      	mov	r2, r5
 8008204:	4b05      	ldr	r3, [pc, #20]	@ (800821c <_svfiprintf_r+0x1f0>)
 8008206:	a904      	add	r1, sp, #16
 8008208:	4638      	mov	r0, r7
 800820a:	f000 f9bb 	bl	8008584 <_printf_i>
 800820e:	e7ed      	b.n	80081ec <_svfiprintf_r+0x1c0>
 8008210:	08008be0 	.word	0x08008be0
 8008214:	08008bea 	.word	0x08008bea
 8008218:	00000000 	.word	0x00000000
 800821c:	08007f75 	.word	0x08007f75
 8008220:	08008be6 	.word	0x08008be6

08008224 <__sfputc_r>:
 8008224:	6893      	ldr	r3, [r2, #8]
 8008226:	3b01      	subs	r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	b410      	push	{r4}
 800822c:	6093      	str	r3, [r2, #8]
 800822e:	da08      	bge.n	8008242 <__sfputc_r+0x1e>
 8008230:	6994      	ldr	r4, [r2, #24]
 8008232:	42a3      	cmp	r3, r4
 8008234:	db01      	blt.n	800823a <__sfputc_r+0x16>
 8008236:	290a      	cmp	r1, #10
 8008238:	d103      	bne.n	8008242 <__sfputc_r+0x1e>
 800823a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800823e:	f7ff bc90 	b.w	8007b62 <__swbuf_r>
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	1c58      	adds	r0, r3, #1
 8008246:	6010      	str	r0, [r2, #0]
 8008248:	7019      	strb	r1, [r3, #0]
 800824a:	4608      	mov	r0, r1
 800824c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008250:	4770      	bx	lr

08008252 <__sfputs_r>:
 8008252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008254:	4606      	mov	r6, r0
 8008256:	460f      	mov	r7, r1
 8008258:	4614      	mov	r4, r2
 800825a:	18d5      	adds	r5, r2, r3
 800825c:	42ac      	cmp	r4, r5
 800825e:	d101      	bne.n	8008264 <__sfputs_r+0x12>
 8008260:	2000      	movs	r0, #0
 8008262:	e007      	b.n	8008274 <__sfputs_r+0x22>
 8008264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008268:	463a      	mov	r2, r7
 800826a:	4630      	mov	r0, r6
 800826c:	f7ff ffda 	bl	8008224 <__sfputc_r>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d1f3      	bne.n	800825c <__sfputs_r+0xa>
 8008274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008278 <_vfiprintf_r>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	460d      	mov	r5, r1
 800827e:	b09d      	sub	sp, #116	@ 0x74
 8008280:	4614      	mov	r4, r2
 8008282:	4698      	mov	r8, r3
 8008284:	4606      	mov	r6, r0
 8008286:	b118      	cbz	r0, 8008290 <_vfiprintf_r+0x18>
 8008288:	6a03      	ldr	r3, [r0, #32]
 800828a:	b90b      	cbnz	r3, 8008290 <_vfiprintf_r+0x18>
 800828c:	f7ff fb5e 	bl	800794c <__sinit>
 8008290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008292:	07d9      	lsls	r1, r3, #31
 8008294:	d405      	bmi.n	80082a2 <_vfiprintf_r+0x2a>
 8008296:	89ab      	ldrh	r3, [r5, #12]
 8008298:	059a      	lsls	r2, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_vfiprintf_r+0x2a>
 800829c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800829e:	f7ff fd6e 	bl	8007d7e <__retarget_lock_acquire_recursive>
 80082a2:	89ab      	ldrh	r3, [r5, #12]
 80082a4:	071b      	lsls	r3, r3, #28
 80082a6:	d501      	bpl.n	80082ac <_vfiprintf_r+0x34>
 80082a8:	692b      	ldr	r3, [r5, #16]
 80082aa:	b99b      	cbnz	r3, 80082d4 <_vfiprintf_r+0x5c>
 80082ac:	4629      	mov	r1, r5
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff fc96 	bl	8007be0 <__swsetup_r>
 80082b4:	b170      	cbz	r0, 80082d4 <_vfiprintf_r+0x5c>
 80082b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082b8:	07dc      	lsls	r4, r3, #31
 80082ba:	d504      	bpl.n	80082c6 <_vfiprintf_r+0x4e>
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082c0:	b01d      	add	sp, #116	@ 0x74
 80082c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c6:	89ab      	ldrh	r3, [r5, #12]
 80082c8:	0598      	lsls	r0, r3, #22
 80082ca:	d4f7      	bmi.n	80082bc <_vfiprintf_r+0x44>
 80082cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ce:	f7ff fd57 	bl	8007d80 <__retarget_lock_release_recursive>
 80082d2:	e7f3      	b.n	80082bc <_vfiprintf_r+0x44>
 80082d4:	2300      	movs	r3, #0
 80082d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d8:	2320      	movs	r3, #32
 80082da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082de:	f8cd 800c 	str.w	r8, [sp, #12]
 80082e2:	2330      	movs	r3, #48	@ 0x30
 80082e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008494 <_vfiprintf_r+0x21c>
 80082e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082ec:	f04f 0901 	mov.w	r9, #1
 80082f0:	4623      	mov	r3, r4
 80082f2:	469a      	mov	sl, r3
 80082f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f8:	b10a      	cbz	r2, 80082fe <_vfiprintf_r+0x86>
 80082fa:	2a25      	cmp	r2, #37	@ 0x25
 80082fc:	d1f9      	bne.n	80082f2 <_vfiprintf_r+0x7a>
 80082fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008302:	d00b      	beq.n	800831c <_vfiprintf_r+0xa4>
 8008304:	465b      	mov	r3, fp
 8008306:	4622      	mov	r2, r4
 8008308:	4629      	mov	r1, r5
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff ffa1 	bl	8008252 <__sfputs_r>
 8008310:	3001      	adds	r0, #1
 8008312:	f000 80a7 	beq.w	8008464 <_vfiprintf_r+0x1ec>
 8008316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008318:	445a      	add	r2, fp
 800831a:	9209      	str	r2, [sp, #36]	@ 0x24
 800831c:	f89a 3000 	ldrb.w	r3, [sl]
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 809f 	beq.w	8008464 <_vfiprintf_r+0x1ec>
 8008326:	2300      	movs	r3, #0
 8008328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800832c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008330:	f10a 0a01 	add.w	sl, sl, #1
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	9307      	str	r3, [sp, #28]
 8008338:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800833c:	931a      	str	r3, [sp, #104]	@ 0x68
 800833e:	4654      	mov	r4, sl
 8008340:	2205      	movs	r2, #5
 8008342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008346:	4853      	ldr	r0, [pc, #332]	@ (8008494 <_vfiprintf_r+0x21c>)
 8008348:	f7f7 ffd2 	bl	80002f0 <memchr>
 800834c:	9a04      	ldr	r2, [sp, #16]
 800834e:	b9d8      	cbnz	r0, 8008388 <_vfiprintf_r+0x110>
 8008350:	06d1      	lsls	r1, r2, #27
 8008352:	bf44      	itt	mi
 8008354:	2320      	movmi	r3, #32
 8008356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800835a:	0713      	lsls	r3, r2, #28
 800835c:	bf44      	itt	mi
 800835e:	232b      	movmi	r3, #43	@ 0x2b
 8008360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008364:	f89a 3000 	ldrb.w	r3, [sl]
 8008368:	2b2a      	cmp	r3, #42	@ 0x2a
 800836a:	d015      	beq.n	8008398 <_vfiprintf_r+0x120>
 800836c:	9a07      	ldr	r2, [sp, #28]
 800836e:	4654      	mov	r4, sl
 8008370:	2000      	movs	r0, #0
 8008372:	f04f 0c0a 	mov.w	ip, #10
 8008376:	4621      	mov	r1, r4
 8008378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800837c:	3b30      	subs	r3, #48	@ 0x30
 800837e:	2b09      	cmp	r3, #9
 8008380:	d94b      	bls.n	800841a <_vfiprintf_r+0x1a2>
 8008382:	b1b0      	cbz	r0, 80083b2 <_vfiprintf_r+0x13a>
 8008384:	9207      	str	r2, [sp, #28]
 8008386:	e014      	b.n	80083b2 <_vfiprintf_r+0x13a>
 8008388:	eba0 0308 	sub.w	r3, r0, r8
 800838c:	fa09 f303 	lsl.w	r3, r9, r3
 8008390:	4313      	orrs	r3, r2
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	46a2      	mov	sl, r4
 8008396:	e7d2      	b.n	800833e <_vfiprintf_r+0xc6>
 8008398:	9b03      	ldr	r3, [sp, #12]
 800839a:	1d19      	adds	r1, r3, #4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	9103      	str	r1, [sp, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bfbb      	ittet	lt
 80083a4:	425b      	neglt	r3, r3
 80083a6:	f042 0202 	orrlt.w	r2, r2, #2
 80083aa:	9307      	strge	r3, [sp, #28]
 80083ac:	9307      	strlt	r3, [sp, #28]
 80083ae:	bfb8      	it	lt
 80083b0:	9204      	strlt	r2, [sp, #16]
 80083b2:	7823      	ldrb	r3, [r4, #0]
 80083b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80083b6:	d10a      	bne.n	80083ce <_vfiprintf_r+0x156>
 80083b8:	7863      	ldrb	r3, [r4, #1]
 80083ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80083bc:	d132      	bne.n	8008424 <_vfiprintf_r+0x1ac>
 80083be:	9b03      	ldr	r3, [sp, #12]
 80083c0:	1d1a      	adds	r2, r3, #4
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	9203      	str	r2, [sp, #12]
 80083c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083ca:	3402      	adds	r4, #2
 80083cc:	9305      	str	r3, [sp, #20]
 80083ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084a4 <_vfiprintf_r+0x22c>
 80083d2:	7821      	ldrb	r1, [r4, #0]
 80083d4:	2203      	movs	r2, #3
 80083d6:	4650      	mov	r0, sl
 80083d8:	f7f7 ff8a 	bl	80002f0 <memchr>
 80083dc:	b138      	cbz	r0, 80083ee <_vfiprintf_r+0x176>
 80083de:	9b04      	ldr	r3, [sp, #16]
 80083e0:	eba0 000a 	sub.w	r0, r0, sl
 80083e4:	2240      	movs	r2, #64	@ 0x40
 80083e6:	4082      	lsls	r2, r0
 80083e8:	4313      	orrs	r3, r2
 80083ea:	3401      	adds	r4, #1
 80083ec:	9304      	str	r3, [sp, #16]
 80083ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f2:	4829      	ldr	r0, [pc, #164]	@ (8008498 <_vfiprintf_r+0x220>)
 80083f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083f8:	2206      	movs	r2, #6
 80083fa:	f7f7 ff79 	bl	80002f0 <memchr>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d03f      	beq.n	8008482 <_vfiprintf_r+0x20a>
 8008402:	4b26      	ldr	r3, [pc, #152]	@ (800849c <_vfiprintf_r+0x224>)
 8008404:	bb1b      	cbnz	r3, 800844e <_vfiprintf_r+0x1d6>
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	3307      	adds	r3, #7
 800840a:	f023 0307 	bic.w	r3, r3, #7
 800840e:	3308      	adds	r3, #8
 8008410:	9303      	str	r3, [sp, #12]
 8008412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008414:	443b      	add	r3, r7
 8008416:	9309      	str	r3, [sp, #36]	@ 0x24
 8008418:	e76a      	b.n	80082f0 <_vfiprintf_r+0x78>
 800841a:	fb0c 3202 	mla	r2, ip, r2, r3
 800841e:	460c      	mov	r4, r1
 8008420:	2001      	movs	r0, #1
 8008422:	e7a8      	b.n	8008376 <_vfiprintf_r+0xfe>
 8008424:	2300      	movs	r3, #0
 8008426:	3401      	adds	r4, #1
 8008428:	9305      	str	r3, [sp, #20]
 800842a:	4619      	mov	r1, r3
 800842c:	f04f 0c0a 	mov.w	ip, #10
 8008430:	4620      	mov	r0, r4
 8008432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008436:	3a30      	subs	r2, #48	@ 0x30
 8008438:	2a09      	cmp	r2, #9
 800843a:	d903      	bls.n	8008444 <_vfiprintf_r+0x1cc>
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0c6      	beq.n	80083ce <_vfiprintf_r+0x156>
 8008440:	9105      	str	r1, [sp, #20]
 8008442:	e7c4      	b.n	80083ce <_vfiprintf_r+0x156>
 8008444:	fb0c 2101 	mla	r1, ip, r1, r2
 8008448:	4604      	mov	r4, r0
 800844a:	2301      	movs	r3, #1
 800844c:	e7f0      	b.n	8008430 <_vfiprintf_r+0x1b8>
 800844e:	ab03      	add	r3, sp, #12
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	462a      	mov	r2, r5
 8008454:	4b12      	ldr	r3, [pc, #72]	@ (80084a0 <_vfiprintf_r+0x228>)
 8008456:	a904      	add	r1, sp, #16
 8008458:	4630      	mov	r0, r6
 800845a:	f3af 8000 	nop.w
 800845e:	4607      	mov	r7, r0
 8008460:	1c78      	adds	r0, r7, #1
 8008462:	d1d6      	bne.n	8008412 <_vfiprintf_r+0x19a>
 8008464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008466:	07d9      	lsls	r1, r3, #31
 8008468:	d405      	bmi.n	8008476 <_vfiprintf_r+0x1fe>
 800846a:	89ab      	ldrh	r3, [r5, #12]
 800846c:	059a      	lsls	r2, r3, #22
 800846e:	d402      	bmi.n	8008476 <_vfiprintf_r+0x1fe>
 8008470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008472:	f7ff fc85 	bl	8007d80 <__retarget_lock_release_recursive>
 8008476:	89ab      	ldrh	r3, [r5, #12]
 8008478:	065b      	lsls	r3, r3, #25
 800847a:	f53f af1f 	bmi.w	80082bc <_vfiprintf_r+0x44>
 800847e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008480:	e71e      	b.n	80082c0 <_vfiprintf_r+0x48>
 8008482:	ab03      	add	r3, sp, #12
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	462a      	mov	r2, r5
 8008488:	4b05      	ldr	r3, [pc, #20]	@ (80084a0 <_vfiprintf_r+0x228>)
 800848a:	a904      	add	r1, sp, #16
 800848c:	4630      	mov	r0, r6
 800848e:	f000 f879 	bl	8008584 <_printf_i>
 8008492:	e7e4      	b.n	800845e <_vfiprintf_r+0x1e6>
 8008494:	08008be0 	.word	0x08008be0
 8008498:	08008bea 	.word	0x08008bea
 800849c:	00000000 	.word	0x00000000
 80084a0:	08008253 	.word	0x08008253
 80084a4:	08008be6 	.word	0x08008be6

080084a8 <_printf_common>:
 80084a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ac:	4616      	mov	r6, r2
 80084ae:	4698      	mov	r8, r3
 80084b0:	688a      	ldr	r2, [r1, #8]
 80084b2:	690b      	ldr	r3, [r1, #16]
 80084b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084b8:	4293      	cmp	r3, r2
 80084ba:	bfb8      	it	lt
 80084bc:	4613      	movlt	r3, r2
 80084be:	6033      	str	r3, [r6, #0]
 80084c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084c4:	4607      	mov	r7, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	b10a      	cbz	r2, 80084ce <_printf_common+0x26>
 80084ca:	3301      	adds	r3, #1
 80084cc:	6033      	str	r3, [r6, #0]
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	0699      	lsls	r1, r3, #26
 80084d2:	bf42      	ittt	mi
 80084d4:	6833      	ldrmi	r3, [r6, #0]
 80084d6:	3302      	addmi	r3, #2
 80084d8:	6033      	strmi	r3, [r6, #0]
 80084da:	6825      	ldr	r5, [r4, #0]
 80084dc:	f015 0506 	ands.w	r5, r5, #6
 80084e0:	d106      	bne.n	80084f0 <_printf_common+0x48>
 80084e2:	f104 0a19 	add.w	sl, r4, #25
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	6832      	ldr	r2, [r6, #0]
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	42ab      	cmp	r3, r5
 80084ee:	dc26      	bgt.n	800853e <_printf_common+0x96>
 80084f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	3b00      	subs	r3, #0
 80084f8:	bf18      	it	ne
 80084fa:	2301      	movne	r3, #1
 80084fc:	0692      	lsls	r2, r2, #26
 80084fe:	d42b      	bmi.n	8008558 <_printf_common+0xb0>
 8008500:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008504:	4641      	mov	r1, r8
 8008506:	4638      	mov	r0, r7
 8008508:	47c8      	blx	r9
 800850a:	3001      	adds	r0, #1
 800850c:	d01e      	beq.n	800854c <_printf_common+0xa4>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	6922      	ldr	r2, [r4, #16]
 8008512:	f003 0306 	and.w	r3, r3, #6
 8008516:	2b04      	cmp	r3, #4
 8008518:	bf02      	ittt	eq
 800851a:	68e5      	ldreq	r5, [r4, #12]
 800851c:	6833      	ldreq	r3, [r6, #0]
 800851e:	1aed      	subeq	r5, r5, r3
 8008520:	68a3      	ldr	r3, [r4, #8]
 8008522:	bf0c      	ite	eq
 8008524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008528:	2500      	movne	r5, #0
 800852a:	4293      	cmp	r3, r2
 800852c:	bfc4      	itt	gt
 800852e:	1a9b      	subgt	r3, r3, r2
 8008530:	18ed      	addgt	r5, r5, r3
 8008532:	2600      	movs	r6, #0
 8008534:	341a      	adds	r4, #26
 8008536:	42b5      	cmp	r5, r6
 8008538:	d11a      	bne.n	8008570 <_printf_common+0xc8>
 800853a:	2000      	movs	r0, #0
 800853c:	e008      	b.n	8008550 <_printf_common+0xa8>
 800853e:	2301      	movs	r3, #1
 8008540:	4652      	mov	r2, sl
 8008542:	4641      	mov	r1, r8
 8008544:	4638      	mov	r0, r7
 8008546:	47c8      	blx	r9
 8008548:	3001      	adds	r0, #1
 800854a:	d103      	bne.n	8008554 <_printf_common+0xac>
 800854c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008554:	3501      	adds	r5, #1
 8008556:	e7c6      	b.n	80084e6 <_printf_common+0x3e>
 8008558:	18e1      	adds	r1, r4, r3
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	2030      	movs	r0, #48	@ 0x30
 800855e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008562:	4422      	add	r2, r4
 8008564:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008568:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800856c:	3302      	adds	r3, #2
 800856e:	e7c7      	b.n	8008500 <_printf_common+0x58>
 8008570:	2301      	movs	r3, #1
 8008572:	4622      	mov	r2, r4
 8008574:	4641      	mov	r1, r8
 8008576:	4638      	mov	r0, r7
 8008578:	47c8      	blx	r9
 800857a:	3001      	adds	r0, #1
 800857c:	d0e6      	beq.n	800854c <_printf_common+0xa4>
 800857e:	3601      	adds	r6, #1
 8008580:	e7d9      	b.n	8008536 <_printf_common+0x8e>
	...

08008584 <_printf_i>:
 8008584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008588:	7e0f      	ldrb	r7, [r1, #24]
 800858a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800858c:	2f78      	cmp	r7, #120	@ 0x78
 800858e:	4691      	mov	r9, r2
 8008590:	4680      	mov	r8, r0
 8008592:	460c      	mov	r4, r1
 8008594:	469a      	mov	sl, r3
 8008596:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800859a:	d807      	bhi.n	80085ac <_printf_i+0x28>
 800859c:	2f62      	cmp	r7, #98	@ 0x62
 800859e:	d80a      	bhi.n	80085b6 <_printf_i+0x32>
 80085a0:	2f00      	cmp	r7, #0
 80085a2:	f000 80d1 	beq.w	8008748 <_printf_i+0x1c4>
 80085a6:	2f58      	cmp	r7, #88	@ 0x58
 80085a8:	f000 80b8 	beq.w	800871c <_printf_i+0x198>
 80085ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085b4:	e03a      	b.n	800862c <_printf_i+0xa8>
 80085b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085ba:	2b15      	cmp	r3, #21
 80085bc:	d8f6      	bhi.n	80085ac <_printf_i+0x28>
 80085be:	a101      	add	r1, pc, #4	@ (adr r1, 80085c4 <_printf_i+0x40>)
 80085c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085c4:	0800861d 	.word	0x0800861d
 80085c8:	08008631 	.word	0x08008631
 80085cc:	080085ad 	.word	0x080085ad
 80085d0:	080085ad 	.word	0x080085ad
 80085d4:	080085ad 	.word	0x080085ad
 80085d8:	080085ad 	.word	0x080085ad
 80085dc:	08008631 	.word	0x08008631
 80085e0:	080085ad 	.word	0x080085ad
 80085e4:	080085ad 	.word	0x080085ad
 80085e8:	080085ad 	.word	0x080085ad
 80085ec:	080085ad 	.word	0x080085ad
 80085f0:	0800872f 	.word	0x0800872f
 80085f4:	0800865b 	.word	0x0800865b
 80085f8:	080086e9 	.word	0x080086e9
 80085fc:	080085ad 	.word	0x080085ad
 8008600:	080085ad 	.word	0x080085ad
 8008604:	08008751 	.word	0x08008751
 8008608:	080085ad 	.word	0x080085ad
 800860c:	0800865b 	.word	0x0800865b
 8008610:	080085ad 	.word	0x080085ad
 8008614:	080085ad 	.word	0x080085ad
 8008618:	080086f1 	.word	0x080086f1
 800861c:	6833      	ldr	r3, [r6, #0]
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6032      	str	r2, [r6, #0]
 8008624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008628:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800862c:	2301      	movs	r3, #1
 800862e:	e09c      	b.n	800876a <_printf_i+0x1e6>
 8008630:	6833      	ldr	r3, [r6, #0]
 8008632:	6820      	ldr	r0, [r4, #0]
 8008634:	1d19      	adds	r1, r3, #4
 8008636:	6031      	str	r1, [r6, #0]
 8008638:	0606      	lsls	r6, r0, #24
 800863a:	d501      	bpl.n	8008640 <_printf_i+0xbc>
 800863c:	681d      	ldr	r5, [r3, #0]
 800863e:	e003      	b.n	8008648 <_printf_i+0xc4>
 8008640:	0645      	lsls	r5, r0, #25
 8008642:	d5fb      	bpl.n	800863c <_printf_i+0xb8>
 8008644:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008648:	2d00      	cmp	r5, #0
 800864a:	da03      	bge.n	8008654 <_printf_i+0xd0>
 800864c:	232d      	movs	r3, #45	@ 0x2d
 800864e:	426d      	negs	r5, r5
 8008650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008654:	4858      	ldr	r0, [pc, #352]	@ (80087b8 <_printf_i+0x234>)
 8008656:	230a      	movs	r3, #10
 8008658:	e011      	b.n	800867e <_printf_i+0xfa>
 800865a:	6821      	ldr	r1, [r4, #0]
 800865c:	6833      	ldr	r3, [r6, #0]
 800865e:	0608      	lsls	r0, r1, #24
 8008660:	f853 5b04 	ldr.w	r5, [r3], #4
 8008664:	d402      	bmi.n	800866c <_printf_i+0xe8>
 8008666:	0649      	lsls	r1, r1, #25
 8008668:	bf48      	it	mi
 800866a:	b2ad      	uxthmi	r5, r5
 800866c:	2f6f      	cmp	r7, #111	@ 0x6f
 800866e:	4852      	ldr	r0, [pc, #328]	@ (80087b8 <_printf_i+0x234>)
 8008670:	6033      	str	r3, [r6, #0]
 8008672:	bf14      	ite	ne
 8008674:	230a      	movne	r3, #10
 8008676:	2308      	moveq	r3, #8
 8008678:	2100      	movs	r1, #0
 800867a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800867e:	6866      	ldr	r6, [r4, #4]
 8008680:	60a6      	str	r6, [r4, #8]
 8008682:	2e00      	cmp	r6, #0
 8008684:	db05      	blt.n	8008692 <_printf_i+0x10e>
 8008686:	6821      	ldr	r1, [r4, #0]
 8008688:	432e      	orrs	r6, r5
 800868a:	f021 0104 	bic.w	r1, r1, #4
 800868e:	6021      	str	r1, [r4, #0]
 8008690:	d04b      	beq.n	800872a <_printf_i+0x1a6>
 8008692:	4616      	mov	r6, r2
 8008694:	fbb5 f1f3 	udiv	r1, r5, r3
 8008698:	fb03 5711 	mls	r7, r3, r1, r5
 800869c:	5dc7      	ldrb	r7, [r0, r7]
 800869e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086a2:	462f      	mov	r7, r5
 80086a4:	42bb      	cmp	r3, r7
 80086a6:	460d      	mov	r5, r1
 80086a8:	d9f4      	bls.n	8008694 <_printf_i+0x110>
 80086aa:	2b08      	cmp	r3, #8
 80086ac:	d10b      	bne.n	80086c6 <_printf_i+0x142>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	07df      	lsls	r7, r3, #31
 80086b2:	d508      	bpl.n	80086c6 <_printf_i+0x142>
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	6861      	ldr	r1, [r4, #4]
 80086b8:	4299      	cmp	r1, r3
 80086ba:	bfde      	ittt	le
 80086bc:	2330      	movle	r3, #48	@ 0x30
 80086be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086c2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80086c6:	1b92      	subs	r2, r2, r6
 80086c8:	6122      	str	r2, [r4, #16]
 80086ca:	f8cd a000 	str.w	sl, [sp]
 80086ce:	464b      	mov	r3, r9
 80086d0:	aa03      	add	r2, sp, #12
 80086d2:	4621      	mov	r1, r4
 80086d4:	4640      	mov	r0, r8
 80086d6:	f7ff fee7 	bl	80084a8 <_printf_common>
 80086da:	3001      	adds	r0, #1
 80086dc:	d14a      	bne.n	8008774 <_printf_i+0x1f0>
 80086de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086e2:	b004      	add	sp, #16
 80086e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	f043 0320 	orr.w	r3, r3, #32
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	4832      	ldr	r0, [pc, #200]	@ (80087bc <_printf_i+0x238>)
 80086f2:	2778      	movs	r7, #120	@ 0x78
 80086f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	6831      	ldr	r1, [r6, #0]
 80086fc:	061f      	lsls	r7, r3, #24
 80086fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8008702:	d402      	bmi.n	800870a <_printf_i+0x186>
 8008704:	065f      	lsls	r7, r3, #25
 8008706:	bf48      	it	mi
 8008708:	b2ad      	uxthmi	r5, r5
 800870a:	6031      	str	r1, [r6, #0]
 800870c:	07d9      	lsls	r1, r3, #31
 800870e:	bf44      	itt	mi
 8008710:	f043 0320 	orrmi.w	r3, r3, #32
 8008714:	6023      	strmi	r3, [r4, #0]
 8008716:	b11d      	cbz	r5, 8008720 <_printf_i+0x19c>
 8008718:	2310      	movs	r3, #16
 800871a:	e7ad      	b.n	8008678 <_printf_i+0xf4>
 800871c:	4826      	ldr	r0, [pc, #152]	@ (80087b8 <_printf_i+0x234>)
 800871e:	e7e9      	b.n	80086f4 <_printf_i+0x170>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	f023 0320 	bic.w	r3, r3, #32
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	e7f6      	b.n	8008718 <_printf_i+0x194>
 800872a:	4616      	mov	r6, r2
 800872c:	e7bd      	b.n	80086aa <_printf_i+0x126>
 800872e:	6833      	ldr	r3, [r6, #0]
 8008730:	6825      	ldr	r5, [r4, #0]
 8008732:	6961      	ldr	r1, [r4, #20]
 8008734:	1d18      	adds	r0, r3, #4
 8008736:	6030      	str	r0, [r6, #0]
 8008738:	062e      	lsls	r6, r5, #24
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	d501      	bpl.n	8008742 <_printf_i+0x1be>
 800873e:	6019      	str	r1, [r3, #0]
 8008740:	e002      	b.n	8008748 <_printf_i+0x1c4>
 8008742:	0668      	lsls	r0, r5, #25
 8008744:	d5fb      	bpl.n	800873e <_printf_i+0x1ba>
 8008746:	8019      	strh	r1, [r3, #0]
 8008748:	2300      	movs	r3, #0
 800874a:	6123      	str	r3, [r4, #16]
 800874c:	4616      	mov	r6, r2
 800874e:	e7bc      	b.n	80086ca <_printf_i+0x146>
 8008750:	6833      	ldr	r3, [r6, #0]
 8008752:	1d1a      	adds	r2, r3, #4
 8008754:	6032      	str	r2, [r6, #0]
 8008756:	681e      	ldr	r6, [r3, #0]
 8008758:	6862      	ldr	r2, [r4, #4]
 800875a:	2100      	movs	r1, #0
 800875c:	4630      	mov	r0, r6
 800875e:	f7f7 fdc7 	bl	80002f0 <memchr>
 8008762:	b108      	cbz	r0, 8008768 <_printf_i+0x1e4>
 8008764:	1b80      	subs	r0, r0, r6
 8008766:	6060      	str	r0, [r4, #4]
 8008768:	6863      	ldr	r3, [r4, #4]
 800876a:	6123      	str	r3, [r4, #16]
 800876c:	2300      	movs	r3, #0
 800876e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008772:	e7aa      	b.n	80086ca <_printf_i+0x146>
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	4632      	mov	r2, r6
 8008778:	4649      	mov	r1, r9
 800877a:	4640      	mov	r0, r8
 800877c:	47d0      	blx	sl
 800877e:	3001      	adds	r0, #1
 8008780:	d0ad      	beq.n	80086de <_printf_i+0x15a>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	079b      	lsls	r3, r3, #30
 8008786:	d413      	bmi.n	80087b0 <_printf_i+0x22c>
 8008788:	68e0      	ldr	r0, [r4, #12]
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	4298      	cmp	r0, r3
 800878e:	bfb8      	it	lt
 8008790:	4618      	movlt	r0, r3
 8008792:	e7a6      	b.n	80086e2 <_printf_i+0x15e>
 8008794:	2301      	movs	r3, #1
 8008796:	4632      	mov	r2, r6
 8008798:	4649      	mov	r1, r9
 800879a:	4640      	mov	r0, r8
 800879c:	47d0      	blx	sl
 800879e:	3001      	adds	r0, #1
 80087a0:	d09d      	beq.n	80086de <_printf_i+0x15a>
 80087a2:	3501      	adds	r5, #1
 80087a4:	68e3      	ldr	r3, [r4, #12]
 80087a6:	9903      	ldr	r1, [sp, #12]
 80087a8:	1a5b      	subs	r3, r3, r1
 80087aa:	42ab      	cmp	r3, r5
 80087ac:	dcf2      	bgt.n	8008794 <_printf_i+0x210>
 80087ae:	e7eb      	b.n	8008788 <_printf_i+0x204>
 80087b0:	2500      	movs	r5, #0
 80087b2:	f104 0619 	add.w	r6, r4, #25
 80087b6:	e7f5      	b.n	80087a4 <_printf_i+0x220>
 80087b8:	08008bf1 	.word	0x08008bf1
 80087bc:	08008c02 	.word	0x08008c02

080087c0 <__sflush_r>:
 80087c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c8:	0716      	lsls	r6, r2, #28
 80087ca:	4605      	mov	r5, r0
 80087cc:	460c      	mov	r4, r1
 80087ce:	d454      	bmi.n	800887a <__sflush_r+0xba>
 80087d0:	684b      	ldr	r3, [r1, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	dc02      	bgt.n	80087dc <__sflush_r+0x1c>
 80087d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dd48      	ble.n	800886e <__sflush_r+0xae>
 80087dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087de:	2e00      	cmp	r6, #0
 80087e0:	d045      	beq.n	800886e <__sflush_r+0xae>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087e8:	682f      	ldr	r7, [r5, #0]
 80087ea:	6a21      	ldr	r1, [r4, #32]
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	d030      	beq.n	8008852 <__sflush_r+0x92>
 80087f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	0759      	lsls	r1, r3, #29
 80087f6:	d505      	bpl.n	8008804 <__sflush_r+0x44>
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087fe:	b10b      	cbz	r3, 8008804 <__sflush_r+0x44>
 8008800:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008802:	1ad2      	subs	r2, r2, r3
 8008804:	2300      	movs	r3, #0
 8008806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008808:	6a21      	ldr	r1, [r4, #32]
 800880a:	4628      	mov	r0, r5
 800880c:	47b0      	blx	r6
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	d106      	bne.n	8008822 <__sflush_r+0x62>
 8008814:	6829      	ldr	r1, [r5, #0]
 8008816:	291d      	cmp	r1, #29
 8008818:	d82b      	bhi.n	8008872 <__sflush_r+0xb2>
 800881a:	4a2a      	ldr	r2, [pc, #168]	@ (80088c4 <__sflush_r+0x104>)
 800881c:	40ca      	lsrs	r2, r1
 800881e:	07d6      	lsls	r6, r2, #31
 8008820:	d527      	bpl.n	8008872 <__sflush_r+0xb2>
 8008822:	2200      	movs	r2, #0
 8008824:	6062      	str	r2, [r4, #4]
 8008826:	04d9      	lsls	r1, r3, #19
 8008828:	6922      	ldr	r2, [r4, #16]
 800882a:	6022      	str	r2, [r4, #0]
 800882c:	d504      	bpl.n	8008838 <__sflush_r+0x78>
 800882e:	1c42      	adds	r2, r0, #1
 8008830:	d101      	bne.n	8008836 <__sflush_r+0x76>
 8008832:	682b      	ldr	r3, [r5, #0]
 8008834:	b903      	cbnz	r3, 8008838 <__sflush_r+0x78>
 8008836:	6560      	str	r0, [r4, #84]	@ 0x54
 8008838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800883a:	602f      	str	r7, [r5, #0]
 800883c:	b1b9      	cbz	r1, 800886e <__sflush_r+0xae>
 800883e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008842:	4299      	cmp	r1, r3
 8008844:	d002      	beq.n	800884c <__sflush_r+0x8c>
 8008846:	4628      	mov	r0, r5
 8008848:	f7ff fa9c 	bl	8007d84 <_free_r>
 800884c:	2300      	movs	r3, #0
 800884e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008850:	e00d      	b.n	800886e <__sflush_r+0xae>
 8008852:	2301      	movs	r3, #1
 8008854:	4628      	mov	r0, r5
 8008856:	47b0      	blx	r6
 8008858:	4602      	mov	r2, r0
 800885a:	1c50      	adds	r0, r2, #1
 800885c:	d1c9      	bne.n	80087f2 <__sflush_r+0x32>
 800885e:	682b      	ldr	r3, [r5, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0c6      	beq.n	80087f2 <__sflush_r+0x32>
 8008864:	2b1d      	cmp	r3, #29
 8008866:	d001      	beq.n	800886c <__sflush_r+0xac>
 8008868:	2b16      	cmp	r3, #22
 800886a:	d11e      	bne.n	80088aa <__sflush_r+0xea>
 800886c:	602f      	str	r7, [r5, #0]
 800886e:	2000      	movs	r0, #0
 8008870:	e022      	b.n	80088b8 <__sflush_r+0xf8>
 8008872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008876:	b21b      	sxth	r3, r3
 8008878:	e01b      	b.n	80088b2 <__sflush_r+0xf2>
 800887a:	690f      	ldr	r7, [r1, #16]
 800887c:	2f00      	cmp	r7, #0
 800887e:	d0f6      	beq.n	800886e <__sflush_r+0xae>
 8008880:	0793      	lsls	r3, r2, #30
 8008882:	680e      	ldr	r6, [r1, #0]
 8008884:	bf08      	it	eq
 8008886:	694b      	ldreq	r3, [r1, #20]
 8008888:	600f      	str	r7, [r1, #0]
 800888a:	bf18      	it	ne
 800888c:	2300      	movne	r3, #0
 800888e:	eba6 0807 	sub.w	r8, r6, r7
 8008892:	608b      	str	r3, [r1, #8]
 8008894:	f1b8 0f00 	cmp.w	r8, #0
 8008898:	dde9      	ble.n	800886e <__sflush_r+0xae>
 800889a:	6a21      	ldr	r1, [r4, #32]
 800889c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800889e:	4643      	mov	r3, r8
 80088a0:	463a      	mov	r2, r7
 80088a2:	4628      	mov	r0, r5
 80088a4:	47b0      	blx	r6
 80088a6:	2800      	cmp	r0, #0
 80088a8:	dc08      	bgt.n	80088bc <__sflush_r+0xfc>
 80088aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088bc:	4407      	add	r7, r0
 80088be:	eba8 0800 	sub.w	r8, r8, r0
 80088c2:	e7e7      	b.n	8008894 <__sflush_r+0xd4>
 80088c4:	20400001 	.word	0x20400001

080088c8 <_fflush_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	690b      	ldr	r3, [r1, #16]
 80088cc:	4605      	mov	r5, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	b913      	cbnz	r3, 80088d8 <_fflush_r+0x10>
 80088d2:	2500      	movs	r5, #0
 80088d4:	4628      	mov	r0, r5
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	b118      	cbz	r0, 80088e2 <_fflush_r+0x1a>
 80088da:	6a03      	ldr	r3, [r0, #32]
 80088dc:	b90b      	cbnz	r3, 80088e2 <_fflush_r+0x1a>
 80088de:	f7ff f835 	bl	800794c <__sinit>
 80088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0f3      	beq.n	80088d2 <_fflush_r+0xa>
 80088ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088ec:	07d0      	lsls	r0, r2, #31
 80088ee:	d404      	bmi.n	80088fa <_fflush_r+0x32>
 80088f0:	0599      	lsls	r1, r3, #22
 80088f2:	d402      	bmi.n	80088fa <_fflush_r+0x32>
 80088f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088f6:	f7ff fa42 	bl	8007d7e <__retarget_lock_acquire_recursive>
 80088fa:	4628      	mov	r0, r5
 80088fc:	4621      	mov	r1, r4
 80088fe:	f7ff ff5f 	bl	80087c0 <__sflush_r>
 8008902:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008904:	07da      	lsls	r2, r3, #31
 8008906:	4605      	mov	r5, r0
 8008908:	d4e4      	bmi.n	80088d4 <_fflush_r+0xc>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	d4e1      	bmi.n	80088d4 <_fflush_r+0xc>
 8008910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008912:	f7ff fa35 	bl	8007d80 <__retarget_lock_release_recursive>
 8008916:	e7dd      	b.n	80088d4 <_fflush_r+0xc>

08008918 <__swhatbuf_r>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	460c      	mov	r4, r1
 800891c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008920:	2900      	cmp	r1, #0
 8008922:	b096      	sub	sp, #88	@ 0x58
 8008924:	4615      	mov	r5, r2
 8008926:	461e      	mov	r6, r3
 8008928:	da0d      	bge.n	8008946 <__swhatbuf_r+0x2e>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008930:	f04f 0100 	mov.w	r1, #0
 8008934:	bf14      	ite	ne
 8008936:	2340      	movne	r3, #64	@ 0x40
 8008938:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800893c:	2000      	movs	r0, #0
 800893e:	6031      	str	r1, [r6, #0]
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	b016      	add	sp, #88	@ 0x58
 8008944:	bd70      	pop	{r4, r5, r6, pc}
 8008946:	466a      	mov	r2, sp
 8008948:	f000 f862 	bl	8008a10 <_fstat_r>
 800894c:	2800      	cmp	r0, #0
 800894e:	dbec      	blt.n	800892a <__swhatbuf_r+0x12>
 8008950:	9901      	ldr	r1, [sp, #4]
 8008952:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008956:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800895a:	4259      	negs	r1, r3
 800895c:	4159      	adcs	r1, r3
 800895e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008962:	e7eb      	b.n	800893c <__swhatbuf_r+0x24>

08008964 <__smakebuf_r>:
 8008964:	898b      	ldrh	r3, [r1, #12]
 8008966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008968:	079d      	lsls	r5, r3, #30
 800896a:	4606      	mov	r6, r0
 800896c:	460c      	mov	r4, r1
 800896e:	d507      	bpl.n	8008980 <__smakebuf_r+0x1c>
 8008970:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	6123      	str	r3, [r4, #16]
 8008978:	2301      	movs	r3, #1
 800897a:	6163      	str	r3, [r4, #20]
 800897c:	b003      	add	sp, #12
 800897e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008980:	ab01      	add	r3, sp, #4
 8008982:	466a      	mov	r2, sp
 8008984:	f7ff ffc8 	bl	8008918 <__swhatbuf_r>
 8008988:	9f00      	ldr	r7, [sp, #0]
 800898a:	4605      	mov	r5, r0
 800898c:	4639      	mov	r1, r7
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff fa64 	bl	8007e5c <_malloc_r>
 8008994:	b948      	cbnz	r0, 80089aa <__smakebuf_r+0x46>
 8008996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800899a:	059a      	lsls	r2, r3, #22
 800899c:	d4ee      	bmi.n	800897c <__smakebuf_r+0x18>
 800899e:	f023 0303 	bic.w	r3, r3, #3
 80089a2:	f043 0302 	orr.w	r3, r3, #2
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	e7e2      	b.n	8008970 <__smakebuf_r+0xc>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	6020      	str	r0, [r4, #0]
 80089ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089ba:	b15b      	cbz	r3, 80089d4 <__smakebuf_r+0x70>
 80089bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 f837 	bl	8008a34 <_isatty_r>
 80089c6:	b128      	cbz	r0, 80089d4 <__smakebuf_r+0x70>
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	f023 0303 	bic.w	r3, r3, #3
 80089ce:	f043 0301 	orr.w	r3, r3, #1
 80089d2:	81a3      	strh	r3, [r4, #12]
 80089d4:	89a3      	ldrh	r3, [r4, #12]
 80089d6:	431d      	orrs	r5, r3
 80089d8:	81a5      	strh	r5, [r4, #12]
 80089da:	e7cf      	b.n	800897c <__smakebuf_r+0x18>

080089dc <memmove>:
 80089dc:	4288      	cmp	r0, r1
 80089de:	b510      	push	{r4, lr}
 80089e0:	eb01 0402 	add.w	r4, r1, r2
 80089e4:	d902      	bls.n	80089ec <memmove+0x10>
 80089e6:	4284      	cmp	r4, r0
 80089e8:	4623      	mov	r3, r4
 80089ea:	d807      	bhi.n	80089fc <memmove+0x20>
 80089ec:	1e43      	subs	r3, r0, #1
 80089ee:	42a1      	cmp	r1, r4
 80089f0:	d008      	beq.n	8008a04 <memmove+0x28>
 80089f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089fa:	e7f8      	b.n	80089ee <memmove+0x12>
 80089fc:	4402      	add	r2, r0
 80089fe:	4601      	mov	r1, r0
 8008a00:	428a      	cmp	r2, r1
 8008a02:	d100      	bne.n	8008a06 <memmove+0x2a>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a0e:	e7f7      	b.n	8008a00 <memmove+0x24>

08008a10 <_fstat_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d07      	ldr	r5, [pc, #28]	@ (8008a30 <_fstat_r+0x20>)
 8008a14:	2300      	movs	r3, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	602b      	str	r3, [r5, #0]
 8008a1e:	f7f8 fa60 	bl	8000ee2 <_fstat>
 8008a22:	1c43      	adds	r3, r0, #1
 8008a24:	d102      	bne.n	8008a2c <_fstat_r+0x1c>
 8008a26:	682b      	ldr	r3, [r5, #0]
 8008a28:	b103      	cbz	r3, 8008a2c <_fstat_r+0x1c>
 8008a2a:	6023      	str	r3, [r4, #0]
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
 8008a2e:	bf00      	nop
 8008a30:	240002ec 	.word	0x240002ec

08008a34 <_isatty_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d06      	ldr	r5, [pc, #24]	@ (8008a50 <_isatty_r+0x1c>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	f7f8 fa5f 	bl	8000f02 <_isatty>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_isatty_r+0x1a>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_isatty_r+0x1a>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	240002ec 	.word	0x240002ec

08008a54 <_sbrk_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d06      	ldr	r5, [pc, #24]	@ (8008a70 <_sbrk_r+0x1c>)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	f7f8 fa68 	bl	8000f34 <_sbrk>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_sbrk_r+0x1a>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_sbrk_r+0x1a>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	240002ec 	.word	0x240002ec

08008a74 <memcpy>:
 8008a74:	440a      	add	r2, r1
 8008a76:	4291      	cmp	r1, r2
 8008a78:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008a7c:	d100      	bne.n	8008a80 <memcpy+0xc>
 8008a7e:	4770      	bx	lr
 8008a80:	b510      	push	{r4, lr}
 8008a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a8a:	4291      	cmp	r1, r2
 8008a8c:	d1f9      	bne.n	8008a82 <memcpy+0xe>
 8008a8e:	bd10      	pop	{r4, pc}

08008a90 <_realloc_r>:
 8008a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a94:	4607      	mov	r7, r0
 8008a96:	4614      	mov	r4, r2
 8008a98:	460d      	mov	r5, r1
 8008a9a:	b921      	cbnz	r1, 8008aa6 <_realloc_r+0x16>
 8008a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	f7ff b9db 	b.w	8007e5c <_malloc_r>
 8008aa6:	b92a      	cbnz	r2, 8008ab4 <_realloc_r+0x24>
 8008aa8:	f7ff f96c 	bl	8007d84 <_free_r>
 8008aac:	4625      	mov	r5, r4
 8008aae:	4628      	mov	r0, r5
 8008ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab4:	f000 f81a 	bl	8008aec <_malloc_usable_size_r>
 8008ab8:	4284      	cmp	r4, r0
 8008aba:	4606      	mov	r6, r0
 8008abc:	d802      	bhi.n	8008ac4 <_realloc_r+0x34>
 8008abe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ac2:	d8f4      	bhi.n	8008aae <_realloc_r+0x1e>
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f7ff f9c8 	bl	8007e5c <_malloc_r>
 8008acc:	4680      	mov	r8, r0
 8008ace:	b908      	cbnz	r0, 8008ad4 <_realloc_r+0x44>
 8008ad0:	4645      	mov	r5, r8
 8008ad2:	e7ec      	b.n	8008aae <_realloc_r+0x1e>
 8008ad4:	42b4      	cmp	r4, r6
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	bf28      	it	cs
 8008adc:	4632      	movcs	r2, r6
 8008ade:	f7ff ffc9 	bl	8008a74 <memcpy>
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	f7ff f94d 	bl	8007d84 <_free_r>
 8008aea:	e7f1      	b.n	8008ad0 <_realloc_r+0x40>

08008aec <_malloc_usable_size_r>:
 8008aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af0:	1f18      	subs	r0, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	bfbc      	itt	lt
 8008af6:	580b      	ldrlt	r3, [r1, r0]
 8008af8:	18c0      	addlt	r0, r0, r3
 8008afa:	4770      	bx	lr

08008afc <_init>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	bf00      	nop
 8008b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b02:	bc08      	pop	{r3}
 8008b04:	469e      	mov	lr, r3
 8008b06:	4770      	bx	lr

08008b08 <_fini>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	bf00      	nop
 8008b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0e:	bc08      	pop	{r3}
 8008b10:	469e      	mov	lr, r3
 8008b12:	4770      	bx	lr
